
NUCLEO-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da60  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003cd38  0800dd40  0800dd40  0001dd40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804aa78  0804aa78  0005aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0804aa80  0804aa80  0005aa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0804aa84  0804aa84  0005aa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000c48  24000000  0804aa88  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002efc  24000c60  0804b6d0  00060c60  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00070000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00060c48  2**0
                  CONTENTS, READONLY
 10 .debug_info   000252fc  00000000  00000000  00060c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058eb  00000000  00000000  00085f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00012633  00000000  00000000  0008b85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001020  00000000  00000000  0009de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001cd8  00000000  00000000  0009eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038273  00000000  00000000  000a0b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f48f  00000000  00000000  000d8dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00156a7c  00000000  00000000  000f828a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000cb  00000000  00000000  0024ed06  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ce0  00000000  00000000  0024edd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000c60 	.word	0x24000c60
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dd18 	.word	0x0800dd18

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000c64 	.word	0x24000c64
 800030c:	0800dd18 	.word	0x0800dd18

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_frsub>:
 80003c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__addsf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_fsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080003cc <__addsf3>:
 80003cc:	0042      	lsls	r2, r0, #1
 80003ce:	bf1f      	itttt	ne
 80003d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003d4:	ea92 0f03 	teqne	r2, r3
 80003d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e0:	d06a      	beq.n	80004b8 <__addsf3+0xec>
 80003e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ea:	bfc1      	itttt	gt
 80003ec:	18d2      	addgt	r2, r2, r3
 80003ee:	4041      	eorgt	r1, r0
 80003f0:	4048      	eorgt	r0, r1
 80003f2:	4041      	eorgt	r1, r0
 80003f4:	bfb8      	it	lt
 80003f6:	425b      	neglt	r3, r3
 80003f8:	2b19      	cmp	r3, #25
 80003fa:	bf88      	it	hi
 80003fc:	4770      	bxhi	lr
 80003fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000406:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800040a:	bf18      	it	ne
 800040c:	4240      	negne	r0, r0
 800040e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000412:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000416:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800041a:	bf18      	it	ne
 800041c:	4249      	negne	r1, r1
 800041e:	ea92 0f03 	teq	r2, r3
 8000422:	d03f      	beq.n	80004a4 <__addsf3+0xd8>
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
 8000428:	fa41 fc03 	asr.w	ip, r1, r3
 800042c:	eb10 000c 	adds.w	r0, r0, ip
 8000430:	f1c3 0320 	rsb	r3, r3, #32
 8000434:	fa01 f103 	lsl.w	r1, r1, r3
 8000438:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800043c:	d502      	bpl.n	8000444 <__addsf3+0x78>
 800043e:	4249      	negs	r1, r1
 8000440:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000448:	d313      	bcc.n	8000472 <__addsf3+0xa6>
 800044a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800044e:	d306      	bcc.n	800045e <__addsf3+0x92>
 8000450:	0840      	lsrs	r0, r0, #1
 8000452:	ea4f 0131 	mov.w	r1, r1, rrx
 8000456:	f102 0201 	add.w	r2, r2, #1
 800045a:	2afe      	cmp	r2, #254	; 0xfe
 800045c:	d251      	bcs.n	8000502 <__addsf3+0x136>
 800045e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000462:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000466:	bf08      	it	eq
 8000468:	f020 0001 	biceq.w	r0, r0, #1
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	4770      	bx	lr
 8000472:	0049      	lsls	r1, r1, #1
 8000474:	eb40 0000 	adc.w	r0, r0, r0
 8000478:	3a01      	subs	r2, #1
 800047a:	bf28      	it	cs
 800047c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000480:	d2ed      	bcs.n	800045e <__addsf3+0x92>
 8000482:	fab0 fc80 	clz	ip, r0
 8000486:	f1ac 0c08 	sub.w	ip, ip, #8
 800048a:	ebb2 020c 	subs.w	r2, r2, ip
 800048e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000492:	bfaa      	itet	ge
 8000494:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000498:	4252      	neglt	r2, r2
 800049a:	4318      	orrge	r0, r3
 800049c:	bfbc      	itt	lt
 800049e:	40d0      	lsrlt	r0, r2
 80004a0:	4318      	orrlt	r0, r3
 80004a2:	4770      	bx	lr
 80004a4:	f092 0f00 	teq	r2, #0
 80004a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80004ac:	bf06      	itte	eq
 80004ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80004b2:	3201      	addeq	r2, #1
 80004b4:	3b01      	subne	r3, #1
 80004b6:	e7b5      	b.n	8000424 <__addsf3+0x58>
 80004b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004c0:	bf18      	it	ne
 80004c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004c6:	d021      	beq.n	800050c <__addsf3+0x140>
 80004c8:	ea92 0f03 	teq	r2, r3
 80004cc:	d004      	beq.n	80004d8 <__addsf3+0x10c>
 80004ce:	f092 0f00 	teq	r2, #0
 80004d2:	bf08      	it	eq
 80004d4:	4608      	moveq	r0, r1
 80004d6:	4770      	bx	lr
 80004d8:	ea90 0f01 	teq	r0, r1
 80004dc:	bf1c      	itt	ne
 80004de:	2000      	movne	r0, #0
 80004e0:	4770      	bxne	lr
 80004e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004e6:	d104      	bne.n	80004f2 <__addsf3+0x126>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	bf28      	it	cs
 80004ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004f0:	4770      	bx	lr
 80004f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004f6:	bf3c      	itt	cc
 80004f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004fc:	4770      	bxcc	lr
 80004fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000502:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	4770      	bx	lr
 800050c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000510:	bf16      	itet	ne
 8000512:	4608      	movne	r0, r1
 8000514:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000518:	4601      	movne	r1, r0
 800051a:	0242      	lsls	r2, r0, #9
 800051c:	bf06      	itte	eq
 800051e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000522:	ea90 0f01 	teqeq	r0, r1
 8000526:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800052a:	4770      	bx	lr

0800052c <__aeabi_ui2f>:
 800052c:	f04f 0300 	mov.w	r3, #0
 8000530:	e004      	b.n	800053c <__aeabi_i2f+0x8>
 8000532:	bf00      	nop

08000534 <__aeabi_i2f>:
 8000534:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	ea5f 0c00 	movs.w	ip, r0
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000548:	4601      	mov	r1, r0
 800054a:	f04f 0000 	mov.w	r0, #0
 800054e:	e01c      	b.n	800058a <__aeabi_l2f+0x2a>

08000550 <__aeabi_ul2f>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	f04f 0300 	mov.w	r3, #0
 800055c:	e00a      	b.n	8000574 <__aeabi_l2f+0x14>
 800055e:	bf00      	nop

08000560 <__aeabi_l2f>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800056c:	d502      	bpl.n	8000574 <__aeabi_l2f+0x14>
 800056e:	4240      	negs	r0, r0
 8000570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000574:	ea5f 0c01 	movs.w	ip, r1
 8000578:	bf02      	ittt	eq
 800057a:	4684      	moveq	ip, r0
 800057c:	4601      	moveq	r1, r0
 800057e:	2000      	moveq	r0, #0
 8000580:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000584:	bf08      	it	eq
 8000586:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800058a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800058e:	fabc f28c 	clz	r2, ip
 8000592:	3a08      	subs	r2, #8
 8000594:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000598:	db10      	blt.n	80005bc <__aeabi_l2f+0x5c>
 800059a:	fa01 fc02 	lsl.w	ip, r1, r2
 800059e:	4463      	add	r3, ip
 80005a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80005a4:	f1c2 0220 	rsb	r2, r2, #32
 80005a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005ac:	fa20 f202 	lsr.w	r2, r0, r2
 80005b0:	eb43 0002 	adc.w	r0, r3, r2
 80005b4:	bf08      	it	eq
 80005b6:	f020 0001 	biceq.w	r0, r0, #1
 80005ba:	4770      	bx	lr
 80005bc:	f102 0220 	add.w	r2, r2, #32
 80005c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80005c4:	f1c2 0220 	rsb	r2, r2, #32
 80005c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80005cc:	fa21 f202 	lsr.w	r2, r1, r2
 80005d0:	eb43 0002 	adc.w	r0, r3, r2
 80005d4:	bf08      	it	eq
 80005d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005da:	4770      	bx	lr

080005dc <__aeabi_uldivmod>:
 80005dc:	b953      	cbnz	r3, 80005f4 <__aeabi_uldivmod+0x18>
 80005de:	b94a      	cbnz	r2, 80005f4 <__aeabi_uldivmod+0x18>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	bf08      	it	eq
 80005e4:	2800      	cmpeq	r0, #0
 80005e6:	bf1c      	itt	ne
 80005e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 b996 	b.w	8000920 <__aeabi_idiv0>
 80005f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005fc:	f000 f828 	bl	8000650 <__udivmoddi4>
 8000600:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000608:	b004      	add	sp, #16
 800060a:	4770      	bx	lr
 800060c:	0000      	movs	r0, r0
	...

08000610 <__aeabi_d2ulz>:
 8000610:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000640 <__aeabi_d2ulz+0x30>
 8000614:	ec41 0b17 	vmov	d7, r0, r1
 8000618:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000648 <__aeabi_d2ulz+0x38>
 800061c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000620:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000624:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000628:	eea4 7b45 	vfms.f64	d7, d4, d5
 800062c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000630:	ee16 1a10 	vmov	r1, s12
 8000634:	ee17 0a90 	vmov	r0, s15
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	f3af 8000 	nop.w
 8000640:	00000000 	.word	0x00000000
 8000644:	3df00000 	.word	0x3df00000
 8000648:	00000000 	.word	0x00000000
 800064c:	41f00000 	.word	0x41f00000

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	468e      	mov	lr, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d14d      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065e:	428a      	cmp	r2, r1
 8000660:	4694      	mov	ip, r2
 8000662:	d969      	bls.n	8000738 <__udivmoddi4+0xe8>
 8000664:	fab2 f282 	clz	r2, r2
 8000668:	b152      	cbz	r2, 8000680 <__udivmoddi4+0x30>
 800066a:	fa01 f302 	lsl.w	r3, r1, r2
 800066e:	f1c2 0120 	rsb	r1, r2, #32
 8000672:	fa20 f101 	lsr.w	r1, r0, r1
 8000676:	fa0c fc02 	lsl.w	ip, ip, r2
 800067a:	ea41 0e03 	orr.w	lr, r1, r3
 800067e:	4094      	lsls	r4, r2
 8000680:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000684:	0c21      	lsrs	r1, r4, #16
 8000686:	fbbe f6f8 	udiv	r6, lr, r8
 800068a:	fa1f f78c 	uxth.w	r7, ip
 800068e:	fb08 e316 	mls	r3, r8, r6, lr
 8000692:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000696:	fb06 f107 	mul.w	r1, r6, r7
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006a6:	f080 811f 	bcs.w	80008e8 <__udivmoddi4+0x298>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 811c 	bls.w	80008e8 <__udivmoddi4+0x298>
 80006b0:	3e02      	subs	r6, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	b2a4      	uxth	r4, r4
 80006b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006bc:	fb08 3310 	mls	r3, r8, r0, r3
 80006c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c4:	fb00 f707 	mul.w	r7, r0, r7
 80006c8:	42a7      	cmp	r7, r4
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x92>
 80006cc:	eb1c 0404 	adds.w	r4, ip, r4
 80006d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006d4:	f080 810a 	bcs.w	80008ec <__udivmoddi4+0x29c>
 80006d8:	42a7      	cmp	r7, r4
 80006da:	f240 8107 	bls.w	80008ec <__udivmoddi4+0x29c>
 80006de:	4464      	add	r4, ip
 80006e0:	3802      	subs	r0, #2
 80006e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e6:	1be4      	subs	r4, r4, r7
 80006e8:	2600      	movs	r6, #0
 80006ea:	b11d      	cbz	r5, 80006f4 <__udivmoddi4+0xa4>
 80006ec:	40d4      	lsrs	r4, r2
 80006ee:	2300      	movs	r3, #0
 80006f0:	e9c5 4300 	strd	r4, r3, [r5]
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d909      	bls.n	8000712 <__udivmoddi4+0xc2>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	f000 80ef 	beq.w	80008e2 <__udivmoddi4+0x292>
 8000704:	2600      	movs	r6, #0
 8000706:	e9c5 0100 	strd	r0, r1, [r5]
 800070a:	4630      	mov	r0, r6
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	fab3 f683 	clz	r6, r3
 8000716:	2e00      	cmp	r6, #0
 8000718:	d14a      	bne.n	80007b0 <__udivmoddi4+0x160>
 800071a:	428b      	cmp	r3, r1
 800071c:	d302      	bcc.n	8000724 <__udivmoddi4+0xd4>
 800071e:	4282      	cmp	r2, r0
 8000720:	f200 80f9 	bhi.w	8000916 <__udivmoddi4+0x2c6>
 8000724:	1a84      	subs	r4, r0, r2
 8000726:	eb61 0303 	sbc.w	r3, r1, r3
 800072a:	2001      	movs	r0, #1
 800072c:	469e      	mov	lr, r3
 800072e:	2d00      	cmp	r5, #0
 8000730:	d0e0      	beq.n	80006f4 <__udivmoddi4+0xa4>
 8000732:	e9c5 4e00 	strd	r4, lr, [r5]
 8000736:	e7dd      	b.n	80006f4 <__udivmoddi4+0xa4>
 8000738:	b902      	cbnz	r2, 800073c <__udivmoddi4+0xec>
 800073a:	deff      	udf	#255	; 0xff
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	2a00      	cmp	r2, #0
 8000742:	f040 8092 	bne.w	800086a <__udivmoddi4+0x21a>
 8000746:	eba1 010c 	sub.w	r1, r1, ip
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2601      	movs	r6, #1
 8000754:	0c20      	lsrs	r0, r4, #16
 8000756:	fbb1 f3f7 	udiv	r3, r1, r7
 800075a:	fb07 1113 	mls	r1, r7, r3, r1
 800075e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000762:	fb0e f003 	mul.w	r0, lr, r3
 8000766:	4288      	cmp	r0, r1
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x12c>
 800076a:	eb1c 0101 	adds.w	r1, ip, r1
 800076e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x12a>
 8000774:	4288      	cmp	r0, r1
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2c0>
 800077a:	4643      	mov	r3, r8
 800077c:	1a09      	subs	r1, r1, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb1 f0f7 	udiv	r0, r1, r7
 8000784:	fb07 1110 	mls	r1, r7, r0, r1
 8000788:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x156>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x154>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2ca>
 80007a4:	4608      	mov	r0, r1
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ae:	e79c      	b.n	80006ea <__udivmoddi4+0x9a>
 80007b0:	f1c6 0720 	rsb	r7, r6, #32
 80007b4:	40b3      	lsls	r3, r6
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa20 f407 	lsr.w	r4, r0, r7
 80007c2:	fa01 f306 	lsl.w	r3, r1, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	40f9      	lsrs	r1, r7
 80007ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ce:	fa00 f306 	lsl.w	r3, r0, r6
 80007d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	fa1f fe8c 	uxth.w	lr, ip
 80007dc:	fb09 1118 	mls	r1, r9, r8, r1
 80007e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e4:	fb08 f00e 	mul.w	r0, r8, lr
 80007e8:	4288      	cmp	r0, r1
 80007ea:	fa02 f206 	lsl.w	r2, r2, r6
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b8>
 80007f0:	eb1c 0101 	adds.w	r1, ip, r1
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2bc>
 80007fc:	4288      	cmp	r0, r1
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2bc>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4461      	add	r1, ip
 8000808:	1a09      	subs	r1, r1, r0
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000810:	fb09 1110 	mls	r1, r9, r0, r1
 8000814:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	458e      	cmp	lr, r1
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1e2>
 8000820:	eb1c 0101 	adds.w	r1, ip, r1
 8000824:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2b4>
 800082a:	458e      	cmp	lr, r1
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2b4>
 800082e:	3802      	subs	r0, #2
 8000830:	4461      	add	r1, ip
 8000832:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000836:	fba0 9402 	umull	r9, r4, r0, r2
 800083a:	eba1 010e 	sub.w	r1, r1, lr
 800083e:	42a1      	cmp	r1, r4
 8000840:	46c8      	mov	r8, r9
 8000842:	46a6      	mov	lr, r4
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x2a4>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x2a0>
 8000848:	b15d      	cbz	r5, 8000862 <__udivmoddi4+0x212>
 800084a:	ebb3 0208 	subs.w	r2, r3, r8
 800084e:	eb61 010e 	sbc.w	r1, r1, lr
 8000852:	fa01 f707 	lsl.w	r7, r1, r7
 8000856:	fa22 f306 	lsr.w	r3, r2, r6
 800085a:	40f1      	lsrs	r1, r6
 800085c:	431f      	orrs	r7, r3
 800085e:	e9c5 7100 	strd	r7, r1, [r5]
 8000862:	2600      	movs	r6, #0
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	f1c2 0320 	rsb	r3, r2, #32
 800086e:	40d8      	lsrs	r0, r3
 8000870:	fa0c fc02 	lsl.w	ip, ip, r2
 8000874:	fa21 f303 	lsr.w	r3, r1, r3
 8000878:	4091      	lsls	r1, r2
 800087a:	4301      	orrs	r1, r0
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb3 f0f7 	udiv	r0, r3, r7
 8000888:	fb07 3610 	mls	r6, r7, r0, r3
 800088c:	0c0b      	lsrs	r3, r1, #16
 800088e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000892:	fb00 f60e 	mul.w	r6, r0, lr
 8000896:	429e      	cmp	r6, r3
 8000898:	fa04 f402 	lsl.w	r4, r4, r2
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x260>
 800089e:	eb1c 0303 	adds.w	r3, ip, r3
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b8>
 80008a8:	429e      	cmp	r6, r3
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b8>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4463      	add	r3, ip
 80008b0:	1b9b      	subs	r3, r3, r6
 80008b2:	b289      	uxth	r1, r1
 80008b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b8:	fb07 3316 	mls	r3, r7, r6, r3
 80008bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c0:	fb06 f30e 	mul.w	r3, r6, lr
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x28a>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2b0>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2b0>
 80008d6:	3e02      	subs	r6, #2
 80008d8:	4461      	add	r1, ip
 80008da:	1ac9      	subs	r1, r1, r3
 80008dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0x104>
 80008e2:	462e      	mov	r6, r5
 80008e4:	4628      	mov	r0, r5
 80008e6:	e705      	b.n	80006f4 <__udivmoddi4+0xa4>
 80008e8:	4606      	mov	r6, r0
 80008ea:	e6e3      	b.n	80006b4 <__udivmoddi4+0x64>
 80008ec:	4618      	mov	r0, r3
 80008ee:	e6f8      	b.n	80006e2 <__udivmoddi4+0x92>
 80008f0:	454b      	cmp	r3, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f8>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008fc:	3801      	subs	r0, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f8>
 8000900:	4646      	mov	r6, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x28a>
 8000904:	4620      	mov	r0, r4
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1e2>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x260>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b8>
 8000910:	3b02      	subs	r3, #2
 8000912:	4461      	add	r1, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x12c>
 8000916:	4630      	mov	r0, r6
 8000918:	e709      	b.n	800072e <__udivmoddi4+0xde>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x156>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b500      	push	{lr}
 8000926:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000928:	224c      	movs	r2, #76	; 0x4c
 800092a:	2100      	movs	r1, #0
 800092c:	a809      	add	r0, sp, #36	; 0x24
 800092e:	f00a fce3 	bl	800b2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	a801      	add	r0, sp, #4
 8000938:	f00a fcde 	bl	800b2f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093c:	2002      	movs	r0, #2
 800093e:	f000 fd2d 	bl	800139c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xa0>)
 8000948:	699a      	ldr	r2, [r3, #24]
 800094a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	699a      	ldr	r2, [r3, #24]
 8000952:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095a:	699a      	ldr	r2, [r3, #24]
 800095c:	0491      	lsls	r1, r2, #18
 800095e:	d5fc      	bpl.n	800095a <SystemClock_Config+0x36>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	2101      	movs	r1, #1
 8000962:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000968:	f240 1013 	movw	r0, #275	; 0x113
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800096c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000970:	2304      	movs	r3, #4
 8000972:	e9cd 3014 	strd	r3, r0, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000976:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800097a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800097e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000986:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f000 fd2b 	bl	80013e4 <HAL_RCC_OscConfig>
 800098e:	b108      	cbz	r0, 8000994 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000992:	e7fe      	b.n	8000992 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	233f      	movs	r3, #63	; 0x3f
 8000996:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000998:	2208      	movs	r2, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800099c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ac:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ae:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b2:	f001 f817 	bl	80019e4 <HAL_RCC_ClockConfig>
 80009b6:	b108      	cbz	r0, 80009bc <SystemClock_Config+0x98>
 80009b8:	b672      	cpsid	i
  while (1)
 80009ba:	e7fe      	b.n	80009ba <SystemClock_Config+0x96>
}
 80009bc:	b01d      	add	sp, #116	; 0x74
 80009be:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c2:	bf00      	nop
 80009c4:	58024800 	.word	0x58024800

080009c8 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009c8:	4b93      	ldr	r3, [pc, #588]	; (8000c18 <main+0x250>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	d111      	bne.n	80009fa <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009da:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009e6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009f0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009f6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009fa:	4a87      	ldr	r2, [pc, #540]	; (8000c18 <main+0x250>)
 80009fc:	6953      	ldr	r3, [r2, #20]
 80009fe:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000a02:	d123      	bne.n	8000a4c <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a08:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a0c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a10:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a14:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a18:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a1c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a1e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a22:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a24:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a28:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a2a:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000a2e:	d2f9      	bcs.n	8000a24 <main+0x5c>
    } while(sets-- != 0U);
 8000a30:	3b20      	subs	r3, #32
 8000a32:	f113 0f20 	cmn.w	r3, #32
 8000a36:	d1f2      	bne.n	8000a1e <main+0x56>
 8000a38:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a3c:	6953      	ldr	r3, [r2, #20]
 8000a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a42:	6153      	str	r3, [r2, #20]
 8000a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000a4c:	f000 faa0 	bl	8000f90 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2400      	movs	r4, #0
  SystemClock_Config();
 8000a52:	f7ff ff67 	bl	8000924 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	2214      	movs	r2, #20
 8000a58:	2100      	movs	r1, #0
 8000a5a:	a807      	add	r0, sp, #28
 8000a5c:	f00a fc4c 	bl	800b2f8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b6e      	ldr	r3, [pc, #440]	; (8000c1c <main+0x254>)
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a62:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a66:	486e      	ldr	r0, [pc, #440]	; (8000c20 <main+0x258>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	f042 0204 	orr.w	r2, r2, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a82:	f002 0204 	and.w	r2, r2, #4
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000a9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a9e:	9201      	str	r2, [sp, #4]
 8000aa0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aa6:	f042 0201 	orr.w	r2, r2, #1
 8000aaa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000aae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ab2:	f002 0201 	and.w	r2, r2, #1
 8000ab6:	9202      	str	r2, [sp, #8]
 8000ab8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000abe:	f042 0202 	orr.w	r2, r2, #2
 8000ac2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ac6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aca:	f002 0202 	and.w	r2, r2, #2
 8000ace:	9203      	str	r2, [sp, #12]
 8000ad0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ad6:	f042 0208 	orr.w	r2, r2, #8
 8000ada:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ade:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ae2:	f002 0208 	and.w	r2, r2, #8
 8000ae6:	9204      	str	r2, [sp, #16]
 8000ae8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000af2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000af6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000afa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000afe:	9205      	str	r2, [sp, #20]
 8000b00:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b06:	f042 0210 	orr.w	r2, r2, #16
 8000b0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	9306      	str	r3, [sp, #24]
 8000b1a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b1c:	f000 fc38 	bl	8001390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b26:	483f      	ldr	r0, [pc, #252]	; (8000c24 <main+0x25c>)
 8000b28:	f000 fc32 	bl	8001390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	483d      	ldr	r0, [pc, #244]	; (8000c28 <main+0x260>)
 8000b32:	f000 fc2d 	bl	8001390 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	a907      	add	r1, sp, #28
 8000b38:	483c      	ldr	r0, [pc, #240]	; (8000c2c <main+0x264>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	e9cd 8407 	strd	r8, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f000 fb40 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	a907      	add	r1, sp, #28
 8000b48:	4838      	ldr	r0, [pc, #224]	; (8000c2c <main+0x264>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f000 fb36 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b58:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	a907      	add	r1, sp, #28
 8000b5c:	4834      	ldr	r0, [pc, #208]	; (8000c30 <main+0x268>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5e:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f000 fb2c 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	a907      	add	r1, sp, #28
 8000b72:	482b      	ldr	r0, [pc, #172]	; (8000c20 <main+0x258>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f000 fb22 	bl	80011c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	a907      	add	r1, sp, #28
 8000b82:	4827      	ldr	r0, [pc, #156]	; (8000c20 <main+0x258>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b8a:	f44f 6880 	mov.w	r8, #1024	; 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f000 fb17 	bl	80011c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b96:	a907      	add	r1, sp, #28
 8000b98:	4822      	ldr	r0, [pc, #136]	; (8000c24 <main+0x25c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	e9cd 8607 	strd	r8, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f000 fb0f 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bac:	a907      	add	r1, sp, #28
 8000bae:	4821      	ldr	r0, [pc, #132]	; (8000c34 <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f000 fb05 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bba:	230a      	movs	r3, #10
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	a907      	add	r1, sp, #28
 8000bbe:	481c      	ldr	r0, [pc, #112]	; (8000c30 <main+0x268>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bc0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	e9cd 8507 	strd	r8, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f000 fafb 	bl	80011c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	a907      	add	r1, sp, #28
 8000bd4:	4817      	ldr	r0, [pc, #92]	; (8000c34 <main+0x26c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd6:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be0:	f000 faf0 	bl	80011c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000be4:	4810      	ldr	r0, [pc, #64]	; (8000c28 <main+0x260>)
 8000be6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	e9cd 5607 	strd	r5, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f000 fae8 	bl	80011c4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <main+0x270>)
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <main+0x274>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bf8:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000bfa:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000bfc:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bfe:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c02:	f000 fa81 	bl	8001108 <HAL_CRC_Init>
 8000c06:	b108      	cbz	r0, 8000c0c <main+0x244>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <main+0x242>
  MX_X_CUBE_AI_Init();
 8000c0c:	f003 fe92 	bl	8004934 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8000c10:	f003 fe97 	bl	8004942 <MX_X_CUBE_AI_Process>
  while (1)
 8000c14:	e7fc      	b.n	8000c10 <main+0x248>
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020400 	.word	0x58020400
 8000c24:	58020c00 	.word	0x58020c00
 8000c28:	58021000 	.word	0x58021000
 8000c2c:	58020800 	.word	0x58020800
 8000c30:	58020000 	.word	0x58020000
 8000c34:	58021800 	.word	0x58021800
 8000c38:	24000c7c 	.word	0x24000c7c
 8000c3c:	58024c00 	.word	0x58024c00

08000c40 <MX_USART3_UART_Init>:
  huart3.Init.BaudRate = 115200;
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <MX_USART3_UART_Init+0x5c>)
 8000c42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
{
 8000c46:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 8000c48:	4c15      	ldr	r4, [pc, #84]	; (8000ca0 <MX_USART3_UART_Init+0x60>)
  huart3.Init.BaudRate = 115200;
 8000c4a:	e9c4 2300 	strd	r2, r3, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c52:	4620      	mov	r0, r4
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c54:	6123      	str	r3, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c56:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c62:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	f002 fa9d 	bl	80031a4 <HAL_UART_Init>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	b108      	cbz	r0, 8000c72 <MX_USART3_UART_Init+0x32>
 8000c6e:	b672      	cpsid	i
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MX_USART3_UART_Init+0x30>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	4620      	mov	r0, r4
 8000c74:	f002 fb03 	bl	800327e <HAL_UARTEx_SetTxFifoThreshold>
 8000c78:	4601      	mov	r1, r0
 8000c7a:	b108      	cbz	r0, 8000c80 <MX_USART3_UART_Init+0x40>
 8000c7c:	b672      	cpsid	i
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <MX_USART3_UART_Init+0x3e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c80:	4620      	mov	r0, r4
 8000c82:	f002 fb20 	bl	80032c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	b108      	cbz	r0, 8000c8c <MX_USART3_UART_Init+0x4c>
 8000c88:	b672      	cpsid	i
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <MX_USART3_UART_Init+0x4a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 fadb 	bl	8003248 <HAL_UARTEx_DisableFifoMode>
 8000c92:	b108      	cbz	r0, 8000c98 <MX_USART3_UART_Init+0x58>
 8000c94:	b672      	cpsid	i
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <MX_USART3_UART_Init+0x56>
}
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004800 	.word	0x40004800
 8000ca0:	24000ca0 	.word	0x24000ca0

08000ca4 <Error_Handler>:
 8000ca4:	b672      	cpsid	i
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <Error_Handler+0x2>

08000ca8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_MspInit+0x20>)
{
 8000caa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000cb0:	f042 0202 	orr.w	r2, r2, #2
 8000cb4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	b002      	add	sp, #8
 8000cc6:	4770      	bx	lr
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000ccc:	6802      	ldr	r2, [r0, #0]
{
 8000cce:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_CRC_MspInit+0x2c>)
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d10d      	bne.n	8000cf2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cd6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000cda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cde:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ce2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cf2:	b002      	add	sp, #8
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	58024c00 	.word	0x58024c00

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	b0b4      	sub	sp, #208	; 0xd0
 8000d00:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	2214      	movs	r2, #20
 8000d04:	2100      	movs	r1, #0
 8000d06:	a802      	add	r0, sp, #8
 8000d08:	f00a faf6 	bl	800b2f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	22b4      	movs	r2, #180	; 0xb4
 8000d0e:	2100      	movs	r1, #0
 8000d10:	a807      	add	r0, sp, #28
 8000d12:	f00a faf1 	bl	800b2f8 <memset>
  if(huart->Instance==USART3)
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <HAL_UART_MspInit+0x9c>)
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d13a      	bne.n	8000d94 <HAL_UART_MspInit+0x98>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d1e:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d20:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d22:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f001 f8ba 	bl	8001e9c <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	b108      	cbz	r0, 8000d2e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000d2a:	f7ff ffbb 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_UART_MspInit+0xa0>)
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	a902      	add	r1, sp, #8
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d42:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000d46:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000d4a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d56:	f042 0208 	orr.w	r2, r2, #8
 8000d5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d62:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	e9cd 3602 	strd	r3, r6, [sp, #8]
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f000 fa24 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_VCP_TX_Pin;
 8000d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(STLK_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d80:	a902      	add	r1, sp, #8
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(STLK_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f000 fa18 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d94:	b034      	add	sp, #208	; 0xd0
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	40004800 	.word	0x40004800
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58020c00 	.word	0x58020c00

08000da4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler>

08000da6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler>

08000da8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler>

08000daa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler>

08000dac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler>

08000dae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 b91a 	b.w	8000fec <HAL_IncTick>

08000db8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000db8:	2001      	movs	r0, #1
 8000dba:	4770      	bx	lr

08000dbc <_kill>:

int _kill(int pid, int sig)
{
 8000dbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000dbe:	f00a fa5b 	bl	800b278 <__errno>
 8000dc2:	2316      	movs	r3, #22
 8000dc4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dca:	bd08      	pop	{r3, pc}

08000dcc <_exit>:

void _exit (int status)
{
 8000dcc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000dce:	f00a fa53 	bl	800b278 <__errno>
 8000dd2:	2316      	movs	r3, #22
 8000dd4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000dd6:	e7fe      	b.n	8000dd6 <_exit+0xa>

08000dd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	460e      	mov	r6, r1
 8000de0:	1b73      	subs	r3, r6, r5
 8000de2:	429c      	cmp	r4, r3
 8000de4:	dc01      	bgt.n	8000dea <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000de6:	4620      	mov	r0, r4
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	e7f5      	b.n	8000de0 <_read+0x8>

08000df4 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	4770      	bx	lr

08000dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000dfe:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000e00:	604b      	str	r3, [r1, #4]
}
 8000e02:	4770      	bx	lr

08000e04 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000e04:	2001      	movs	r0, #1
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000e08:	2000      	movs	r0, #0
 8000e0a:	4770      	bx	lr

08000e0c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <_sbrk+0x30>)
{
 8000e0e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000e10:	6811      	ldr	r1, [r2, #0]
{
 8000e12:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000e14:	b909      	cbnz	r1, 8000e1a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000e16:	490a      	ldr	r1, [pc, #40]	; (8000e40 <_sbrk+0x34>)
 8000e18:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	6810      	ldr	r0, [r2, #0]
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <_sbrk+0x38>)
 8000e1e:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <_sbrk+0x3c>)
 8000e20:	4403      	add	r3, r0
 8000e22:	1b09      	subs	r1, r1, r4
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d906      	bls.n	8000e36 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000e28:	f00a fa26 	bl	800b278 <__errno>
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000e34:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000e36:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000e38:	e7fc      	b.n	8000e34 <_sbrk+0x28>
 8000e3a:	bf00      	nop
 8000e3c:	24000d30 	.word	0x24000d30
 8000e40:	20000000 	.word	0x20000000
 8000e44:	24050000 	.word	0x24050000
 8000e48:	00000800 	.word	0x00000800

08000e4c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <SystemInit+0x84>)
 8000e4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <SystemInit+0x88>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d805      	bhi.n	8000e72 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 030f 	bic.w	r3, r3, #15
 8000e6c:	f043 0307 	orr.w	r3, r3, #7
 8000e70:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <SystemInit+0x8c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e80:	4a16      	ldr	r2, [pc, #88]	; (8000edc <SystemInit+0x90>)
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e86:	4913      	ldr	r1, [pc, #76]	; (8000ed4 <SystemInit+0x88>)
  RCC->CR &= 0xEAF6ED7FU;
 8000e88:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8a:	680a      	ldr	r2, [r1, #0]
 8000e8c:	0712      	lsls	r2, r2, #28
 8000e8e:	d505      	bpl.n	8000e9c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e90:	680a      	ldr	r2, [r1, #0]
 8000e92:	f022 020f 	bic.w	r2, r2, #15
 8000e96:	f042 0207 	orr.w	r2, r2, #7
 8000e9a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e9c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e9e:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <SystemInit+0x94>)
  RCC->D1CFGR = 0x00000000;
 8000ea0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000ea2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000ea4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000ea6:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea8:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <SystemInit+0x98>)
 8000eaa:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eac:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <SystemInit+0x9c>)
 8000eae:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000ec0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ec2:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ec4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <SystemInit+0xa0>)
 8000eca:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	52002000 	.word	0x52002000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ee0:	02020200 	.word	0x02020200
 8000ee4:	01ff0000 	.word	0x01ff0000
 8000ee8:	01010280 	.word	0x01010280
 8000eec:	52004000 	.word	0x52004000

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef4:	f7ff ffaa 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f00a f9b1 	bl	800b284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fd51 	bl	80009c8 <main>
  bx  lr
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f30:	24000c48 	.word	0x24000c48
  ldr r2, =_sidata
 8000f34:	0804aa88 	.word	0x0804aa88
  ldr r2, =_sbss
 8000f38:	24000c60 	.word	0x24000c60
  ldr r4, =_ebss
 8000f3c:	24003b5c 	.word	0x24003b5c

08000f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC3_IRQHandler>
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_InitTick+0x40>)
{
 8000f48:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000f4a:	7818      	ldrb	r0, [r3, #0]
 8000f4c:	b908      	cbnz	r0, 8000f52 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_InitTick+0x44>)
 8000f58:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f5c:	6810      	ldr	r0, [r2, #0]
 8000f5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f62:	f000 f8bd 	bl	80010e0 <HAL_SYSTICK_Config>
 8000f66:	4604      	mov	r4, r0
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	2d0f      	cmp	r5, #15
 8000f6e:	d8ee      	bhi.n	8000f4e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	4602      	mov	r2, r0
 8000f72:	4629      	mov	r1, r5
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	f000 f880 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_InitTick+0x48>)
 8000f7e:	4620      	mov	r0, r4
 8000f80:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8000f82:	e7e5      	b.n	8000f50 <HAL_InitTick+0xc>
 8000f84:	24000008 	.word	0x24000008
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	2400000c 	.word	0x2400000c

08000f90 <HAL_Init>:
{
 8000f90:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f92:	2003      	movs	r0, #3
 8000f94:	f000 f860 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f98:	f000 fc84 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8000f9c:	490f      	ldr	r1, [pc, #60]	; (8000fdc <HAL_Init+0x4c>)
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_Init+0x50>)
 8000fa0:	698b      	ldr	r3, [r1, #24]
 8000fa2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fae:	698b      	ldr	r3, [r1, #24]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x54>)
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000fc0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_Init+0x58>)
 8000fc4:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ffbc 	bl	8000f44 <HAL_InitTick>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	b918      	cbnz	r0, 8000fd8 <HAL_Init+0x48>
  HAL_MspInit();
 8000fd0:	f7ff fe6a 	bl	8000ca8 <HAL_MspInit>
}
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fd8:	2401      	movs	r4, #1
 8000fda:	e7fb      	b.n	8000fd4 <HAL_Init+0x44>
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	0800e474 	.word	0x0800e474
 8000fe4:	24000004 	.word	0x24000004
 8000fe8:	24000000 	.word	0x24000000

08000fec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x10>)
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_IncTick+0x14>)
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	24000d34 	.word	0x24000d34
 8001000:	24000008 	.word	0x24000008

08001004 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <HAL_GetTick+0x8>)
 8001006:	6818      	ldr	r0, [r3, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	24000d34 	.word	0x24000d34

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fff6 	bl	8001004 <HAL_GetTick>
 8001018:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800101c:	bf1e      	ittt	ne
 800101e:	4b04      	ldrne	r3, [pc, #16]	; (8001030 <HAL_Delay+0x20>)
 8001020:	781b      	ldrbne	r3, [r3, #0]
 8001022:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	1b43      	subs	r3, r0, r5
 800102a:	42a3      	cmp	r3, r4
 800102c:	d3fa      	bcc.n	8001024 <HAL_Delay+0x14>
  {
  }
}
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	24000008 	.word	0x24000008

08001034 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32H7xx_HAL_VERSION;
}
 8001034:	4800      	ldr	r0, [pc, #0]	; (8001038 <HAL_GetHalVersion+0x4>)
 8001036:	4770      	bx	lr
 8001038:	010b0000 	.word	0x010b0000

0800103c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800103c:	4b01      	ldr	r3, [pc, #4]	; (8001044 <HAL_GetREVID+0x8>)
 800103e:	6818      	ldr	r0, [r3, #0]
}
 8001040:	0c00      	lsrs	r0, r0, #16
 8001042:	4770      	bx	lr
 8001044:	5c001000 	.word	0x5c001000

08001048 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_GetDEVID+0xc>)
 800104a:	6818      	ldr	r0, [r3, #0]
}
 800104c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	5c001000 	.word	0x5c001000

08001058 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001066:	0412      	lsls	r2, r2, #16
 8001068:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001074:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2d04      	cmp	r5, #4
 800108e:	bf28      	it	cs
 8001090:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001098:	bf8c      	ite	hi
 800109a:	3c03      	subhi	r4, #3
 800109c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80010a2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	fa01 f104 	lsl.w	r1, r1, r4
 80010b4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80010bc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80010be:	db06      	blt.n	80010ce <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80010c8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010cc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	f000 000f 	and.w	r0, r0, #15
 80010d2:	4a02      	ldr	r2, [pc, #8]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
 80010d4:	5413      	strb	r3, [r2, r0]
 80010d6:	e7f9      	b.n	80010cc <HAL_NVIC_SetPriority+0x50>
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	e000ed14 	.word	0xe000ed14

080010e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	3801      	subs	r0, #1
 80010e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010e6:	d20b      	bcs.n	8001100 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <HAL_SYSTICK_Config+0x24>)
 80010ee:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001100:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001108:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800110a:	4604      	mov	r4, r0
 800110c:	b908      	cbnz	r0, 8001112 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800110e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001110:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001112:	7f43      	ldrb	r3, [r0, #29]
 8001114:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001118:	b913      	cbnz	r3, 8001120 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800111a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800111c:	f7ff fdd6 	bl	8000ccc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001120:	2302      	movs	r3, #2
 8001122:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001124:	7923      	ldrb	r3, [r4, #4]
 8001126:	b9e3      	cbnz	r3, 8001162 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <HAL_CRC_Init+0x70>)
 800112c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	f022 0218 	bic.w	r2, r2, #24
 8001134:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001136:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001138:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800113a:	b9d2      	cbnz	r2, 8001172 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001140:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001142:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	6961      	ldr	r1, [r4, #20]
 8001148:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800114c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800114e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001150:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001158:	430a      	orrs	r2, r1
 800115a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800115c:	2301      	movs	r3, #1
 800115e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001160:	e7d6      	b.n	8001110 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001162:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001166:	4620      	mov	r0, r4
 8001168:	f000 f808 	bl	800117c <HAL_CRCEx_Polynomial_Set>
 800116c:	2800      	cmp	r0, #0
 800116e:	d0e2      	beq.n	8001136 <HAL_CRC_Init+0x2e>
 8001170:	e7cd      	b.n	800110e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001172:	6922      	ldr	r2, [r4, #16]
 8001174:	e7e4      	b.n	8001140 <HAL_CRC_Init+0x38>
 8001176:	bf00      	nop
 8001178:	04c11db7 	.word	0x04c11db7

0800117c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800117c:	231f      	movs	r3, #31
{
 800117e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001180:	3b01      	subs	r3, #1
 8001182:	d31c      	bcc.n	80011be <HAL_CRCEx_Polynomial_Set+0x42>
 8001184:	fa21 f403 	lsr.w	r4, r1, r3
 8001188:	07e4      	lsls	r4, r4, #31
 800118a:	d5f9      	bpl.n	8001180 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800118c:	2a10      	cmp	r2, #16
 800118e:	d012      	beq.n	80011b6 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001190:	d804      	bhi.n	800119c <HAL_CRCEx_Polynomial_Set+0x20>
 8001192:	b13a      	cbz	r2, 80011a4 <HAL_CRCEx_Polynomial_Set+0x28>
 8001194:	2a08      	cmp	r2, #8
 8001196:	d010      	beq.n	80011ba <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001198:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800119a:	e00b      	b.n	80011b4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800119c:	2a18      	cmp	r2, #24
 800119e:	d1fb      	bne.n	8001198 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80011a0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80011a2:	d8f9      	bhi.n	8001198 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80011a4:	6800      	ldr	r0, [r0, #0]
 80011a6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	f023 0318 	bic.w	r3, r3, #24
 80011ae:	431a      	orrs	r2, r3
 80011b0:	6082      	str	r2, [r0, #8]
 80011b2:	2000      	movs	r0, #0
}
 80011b4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	e7f3      	b.n	80011a2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	e7f1      	b.n	80011a2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d1ea      	bne.n	8001198 <HAL_CRCEx_Polynomial_Set+0x1c>
 80011c2:	e7ef      	b.n	80011a4 <HAL_CRCEx_Polynomial_Set+0x28>

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80011c8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800138c <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011d2:	680a      	ldr	r2, [r1, #0]
 80011d4:	fa32 f503 	lsrs.w	r5, r2, r3
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80011da:	b003      	add	sp, #12
 80011dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e0:	f04f 0e01 	mov.w	lr, #1
 80011e4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 80011e8:	ea1e 0202 	ands.w	r2, lr, r2
 80011ec:	f000 80b9 	beq.w	8001362 <HAL_GPIO_Init+0x19e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f0:	684e      	ldr	r6, [r1, #4]
 80011f2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011f6:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fa:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011fe:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001202:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001204:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001208:	2f01      	cmp	r7, #1
 800120a:	d834      	bhi.n	8001276 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800120c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800120e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001212:	68cf      	ldr	r7, [r1, #12]
 8001214:	fa07 f708 	lsl.w	r7, r7, r8
 8001218:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800121c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800121e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001220:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001228:	409f      	lsls	r7, r3
 800122a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800122e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001230:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001234:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	688f      	ldr	r7, [r1, #8]
 800123a:	fa07 f708 	lsl.w	r7, r7, r8
 800123e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8001242:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	d119      	bne.n	800127a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8001246:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800124a:	f003 0b07 	and.w	fp, r3, #7
 800124e:	f04f 0e0f 	mov.w	lr, #15
 8001252:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001256:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800125a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800125e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001262:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001266:	690f      	ldr	r7, [r1, #16]
 8001268:	fa07 f70b 	lsl.w	r7, r7, fp
 800126c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001270:	f8ca 7020 	str.w	r7, [sl, #32]
 8001274:	e001      	b.n	800127a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	2d03      	cmp	r5, #3
 8001278:	d1da      	bne.n	8001230 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800127a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001280:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001284:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001288:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 800128c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800128e:	d068      	beq.n	8001362 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8001294:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001298:	f003 0c03 	and.w	ip, r3, #3
 800129c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	f045 0502 	orr.w	r5, r5, #2
 80012a4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80012b0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012b4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80012b8:	f005 0502 	and.w	r5, r5, #2
 80012bc:	9501      	str	r5, [sp, #4]
 80012be:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80012c4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012cc:	4d2e      	ldr	r5, [pc, #184]	; (8001388 <HAL_GPIO_Init+0x1c4>)
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d049      	beq.n	8001366 <HAL_GPIO_Init+0x1a2>
 80012d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012d6:	42a8      	cmp	r0, r5
 80012d8:	d047      	beq.n	800136a <HAL_GPIO_Init+0x1a6>
 80012da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012de:	42a8      	cmp	r0, r5
 80012e0:	d045      	beq.n	800136e <HAL_GPIO_Init+0x1aa>
 80012e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012e6:	42a8      	cmp	r0, r5
 80012e8:	d043      	beq.n	8001372 <HAL_GPIO_Init+0x1ae>
 80012ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012ee:	42a8      	cmp	r0, r5
 80012f0:	d041      	beq.n	8001376 <HAL_GPIO_Init+0x1b2>
 80012f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012f6:	42a8      	cmp	r0, r5
 80012f8:	d03f      	beq.n	800137a <HAL_GPIO_Init+0x1b6>
 80012fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012fe:	42a8      	cmp	r0, r5
 8001300:	d03d      	beq.n	800137e <HAL_GPIO_Init+0x1ba>
 8001302:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001306:	42a8      	cmp	r0, r5
 8001308:	d03b      	beq.n	8001382 <HAL_GPIO_Init+0x1be>
 800130a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800130e:	42a8      	cmp	r0, r5
 8001310:	bf0c      	ite	eq
 8001312:	2509      	moveq	r5, #9
 8001314:	250a      	movne	r5, #10
 8001316:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800131e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001322:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8001324:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8001328:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800132a:	bf0c      	ite	eq
 800132c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800132e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8001334:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001336:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8001338:	bf0c      	ite	eq
 800133a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800133c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8001342:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001344:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8001348:	bf0c      	ite	eq
 800134a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800134c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8001350:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8001354:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8001358:	bf54      	ite	pl
 800135a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800135c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800135e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8001362:	3301      	adds	r3, #1
 8001364:	e735      	b.n	80011d2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001366:	2500      	movs	r5, #0
 8001368:	e7d5      	b.n	8001316 <HAL_GPIO_Init+0x152>
 800136a:	2501      	movs	r5, #1
 800136c:	e7d3      	b.n	8001316 <HAL_GPIO_Init+0x152>
 800136e:	2502      	movs	r5, #2
 8001370:	e7d1      	b.n	8001316 <HAL_GPIO_Init+0x152>
 8001372:	2503      	movs	r5, #3
 8001374:	e7cf      	b.n	8001316 <HAL_GPIO_Init+0x152>
 8001376:	2504      	movs	r5, #4
 8001378:	e7cd      	b.n	8001316 <HAL_GPIO_Init+0x152>
 800137a:	2505      	movs	r5, #5
 800137c:	e7cb      	b.n	8001316 <HAL_GPIO_Init+0x152>
 800137e:	2506      	movs	r5, #6
 8001380:	e7c9      	b.n	8001316 <HAL_GPIO_Init+0x152>
 8001382:	2507      	movs	r5, #7
 8001384:	e7c7      	b.n	8001316 <HAL_GPIO_Init+0x152>
 8001386:	bf00      	nop
 8001388:	58020000 	.word	0x58020000
 800138c:	58024400 	.word	0x58024400

08001390 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	b10a      	cbz	r2, 8001396 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001392:	6181      	str	r1, [r0, #24]
  }
}
 8001394:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001396:	0409      	lsls	r1, r1, #16
 8001398:	e7fb      	b.n	8001392 <HAL_GPIO_WritePin+0x2>
	...

0800139c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800139c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800139e:	4c10      	ldr	r4, [pc, #64]	; (80013e0 <HAL_PWREx_ConfigSupply+0x44>)
 80013a0:	68e3      	ldr	r3, [r4, #12]
 80013a2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013a6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80013a8:	d105      	bne.n	80013b6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013aa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013ae:	1a18      	subs	r0, r3, r0
 80013b0:	bf18      	it	ne
 80013b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013b6:	f023 0307 	bic.w	r3, r3, #7
 80013ba:	4318      	orrs	r0, r3
 80013bc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80013be:	f7ff fe21 	bl	8001004 <HAL_GetTick>
 80013c2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013c4:	6863      	ldr	r3, [r4, #4]
 80013c6:	049b      	lsls	r3, r3, #18
 80013c8:	d501      	bpl.n	80013ce <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80013ca:	2000      	movs	r0, #0
 80013cc:	e7f2      	b.n	80013b4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013ce:	f7ff fe19 	bl	8001004 <HAL_GetTick>
 80013d2:	1b40      	subs	r0, r0, r5
 80013d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80013d8:	d9f4      	bls.n	80013c4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 80013da:	2001      	movs	r0, #1
 80013dc:	e7ea      	b.n	80013b4 <HAL_PWREx_ConfigSupply+0x18>
 80013de:	bf00      	nop
 80013e0:	58024800 	.word	0x58024800

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e6:	4604      	mov	r4, r0
 80013e8:	b908      	cbnz	r0, 80013ee <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80013ea:	2001      	movs	r0, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	07df      	lsls	r7, r3, #31
 80013f2:	d453      	bmi.n	800149c <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	079e      	lsls	r6, r3, #30
 80013f8:	f100 80a3 	bmi.w	8001542 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	06da      	lsls	r2, r3, #27
 8001400:	d51c      	bpl.n	800143c <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b98      	ldr	r3, [pc, #608]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001404:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001406:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001408:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800140c:	2a08      	cmp	r2, #8
 800140e:	d007      	beq.n	8001420 <HAL_RCC_OscConfig+0x3c>
 8001410:	2a18      	cmp	r2, #24
 8001412:	f040 80e5 	bne.w	80015e0 <HAL_RCC_OscConfig+0x1fc>
 8001416:	f001 0203 	and.w	r2, r1, #3
 800141a:	2a01      	cmp	r2, #1
 800141c:	f040 80e0 	bne.w	80015e0 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	d502      	bpl.n	800142c <HAL_RCC_OscConfig+0x48>
 8001426:	69e3      	ldr	r3, [r4, #28]
 8001428:	2b80      	cmp	r3, #128	; 0x80
 800142a:	d1de      	bne.n	80013ea <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800142c:	4a8d      	ldr	r2, [pc, #564]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800142e:	6a21      	ldr	r1, [r4, #32]
 8001430:	68d3      	ldr	r3, [r2, #12]
 8001432:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001436:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800143a:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	0719      	lsls	r1, r3, #28
 8001440:	f100 80fb 	bmi.w	800163a <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	069a      	lsls	r2, r3, #26
 8001448:	f100 8121 	bmi.w	800168e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	075d      	lsls	r5, r3, #29
 8001450:	d51e      	bpl.n	8001490 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8001452:	4d85      	ldr	r5, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x284>)
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800145c:	f7ff fdd2 	bl	8001004 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	05da      	lsls	r2, r3, #23
 8001466:	f140 8137 	bpl.w	80016d8 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	68a3      	ldr	r3, [r4, #8]
 800146c:	4d7d      	ldr	r5, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800146e:	2b01      	cmp	r3, #1
 8001470:	f040 8139 	bne.w	80016e6 <HAL_RCC_OscConfig+0x302>
 8001474:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001480:	f7ff fdc0 	bl	8001004 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001484:	4e77      	ldr	r6, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x280>)
      tickstart = HAL_GetTick();
 8001486:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001488:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800148a:	079b      	lsls	r3, r3, #30
 800148c:	f140 8151 	bpl.w	8001732 <HAL_RCC_OscConfig+0x34e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001490:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001492:	2800      	cmp	r0, #0
 8001494:	f040 8154 	bne.w	8001740 <HAL_RCC_OscConfig+0x35c>
      }
    }
  }
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	e028      	b.n	80014ee <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800149e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014a6:	2a10      	cmp	r2, #16
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0xd2>
 80014aa:	2a18      	cmp	r2, #24
 80014ac:	d10a      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe0>
 80014ae:	f001 0203 	and.w	r2, r1, #3
 80014b2:	2a02      	cmp	r2, #2
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	039d      	lsls	r5, r3, #14
 80014ba:	d59b      	bpl.n	80013f4 <HAL_RCC_OscConfig+0x10>
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d198      	bne.n	80013f4 <HAL_RCC_OscConfig+0x10>
 80014c2:	e792      	b.n	80013ea <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	6862      	ldr	r2, [r4, #4]
 80014c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80014ca:	d111      	bne.n	80014f0 <HAL_RCC_OscConfig+0x10c>
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014d4:	f7ff fd96 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014d8:	4e62      	ldr	r6, [pc, #392]	; (8001664 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80014da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	0398      	lsls	r0, r3, #14
 80014e0:	d488      	bmi.n	80013f4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fd8f 	bl	8001004 <HAL_GetTick>
 80014e6:	1b40      	subs	r0, r0, r5
 80014e8:	2864      	cmp	r0, #100	; 0x64
 80014ea:	d9f7      	bls.n	80014dc <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 80014ec:	2003      	movs	r0, #3
}
 80014ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	4d5c      	ldr	r5, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	b99a      	cbnz	r2, 800151e <HAL_RCC_OscConfig+0x13a>
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	602b      	str	r3, [r5, #0]
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001504:	f7ff fd7e 	bl	8001004 <HAL_GetTick>
 8001508:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	0399      	lsls	r1, r3, #14
 800150e:	f57f af71 	bpl.w	80013f4 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001512:	f7ff fd77 	bl	8001004 <HAL_GetTick>
 8001516:	1b80      	subs	r0, r0, r6
 8001518:	2864      	cmp	r0, #100	; 0x64
 800151a:	d9f6      	bls.n	800150a <HAL_RCC_OscConfig+0x126>
 800151c:	e7e6      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001522:	d107      	bne.n	8001534 <HAL_RCC_OscConfig+0x150>
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	e7cf      	b.n	80014d4 <HAL_RCC_OscConfig+0xf0>
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	602b      	str	r3, [r5, #0]
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	e7f6      	b.n	8001530 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4b48      	ldr	r3, [pc, #288]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001544:	68e1      	ldr	r1, [r4, #12]
 8001546:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001548:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800154a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800154e:	d003      	beq.n	8001558 <HAL_RCC_OscConfig+0x174>
 8001550:	2a18      	cmp	r2, #24
 8001552:	d121      	bne.n	8001598 <HAL_RCC_OscConfig+0x1b4>
 8001554:	0782      	lsls	r2, r0, #30
 8001556:	d11f      	bne.n	8001598 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	075b      	lsls	r3, r3, #29
 800155c:	d502      	bpl.n	8001564 <HAL_RCC_OscConfig+0x180>
 800155e:	2900      	cmp	r1, #0
 8001560:	f43f af43 	beq.w	80013ea <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001564:	4d3f      	ldr	r5, [pc, #252]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001566:	682a      	ldr	r2, [r5, #0]
 8001568:	f022 0219 	bic.w	r2, r2, #25
 800156c:	430a      	orrs	r2, r1
 800156e:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8001570:	f7ff fd48 	bl	8001004 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	075f      	lsls	r7, r3, #29
 800157a:	d507      	bpl.n	800158c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	686b      	ldr	r3, [r5, #4]
 800157e:	6922      	ldr	r2, [r4, #16]
 8001580:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001584:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001588:	606b      	str	r3, [r5, #4]
 800158a:	e737      	b.n	80013fc <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fd3a 	bl	8001004 <HAL_GetTick>
 8001590:	1b80      	subs	r0, r0, r6
 8001592:	2802      	cmp	r0, #2
 8001594:	d9ef      	bls.n	8001576 <HAL_RCC_OscConfig+0x192>
 8001596:	e7a9      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001598:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159a:	b181      	cbz	r1, 80015be <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800159c:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a0:	4d30      	ldr	r5, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a6:	f7ff fd2d 	bl	8001004 <HAL_GetTick>
 80015aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ac:	682b      	ldr	r3, [r5, #0]
 80015ae:	0758      	lsls	r0, r3, #29
 80015b0:	d4e4      	bmi.n	800157c <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fd27 	bl	8001004 <HAL_GetTick>
 80015b6:	1b80      	subs	r0, r0, r6
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d9f7      	bls.n	80015ac <HAL_RCC_OscConfig+0x1c8>
 80015bc:	e796      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 80015be:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c2:	4e28      	ldr	r6, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_DISABLE();
 80015c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015c6:	f7ff fd1d 	bl	8001004 <HAL_GetTick>
 80015ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015cc:	6833      	ldr	r3, [r6, #0]
 80015ce:	0759      	lsls	r1, r3, #29
 80015d0:	f57f af14 	bpl.w	80013fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fd16 	bl	8001004 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9f6      	bls.n	80015cc <HAL_RCC_OscConfig+0x1e8>
 80015de:	e785      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80015e0:	69e2      	ldr	r2, [r4, #28]
 80015e2:	b1c2      	cbz	r2, 8001616 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 80015e4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015e6:	4d1f      	ldr	r5, [pc, #124]	; (8001664 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_ENABLE();
 80015e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015ee:	f7ff fd09 	bl	8001004 <HAL_GetTick>
 80015f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	05df      	lsls	r7, r3, #23
 80015f8:	d507      	bpl.n	800160a <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015fa:	68eb      	ldr	r3, [r5, #12]
 80015fc:	6a22      	ldr	r2, [r4, #32]
 80015fe:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001602:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001606:	60eb      	str	r3, [r5, #12]
 8001608:	e718      	b.n	800143c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800160a:	f7ff fcfb 	bl	8001004 <HAL_GetTick>
 800160e:	1b80      	subs	r0, r0, r6
 8001610:	2802      	cmp	r0, #2
 8001612:	d9ef      	bls.n	80015f4 <HAL_RCC_OscConfig+0x210>
 8001614:	e76a      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8001616:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001618:	4e12      	ldr	r6, [pc, #72]	; (8001664 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_DISABLE();
 800161a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800161e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001620:	f7ff fcf0 	bl	8001004 <HAL_GetTick>
 8001624:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001626:	6833      	ldr	r3, [r6, #0]
 8001628:	05d8      	lsls	r0, r3, #23
 800162a:	f57f af07 	bpl.w	800143c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800162e:	f7ff fce9 	bl	8001004 <HAL_GetTick>
 8001632:	1b40      	subs	r0, r0, r5
 8001634:	2802      	cmp	r0, #2
 8001636:	d9f6      	bls.n	8001626 <HAL_RCC_OscConfig+0x242>
 8001638:	e758      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800163a:	6963      	ldr	r3, [r4, #20]
 800163c:	4d09      	ldr	r5, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800163e:	b1ab      	cbz	r3, 800166c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8001640:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001648:	f7ff fcdc 	bl	8001004 <HAL_GetTick>
 800164c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001650:	079b      	lsls	r3, r3, #30
 8001652:	f53f aef7 	bmi.w	8001444 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fcd5 	bl	8001004 <HAL_GetTick>
 800165a:	1b80      	subs	r0, r0, r6
 800165c:	2802      	cmp	r0, #2
 800165e:	d9f6      	bls.n	800164e <HAL_RCC_OscConfig+0x26a>
 8001660:	e744      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
 8001668:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 800166c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001674:	f7ff fcc6 	bl	8001004 <HAL_GetTick>
 8001678:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800167c:	079f      	lsls	r7, r3, #30
 800167e:	f57f aee1 	bpl.w	8001444 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fcbf 	bl	8001004 <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	2802      	cmp	r0, #2
 800168a:	d9f6      	bls.n	800167a <HAL_RCC_OscConfig+0x296>
 800168c:	e72e      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800168e:	69a3      	ldr	r3, [r4, #24]
 8001690:	4d83      	ldr	r5, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001692:	b183      	cbz	r3, 80016b6 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI48_ENABLE();
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800169c:	f7ff fcb2 	bl	8001004 <HAL_GetTick>
 80016a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	0498      	lsls	r0, r3, #18
 80016a6:	f53f aed1 	bmi.w	800144c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016aa:	f7ff fcab 	bl	8001004 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2802      	cmp	r0, #2
 80016b2:	d9f6      	bls.n	80016a2 <HAL_RCC_OscConfig+0x2be>
 80016b4:	e71a      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016bc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016be:	f7ff fca1 	bl	8001004 <HAL_GetTick>
 80016c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	0499      	lsls	r1, r3, #18
 80016c8:	f57f aec0 	bpl.w	800144c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016cc:	f7ff fc9a 	bl	8001004 <HAL_GetTick>
 80016d0:	1b80      	subs	r0, r0, r6
 80016d2:	2802      	cmp	r0, #2
 80016d4:	d9f6      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2e0>
 80016d6:	e709      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff fc94 	bl	8001004 <HAL_GetTick>
 80016dc:	1b80      	subs	r0, r0, r6
 80016de:	2864      	cmp	r0, #100	; 0x64
 80016e0:	f67f aebf 	bls.w	8001462 <HAL_RCC_OscConfig+0x7e>
 80016e4:	e702      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	b9b3      	cbnz	r3, 8001716 <HAL_RCC_OscConfig+0x332>
 80016e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	672b      	str	r3, [r5, #112]	; 0x70
 80016f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80016fc:	f7ff fc82 	bl	8001004 <HAL_GetTick>
 8001700:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001702:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001704:	0798      	lsls	r0, r3, #30
 8001706:	f57f aec3 	bpl.w	8001490 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fc7b 	bl	8001004 <HAL_GetTick>
 800170e:	1b80      	subs	r0, r0, r6
 8001710:	42b8      	cmp	r0, r7
 8001712:	d9f6      	bls.n	8001702 <HAL_RCC_OscConfig+0x31e>
 8001714:	e6ea      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	2b05      	cmp	r3, #5
 8001718:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800171a:	d103      	bne.n	8001724 <HAL_RCC_OscConfig+0x340>
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	672b      	str	r3, [r5, #112]	; 0x70
 8001722:	e6a7      	b.n	8001474 <HAL_RCC_OscConfig+0x90>
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	672b      	str	r3, [r5, #112]	; 0x70
 800172a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	e6a3      	b.n	800147a <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fc67 	bl	8001004 <HAL_GetTick>
 8001736:	1b40      	subs	r0, r0, r5
 8001738:	42b8      	cmp	r0, r7
 800173a:	f67f aea5 	bls.w	8001488 <HAL_RCC_OscConfig+0xa4>
 800173e:	e6d5      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001740:	4d57      	ldr	r5, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
 8001742:	692b      	ldr	r3, [r5, #16]
 8001744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001748:	2b18      	cmp	r3, #24
 800174a:	d07a      	beq.n	8001842 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_DISABLE();
 800174c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001754:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	d167      	bne.n	8001828 <HAL_RCC_OscConfig+0x444>
        tickstart = HAL_GetTick();
 8001758:	f7ff fc54 	bl	8001004 <HAL_GetTick>
 800175c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	0199      	lsls	r1, r3, #6
 8001762:	d45b      	bmi.n	800181c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001764:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001768:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800176c:	f023 0303 	bic.w	r3, r3, #3
 8001770:	4313      	orrs	r3, r2
 8001772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001774:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001778:	62ab      	str	r3, [r5, #40]	; 0x28
 800177a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800177c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800177e:	3b01      	subs	r3, #1
 8001780:	3a01      	subs	r2, #1
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	0412      	lsls	r2, r2, #16
 8001786:	b29b      	uxth	r3, r3
 8001788:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800178c:	4313      	orrs	r3, r2
 800178e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001790:	3a01      	subs	r2, #1
 8001792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001796:	4313      	orrs	r3, r2
 8001798:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800179a:	3a01      	subs	r2, #1
 800179c:	0612      	lsls	r2, r2, #24
 800179e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017a2:	4313      	orrs	r3, r2
 80017a4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80017a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80017b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80017b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017be:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017c4:	f023 030c 	bic.w	r3, r3, #12
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017d0:	f023 0302 	bic.w	r3, r3, #2
 80017d4:	4313      	orrs	r3, r2
 80017d6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80017f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001800:	f7ff fc00 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001804:	4d26      	ldr	r5, [pc, #152]	; (80018a0 <HAL_RCC_OscConfig+0x4bc>)
        tickstart = HAL_GetTick();
 8001806:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	019a      	lsls	r2, r3, #6
 800180c:	f53f ae44 	bmi.w	8001498 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fbf8 	bl	8001004 <HAL_GetTick>
 8001814:	1b00      	subs	r0, r0, r4
 8001816:	2802      	cmp	r0, #2
 8001818:	d9f6      	bls.n	8001808 <HAL_RCC_OscConfig+0x424>
 800181a:	e667      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fbf2 	bl	8001004 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2802      	cmp	r0, #2
 8001824:	d99b      	bls.n	800175e <HAL_RCC_OscConfig+0x37a>
 8001826:	e661      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8001828:	f7ff fbec 	bl	8001004 <HAL_GetTick>
 800182c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	f57f ae31 	bpl.w	8001498 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fbe5 	bl	8001004 <HAL_GetTick>
 800183a:	1b00      	subs	r0, r0, r4
 800183c:	2802      	cmp	r0, #2
 800183e:	d9f6      	bls.n	800182e <HAL_RCC_OscConfig+0x44a>
 8001840:	e654      	b.n	80014ec <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001844:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001846:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	f43f ae51 	beq.w	80014ee <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001850:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001852:	4281      	cmp	r1, r0
 8001854:	f47f adc9 	bne.w	80013ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001858:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800185e:	428a      	cmp	r2, r1
 8001860:	f47f adc3 	bne.w	80013ea <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001864:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001866:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800186a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800186c:	4291      	cmp	r1, r2
 800186e:	f47f adbc 	bne.w	80013ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001872:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001874:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8001878:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800187a:	4291      	cmp	r1, r2
 800187c:	f47f adb5 	bne.w	80013ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001880:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001882:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8001886:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001888:	4291      	cmp	r1, r2
 800188a:	f47f adae 	bne.w	80013ea <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800188e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001890:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001894:	3801      	subs	r0, #1
  return HAL_OK;
 8001896:	1a18      	subs	r0, r3, r0
 8001898:	bf18      	it	ne
 800189a:	2001      	movne	r0, #1
 800189c:	e627      	b.n	80014ee <HAL_RCC_OscConfig+0x10a>
 800189e:	bf00      	nop
 80018a0:	58024400 	.word	0x58024400

080018a4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x124>)
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80018ac:	2a10      	cmp	r2, #16
{
 80018ae:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b0:	f000 8086 	beq.w	80019c0 <HAL_RCC_GetSysClockFreq+0x11c>
 80018b4:	2a18      	cmp	r2, #24
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x2e>
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	f040 8083 	bne.w	80019c4 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4842      	ldr	r0, [pc, #264]	; (80019cc <HAL_RCC_GetSysClockFreq+0x128>)
 80018c2:	f012 0f20 	tst.w	r2, #32
 80018c6:	d003      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80018ce:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80018d0:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80018d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80018d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80018d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80018d8:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80018dc:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80018e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 80018e2:	d0f5      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80018e4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80018e8:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018ec:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80018f0:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80018f4:	4362      	muls	r2, r4
 80018f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fe:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001900:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001904:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8001908:	d04c      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x100>
 800190a:	2902      	cmp	r1, #2
 800190c:	d03c      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xe4>
 800190e:	2900      	cmp	r1, #0
 8001910:	d148      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	0692      	lsls	r2, r2, #26
 8001916:	d527      	bpl.n	8001968 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	4a2c      	ldr	r2, [pc, #176]	; (80019cc <HAL_RCC_GetSysClockFreq+0x128>)
 800191c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001922:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001928:	ee07 2a10 	vmov	s14, r2
 800192c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001930:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001934:	ee06 3a90 	vmov	s13, r3
 8001938:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800193c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001940:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001950:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001952:	ee07 3a10 	vmov	s14, r3
 8001956:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800195a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800195e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001962:	ee17 0a90 	vmov	r0, s15
 8001966:	e7b3      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196e:	ee07 3a10 	vmov	s14, r3
 8001972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800197e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80019d0 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001982:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001986:	e7dd      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198e:	ee07 3a10 	vmov	s14, r3
 8001992:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800199e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80019d4 <HAL_RCC_GetSysClockFreq+0x130>
 80019a2:	e7ee      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019aa:	ee07 3a10 	vmov	s14, r3
 80019ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80019ba:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80019d8 <HAL_RCC_GetSysClockFreq+0x134>
 80019be:	e7e0      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_RCC_GetSysClockFreq+0x138>)
 80019c2:	e785      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019c6:	e783      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80019c8:	58024400 	.word	0x58024400
 80019cc:	03d09000 	.word	0x03d09000
 80019d0:	4c742400 	.word	0x4c742400
 80019d4:	4af42400 	.word	0x4af42400
 80019d8:	4a742400 	.word	0x4a742400
 80019dc:	007a1200 	.word	0x007a1200
 80019e0:	003d0900 	.word	0x003d0900

080019e4 <HAL_RCC_ClockConfig>:
{
 80019e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80019ea:	4604      	mov	r4, r0
 80019ec:	b910      	cbnz	r0, 80019f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019ee:	2001      	movs	r0, #1
}
 80019f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4a88      	ldr	r2, [pc, #544]	; (8001c18 <HAL_RCC_ClockConfig+0x234>)
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	428b      	cmp	r3, r1
 80019fe:	f0c0 8093 	bcc.w	8001b28 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	075f      	lsls	r7, r3, #29
 8001a06:	f100 809b 	bmi.w	8001b40 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	071e      	lsls	r6, r3, #28
 8001a0c:	d50b      	bpl.n	8001a26 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a0e:	4983      	ldr	r1, [pc, #524]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001a10:	6966      	ldr	r6, [r4, #20]
 8001a12:	69c8      	ldr	r0, [r1, #28]
 8001a14:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001a18:	4286      	cmp	r6, r0
 8001a1a:	d904      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a1c:	69ca      	ldr	r2, [r1, #28]
 8001a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a22:	4332      	orrs	r2, r6
 8001a24:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	06d8      	lsls	r0, r3, #27
 8001a28:	d50b      	bpl.n	8001a42 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a2a:	497c      	ldr	r1, [pc, #496]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001a2c:	69a6      	ldr	r6, [r4, #24]
 8001a2e:	69c8      	ldr	r0, [r1, #28]
 8001a30:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001a34:	4286      	cmp	r6, r0
 8001a36:	d904      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a38:	69ca      	ldr	r2, [r1, #28]
 8001a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a3e:	4332      	orrs	r2, r6
 8001a40:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a42:	0699      	lsls	r1, r3, #26
 8001a44:	d50b      	bpl.n	8001a5e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a46:	4975      	ldr	r1, [pc, #468]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001a48:	69e6      	ldr	r6, [r4, #28]
 8001a4a:	6a08      	ldr	r0, [r1, #32]
 8001a4c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001a50:	4286      	cmp	r6, r0
 8001a52:	d904      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a54:	6a0a      	ldr	r2, [r1, #32]
 8001a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a5a:	4332      	orrs	r2, r6
 8001a5c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	079a      	lsls	r2, r3, #30
 8001a60:	d50b      	bpl.n	8001a7a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a62:	496e      	ldr	r1, [pc, #440]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001a64:	68e6      	ldr	r6, [r4, #12]
 8001a66:	6988      	ldr	r0, [r1, #24]
 8001a68:	f000 000f 	and.w	r0, r0, #15
 8001a6c:	4286      	cmp	r6, r0
 8001a6e:	d904      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	698a      	ldr	r2, [r1, #24]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	4332      	orrs	r2, r6
 8001a78:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	07df      	lsls	r7, r3, #31
 8001a7c:	d46e      	bmi.n	8001b5c <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	079e      	lsls	r6, r3, #30
 8001a82:	f100 80a1 	bmi.w	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4964      	ldr	r1, [pc, #400]	; (8001c18 <HAL_RCC_ClockConfig+0x234>)
 8001a88:	680a      	ldr	r2, [r1, #0]
 8001a8a:	f002 020f 	and.w	r2, r2, #15
 8001a8e:	42aa      	cmp	r2, r5
 8001a90:	f200 80a8 	bhi.w	8001be4 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a94:	0758      	lsls	r0, r3, #29
 8001a96:	f100 80b1 	bmi.w	8001bfc <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	0719      	lsls	r1, r3, #28
 8001a9c:	d50b      	bpl.n	8001ab6 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a9e:	495f      	ldr	r1, [pc, #380]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001aa0:	6965      	ldr	r5, [r4, #20]
 8001aa2:	69c8      	ldr	r0, [r1, #28]
 8001aa4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001aa8:	4285      	cmp	r5, r0
 8001aaa:	d204      	bcs.n	8001ab6 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aac:	69ca      	ldr	r2, [r1, #28]
 8001aae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ab2:	432a      	orrs	r2, r5
 8001ab4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	06da      	lsls	r2, r3, #27
 8001ab8:	d50b      	bpl.n	8001ad2 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aba:	4958      	ldr	r1, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001abc:	69a5      	ldr	r5, [r4, #24]
 8001abe:	69c8      	ldr	r0, [r1, #28]
 8001ac0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001ac4:	4285      	cmp	r5, r0
 8001ac6:	d204      	bcs.n	8001ad2 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ac8:	69ca      	ldr	r2, [r1, #28]
 8001aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ad2:	069b      	lsls	r3, r3, #26
 8001ad4:	d50b      	bpl.n	8001aee <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ad6:	4a51      	ldr	r2, [pc, #324]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001ad8:	69e0      	ldr	r0, [r4, #28]
 8001ada:	6a11      	ldr	r1, [r2, #32]
 8001adc:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8001ae0:	4288      	cmp	r0, r1
 8001ae2:	d204      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ae4:	6a13      	ldr	r3, [r2, #32]
 8001ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aea:	4303      	orrs	r3, r0
 8001aec:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aee:	f7ff fed9 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001af2:	494a      	ldr	r1, [pc, #296]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001af4:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_RCC_ClockConfig+0x23c>)
 8001af6:	698b      	ldr	r3, [r1, #24]
 8001af8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001afc:	5cd3      	ldrb	r3, [r2, r3]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b04:	698b      	ldr	r3, [r1, #24]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	fa20 f303 	lsr.w	r3, r0, r3
 8001b16:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001b1c:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <HAL_RCC_ClockConfig+0x248>)
}
 8001b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	f7ff ba0e 	b.w	8000f44 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f023 030f 	bic.w	r3, r3, #15
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	f47f af58 	bne.w	80019ee <HAL_RCC_ClockConfig+0xa>
 8001b3e:	e760      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b40:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001b42:	6926      	ldr	r6, [r4, #16]
 8001b44:	6988      	ldr	r0, [r1, #24]
 8001b46:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001b4a:	4286      	cmp	r6, r0
 8001b4c:	f67f af5d 	bls.w	8001a0a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b50:	698a      	ldr	r2, [r1, #24]
 8001b52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b56:	4332      	orrs	r2, r6
 8001b58:	618a      	str	r2, [r1, #24]
 8001b5a:	e756      	b.n	8001a0a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001b5e:	68a1      	ldr	r1, [r4, #8]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001b66:	430a      	orrs	r2, r1
 8001b68:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	2a02      	cmp	r2, #2
 8001b70:	d11d      	bne.n	8001bae <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b76:	f43f af3a 	beq.w	80019ee <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4e28      	ldr	r6, [pc, #160]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b80:	6933      	ldr	r3, [r6, #16]
 8001b82:	f023 0307 	bic.w	r3, r3, #7
 8001b86:	4313      	orrs	r3, r2
 8001b88:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa3b 	bl	8001004 <HAL_GetTick>
 8001b8e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b90:	6933      	ldr	r3, [r6, #16]
 8001b92:	6862      	ldr	r2, [r4, #4]
 8001b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b98:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001b9c:	f43f af6f 	beq.w	8001a7e <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff fa30 	bl	8001004 <HAL_GetTick>
 8001ba4:	1bc0      	subs	r0, r0, r7
 8001ba6:	4540      	cmp	r0, r8
 8001ba8:	d9f2      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001baa:	2003      	movs	r0, #3
 8001bac:	e720      	b.n	80019f0 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bae:	2a03      	cmp	r2, #3
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bb6:	e7de      	b.n	8001b76 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001bb8:	2a01      	cmp	r2, #1
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bc0:	e7d9      	b.n	8001b76 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc2:	f013 0f04 	tst.w	r3, #4
 8001bc6:	e7d6      	b.n	8001b76 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bc8:	4914      	ldr	r1, [pc, #80]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001bca:	68e6      	ldr	r6, [r4, #12]
 8001bcc:	6988      	ldr	r0, [r1, #24]
 8001bce:	f000 000f 	and.w	r0, r0, #15
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	f4bf af57 	bcs.w	8001a86 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	698a      	ldr	r2, [r1, #24]
 8001bda:	f022 020f 	bic.w	r2, r2, #15
 8001bde:	4332      	orrs	r2, r6
 8001be0:	618a      	str	r2, [r1, #24]
 8001be2:	e750      	b.n	8001a86 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	680a      	ldr	r2, [r1, #0]
 8001be6:	f022 020f 	bic.w	r2, r2, #15
 8001bea:	432a      	orrs	r2, r5
 8001bec:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	680a      	ldr	r2, [r1, #0]
 8001bf0:	f002 020f 	and.w	r2, r2, #15
 8001bf4:	42aa      	cmp	r2, r5
 8001bf6:	f47f aefa 	bne.w	80019ee <HAL_RCC_ClockConfig+0xa>
 8001bfa:	e74b      	b.n	8001a94 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <HAL_RCC_ClockConfig+0x238>)
 8001bfe:	6925      	ldr	r5, [r4, #16]
 8001c00:	6988      	ldr	r0, [r1, #24]
 8001c02:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001c06:	4285      	cmp	r5, r0
 8001c08:	f4bf af47 	bcs.w	8001a9a <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c0c:	698a      	ldr	r2, [r1, #24]
 8001c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c12:	432a      	orrs	r2, r5
 8001c14:	618a      	str	r2, [r1, #24]
 8001c16:	e740      	b.n	8001a9a <HAL_RCC_ClockConfig+0xb6>
 8001c18:	52002000 	.word	0x52002000
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	0800e474 	.word	0x0800e474
 8001c24:	24000004 	.word	0x24000004
 8001c28:	24000000 	.word	0x24000000
 8001c2c:	2400000c 	.word	0x2400000c

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c32:	4c0c      	ldr	r4, [pc, #48]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x34>)
 8001c34:	f7ff fe36 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001c38:	490b      	ldr	r1, [pc, #44]	; (8001c68 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c3a:	69a3      	ldr	r3, [r4, #24]
 8001c3c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001c40:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c42:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c44:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c48:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c4c:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	fa22 f003 	lsr.w	r0, r2, r3
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x3c>)
 8001c5c:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x40>)
 8001c60:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	58024400 	.word	0x58024400
 8001c68:	0800e474 	.word	0x0800e474
 8001c6c:	24000004 	.word	0x24000004
 8001c70:	24000000 	.word	0x24000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001c76:	f7ff ffdb 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001c8a:	40d8      	lsrs	r0, r3
 8001c8c:	bd08      	pop	{r3, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400
 8001c94:	0800e474 	.word	0x0800e474

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001c9a:	f7ff ffc9 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001cae:	40d8      	lsrs	r0, r3
 8001cb0:	bd08      	pop	{r3, pc}
 8001cb2:	bf00      	nop
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	0800e474 	.word	0x0800e474

08001cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001cbe:	4c3a      	ldr	r4, [pc, #232]	; (8001da8 <RCCEx_PLL2_Config+0xec>)
{
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d069      	beq.n	8001da2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cd4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd6:	f7ff f995 	bl	8001004 <HAL_GetTick>
 8001cda:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	011a      	lsls	r2, r3, #4
 8001ce0:	d44b      	bmi.n	8001d7a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001ce2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ce4:	6832      	ldr	r2, [r6, #0]
 8001ce6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001cea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001cee:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cf0:	68b3      	ldr	r3, [r6, #8]
 8001cf2:	68f2      	ldr	r2, [r6, #12]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	0412      	lsls	r2, r2, #16
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001d02:	4313      	orrs	r3, r2
 8001d04:	6872      	ldr	r2, [r6, #4]
 8001d06:	3a01      	subs	r2, #1
 8001d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6932      	ldr	r2, [r6, #16]
 8001d10:	3a01      	subs	r2, #1
 8001d12:	0612      	lsls	r2, r2, #24
 8001d14:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d1e:	6972      	ldr	r2, [r6, #20]
 8001d20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d24:	4313      	orrs	r3, r2
 8001d26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d2a:	69b2      	ldr	r2, [r6, #24]
 8001d2c:	f023 0320 	bic.w	r3, r3, #32
 8001d30:	4313      	orrs	r3, r2
 8001d32:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001d34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d36:	f023 0310 	bic.w	r3, r3, #16
 8001d3a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d3e:	69f2      	ldr	r2, [r6, #28]
 8001d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d4c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001d4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001d58:	b9b5      	cbnz	r5, 8001d88 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001d60:	4c11      	ldr	r4, [pc, #68]	; (8001da8 <RCCEx_PLL2_Config+0xec>)
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6a:	f7ff f94b 	bl	8001004 <HAL_GetTick>
 8001d6e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	d50f      	bpl.n	8001d96 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8001d76:	2000      	movs	r0, #0
 8001d78:	e005      	b.n	8001d86 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001d7a:	f7ff f943 	bl	8001004 <HAL_GetTick>
 8001d7e:	1bc0      	subs	r0, r0, r7
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d9ab      	bls.n	8001cdc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
}
 8001d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001d88:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001d8a:	bf0c      	ite	eq
 8001d8c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001d90:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001d94:	e7e3      	b.n	8001d5e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001d96:	f7ff f935 	bl	8001004 <HAL_GetTick>
 8001d9a:	1b40      	subs	r0, r0, r5
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9e7      	bls.n	8001d70 <RCCEx_PLL2_Config+0xb4>
 8001da0:	e7f0      	b.n	8001d84 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
 8001da4:	e7ef      	b.n	8001d86 <RCCEx_PLL2_Config+0xca>
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400

08001dac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001dae:	4c3a      	ldr	r4, [pc, #232]	; (8001e98 <RCCEx_PLL3_Config+0xec>)
{
 8001db0:	4606      	mov	r6, r0
 8001db2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d069      	beq.n	8001e92 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc6:	f7ff f91d 	bl	8001004 <HAL_GetTick>
 8001dca:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	d44b      	bmi.n	8001e6a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dd4:	6832      	ldr	r2, [r6, #0]
 8001dd6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001dda:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001dde:	62a3      	str	r3, [r4, #40]	; 0x28
 8001de0:	68b3      	ldr	r3, [r6, #8]
 8001de2:	68f2      	ldr	r2, [r6, #12]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	0412      	lsls	r2, r2, #16
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001df2:	4313      	orrs	r3, r2
 8001df4:	6872      	ldr	r2, [r6, #4]
 8001df6:	3a01      	subs	r2, #1
 8001df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6932      	ldr	r2, [r6, #16]
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0612      	lsls	r2, r2, #24
 8001e04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e0e:	6972      	ldr	r2, [r6, #20]
 8001e10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e14:	4313      	orrs	r3, r2
 8001e16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e1a:	69b2      	ldr	r2, [r6, #24]
 8001e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001e2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e2e:	69f2      	ldr	r2, [r6, #28]
 8001e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e3c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001e3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001e48:	b9b5      	cbnz	r5, 8001e78 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001e50:	4c11      	ldr	r4, [pc, #68]	; (8001e98 <RCCEx_PLL3_Config+0xec>)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5a:	f7ff f8d3 	bl	8001004 <HAL_GetTick>
 8001e5e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	d50f      	bpl.n	8001e86 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001e66:	2000      	movs	r0, #0
 8001e68:	e005      	b.n	8001e76 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001e6a:	f7ff f8cb 	bl	8001004 <HAL_GetTick>
 8001e6e:	1bc0      	subs	r0, r0, r7
 8001e70:	2802      	cmp	r0, #2
 8001e72:	d9ab      	bls.n	8001dcc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001e74:	2003      	movs	r0, #3
}
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001e78:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001e7a:	bf0c      	ite	eq
 8001e7c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001e80:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001e84:	e7e3      	b.n	8001e4e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001e86:	f7ff f8bd 	bl	8001004 <HAL_GetTick>
 8001e8a:	1b40      	subs	r0, r0, r5
 8001e8c:	2802      	cmp	r0, #2
 8001e8e:	d9e7      	bls.n	8001e60 <RCCEx_PLL3_Config+0xb4>
 8001e90:	e7f0      	b.n	8001e74 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7ef      	b.n	8001e76 <RCCEx_PLL3_Config+0xca>
 8001e96:	bf00      	nop
 8001e98:	58024400 	.word	0x58024400

08001e9c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ea0:	6806      	ldr	r6, [r0, #0]
{
 8001ea2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ea4:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001eaa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb0:	d02c      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001eb2:	d811      	bhi.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001eb4:	b1e3      	cbz	r3, 8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8001eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eba:	d01f      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001ebc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	05d8      	lsls	r0, r3, #23
 8001ec2:	f140 80d7 	bpl.w	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	f200 80d2 	bhi.w	8002072 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8001ece:	e8df f003 	tbb	[pc, r3]
 8001ed2:	2922      	.short	0x2922
 8001ed4:	27ca      	.short	0x27ca
 8001ed6:	27          	.byte	0x27
 8001ed7:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001ed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001ede:	4aac      	ldr	r2, [pc, #688]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001ee4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001ee6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6513      	str	r3, [r2, #80]	; 0x50
 8001eee:	e7e6      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ef0:	4aa7      	ldr	r2, [pc, #668]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ef2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001efa:	e7f0      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001efc:	2102      	movs	r1, #2
 8001efe:	3004      	adds	r0, #4
 8001f00:	f7ff fedc 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f04:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1d9      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001f0a:	e7e8      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	3024      	adds	r0, #36	; 0x24
 8001f10:	f7ff ff4c 	bl	8001dac <RCCEx_PLL3_Config>
 8001f14:	e7f6      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f16:	4a9e      	ldr	r2, [pc, #632]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f20:	4634      	mov	r4, r6
 8001f22:	e004      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001f24:	2100      	movs	r1, #0
 8001f26:	1d28      	adds	r0, r5, #4
 8001f28:	f7ff fec8 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001f2c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001f2e:	2c00      	cmp	r4, #0
 8001f30:	f040 80a2 	bne.w	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f34:	4a96      	ldr	r2, [pc, #600]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f36:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001f38:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	0559      	lsls	r1, r3, #21
 8001f46:	d510      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001f48:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8001f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f50:	f000 80b3 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001f54:	f200 8092 	bhi.w	800207c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a2 	beq.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f62:	f000 80a4 	beq.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001f66:	2601      	movs	r6, #1
 8001f68:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	051a      	lsls	r2, r3, #20
 8001f6e:	d510      	bpl.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001f70:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f78:	f000 80c6 	beq.w	8002108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f7c:	f200 80a5 	bhi.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80b5 	beq.w	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8001f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8a:	f000 80b7 	beq.w	80020fc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8001f8e:	2601      	movs	r6, #1
 8001f90:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8001f92:	682b      	ldr	r3, [r5, #0]
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	d50d      	bpl.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8001f98:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	f000 80ce 	beq.w	800213c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8001fa0:	f200 80ba 	bhi.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80ba 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	f000 80c0 	beq.w	8002130 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001fb0:	2601      	movs	r6, #1
 8001fb2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	04df      	lsls	r7, r3, #19
 8001fb8:	d50f      	bpl.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001fba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc0:	f000 80e0 	beq.w	8002184 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8001fc4:	f200 80c2 	bhi.w	800214c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80cf 	beq.w	800216c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd2:	f000 80d1 	beq.w	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8001fd6:	2601      	movs	r6, #1
 8001fd8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001fda:	682b      	ldr	r3, [r5, #0]
 8001fdc:	0498      	lsls	r0, r3, #18
 8001fde:	d50f      	bpl.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001fe0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fe6:	f000 80ef 	beq.w	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8001fea:	f200 80d5 	bhi.w	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80db 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	f000 80e0 	beq.w	80021bc <HAL_RCCEx_PeriphCLKConfig+0x320>
 8001ffc:	2601      	movs	r6, #1
 8001ffe:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	0459      	lsls	r1, r3, #17
 8002004:	d510      	bpl.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002006:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800200a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200e:	f000 80fc 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002012:	f200 80e1 	bhi.w	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80e7 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800201c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002020:	f000 80ed 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002024:	2601      	movs	r6, #1
 8002026:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	d50d      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 800202e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8002030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002034:	f000 80f1 	beq.w	800221a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203c:	f000 80fb 	beq.w	8002236 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80ef 	beq.w	8002224 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002046:	2601      	movs	r6, #1
 8002048:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	01db      	lsls	r3, r3, #7
 800204e:	f140 8108 	bpl.w	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8002052:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002054:	2b03      	cmp	r3, #3
 8002056:	f200 8148 	bhi.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800205a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800205e:	00f9      	.short	0x00f9
 8002060:	014000f4 	.word	0x014000f4
 8002064:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002066:	2100      	movs	r1, #0
 8002068:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800206c:	f7ff fe9e 	bl	8001dac <RCCEx_PLL3_Config>
 8002070:	e75c      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002072:	2601      	movs	r6, #1
 8002074:	4634      	mov	r4, r6
 8002076:	e764      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002078:	4626      	mov	r6, r4
 800207a:	e762      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 800207c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002080:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002084:	d003      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002086:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800208a:	f47f af6c 	bne.w	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 800208e:	b9d4      	cbnz	r4, 80020c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002090:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002092:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8002096:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002098:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800209c:	430b      	orrs	r3, r1
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
 80020a0:	e763      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a2:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80020ac:	e7ef      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020ae:	2100      	movs	r1, #0
 80020b0:	1d28      	adds	r0, r5, #4
 80020b2:	f7ff fe03 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020b6:	4604      	mov	r4, r0
      break;
 80020b8:	e7e9      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020ba:	2100      	movs	r1, #0
 80020bc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80020c0:	f7ff fe74 	bl	8001dac <RCCEx_PLL3_Config>
 80020c4:	e7f7      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80020c6:	4626      	mov	r6, r4
 80020c8:	e74f      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 80020ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020ce:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80020d2:	d003      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80020d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020d8:	f47f af59 	bne.w	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 80020dc:	b9d4      	cbnz	r4, 8002114 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020e0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80020e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	e750      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80020f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80020fa:	e7ef      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020fc:	2100      	movs	r1, #0
 80020fe:	1d28      	adds	r0, r5, #4
 8002100:	f7ff fddc 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002104:	4604      	mov	r4, r0
      break;
 8002106:	e7e9      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002108:	2100      	movs	r1, #0
 800210a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800210e:	f7ff fe4d 	bl	8001dac <RCCEx_PLL3_Config>
 8002112:	e7f7      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8002114:	4626      	mov	r6, r4
 8002116:	e73c      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	f47f af49 	bne.w	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 800211e:	b99c      	cbnz	r4, 8002148 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002122:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002124:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002126:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800212a:	430b      	orrs	r3, r1
 800212c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212e:	e741      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800213a:	e7f0      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800213c:	2102      	movs	r1, #2
 800213e:	1d28      	adds	r0, r5, #4
 8002140:	f7ff fdbc 	bl	8001cbc <RCCEx_PLL2_Config>
 8002144:	4604      	mov	r4, r0
      break;
 8002146:	e7ea      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8002148:	4626      	mov	r6, r4
 800214a:	e733      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 800214c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002150:	d003      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002156:	f47f af3e 	bne.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 800215a:	b9dc      	cbnz	r4, 8002194 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800215e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8002160:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002166:	430b      	orrs	r3, r1
 8002168:	6513      	str	r3, [r2, #80]	; 0x50
 800216a:	e736      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800216e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002176:	e7f0      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002178:	2100      	movs	r1, #0
 800217a:	1d28      	adds	r0, r5, #4
 800217c:	f7ff fd9e 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002180:	4604      	mov	r4, r0
      break;
 8002182:	e7ea      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002184:	2100      	movs	r1, #0
 8002186:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800218a:	f7ff fe0f 	bl	8001dac <RCCEx_PLL3_Config>
 800218e:	e7f7      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002190:	58024400 	.word	0x58024400
 8002194:	4626      	mov	r6, r4
 8002196:	e720      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002198:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800219c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80021a0:	d003      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80021a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021a6:	f47f af29 	bne.w	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 80021aa:	b99c      	cbnz	r4, 80021d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80021ac:	4a8f      	ldr	r2, [pc, #572]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80021ae:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80021b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80021b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6513      	str	r3, [r2, #80]	; 0x50
 80021ba:	e721      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021bc:	2101      	movs	r1, #1
 80021be:	1d28      	adds	r0, r5, #4
 80021c0:	f7ff fd7c 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80021c4:	4604      	mov	r4, r0
      break;
 80021c6:	e7f0      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80021c8:	2101      	movs	r1, #1
 80021ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80021ce:	f7ff fded 	bl	8001dac <RCCEx_PLL3_Config>
 80021d2:	e7f7      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80021d4:	4626      	mov	r6, r4
 80021d6:	e713      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 80021d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021dc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80021e0:	d003      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80021e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80021e6:	f47f af1d 	bne.w	8002024 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 80021ea:	b9a4      	cbnz	r4, 8002216 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80021ec:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80021ee:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80021f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6593      	str	r3, [r2, #88]	; 0x58
 80021fc:	e714      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021fe:	2101      	movs	r1, #1
 8002200:	1d28      	adds	r0, r5, #4
 8002202:	f7ff fd5b 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002206:	4604      	mov	r4, r0
      break;
 8002208:	e7ef      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800220a:	2101      	movs	r1, #1
 800220c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002210:	f7ff fdcc 	bl	8001dac <RCCEx_PLL3_Config>
 8002214:	e7f7      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002216:	4626      	mov	r6, r4
 8002218:	e706      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800221a:	4a74      	ldr	r2, [pc, #464]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800221c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002224:	b96c      	cbnz	r4, 8002242 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002226:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002228:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800222a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800222c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002230:	430b      	orrs	r3, r1
 8002232:	6513      	str	r3, [r2, #80]	; 0x50
 8002234:	e709      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002236:	2101      	movs	r1, #1
 8002238:	1d28      	adds	r0, r5, #4
 800223a:	f7ff fd3f 	bl	8001cbc <RCCEx_PLL2_Config>
 800223e:	4604      	mov	r4, r0
      break;
 8002240:	e7f0      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002242:	4626      	mov	r6, r4
 8002244:	e701      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002246:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002248:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800224a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002250:	2c00      	cmp	r4, #0
 8002252:	d14d      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002256:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002258:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	430b      	orrs	r3, r1
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	025f      	lsls	r7, r3, #9
 8002266:	d54d      	bpl.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002268:	4f61      	ldr	r7, [pc, #388]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002272:	f7fe fec7 	bl	8001004 <HAL_GetTick>
 8002276:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	05d8      	lsls	r0, r3, #23
 800227c:	d53a      	bpl.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 800227e:	2c00      	cmp	r4, #0
 8002280:	d16c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002284:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8002288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228a:	4042      	eors	r2, r0
 800228c:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002290:	d00b      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002294:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800229a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800229e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80022a2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022a6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80022a8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80022aa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80022ae:	d040      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80022b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022ba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022be:	d149      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 80022c0:	6908      	ldr	r0, [r1, #16]
 80022c2:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80022c4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80022c8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80022cc:	4302      	orrs	r2, r0
 80022ce:	610a      	str	r2, [r1, #16]
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80022d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80022d8:	430b      	orrs	r3, r1
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
 80022dc:	e012      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022de:	2102      	movs	r1, #2
 80022e0:	1d28      	adds	r0, r5, #4
 80022e2:	f7ff fceb 	bl	8001cbc <RCCEx_PLL2_Config>
 80022e6:	4604      	mov	r4, r0
      break;
 80022e8:	e7b2      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 80022ea:	2601      	movs	r6, #1
 80022ec:	4634      	mov	r4, r6
 80022ee:	e7b8      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80022f0:	4626      	mov	r6, r4
 80022f2:	e7b6      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe fe86 	bl	8001004 <HAL_GetTick>
 80022f8:	eba0 0008 	sub.w	r0, r0, r8
 80022fc:	2864      	cmp	r0, #100	; 0x64
 80022fe:	d9bb      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8002300:	2603      	movs	r6, #3
 8002302:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002304:	682b      	ldr	r3, [r5, #0]
 8002306:	07da      	lsls	r2, r3, #31
 8002308:	d508      	bpl.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 800230a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800230c:	2b10      	cmp	r3, #16
 800230e:	d03c      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002310:	d826      	bhi.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8002312:	b35b      	cbz	r3, 800236c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002314:	2b08      	cmp	r3, #8
 8002316:	d032      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002318:	2601      	movs	r6, #1
 800231a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	079b      	lsls	r3, r3, #30
 8002320:	d548      	bpl.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002322:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002324:	2b05      	cmp	r3, #5
 8002326:	d85b      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8002328:	e8df f003 	tbb	[pc, r3]
 800232c:	3c54373c 	.word	0x3c54373c
 8002330:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 8002332:	f7fe fe67 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002336:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 800233a:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002340:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8002344:	0799      	lsls	r1, r3, #30
 8002346:	d4b3      	bmi.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fe5c 	bl	8001004 <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	4548      	cmp	r0, r9
 8002350:	d9f6      	bls.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002352:	e7d5      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002354:	690a      	ldr	r2, [r1, #16]
 8002356:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800235a:	e7b8      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800235c:	4626      	mov	r6, r4
 800235e:	e7d1      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002360:	f023 0208 	bic.w	r2, r3, #8
 8002364:	2a20      	cmp	r2, #32
 8002366:	d001      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002368:	2b18      	cmp	r3, #24
 800236a:	d1d5      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 800236c:	b99c      	cbnz	r4, 8002396 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002370:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8002372:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002374:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002378:	430b      	orrs	r3, r1
 800237a:	6553      	str	r3, [r2, #84]	; 0x54
 800237c:	e7ce      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800237e:	2101      	movs	r1, #1
 8002380:	1d28      	adds	r0, r5, #4
 8002382:	f7ff fc9b 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002386:	4604      	mov	r4, r0
      break;
 8002388:	e7f0      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800238a:	2101      	movs	r1, #1
 800238c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002390:	f7ff fd0c 	bl	8001dac <RCCEx_PLL3_Config>
 8002394:	e7f7      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8002396:	4626      	mov	r6, r4
 8002398:	e7c0      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800239a:	2101      	movs	r1, #1
 800239c:	1d28      	adds	r0, r5, #4
 800239e:	f7ff fc8d 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023a2:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80023a4:	b9fc      	cbnz	r4, 80023e6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80023a8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80023aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023ac:	f023 0307 	bic.w	r3, r3, #7
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	075f      	lsls	r7, r3, #29
 80023b8:	d52e      	bpl.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80023ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80023be:	2b05      	cmp	r3, #5
 80023c0:	f200 8134 	bhi.w	800262c <HAL_RCCEx_PeriphCLKConfig+0x790>
 80023c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023c8:	0018001d 	.word	0x0018001d
 80023cc:	001d012c 	.word	0x001d012c
 80023d0:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023d4:	2101      	movs	r1, #1
 80023d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023da:	f7ff fce7 	bl	8001dac <RCCEx_PLL3_Config>
 80023de:	e7e0      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80023e0:	2601      	movs	r6, #1
 80023e2:	4634      	mov	r4, r6
 80023e4:	e7e6      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80023e6:	4626      	mov	r6, r4
 80023e8:	e7e4      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80023ea:	bf00      	nop
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58024800 	.word	0x58024800
 80023f4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023f8:	2101      	movs	r1, #1
 80023fa:	1d28      	adds	r0, r5, #4
 80023fc:	f7ff fc5e 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002400:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002402:	2c00      	cmp	r4, #0
 8002404:	f040 8115 	bne.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002408:	4aac      	ldr	r2, [pc, #688]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800240a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800240e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002410:	f023 0307 	bic.w	r3, r3, #7
 8002414:	430b      	orrs	r3, r1
 8002416:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	0698      	lsls	r0, r3, #26
 800241c:	d510      	bpl.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800241e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002426:	f000 811f 	beq.w	8002668 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800242a:	f200 8104 	bhi.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 810a 	beq.w	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002438:	f000 8110 	beq.w	800265c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800243c:	2601      	movs	r6, #1
 800243e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	0659      	lsls	r1, r3, #25
 8002444:	d510      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002446:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800244a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244e:	f000 812c 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8002452:	f200 8111 	bhi.w	8002678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8117 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002460:	f000 811d 	beq.w	800269e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8002464:	2601      	movs	r6, #1
 8002466:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	061a      	lsls	r2, r3, #24
 800246c:	d510      	bpl.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800246e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002476:	f000 813c 	beq.w	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 800247a:	f200 8121 	bhi.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x824>
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8127 	beq.w	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	f000 812d 	beq.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800248c:	2601      	movs	r6, #1
 800248e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	071b      	lsls	r3, r3, #28
 8002494:	d512      	bpl.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8002496:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249c:	d107      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800249e:	2102      	movs	r1, #2
 80024a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80024a4:	f7ff fc82 	bl	8001dac <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80024a8:	2800      	cmp	r0, #0
 80024aa:	bf18      	it	ne
 80024ac:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80024ae:	4a83      	ldr	r2, [pc, #524]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80024b0:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80024b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	06df      	lsls	r7, r3, #27
 80024c0:	d514      	bpl.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80024c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d107      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80024cc:	2102      	movs	r1, #2
 80024ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80024d2:	f7ff fc6b 	bl	8001dac <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80024d6:	2800      	cmp	r0, #0
 80024d8:	bf18      	it	ne
 80024da:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024dc:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80024de:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80024e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80024e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	0318      	lsls	r0, r3, #12
 80024f0:	d51a      	bpl.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 80024f2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80024f6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80024fa:	f000 8102 	beq.w	8002702 <HAL_RCCEx_PeriphCLKConfig+0x866>
 80024fe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002502:	d006      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002504:	2900      	cmp	r1, #0
 8002506:	f040 8102 	bne.w	800270e <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800250a:	1d28      	adds	r0, r5, #4
 800250c:	f7ff fbd6 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002510:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002512:	2c00      	cmp	r4, #0
 8002514:	f040 80fe 	bne.w	8002714 <HAL_RCCEx_PeriphCLKConfig+0x878>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002518:	4a68      	ldr	r2, [pc, #416]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800251a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800251e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002520:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002524:	430b      	orrs	r3, r1
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	0359      	lsls	r1, r3, #13
 800252c:	d51c      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 800252e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8002532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002536:	f000 80ef 	beq.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800253a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8002540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002544:	f040 80ef 	bne.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002548:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800254a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002552:	2c00      	cmp	r4, #0
 8002554:	f040 80ea 	bne.w	800272c <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800255a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800255e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002560:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002564:	430b      	orrs	r3, r1
 8002566:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	03da      	lsls	r2, r3, #15
 800256c:	d509      	bpl.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 800256e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80dd 	beq.w	8002730 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	f000 80e7 	beq.w	800274c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800257e:	2601      	movs	r6, #1
 8002580:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002582:	682b      	ldr	r3, [r5, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	d507      	bpl.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002588:	2102      	movs	r1, #2
 800258a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800258e:	f7ff fc0d 	bl	8001dac <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8002592:	2800      	cmp	r0, #0
 8002594:	bf18      	it	ne
 8002596:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	039f      	lsls	r7, r3, #14
 800259c:	d50a      	bpl.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 800259e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80025a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80025a4:	f000 80e8 	beq.w	8002778 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80025a8:	f200 80d8 	bhi.w	800275c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80025ac:	2900      	cmp	r1, #0
 80025ae:	f000 80db 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80025b2:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b4:	02d8      	lsls	r0, r3, #11
 80025b6:	d506      	bpl.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b8:	4940      	ldr	r1, [pc, #256]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80025ba:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80025bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80025be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025c2:	4302      	orrs	r2, r0
 80025c4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025c6:	0299      	lsls	r1, r3, #10
 80025c8:	d506      	bpl.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ca:	493c      	ldr	r1, [pc, #240]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80025cc:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80025ce:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80025d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80025d4:	4302      	orrs	r2, r0
 80025d6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80025d8:	005a      	lsls	r2, r3, #1
 80025da:	d509      	bpl.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025dc:	4a37      	ldr	r2, [pc, #220]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80025de:	6911      	ldr	r1, [r2, #16]
 80025e0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80025e4:	6111      	str	r1, [r2, #16]
 80025e6:	6911      	ldr	r1, [r2, #16]
 80025e8:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80025ec:	4301      	orrs	r1, r0
 80025ee:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	da06      	bge.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80025f4:	4931      	ldr	r1, [pc, #196]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80025f6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80025f8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80025fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025fe:	4302      	orrs	r2, r0
 8002600:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	d507      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8002608:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800260c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800260e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002612:	430b      	orrs	r3, r1
 8002614:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002616:	1e30      	subs	r0, r6, #0
 8002618:	bf18      	it	ne
 800261a:	2001      	movne	r0, #1
 800261c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002620:	2101      	movs	r1, #1
 8002622:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002626:	f7ff fbc1 	bl	8001dac <RCCEx_PLL3_Config>
 800262a:	e6e9      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800262c:	2601      	movs	r6, #1
 800262e:	4634      	mov	r4, r6
 8002630:	e6f2      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002632:	4626      	mov	r6, r4
 8002634:	e6f0      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002636:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800263a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800263e:	d003      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8002640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002644:	f47f aefa 	bne.w	800243c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 8002648:	b9a4      	cbnz	r4, 8002674 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800264c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8002650:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002652:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002656:	430b      	orrs	r3, r1
 8002658:	6553      	str	r3, [r2, #84]	; 0x54
 800265a:	e6f1      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800265c:	2100      	movs	r1, #0
 800265e:	1d28      	adds	r0, r5, #4
 8002660:	f7ff fb2c 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002664:	4604      	mov	r4, r0
      break;
 8002666:	e7ef      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002668:	2102      	movs	r1, #2
 800266a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800266e:	f7ff fb9d 	bl	8001dac <RCCEx_PLL3_Config>
 8002672:	e7f7      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8002674:	4626      	mov	r6, r4
 8002676:	e6e3      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002678:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800267c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002680:	d003      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8002682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002686:	f47f aeed 	bne.w	8002464 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 800268a:	b9a4      	cbnz	r4, 80026b6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800268e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8002692:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002694:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002698:	430b      	orrs	r3, r1
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
 800269c:	e6e4      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800269e:	2100      	movs	r1, #0
 80026a0:	1d28      	adds	r0, r5, #4
 80026a2:	f7ff fb0b 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026a6:	4604      	mov	r4, r0
      break;
 80026a8:	e7ef      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026aa:	2102      	movs	r1, #2
 80026ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80026b0:	f7ff fb7c 	bl	8001dac <RCCEx_PLL3_Config>
 80026b4:	e7f7      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80026b6:	4626      	mov	r6, r4
 80026b8:	e6d6      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 80026c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80026c8:	d003      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80026ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80026ce:	f47f aedd 	bne.w	800248c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 80026d2:	b9a4      	cbnz	r4, 80026fe <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80026d4:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80026d6:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80026da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6593      	str	r3, [r2, #88]	; 0x58
 80026e4:	e6d4      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026e6:	2100      	movs	r1, #0
 80026e8:	1d28      	adds	r0, r5, #4
 80026ea:	f7ff fae7 	bl	8001cbc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026ee:	4604      	mov	r4, r0
      break;
 80026f0:	e7ef      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x836>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026f2:	2102      	movs	r1, #2
 80026f4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80026f8:	f7ff fb58 	bl	8001dac <RCCEx_PLL3_Config>
 80026fc:	e7f7      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 80026fe:	4626      	mov	r6, r4
 8002700:	e6c6      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002702:	2102      	movs	r1, #2
 8002704:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002708:	f7ff fb50 	bl	8001dac <RCCEx_PLL3_Config>
 800270c:	e700      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 800270e:	2601      	movs	r6, #1
 8002710:	4634      	mov	r4, r6
 8002712:	e709      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002714:	4626      	mov	r6, r4
 8002716:	e707      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002718:	2101      	movs	r1, #1
 800271a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800271e:	f7ff fb45 	bl	8001dac <RCCEx_PLL3_Config>
 8002722:	4604      	mov	r4, r0
      break;
 8002724:	e715      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 8002726:	2601      	movs	r6, #1
 8002728:	4634      	mov	r4, r6
 800272a:	e71d      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800272c:	4626      	mov	r6, r4
 800272e:	e71b      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002730:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002732:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800273a:	b96c      	cbnz	r4, 8002758 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800273e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8002740:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	430b      	orrs	r3, r1
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	e71a      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800274c:	2102      	movs	r1, #2
 800274e:	1d28      	adds	r0, r5, #4
 8002750:	f7ff fab4 	bl	8001cbc <RCCEx_PLL2_Config>
 8002754:	4604      	mov	r4, r0
      break;
 8002756:	e7f0      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8002758:	4626      	mov	r6, r4
 800275a:	e712      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 800275c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002760:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002764:	f47f af25 	bne.w	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 8002768:	b964      	cbnz	r4, 8002784 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800276a:	4807      	ldr	r0, [pc, #28]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800276c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800276e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002772:	430a      	orrs	r2, r1
 8002774:	6542      	str	r2, [r0, #84]	; 0x54
 8002776:	e71d      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800277a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800277c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002780:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002782:	e7f1      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8002784:	4626      	mov	r6, r4
 8002786:	e715      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8002788:	58024400 	.word	0x58024400

0800278c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800278c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800278e:	f7ff fa4f 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002794:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	f003 031f 	and.w	r3, r3, #31
}
 80027a2:	40d8      	lsrs	r0, r3
 80027a4:	bd08      	pop	{r3, pc}
 80027a6:	bf00      	nop
 80027a8:	58024400 	.word	0x58024400
 80027ac:	0800e474 	.word	0x0800e474

080027b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027b0:	4a4e      	ldr	r2, [pc, #312]	; (80028ec <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80027b2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027b4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80027b6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80027b8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80027ba:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80027be:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80027c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80027c4:	f000 808d 	beq.w	80028e2 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80027c8:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80027cc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80027d0:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027d4:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80027d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80027dc:	434b      	muls	r3, r1
    switch (pllsource)
 80027de:	2c01      	cmp	r4, #1
 80027e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80027e4:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80027e8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 80027ec:	d06b      	beq.n	80028c6 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 80027ee:	2c02      	cmp	r4, #2
 80027f0:	d05b      	beq.n	80028aa <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 80027f2:	2c00      	cmp	r4, #0
 80027f4:	d167      	bne.n	80028c6 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	069b      	lsls	r3, r3, #26
 80027fa:	d546      	bpl.n	800288a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027fc:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80027fe:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002800:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002804:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002806:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800280a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800280c:	ee07 2a10 	vmov	s14, r2
 8002810:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002814:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002818:	ee06 3a90 	vmov	s13, r3
 800281c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002824:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800282a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800282e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002830:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002834:	ee07 3a10 	vmov	s14, r3
 8002838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800283c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002840:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002844:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002848:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800284c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800284e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002852:	ee07 3a10 	vmov	s14, r3
 8002856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800285a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800285e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002862:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002866:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800286a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800286c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002870:	ee07 3a10 	vmov	s14, r3
 8002874:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002878:	ee37 6a06 	vadd.f32	s12, s14, s12
 800287c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002880:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002884:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002888:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800288a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800288c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80028f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002894:	ee07 3a10 	vmov	s14, r3
 8002898:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800289c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028a4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80028a8:	e7be      	b.n	8002828 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028ac:	eddf 5a12 	vldr	s11, [pc, #72]	; 80028f8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80028b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b4:	ee07 3a10 	vmov	s14, r3
 80028b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80028c4:	e7ee      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80028c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80028c8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80028fc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80028cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d0:	ee07 3a10 	vmov	s14, r3
 80028d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80028e0:	e7e0      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80028e2:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80028e6:	6081      	str	r1, [r0, #8]
}
 80028e8:	e7ce      	b.n	8002888 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80028ea:	bf00      	nop
 80028ec:	58024400 	.word	0x58024400
 80028f0:	03d09000 	.word	0x03d09000
 80028f4:	4c742400 	.word	0x4c742400
 80028f8:	4af42400 	.word	0x4af42400
 80028fc:	4a742400 	.word	0x4a742400

08002900 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8002902:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002904:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002906:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002908:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800290a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800290e:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002912:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8002914:	f000 808d 	beq.w	8002a32 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002918:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800291c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002920:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002924:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800292c:	434b      	muls	r3, r1
    switch (pllsource)
 800292e:	2c01      	cmp	r4, #1
 8002930:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002934:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002938:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 800293c:	d06b      	beq.n	8002a16 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 800293e:	2c02      	cmp	r4, #2
 8002940:	d05b      	beq.n	80029fa <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8002942:	2c00      	cmp	r4, #0
 8002944:	d167      	bne.n	8002a16 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002946:	6813      	ldr	r3, [r2, #0]
 8002948:	069b      	lsls	r3, r3, #26
 800294a:	d546      	bpl.n	80029da <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800294c:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800294e:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002950:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002954:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800295a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800295c:	ee07 2a10 	vmov	s14, r2
 8002960:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002964:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002968:	ee06 3a90 	vmov	s13, r3
 800296c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002974:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002978:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800297e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002980:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002984:	ee07 3a10 	vmov	s14, r3
 8002988:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800298c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002990:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002994:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002998:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800299c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800299e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80029a2:	ee07 3a10 	vmov	s14, r3
 80029a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80029ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80029b6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80029ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029bc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80029c0:	ee07 3a10 	vmov	s14, r3
 80029c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029c8:	ee37 6a06 	vadd.f32	s12, s14, s12
 80029cc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80029d0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80029d4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80029da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029dc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002a44 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	ee07 3a10 	vmov	s14, r3
 80029e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80029f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80029f8:	e7be      	b.n	8002978 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80029fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029fc:	eddf 5a12 	vldr	s11, [pc, #72]	; 8002a48 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a04:	ee07 3a10 	vmov	s14, r3
 8002a08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a10:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a14:	e7ee      	b.n	80029f4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002a16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a18:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8002a4c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a20:	ee07 3a10 	vmov	s14, r3
 8002a24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a30:	e7e0      	b.n	80029f4 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002a32:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002a36:	6081      	str	r1, [r0, #8]
}
 8002a38:	e7ce      	b.n	80029d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8002a3a:	bf00      	nop
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	03d09000 	.word	0x03d09000
 8002a44:	4c742400 	.word	0x4c742400
 8002a48:	4af42400 	.word	0x4af42400
 8002a4c:	4a742400 	.word	0x4a742400

08002a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a54:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a56:	69c0      	ldr	r0, [r0, #28]
{
 8002a58:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a5a:	6921      	ldr	r1, [r4, #16]
 8002a5c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a5e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a60:	430a      	orrs	r2, r1
 8002a62:	6961      	ldr	r1, [r4, #20]
 8002a64:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a66:	4999      	ldr	r1, [pc, #612]	; (8002ccc <UART_SetConfig+0x27c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a68:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a6a:	4029      	ands	r1, r5
 8002a6c:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a78:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a7c:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a7e:	4a94      	ldr	r2, [pc, #592]	; (8002cd0 <UART_SetConfig+0x280>)
 8002a80:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a82:	bf1c      	itt	ne
 8002a84:	6a22      	ldrne	r2, [r4, #32]
 8002a86:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8002a8e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a92:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a94:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a96:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	f022 020f 	bic.w	r2, r2, #15
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa2:	4a8c      	ldr	r2, [pc, #560]	; (8002cd4 <UART_SetConfig+0x284>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d11c      	bne.n	8002ae2 <UART_SetConfig+0x92>
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <UART_SetConfig+0x288>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab0:	2b28      	cmp	r3, #40	; 0x28
 8002ab2:	f200 8083 	bhi.w	8002bbc <UART_SetConfig+0x16c>
 8002ab6:	4a89      	ldr	r2, [pc, #548]	; (8002cdc <UART_SetConfig+0x28c>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	f040 8152 	bne.w	8002d66 <UART_SetConfig+0x316>
  {
    switch (clocksource)
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	f200 80d6 	bhi.w	8002c74 <UART_SetConfig+0x224>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d877      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002acc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ad0:	013c0136 	.word	0x013c0136
 8002ad4:	00760076 	.word	0x00760076
 8002ad8:	0076013f 	.word	0x0076013f
 8002adc:	00760076 	.word	0x00760076
 8002ae0:	0144      	.short	0x0144
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ae2:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <UART_SetConfig+0x290>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d107      	bne.n	8002af8 <UART_SetConfig+0xa8>
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <UART_SetConfig+0x288>)
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d863      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002af4:	4a7b      	ldr	r2, [pc, #492]	; (8002ce4 <UART_SetConfig+0x294>)
 8002af6:	e7df      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002af8:	4a7b      	ldr	r2, [pc, #492]	; (8002ce8 <UART_SetConfig+0x298>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d107      	bne.n	8002b0e <UART_SetConfig+0xbe>
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d858      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b0a:	4a78      	ldr	r2, [pc, #480]	; (8002cec <UART_SetConfig+0x29c>)
 8002b0c:	e7d4      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b0e:	4a78      	ldr	r2, [pc, #480]	; (8002cf0 <UART_SetConfig+0x2a0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d107      	bne.n	8002b24 <UART_SetConfig+0xd4>
 8002b14:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d84d      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b20:	4a74      	ldr	r2, [pc, #464]	; (8002cf4 <UART_SetConfig+0x2a4>)
 8002b22:	e7c9      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b24:	4a74      	ldr	r2, [pc, #464]	; (8002cf8 <UART_SetConfig+0x2a8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d107      	bne.n	8002b3a <UART_SetConfig+0xea>
 8002b2a:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d842      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b36:	4a71      	ldr	r2, [pc, #452]	; (8002cfc <UART_SetConfig+0x2ac>)
 8002b38:	e7be      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b3a:	4a71      	ldr	r2, [pc, #452]	; (8002d00 <UART_SetConfig+0x2b0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d107      	bne.n	8002b50 <UART_SetConfig+0x100>
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b48:	2b28      	cmp	r3, #40	; 0x28
 8002b4a:	d837      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b4c:	4a6d      	ldr	r2, [pc, #436]	; (8002d04 <UART_SetConfig+0x2b4>)
 8002b4e:	e7b3      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b50:	4a6d      	ldr	r2, [pc, #436]	; (8002d08 <UART_SetConfig+0x2b8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d107      	bne.n	8002b66 <UART_SetConfig+0x116>
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d82c      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b62:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <UART_SetConfig+0x2bc>)
 8002b64:	e7a8      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b66:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <UART_SetConfig+0x2c0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d107      	bne.n	8002b7c <UART_SetConfig+0x12c>
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d821      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b78:	4a66      	ldr	r2, [pc, #408]	; (8002d14 <UART_SetConfig+0x2c4>)
 8002b7a:	e79d      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b7c:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <UART_SetConfig+0x2c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d107      	bne.n	8002b92 <UART_SetConfig+0x142>
 8002b82:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8a:	2b28      	cmp	r3, #40	; 0x28
 8002b8c:	d816      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <UART_SetConfig+0x2cc>)
 8002b90:	e792      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002b92:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <UART_SetConfig+0x2d0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d107      	bne.n	8002ba8 <UART_SetConfig+0x158>
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <UART_SetConfig+0x288>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba0:	2b28      	cmp	r3, #40	; 0x28
 8002ba2:	d80b      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002ba4:	4a5f      	ldr	r2, [pc, #380]	; (8002d24 <UART_SetConfig+0x2d4>)
 8002ba6:	e787      	b.n	8002ab8 <UART_SetConfig+0x68>
 8002ba8:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <UART_SetConfig+0x280>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d106      	bne.n	8002bbc <UART_SetConfig+0x16c>
 8002bae:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8002bb2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d901      	bls.n	8002bc0 <UART_SetConfig+0x170>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	e00e      	b.n	8002bde <UART_SetConfig+0x18e>
 8002bc0:	4959      	ldr	r1, [pc, #356]	; (8002d28 <UART_SetConfig+0x2d8>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d023      	beq.n	8002c10 <UART_SetConfig+0x1c0>
 8002bc8:	d811      	bhi.n	8002bee <UART_SetConfig+0x19e>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d016      	beq.n	8002bfc <UART_SetConfig+0x1ac>
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d019      	beq.n	8002c06 <UART_SetConfig+0x1b6>
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d1f2      	bne.n	8002bbc <UART_SetConfig+0x16c>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8002bd6:	f7ff fdd9 	bl	800278c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8002bda:	bb10      	cbnz	r0, 8002c22 <UART_SetConfig+0x1d2>
 8002bdc:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002bde:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002be2:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002be6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8002bea:	b007      	add	sp, #28
 8002bec:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d03e      	beq.n	8002c70 <UART_SetConfig+0x220>
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d1e2      	bne.n	8002bbc <UART_SetConfig+0x16c>
 8002bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bfa:	e012      	b.n	8002c22 <UART_SetConfig+0x1d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002bfc:	4668      	mov	r0, sp
 8002bfe:	f7ff fdd7 	bl	80027b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002c02:	9801      	ldr	r0, [sp, #4]
        break;
 8002c04:	e7e9      	b.n	8002bda <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002c06:	a803      	add	r0, sp, #12
 8002c08:	f7ff fe7a 	bl	8002900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002c0c:	9804      	ldr	r0, [sp, #16]
        break;
 8002c0e:	e7e4      	b.n	8002bda <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	4846      	ldr	r0, [pc, #280]	; (8002d2c <UART_SetConfig+0x2dc>)
 8002c14:	f013 0f20 	tst.w	r3, #32
 8002c18:	d003      	beq.n	8002c22 <UART_SetConfig+0x1d2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002c20:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <UART_SetConfig+0x2e0>)
 8002c24:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c26:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c28:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c2c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c30:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c34:	4299      	cmp	r1, r3
 8002c36:	d8c1      	bhi.n	8002bbc <UART_SetConfig+0x16c>
 8002c38:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8002c3c:	d8be      	bhi.n	8002bbc <UART_SetConfig+0x16c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7fd fccb 	bl	80005dc <__aeabi_uldivmod>
 8002c46:	462a      	mov	r2, r5
 8002c48:	0209      	lsls	r1, r1, #8
 8002c4a:	086b      	lsrs	r3, r5, #1
 8002c4c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8002c50:	0200      	lsls	r0, r0, #8
 8002c52:	18c0      	adds	r0, r0, r3
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f141 0100 	adc.w	r1, r1, #0
 8002c5c:	f7fd fcbe 	bl	80005dc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <UART_SetConfig+0x2e4>)
 8002c62:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d8a8      	bhi.n	8002bbc <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	60d8      	str	r0, [r3, #12]
 8002c6e:	e7b5      	b.n	8002bdc <UART_SetConfig+0x18c>
        pclk = (uint32_t) CSI_VALUE;
 8002c70:	4831      	ldr	r0, [pc, #196]	; (8002d38 <UART_SetConfig+0x2e8>)
 8002c72:	e7d6      	b.n	8002c22 <UART_SetConfig+0x1d2>
    switch (clocksource)
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d074      	beq.n	8002d62 <UART_SetConfig+0x312>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d00b      	beq.n	8002c94 <UART_SetConfig+0x244>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d19d      	bne.n	8002bbc <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <UART_SetConfig+0x288>)
 8002c82:	482a      	ldr	r0, [pc, #168]	; (8002d2c <UART_SetConfig+0x2dc>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f012 0f20 	tst.w	r2, #32
 8002c8a:	d003      	beq.n	8002c94 <UART_SetConfig+0x244>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002c92:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <UART_SetConfig+0x2e0>)
 8002c98:	6862      	ldr	r2, [r4, #4]
 8002c9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	0850      	lsrs	r0, r2, #1
 8002ca4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca8:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cac:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb0:	f1a0 0210 	sub.w	r2, r0, #16
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d881      	bhi.n	8002bbc <UART_SetConfig+0x16c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cb8:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cbc:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002cc0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc2:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8002cc4:	4318      	orrs	r0, r3
 8002cc6:	60d0      	str	r0, [r2, #12]
 8002cc8:	e788      	b.n	8002bdc <UART_SetConfig+0x18c>
 8002cca:	bf00      	nop
 8002ccc:	cfff69f3 	.word	0xcfff69f3
 8002cd0:	58000c00 	.word	0x58000c00
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	0800e484 	.word	0x0800e484
 8002ce0:	40004400 	.word	0x40004400
 8002ce4:	0800e4ad 	.word	0x0800e4ad
 8002ce8:	40004800 	.word	0x40004800
 8002cec:	0800e4ad 	.word	0x0800e4ad
 8002cf0:	40004c00 	.word	0x40004c00
 8002cf4:	0800e4ad 	.word	0x0800e4ad
 8002cf8:	40005000 	.word	0x40005000
 8002cfc:	0800e4ad 	.word	0x0800e4ad
 8002d00:	40011400 	.word	0x40011400
 8002d04:	0800e484 	.word	0x0800e484
 8002d08:	40007800 	.word	0x40007800
 8002d0c:	0800e4ad 	.word	0x0800e4ad
 8002d10:	40007c00 	.word	0x40007c00
 8002d14:	0800e4ad 	.word	0x0800e4ad
 8002d18:	40011800 	.word	0x40011800
 8002d1c:	0800e484 	.word	0x0800e484
 8002d20:	40011c00 	.word	0x40011c00
 8002d24:	0800e484 	.word	0x0800e484
 8002d28:	0800e4b3 	.word	0x0800e4b3
 8002d2c:	03d09000 	.word	0x03d09000
 8002d30:	0800e4ba 	.word	0x0800e4ba
 8002d34:	000ffcff 	.word	0x000ffcff
 8002d38:	003d0900 	.word	0x003d0900
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f7fe ff9a 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d40:	2800      	cmp	r0, #0
 8002d42:	f43f af4b 	beq.w	8002bdc <UART_SetConfig+0x18c>
 8002d46:	e7a5      	b.n	8002c94 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d48:	f7fe ffa6 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
        break;
 8002d4c:	e7f8      	b.n	8002d40 <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d4e:	4668      	mov	r0, sp
 8002d50:	f7ff fd2e 	bl	80027b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002d54:	9801      	ldr	r0, [sp, #4]
        break;
 8002d56:	e7f3      	b.n	8002d40 <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d58:	a803      	add	r0, sp, #12
 8002d5a:	f7ff fdd1 	bl	8002900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002d5e:	9804      	ldr	r0, [sp, #16]
        break;
 8002d60:	e7ee      	b.n	8002d40 <UART_SetConfig+0x2f0>
        pclk = (uint32_t) CSI_VALUE;
 8002d62:	482b      	ldr	r0, [pc, #172]	; (8002e10 <UART_SetConfig+0x3c0>)
 8002d64:	e796      	b.n	8002c94 <UART_SetConfig+0x244>
    switch (clocksource)
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d818      	bhi.n	8002d9c <UART_SetConfig+0x34c>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	f63f af26 	bhi.w	8002bbc <UART_SetConfig+0x16c>
 8002d70:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0x328>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002ddf 	.word	0x08002ddf
 8002d7c:	08002deb 	.word	0x08002deb
 8002d80:	08002bbd 	.word	0x08002bbd
 8002d84:	08002bbd 	.word	0x08002bbd
 8002d88:	08002df1 	.word	0x08002df1
 8002d8c:	08002bbd 	.word	0x08002bbd
 8002d90:	08002bbd 	.word	0x08002bbd
 8002d94:	08002bbd 	.word	0x08002bbd
 8002d98:	08002dfb 	.word	0x08002dfb
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d031      	beq.n	8002e04 <UART_SetConfig+0x3b4>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d031      	beq.n	8002e08 <UART_SetConfig+0x3b8>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	f47f af09 	bne.w	8002bbc <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <UART_SetConfig+0x3c4>)
 8002dac:	481a      	ldr	r0, [pc, #104]	; (8002e18 <UART_SetConfig+0x3c8>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f012 0f20 	tst.w	r2, #32
 8002db4:	d003      	beq.n	8002dbe <UART_SetConfig+0x36e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002dbc:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dc0:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <UART_SetConfig+0x3cc>)
 8002dc2:	6863      	ldr	r3, [r4, #4]
 8002dc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002dc8:	fbb0 f0f2 	udiv	r0, r0, r2
 8002dcc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002dd0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8002ddc:	e743      	b.n	8002c66 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7fe ff49 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002de2:	2800      	cmp	r0, #0
 8002de4:	f43f aefa 	beq.w	8002bdc <UART_SetConfig+0x18c>
 8002de8:	e7e9      	b.n	8002dbe <UART_SetConfig+0x36e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dea:	f7fe ff55 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
        break;
 8002dee:	e7f8      	b.n	8002de2 <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002df0:	4668      	mov	r0, sp
 8002df2:	f7ff fcdd 	bl	80027b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002df6:	9801      	ldr	r0, [sp, #4]
        break;
 8002df8:	e7f3      	b.n	8002de2 <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dfa:	a803      	add	r0, sp, #12
 8002dfc:	f7ff fd80 	bl	8002900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8002e00:	9804      	ldr	r0, [sp, #16]
        break;
 8002e02:	e7ee      	b.n	8002de2 <UART_SetConfig+0x392>
        pclk = (uint32_t) CSI_VALUE;
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <UART_SetConfig+0x3c0>)
 8002e06:	e7da      	b.n	8002dbe <UART_SetConfig+0x36e>
    switch (clocksource)
 8002e08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e0c:	e7d7      	b.n	8002dbe <UART_SetConfig+0x36e>
 8002e0e:	bf00      	nop
 8002e10:	003d0900 	.word	0x003d0900
 8002e14:	58024400 	.word	0x58024400
 8002e18:	03d09000 	.word	0x03d09000
 8002e1c:	0800e4ba 	.word	0x0800e4ba

08002e20 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e22:	07da      	lsls	r2, r3, #31
{
 8002e24:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e26:	d506      	bpl.n	8002e36 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e28:	6801      	ldr	r1, [r0, #0]
 8002e2a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002e2c:	684a      	ldr	r2, [r1, #4]
 8002e2e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e32:	4322      	orrs	r2, r4
 8002e34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e36:	079c      	lsls	r4, r3, #30
 8002e38:	d506      	bpl.n	8002e48 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e3a:	6801      	ldr	r1, [r0, #0]
 8002e3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e3e:	684a      	ldr	r2, [r1, #4]
 8002e40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e44:	4322      	orrs	r2, r4
 8002e46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e48:	0759      	lsls	r1, r3, #29
 8002e4a:	d506      	bpl.n	8002e5a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e4c:	6801      	ldr	r1, [r0, #0]
 8002e4e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e50:	684a      	ldr	r2, [r1, #4]
 8002e52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e56:	4322      	orrs	r2, r4
 8002e58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e5a:	071a      	lsls	r2, r3, #28
 8002e5c:	d506      	bpl.n	8002e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e5e:	6801      	ldr	r1, [r0, #0]
 8002e60:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e62:	684a      	ldr	r2, [r1, #4]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	4322      	orrs	r2, r4
 8002e6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e6c:	06dc      	lsls	r4, r3, #27
 8002e6e:	d506      	bpl.n	8002e7e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e70:	6801      	ldr	r1, [r0, #0]
 8002e72:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e7a:	4322      	orrs	r2, r4
 8002e7c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e7e:	0699      	lsls	r1, r3, #26
 8002e80:	d506      	bpl.n	8002e90 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e82:	6801      	ldr	r1, [r0, #0]
 8002e84:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002e86:	688a      	ldr	r2, [r1, #8]
 8002e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8c:	4322      	orrs	r2, r4
 8002e8e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e90:	065a      	lsls	r2, r3, #25
 8002e92:	d510      	bpl.n	8002eb6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e94:	6801      	ldr	r1, [r0, #0]
 8002e96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e98:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e9e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002ea2:	ea42 0204 	orr.w	r2, r2, r4
 8002ea6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ea8:	d105      	bne.n	8002eb6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eaa:	684a      	ldr	r2, [r1, #4]
 8002eac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002eae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002eb2:	4322      	orrs	r2, r4
 8002eb4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	d506      	bpl.n	8002ec8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eba:	6802      	ldr	r2, [r0, #0]
 8002ebc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002ebe:	6853      	ldr	r3, [r2, #4]
 8002ec0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6053      	str	r3, [r2, #4]
  }
}
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ece:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	460e      	mov	r6, r1
 8002ed6:	4615      	mov	r5, r2
 8002ed8:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	69d3      	ldr	r3, [r2, #28]
 8002ede:	ea36 0303 	bics.w	r3, r6, r3
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	42ab      	cmp	r3, r5
 8002eea:	d001      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2000      	movs	r0, #0
 8002eee:	e027      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002ef4:	d0f2      	beq.n	8002edc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe f885 	bl	8001004 <HAL_GetTick>
 8002efa:	1bc0      	subs	r0, r0, r7
 8002efc:	4540      	cmp	r0, r8
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	d802      	bhi.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002f02:	f1b8 0f00 	cmp.w	r8, #0
 8002f06:	d11d      	bne.n	8002f44 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	e840 3200 	strex	r2, r3, [r0]
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d1f7      	bne.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	f100 0308 	add.w	r3, r0, #8
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	f100 0108 	add.w	r1, r0, #8
 8002f28:	e841 3200 	strex	r2, r3, [r1]
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d1f3      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002f30:	2320      	movs	r3, #32
 8002f32:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8002f3a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002f3c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f44:	6803      	ldr	r3, [r0, #0]
 8002f46:	075a      	lsls	r2, r3, #29
 8002f48:	d5c7      	bpl.n	8002eda <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f4a:	69c3      	ldr	r3, [r0, #28]
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	d5c4      	bpl.n	8002eda <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f54:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	e840 3200 	strex	r2, r3, [r0]
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d1f7      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	f100 0308 	add.w	r3, r0, #8
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	f100 0108 	add.w	r1, r0, #8
 8002f76:	e841 3200 	strex	r2, r3, [r1]
 8002f7a:	2a00      	cmp	r2, #0
 8002f7c:	d1f3      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002f84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002f8c:	e7d5      	b.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x70>

08002f8e <HAL_UART_Transmit>:
{
 8002f8e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002f92:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002f94:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9c:	2b20      	cmp	r3, #32
{
 8002f9e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa0:	d150      	bne.n	8003044 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8002fa2:	2900      	cmp	r1, #0
 8002fa4:	d04c      	beq.n	8003040 <HAL_UART_Transmit+0xb2>
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	d04a      	beq.n	8003040 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002faa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d048      	beq.n	8003044 <HAL_UART_Transmit+0xb6>
 8002fb2:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002fb6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fba:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f81e 	bl	8001004 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002fca:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8002fcc:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002fd4:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	d103      	bne.n	8002fe2 <HAL_UART_Transmit+0x54>
 8002fda:	6922      	ldr	r2, [r4, #16]
 8002fdc:	b90a      	cbnz	r2, 8002fe2 <HAL_UART_Transmit+0x54>
 8002fde:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002fe0:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8002fe8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fec:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	b942      	cbnz	r2, 8003006 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f7ff ff67 	bl	8002eca <UART_WaitOnFlagUntilTimeout>
 8002ffc:	b958      	cbnz	r0, 8003016 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002ffe:	2320      	movs	r3, #32
 8003000:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8003004:	e008      	b.n	8003018 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003006:	2200      	movs	r2, #0
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	4620      	mov	r0, r4
 800300c:	9303      	str	r3, [sp, #12]
 800300e:	f7ff ff5c 	bl	8002eca <UART_WaitOnFlagUntilTimeout>
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	b118      	cbz	r0, 800301e <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8003016:	2003      	movs	r0, #3
}
 8003018:	b004      	add	sp, #16
 800301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800301e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003020:	b95e      	cbnz	r6, 800303a <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003022:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003026:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800302c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8003030:	3a01      	subs	r2, #1
 8003032:	b292      	uxth	r2, r2
 8003034:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8003038:	e7d6      	b.n	8002fe8 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800303a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800303e:	e7f4      	b.n	800302a <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e7e9      	b.n	8003018 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8003044:	2002      	movs	r0, #2
 8003046:	e7e7      	b.n	8003018 <HAL_UART_Transmit+0x8a>

08003048 <HAL_UART_Receive>:
{
 8003048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800304c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800304e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8003056:	2b20      	cmp	r3, #32
{
 8003058:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800305a:	d16a      	bne.n	8003132 <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 800305c:	2900      	cmp	r1, #0
 800305e:	d066      	beq.n	800312e <HAL_UART_Receive+0xe6>
 8003060:	2a00      	cmp	r2, #0
 8003062:	d064      	beq.n	800312e <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 8003064:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003068:	2b01      	cmp	r3, #1
 800306a:	d062      	beq.n	8003132 <HAL_UART_Receive+0xea>
 800306c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306e:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8003072:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003076:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800307c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8003084:	f7fd ffbe 	bl	8001004 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003088:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800308a:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 800308c:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8003094:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8003098:	d11d      	bne.n	80030d6 <HAL_UART_Receive+0x8e>
 800309a:	6922      	ldr	r2, [r4, #16]
 800309c:	b9ca      	cbnz	r2, 80030d2 <HAL_UART_Receive+0x8a>
 800309e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80030a2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 80030aa:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ae:	d123      	bne.n	80030f8 <HAL_UART_Receive+0xb0>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	bb0b      	cbnz	r3, 80030f8 <HAL_UART_Receive+0xb0>
 80030b4:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 80030b6:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 80030b8:	2300      	movs	r3, #0
 80030ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 80030be:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80030c2:	b290      	uxth	r0, r2
 80030c4:	b9d0      	cbnz	r0, 80030fc <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 80030c6:	2320      	movs	r3, #32
 80030c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80030cc:	b003      	add	sp, #12
 80030ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	e7e5      	b.n	80030a2 <HAL_UART_Receive+0x5a>
 80030d6:	b923      	cbnz	r3, 80030e2 <HAL_UART_Receive+0x9a>
 80030d8:	6922      	ldr	r2, [r4, #16]
 80030da:	2a00      	cmp	r2, #0
 80030dc:	d0f9      	beq.n	80030d2 <HAL_UART_Receive+0x8a>
 80030de:	227f      	movs	r2, #127	; 0x7f
 80030e0:	e7df      	b.n	80030a2 <HAL_UART_Receive+0x5a>
 80030e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e6:	d104      	bne.n	80030f2 <HAL_UART_Receive+0xaa>
 80030e8:	6922      	ldr	r2, [r4, #16]
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d0f7      	beq.n	80030de <HAL_UART_Receive+0x96>
 80030ee:	223f      	movs	r2, #63	; 0x3f
 80030f0:	e7d7      	b.n	80030a2 <HAL_UART_Receive+0x5a>
 80030f2:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 80030f6:	e7d6      	b.n	80030a6 <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 80030f8:	2600      	movs	r6, #0
 80030fa:	e7dd      	b.n	80030b8 <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030fc:	464b      	mov	r3, r9
 80030fe:	2200      	movs	r2, #0
 8003100:	2120      	movs	r1, #32
 8003102:	4620      	mov	r0, r4
 8003104:	9700      	str	r7, [sp, #0]
 8003106:	f7ff fee0 	bl	8002eca <UART_WaitOnFlagUntilTimeout>
 800310a:	b9a0      	cbnz	r0, 8003136 <HAL_UART_Receive+0xee>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8003114:	b945      	cbnz	r5, 8003128 <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003116:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800311a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800311e:	3a01      	subs	r2, #1
 8003120:	b292      	uxth	r2, r2
 8003122:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8003126:	e7ca      	b.n	80030be <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003128:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 800312c:	e7f5      	b.n	800311a <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 800312e:	2001      	movs	r0, #1
 8003130:	e7cc      	b.n	80030cc <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8003132:	2002      	movs	r0, #2
 8003134:	e7ca      	b.n	80030cc <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 8003136:	2003      	movs	r0, #3
 8003138:	e7c8      	b.n	80030cc <HAL_UART_Receive+0x84>

0800313a <UART_CheckIdleState>:
{
 800313a:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	2500      	movs	r5, #0
{
 800313e:	4604      	mov	r4, r0
 8003140:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8003146:	f7fd ff5d 	bl	8001004 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800314a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800314c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	0711      	lsls	r1, r2, #28
 8003152:	d417      	bmi.n	8003184 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	0752      	lsls	r2, r2, #29
 800315a:	d509      	bpl.n	8003170 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003160:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003164:	4620      	mov	r0, r4
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	f7ff feae 	bl	8002eca <UART_WaitOnFlagUntilTimeout>
 800316e:	b9b0      	cbnz	r0, 800319e <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8003170:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003174:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003178:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003180:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8003182:	e00d      	b.n	80031a0 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003184:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003188:	9003      	str	r0, [sp, #12]
 800318a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800318e:	4620      	mov	r0, r4
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	462a      	mov	r2, r5
 8003194:	f7ff fe99 	bl	8002eca <UART_WaitOnFlagUntilTimeout>
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	2800      	cmp	r0, #0
 800319c:	d0da      	beq.n	8003154 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800319e:	2003      	movs	r0, #3
}
 80031a0:	b005      	add	sp, #20
 80031a2:	bd30      	pop	{r4, r5, pc}

080031a4 <HAL_UART_Init>:
{
 80031a4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80031a6:	4604      	mov	r4, r0
 80031a8:	b350      	cbz	r0, 8003200 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80031ae:	b91b      	cbnz	r3, 80031b8 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80031b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80031b4:	f7fd fda2 	bl	8000cfc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80031b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031ba:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031bc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80031be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ca:	f7ff fc41 	bl	8002a50 <UART_SetConfig>
 80031ce:	2801      	cmp	r0, #1
 80031d0:	d016      	beq.n	8003200 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031d4:	b113      	cbz	r3, 80031dc <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff fe22 	bl	8002e20 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031dc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80031de:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
}
 80031f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80031fa:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031fc:	f7ff bf9d 	b.w	800313a <UART_CheckIdleState>
}
 8003200:	2001      	movs	r0, #1
 8003202:	bd10      	pop	{r4, pc}

08003204 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003204:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003206:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003208:	b91b      	cbnz	r3, 8003212 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800320a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800320e:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003210:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003212:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003214:	4d0a      	ldr	r5, [pc, #40]	; (8003240 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003216:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003218:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800321a:	4c0a      	ldr	r4, [pc, #40]	; (8003244 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800321c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003220:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003222:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003224:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	fbb3 f3f1 	udiv	r3, r3, r1
 800322c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003230:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003232:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	fbb3 f3f2 	udiv	r3, r3, r2
 800323a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800323e:	e7e7      	b.n	8003210 <UARTEx_SetNbDataToProcess+0xc>
 8003240:	0800e4da 	.word	0x0800e4da
 8003244:	0800e4d2 	.word	0x0800e4d2

08003248 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003248:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800324c:	2b01      	cmp	r3, #1
 800324e:	d014      	beq.n	800327a <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003250:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003252:	2324      	movs	r3, #36	; 0x24
 8003254:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003258:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800325a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800325c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800326a:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800326c:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800326e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003272:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8003276:	4618      	mov	r0, r3
 8003278:	4770      	bx	lr
  __HAL_LOCK(huart);
 800327a:	2002      	movs	r0, #2
}
 800327c:	4770      	bx	lr

0800327e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800327e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003280:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8003284:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003286:	2b01      	cmp	r3, #1
 8003288:	d01b      	beq.n	80032c2 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800328a:	2301      	movs	r3, #1
 800328c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003290:	2324      	movs	r3, #36	; 0x24
 8003292:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80032a8:	4311      	orrs	r1, r2
 80032aa:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032ac:	f7ff ffaa 	bl	8003204 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032b0:	6803      	ldr	r3, [r0, #0]
 80032b2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032b4:	2320      	movs	r3, #32
 80032b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80032c0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80032c2:	2002      	movs	r0, #2
 80032c4:	e7fc      	b.n	80032c0 <HAL_UARTEx_SetTxFifoThreshold+0x42>

080032c6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80032c6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80032c8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 80032cc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d01b      	beq.n	800330a <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80032d2:	2301      	movs	r3, #1
 80032d4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80032d8:	2324      	movs	r3, #36	; 0x24
 80032da:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032de:	6803      	ldr	r3, [r0, #0]
 80032e0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80032f0:	4311      	orrs	r1, r2
 80032f2:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032f4:	f7ff ff86 	bl	8003204 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032f8:	6803      	ldr	r3, [r0, #0]
 80032fa:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032fc:	2320      	movs	r3, #32
 80032fe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003302:	2000      	movs	r0, #0
 8003304:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003308:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800330a:	2002      	movs	r0, #2
 800330c:	e7fc      	b.n	8003308 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08003310 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 8003312:	2001      	movs	r0, #1
{
 8003314:	460e      	mov	r6, r1
 8003316:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003318:	4d0c      	ldr	r5, [pc, #48]	; (800334c <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 800331a:	2700      	movs	r7, #0
  while (count) {
 800331c:	b93c      	cbnz	r4, 800332e <write_callback+0x1e>
 800331e:	e00b      	b.n	8003338 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8003320:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003324:	18ea      	adds	r2, r5, r3
      count--;
 8003326:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003328:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 800332a:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800332c:	702b      	strb	r3, [r5, #0]
 800332e:	782b      	ldrb	r3, [r5, #0]
 8003330:	2b1f      	cmp	r3, #31
 8003332:	d802      	bhi.n	800333a <write_callback+0x2a>
 8003334:	2c00      	cmp	r4, #0
 8003336:	d1f3      	bne.n	8003320 <write_callback+0x10>
    }
  }
  return res;
}
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 800333a:	2b20      	cmp	r3, #32
 800333c:	d1ee      	bne.n	800331c <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800333e:	2121      	movs	r1, #33	; 0x21
 8003340:	4628      	mov	r0, r5
 8003342:	f000 fdab 	bl	8003e9c <ioRawWriteBuffer>
      o_packet.pw = 0;
 8003346:	702f      	strb	r7, [r5, #0]
 8003348:	e7e8      	b.n	800331c <write_callback+0xc>
 800334a:	bf00      	nop
 800334c:	24000d60 	.word	0x24000d60

08003350 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8003350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003354:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8003356:	4614      	mov	r4, r2
 8003358:	b1f2      	cbz	r2, 8003398 <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 800335a:	4d1d      	ldr	r5, [pc, #116]	; (80033d0 <read_callback+0x80>)
 800335c:	4e1d      	ldr	r6, [pc, #116]	; (80033d4 <read_callback+0x84>)
 800335e:	782b      	ldrb	r3, [r5, #0]
 8003360:	2bff      	cmp	r3, #255	; 0xff
 8003362:	d11b      	bne.n	800339c <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003364:	2121      	movs	r1, #33	; 0x21
 8003366:	4628      	mov	r0, r5
 8003368:	f000 fda6 	bl	8003eb8 <ioRawReadBuffer>
  i_ridx = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 8003370:	b9a0      	cbnz	r0, 800339c <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 8003372:	b003      	add	sp, #12
 8003374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8003378:	5cea      	ldrb	r2, [r5, r3]
      count--;
 800337a:	3c01      	subs	r4, #1
      *pw = i_packet.payload[i_ridx];
 800337c:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003380:	782a      	ldrb	r2, [r5, #0]
 8003382:	3a01      	subs	r2, #1
 8003384:	702a      	strb	r2, [r5, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	7828      	ldrb	r0, [r5, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	b158      	cbz	r0, 80033a6 <read_callback+0x56>
 800338e:	3301      	adds	r3, #1
 8003390:	2c00      	cmp	r4, #0
 8003392:	d1f1      	bne.n	8003378 <read_callback+0x28>
 8003394:	b102      	cbz	r2, 8003398 <read_callback+0x48>
 8003396:	6031      	str	r1, [r6, #0]
 8003398:	2001      	movs	r0, #1
 800339a:	e7ea      	b.n	8003372 <read_callback+0x22>
 800339c:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80033a0:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80033d0 <read_callback+0x80>
 80033a4:	e011      	b.n	80033ca <read_callback+0x7a>
 80033a6:	b102      	cbz	r2, 80033aa <read_callback+0x5a>
 80033a8:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	d0f4      	beq.n	8003398 <read_callback+0x48>
      uint8_t sync = 0xAA;
 80033ae:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 80033b0:	2101      	movs	r1, #1
 80033b2:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 80033b6:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 80033ba:	f000 fd6f 	bl	8003e9c <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80033be:	2121      	movs	r1, #33	; 0x21
 80033c0:	4640      	mov	r0, r8
 80033c2:	f000 fd79 	bl	8003eb8 <ioRawReadBuffer>
  i_ridx = 0;
 80033c6:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 80033ca:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80033cc:	2200      	movs	r2, #0
 80033ce:	e7db      	b.n	8003388 <read_callback+0x38>
 80033d0:	24000d38 	.word	0x24000d38
 80033d4:	24000d5c 	.word	0x24000d5c

080033d8 <pb_io_flush_ostream>:
{
 80033d8:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80033da:	4c06      	ldr	r4, [pc, #24]	; (80033f4 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80033dc:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80033de:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80033e0:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80033e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033e6:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80033e8:	f000 fd58 	bl	8003e9c <ioRawWriteBuffer>
  o_packet.pw = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	7023      	strb	r3, [r4, #0]
}
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	bf00      	nop
 80033f4:	24000d60 	.word	0x24000d60

080033f8 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <pb_io_flush_istream+0x10>)
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80033fe:	2200      	movs	r2, #0
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <pb_io_flush_istream+0x14>)
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	24000d38 	.word	0x24000d38
 800340c:	24000d5c 	.word	0x24000d5c

08003410 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8003410:	2200      	movs	r2, #0
 8003412:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <pb_io_ostream+0x18>)
 8003418:	e9c0 2100 	strd	r2, r1, [r0]
 800341c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 8003420:	b510      	push	{r4, lr}
  return stream;
 8003422:	6082      	str	r2, [r0, #8]
}
 8003424:	bd10      	pop	{r4, pc}
 8003426:	bf00      	nop
 8003428:	08003311 	.word	0x08003311

0800342c <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 800342c:	2200      	movs	r2, #0
 800342e:	60c2      	str	r2, [r0, #12]
  return stream;
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <pb_io_istream+0x14>)
 8003432:	e9c0 2100 	strd	r2, r1, [r0]
 8003436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800343a:	6082      	str	r2, [r0, #8]
}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	08003351 	.word	0x08003351

08003444 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8003444:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8003446:	f000 fd45 	bl	8003ed4 <ioRawDisableLLWrite>
  return 0;
}
 800344a:	2000      	movs	r0, #0
 800344c:	bd08      	pop	{r3, pc}

0800344e <aiPbBuffer_read_cb3>:
  return (uint32_t)aiFmt;
}

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 800344e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8003450:	6814      	ldr	r4, [r2, #0]
  int maxr = bm->n_max;  /* number of item w/o padding */
  msg = (aiBufferByteMsg *)bm->msg;
  format = aiPbMsgFmtToAiFmt(msg->shape.format);

  /* Check shape/format */
  bm->err = EnumError_E_NONE;
 8003452:	2100      	movs	r1, #0
{
 8003454:	4606      	mov	r6, r0
  msg = (aiBufferByteMsg *)bm->msg;
 8003456:	6923      	ldr	r3, [r4, #16]
  int maxr = bm->n_max;  /* number of item w/o padding */
 8003458:	f8d4 c004 	ldr.w	ip, [r4, #4]
  return (ai_buffer_format)msgFmt;
 800345c:	681a      	ldr	r2, [r3, #0]
  bm->err = EnumError_E_NONE;
 800345e:	60e1      	str	r1, [r4, #12]
  if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 8003460:	2a40      	cmp	r2, #64	; 0x40
 8003462:	d003      	beq.n	800346c <aiPbBuffer_read_cb3+0x1e>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	6807      	ldr	r7, [r0, #0]
 8003468:	4297      	cmp	r7, r2
 800346a:	d011      	beq.n	8003490 <aiPbBuffer_read_cb3+0x42>
    maxr = 0;
    bm->err = EnumError_E_INVALID_FORMAT;
 800346c:	2302      	movs	r3, #2
  } else if ((msg->shape.channels != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_CHANNEL)) ||
      (msg->shape.height != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_HEIGHT)) ||
      (msg->shape.width != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_WIDTH)) ||
      (msg->shape.n_batches != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH)) ) {
    maxr = 0;
 800346e:	2500      	movs	r5, #0
    bm->err = EnumError_E_INVALID_SHAPE;
 8003470:	60e3      	str	r3, [r4, #12]
#endif
    bm->n_max = maxr;
  }

  /* Read data */
  uint8_t *pw = (uint8_t *)bm->buffer->data;
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	685f      	ldr	r7, [r3, #4]
  while (stream->bytes_left) {
 8003476:	68b3      	ldr	r3, [r6, #8]
 8003478:	bb5b      	cbnz	r3, 80034d2 <aiPbBuffer_read_cb3+0x84>
    }
    bm->n_ops++;
  }

  /* Check nb_op */
  if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 800347a:	68e3      	ldr	r3, [r4, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d13b      	bne.n	80034f8 <aiPbBuffer_read_cb3+0xaa>
 8003480:	2001      	movs	r0, #1
 8003482:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d000      	beq.n	800348c <aiPbBuffer_read_cb3+0x3e>
    bm->err = EnumError_E_INVALID_SIZE;
 800348a:	60e0      	str	r0, [r4, #12]

  return true;
}
 800348c:	b003      	add	sp, #12
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if ((msg->shape.channels != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_CHANNEL)) ||
 8003490:	6982      	ldr	r2, [r0, #24]
 8003492:	691d      	ldr	r5, [r3, #16]
 8003494:	6851      	ldr	r1, [r2, #4]
 8003496:	428d      	cmp	r5, r1
 8003498:	d10b      	bne.n	80034b2 <aiPbBuffer_read_cb3+0x64>
 800349a:	68d1      	ldr	r1, [r2, #12]
 800349c:	689d      	ldr	r5, [r3, #8]
 800349e:	428d      	cmp	r5, r1
 80034a0:	d107      	bne.n	80034b2 <aiPbBuffer_read_cb3+0x64>
      (msg->shape.height != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_HEIGHT)) ||
 80034a2:	6891      	ldr	r1, [r2, #8]
 80034a4:	68dd      	ldr	r5, [r3, #12]
 80034a6:	428d      	cmp	r5, r1
 80034a8:	d103      	bne.n	80034b2 <aiPbBuffer_read_cb3+0x64>
      (msg->shape.width != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_WIDTH)) ||
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	4299      	cmp	r1, r3
 80034b0:	d001      	beq.n	80034b6 <aiPbBuffer_read_cb3+0x68>
    bm->err = EnumError_E_INVALID_SHAPE;
 80034b2:	2305      	movs	r3, #5
 80034b4:	e7db      	b.n	800346e <aiPbBuffer_read_cb3+0x20>
  if (maxr) {
 80034b6:	f1bc 0f00 	cmp.w	ip, #0
 80034ba:	d008      	beq.n	80034ce <aiPbBuffer_read_cb3+0x80>
    maxr = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer), format);
 80034bc:	2101      	movs	r1, #1
 80034be:	f003 f839 	bl	8006534 <ai_buffer_get_size>
 80034c2:	4639      	mov	r1, r7
 80034c4:	f003 f866 	bl	8006594 <ai_buffer_get_byte_size>
 80034c8:	4605      	mov	r5, r0
    bm->n_max = maxr;
 80034ca:	6060      	str	r0, [r4, #4]
 80034cc:	e7d1      	b.n	8003472 <aiPbBuffer_read_cb3+0x24>
 80034ce:	4665      	mov	r5, ip
 80034d0:	e7cf      	b.n	8003472 <aiPbBuffer_read_cb3+0x24>
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 80034d2:	2201      	movs	r2, #1
 80034d4:	4669      	mov	r1, sp
 80034d6:	4630      	mov	r0, r6
 80034d8:	f002 f810 	bl	80054fc <pb_read>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d0d5      	beq.n	800348c <aiPbBuffer_read_cb3+0x3e>
    if (maxr > 0) {
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	dd05      	ble.n	80034f0 <aiPbBuffer_read_cb3+0xa2>
      if (pw) {
 80034e4:	b11f      	cbz	r7, 80034ee <aiPbBuffer_read_cb3+0xa0>
        *pw = *(uint8_t *)&number;
 80034e6:	f89d 3000 	ldrb.w	r3, [sp]
 80034ea:	f807 3b01 	strb.w	r3, [r7], #1
      maxr--;
 80034ee:	3d01      	subs	r5, #1
    bm->n_ops++;
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60a3      	str	r3, [r4, #8]
 80034f6:	e7be      	b.n	8003476 <aiPbBuffer_read_cb3+0x28>
  return true;
 80034f8:	2001      	movs	r0, #1
 80034fa:	e7c7      	b.n	800348c <aiPbBuffer_read_cb3+0x3e>

080034fc <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 80034fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8003500:	6814      	ldr	r4, [r2, #0]
{
 8003502:	4605      	mov	r5, r0
 8003504:	460e      	mov	r6, r1
  size_t n_bytes;

  int maxw = bm->n_max;
 8003506:	6867      	ldr	r7, [r4, #4]
  ai_buffer_format format;

  if ((maxw == 0) || (!bm->buffer))
 8003508:	b31f      	cbz	r7, 8003552 <aiPbBuffer_write_cb3+0x56>
 800350a:	6820      	ldr	r0, [r4, #0]
 800350c:	b308      	cbz	r0, 8003552 <aiPbBuffer_write_cb3+0x56>

  format = bm->buffer->format;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  n_bytes = aiPbAiBufferSize(bm->buffer) * AI_BUFFER_FMT_GET_BITS(format) / 8;
#else
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 800350e:	2101      	movs	r1, #1
  format = bm->buffer->format;
 8003510:	f8d0 8000 	ldr.w	r8, [r0]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 8003514:	f003 f80e 	bl	8006534 <ai_buffer_get_size>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	4641      	mov	r1, r8
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4358      	muls	r0, r3
 8003522:	f003 f837 	bl	8006594 <ai_buffer_get_byte_size>
#endif

  /* Write data */
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8003526:	6823      	ldr	r3, [r4, #0]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 8003528:	9001      	str	r0, [sp, #4]

  if (!pb_encode_tag_for_field(stream, field))
 800352a:	4631      	mov	r1, r6
 800352c:	4628      	mov	r0, r5
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 800352e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (!pb_encode_tag_for_field(stream, field))
 8003532:	f002 fdf9 	bl	8006128 <pb_encode_tag_for_field>
 8003536:	9a01      	ldr	r2, [sp, #4]
 8003538:	b918      	cbnz	r0, 8003542 <aiPbBuffer_write_cb3+0x46>
    return false;
 800353a:	2000      	movs	r0, #0
    return false;

  bm->n_ops = maxw;

  return true;
}
 800353c:	b002      	add	sp, #8
 800353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pb_encode_string(stream, pr, n_bytes))
 8003542:	4641      	mov	r1, r8
 8003544:	4628      	mov	r0, r5
 8003546:	f002 ff49 	bl	80063dc <pb_encode_string>
 800354a:	2800      	cmp	r0, #0
 800354c:	d0f5      	beq.n	800353a <aiPbBuffer_write_cb3+0x3e>
  bm->n_ops = maxw;
 800354e:	60a7      	str	r7, [r4, #8]
  return true;
 8003550:	e7f4      	b.n	800353c <aiPbBuffer_write_cb3+0x40>
    return true;
 8003552:	2001      	movs	r0, #1
 8003554:	e7f2      	b.n	800353c <aiPbBuffer_write_cb3+0x40>

08003556 <aiPbMgrSetMetaInfo.constprop.0>:
}

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
  shape->scale = 0.0f;
 8003556:	2300      	movs	r3, #0
  shape->zeropoint = 0;
 8003558:	2200      	movs	r2, #0
static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
 800355a:	b510      	push	{r4, lr}
  shape->scale = 0.0f;
 800355c:	614b      	str	r3, [r1, #20]
  shape->zeropoint = 0;
 800355e:	618a      	str	r2, [r1, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003560:	b1a0      	cbz	r0, 800358c <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8003562:	6802      	ldr	r2, [r0, #0]
 8003564:	07d2      	lsls	r2, r2, #31
 8003566:	d511      	bpl.n	800358c <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8003568:	6840      	ldr	r0, [r0, #4]
 800356a:	b178      	cbz	r0, 800358c <aiPbMgrSetMetaInfo.constprop.0+0x36>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800356c:	6842      	ldr	r2, [r0, #4]
 800356e:	b11a      	cbz	r2, 8003578 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 8003570:	8844      	ldrh	r4, [r0, #2]
 8003572:	b10c      	cbz	r4, 8003578 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	614b      	str	r3, [r1, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800357a:	8803      	ldrh	r3, [r0, #0]
 800357c:	079b      	lsls	r3, r3, #30
 800357e:	d506      	bpl.n	800358e <aiPbMgrSetMetaInfo.constprop.0+0x38>
 8003580:	b16a      	cbz	r2, 800359e <aiPbMgrSetMetaInfo.constprop.0+0x48>
 8003582:	8843      	ldrh	r3, [r0, #2]
 8003584:	b10b      	cbz	r3, 800358a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	618b      	str	r3, [r1, #24]
  }
}
 800358c:	bd10      	pop	{r4, pc}
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800358e:	b132      	cbz	r2, 800359e <aiPbMgrSetMetaInfo.constprop.0+0x48>
 8003590:	8843      	ldrh	r3, [r0, #2]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f9      	beq.n	800358a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 8003596:	6853      	ldr	r3, [r2, #4]
 8003598:	f993 3000 	ldrsb.w	r3, [r3]
 800359c:	e7f5      	b.n	800358a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 800359e:	4613      	mov	r3, r2
 80035a0:	e7f3      	b.n	800358a <aiPbMgrSetMetaInfo.constprop.0+0x34>

080035a2 <init_aibuffer_msg>:
}


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
  if ((!aibuffer) || (!msg))
 80035a2:	4602      	mov	r2, r0
{
 80035a4:	b430      	push	{r4, r5}
  if ((!aibuffer) || (!msg))
 80035a6:	b180      	cbz	r0, 80035ca <init_aibuffer_msg+0x28>
    msg->zeropoint = 0;
  }
#else
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);

  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 80035a8:	6814      	ldr	r4, [r2, #0]
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 80035aa:	6880      	ldr	r0, [r0, #8]
  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 80035ac:	600c      	str	r4, [r1, #0]
  msg->channels = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_CHANNEL);
 80035ae:	6994      	ldr	r4, [r2, #24]
  msg->height = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_HEIGHT);
  msg->width = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_WIDTH);
  msg->n_batches = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_BATCH);
  msg->addr = (uint32_t)aibuffer->data;
 80035b0:	6852      	ldr	r2, [r2, #4]
  msg->channels = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_CHANNEL);
 80035b2:	6865      	ldr	r5, [r4, #4]
 80035b4:	610d      	str	r5, [r1, #16]
  msg->height = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_HEIGHT);
 80035b6:	68e5      	ldr	r5, [r4, #12]
 80035b8:	608d      	str	r5, [r1, #8]
  msg->width = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_WIDTH);
 80035ba:	68a5      	ldr	r5, [r4, #8]
 80035bc:	60cd      	str	r5, [r1, #12]
  msg->n_batches = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_BATCH);
 80035be:	6824      	ldr	r4, [r4, #0]
  msg->addr = (uint32_t)aibuffer->data;
 80035c0:	61ca      	str	r2, [r1, #28]
  msg->n_batches = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_BATCH);
 80035c2:	604c      	str	r4, [r1, #4]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
#endif
}
 80035c4:	bc30      	pop	{r4, r5}
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 80035c6:	f7ff bfc6 	b.w	8003556 <aiPbMgrSetMetaInfo.constprop.0>
}
 80035ca:	bc30      	pop	{r4, r5}
 80035cc:	4770      	bx	lr
	...

080035d0 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d4:	261c      	movs	r6, #28
 80035d6:	b088      	sub	sp, #32
 80035d8:	4605      	mov	r5, r0
 80035da:	460f      	mov	r7, r1
 80035dc:	4614      	mov	r4, r2
 80035de:	fb06 2603 	mla	r6, r6, r3, r2
    if (!pb_encode_tag_for_field(stream, field))
      return false;

    init_aibuffer_msg(&aibuffer[i], &msg);

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 80035e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800361c <nn_shape_w_cb+0x4c>
  for (int i = 0; i < maxw; i++) {
 80035e6:	42b4      	cmp	r4, r6
 80035e8:	d101      	bne.n	80035ee <nn_shape_w_cb+0x1e>
      return false;
  }
  return true;
 80035ea:	2001      	movs	r0, #1
 80035ec:	e005      	b.n	80035fa <nn_shape_w_cb+0x2a>
    if (!pb_encode_tag_for_field(stream, field))
 80035ee:	4639      	mov	r1, r7
 80035f0:	4628      	mov	r0, r5
 80035f2:	f002 fd99 	bl	8006128 <pb_encode_tag_for_field>
 80035f6:	b918      	cbnz	r0, 8003600 <nn_shape_w_cb+0x30>
      return false;
 80035f8:	2000      	movs	r0, #0
}
 80035fa:	b008      	add	sp, #32
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    init_aibuffer_msg(&aibuffer[i], &msg);
 8003600:	4620      	mov	r0, r4
 8003602:	4669      	mov	r1, sp
 8003604:	f7ff ffcd 	bl	80035a2 <init_aibuffer_msg>
    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8003608:	466a      	mov	r2, sp
 800360a:	4641      	mov	r1, r8
 800360c:	4628      	mov	r0, r5
 800360e:	341c      	adds	r4, #28
 8003610:	f002 ff34 	bl	800647c <pb_encode_submessage>
 8003614:	2800      	cmp	r0, #0
 8003616:	d1e6      	bne.n	80035e6 <nn_shape_w_cb+0x16>
 8003618:	e7ee      	b.n	80035f8 <nn_shape_w_cb+0x28>
 800361a:	bf00      	nop
 800361c:	0804a11c 	.word	0x0804a11c

08003620 <nn_outputs_w_cb>:
}

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
  ai_network_report *report = (ai_network_report *)*arg;
 8003620:	6812      	ldr	r2, [r2, #0]

  if (!report)
 8003622:	b11a      	cbz	r2, 800362c <nn_outputs_w_cb+0xc>
    return true;

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 8003624:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8003626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003628:	f7ff bfd2 	b.w	80035d0 <nn_shape_w_cb>
}
 800362c:	2001      	movs	r0, #1
 800362e:	4770      	bx	lr

08003630 <nn_inputs_w_cb>:
  ai_network_report *report = (ai_network_report *)*arg;
 8003630:	6812      	ldr	r2, [r2, #0]
  if (!report)
 8003632:	b11a      	cbz	r2, 800363c <nn_inputs_w_cb+0xc>
  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 8003634:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8003636:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003638:	f7ff bfca 	b.w	80035d0 <nn_shape_w_cb>
}
 800363c:	2001      	movs	r0, #1
 800363e:	4770      	bx	lr

08003640 <aiPbMgrInit>:
{
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003642:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003644:	4c1a      	ldr	r4, [pc, #104]	; (80036b0 <aiPbMgrInit+0x70>)
 8003646:	f44f 7220 	mov.w	r2, #640	; 0x280
 800364a:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 800364c:	ad06      	add	r5, sp, #24
{
 800364e:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003650:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 8003652:	f104 0610 	add.w	r6, r4, #16
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003656:	f007 fe4f 	bl	800b2f8 <memset>
  pb_io_stream_init();
 800365a:	f7ff fef3 	bl	8003444 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 800365e:	4628      	mov	r0, r5
 8003660:	2100      	movs	r1, #0
 8003662:	f7ff fee3 	bl	800342c <pb_io_istream>
 8003666:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 800366a:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 800366c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8003670:	2100      	movs	r1, #0
 8003672:	4668      	mov	r0, sp
 8003674:	f7ff fecc 	bl	8003410 <pb_io_ostream>
 8003678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 8003680:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8003682:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 8003686:	b97f      	cbnz	r7, 80036a8 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8003688:	2301      	movs	r3, #1
 800368a:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
}
 800368e:	b00b      	add	sp, #44	; 0x2c
 8003690:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8003692:	320c      	adds	r2, #12
 8003694:	462b      	mov	r3, r5
 8003696:	2101      	movs	r1, #1
    while (cfunc->process) {
 8003698:	6850      	ldr	r0, [r2, #4]
 800369a:	1c5d      	adds	r5, r3, #1
 800369c:	2800      	cmp	r0, #0
 800369e:	d1f8      	bne.n	8003692 <aiPbMgrInit+0x52>
 80036a0:	b101      	cbz	r1, 80036a4 <aiPbMgrInit+0x64>
 80036a2:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 80036a4:	6267      	str	r7, [r4, #36]	; 0x24
 80036a6:	e7ef      	b.n	8003688 <aiPbMgrInit+0x48>
 80036a8:	463a      	mov	r2, r7
 80036aa:	4619      	mov	r1, r3
 80036ac:	e7f4      	b.n	8003698 <aiPbMgrInit+0x58>
 80036ae:	bf00      	nop
 80036b0:	24000d84 	.word	0x24000d84

080036b4 <aiPbMgrSendResp>:
{
 80036b4:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80036b6:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 80036b8:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80036ba:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 80036bc:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80036be:	4804      	ldr	r0, [pc, #16]	; (80036d0 <aiPbMgrSendResp+0x1c>)
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <aiPbMgrSendResp+0x20>)
 80036c2:	f002 fe57 	bl	8006374 <pb_encode>
}
 80036c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80036ca:	f7ff be85 	b.w	80033d8 <pb_io_flush_ostream>
 80036ce:	bf00      	nop
 80036d0:	24000d94 	.word	0x24000d94
 80036d4:	0804a424 	.word	0x0804a424

080036d8 <aiPbMgrWaitAndProcess>:
{
 80036d8:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80036da:	4c1d      	ldr	r4, [pc, #116]	; (8003750 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 80036dc:	f7ff fe8c 	bl	80033f8 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80036e0:	491c      	ldr	r1, [pc, #112]	; (8003754 <aiPbMgrWaitAndProcess+0x7c>)
 80036e2:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80036e6:	4620      	mov	r0, r4
 80036e8:	f002 fb4a 	bl	8005d80 <pb_decode_delimited>
 80036ec:	b348      	cbz	r0, 8003742 <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 80036ee:	f7ff fe83 	bl	80033f8 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 80036f2:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80036f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80036f6:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 80036f8:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 80036fc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8003700:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003702:	42a9      	cmp	r1, r5
 8003704:	d00d      	beq.n	8003722 <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8003706:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8003708:	f813 6b0c 	ldrb.w	r6, [r3], #12
 800370c:	4286      	cmp	r6, r0
 800370e:	d11c      	bne.n	800374a <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8003710:	4911      	ldr	r1, [pc, #68]	; (8003758 <aiPbMgrWaitAndProcess+0x80>)
 8003712:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8003716:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
 800371a:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 800371c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800371e:	42ab      	cmp	r3, r5
 8003720:	d10c      	bne.n	800373c <aiPbMgrWaitAndProcess+0x64>
  aiPbMgrSendResp(req, resp, state);
 8003722:	490d      	ldr	r1, [pc, #52]	; (8003758 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8003724:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8003726:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8003728:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
  resp->payload.ack.param = param;
 800372c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  resp->which_payload = respMsg_ack_tag;
 8003730:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
  resp->payload.ack.error = error;
 8003734:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  aiPbMgrSendResp(req, resp, state);
 8003738:	f7ff ffbc 	bl	80036b4 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 800373c:	2301      	movs	r3, #1
 800373e:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
  pb_io_flush_istream();
 8003742:	f7ff fe59 	bl	80033f8 <pb_io_flush_istream>
}
 8003746:	2000      	movs	r0, #0
 8003748:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800374a:	3501      	adds	r5, #1
 800374c:	e7d9      	b.n	8003702 <aiPbMgrWaitAndProcess+0x2a>
 800374e:	bf00      	nop
 8003750:	24000d84 	.word	0x24000d84
 8003754:	0804a3ca 	.word	0x0804a3ca
 8003758:	24000e00 	.word	0x24000e00

0800375c <aiPbMgrSendAck>:
{
 800375c:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 800375e:	260c      	movs	r6, #12
{
 8003760:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 8003764:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 8003766:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8003768:	730d      	strb	r5, [r1, #12]
}
 800376a:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 800376c:	f7ff bfa2 	b.w	80036b4 <aiPbMgrSendResp>

08003770 <aiPbMgrWaitAck>:
{
 8003770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ackMsg ack = ackMsg_init_default;
 8003772:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003774:	aa02      	add	r2, sp, #8
 8003776:	4907      	ldr	r1, [pc, #28]	; (8003794 <aiPbMgrWaitAck+0x24>)
 8003778:	4807      	ldr	r0, [pc, #28]	; (8003798 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003780:	f002 fafe 	bl	8005d80 <pb_decode_delimited>
 8003784:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8003786:	f7ff fe37 	bl	80033f8 <pb_io_flush_istream>
}
 800378a:	9801      	ldr	r0, [sp, #4]
 800378c:	b005      	add	sp, #20
 800378e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003792:	bf00      	nop
 8003794:	0804a0b8 	.word	0x0804a0b8
 8003798:	24000d84 	.word	0x24000d84

0800379c <aiPbAiBufferSize>:
  if (!buffer)
 800379c:	b100      	cbz	r0, 80037a0 <aiPbAiBufferSize+0x4>
    return buffer->size;
 800379e:	6900      	ldr	r0, [r0, #16]
}
 80037a0:	4770      	bx	lr
	...

080037a4 <aiPbMgrReceiveAiBuffer3>:
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4615      	mov	r5, r2
 80037a8:	b090      	sub	sp, #64	; 0x40
  hdlb.n_ops = 0;
 80037aa:	2200      	movs	r2, #0
{
 80037ac:	4606      	mov	r6, r0
 80037ae:	460c      	mov	r4, r1
  hdlb.buffer = buffer;
 80037b0:	9301      	str	r3, [sp, #4]
  hdlb.n_ops = 0;
 80037b2:	9203      	str	r2, [sp, #12]
  hdlb.err = EnumError_E_NONE;
 80037b4:	9204      	str	r2, [sp, #16]
  if (!buffer)
 80037b6:	b103      	cbz	r3, 80037ba <aiPbMgrReceiveAiBuffer3+0x16>
    return buffer->size;
 80037b8:	691b      	ldr	r3, [r3, #16]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 80037ba:	9302      	str	r3, [sp, #8]
  hdlb.msg = &msg;
 80037bc:	aa06      	add	r2, sp, #24
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <aiPbMgrReceiveAiBuffer3+0x6c>)
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80037c0:	4914      	ldr	r1, [pc, #80]	; (8003814 <aiPbMgrReceiveAiBuffer3+0x70>)
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80037c2:	930e      	str	r3, [sp, #56]	; 0x38
  msg.datas.arg = &hdlb;
 80037c4:	ab01      	add	r3, sp, #4
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <aiPbMgrReceiveAiBuffer3+0x74>)
  hdlb.msg = &msg;
 80037c8:	9205      	str	r2, [sp, #20]
  msg.datas.arg = &hdlb;
 80037ca:	930f      	str	r3, [sp, #60]	; 0x3c
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80037cc:	f002 fad8 	bl	8005d80 <pb_decode_delimited>
  pb_io_flush_istream();
 80037d0:	f7ff fe12 	bl	80033f8 <pb_io_flush_istream>
  if (hdlb.err) {
 80037d4:	220c      	movs	r2, #12
 80037d6:	9b04      	ldr	r3, [sp, #16]
  resp->which_payload = respMsg_ack_tag;
 80037d8:	80e2      	strh	r2, [r4, #6]
  if (hdlb.err) {
 80037da:	b14b      	cbz	r3, 80037f0 <aiPbMgrReceiveAiBuffer3+0x4c>
  aiPbMgrSendResp(req, resp, state);
 80037dc:	4630      	mov	r0, r6
 80037de:	2204      	movs	r2, #4
 80037e0:	4621      	mov	r1, r4
  resp->payload.ack.param = param;
 80037e2:	60a3      	str	r3, [r4, #8]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 80037e4:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 80037e6:	f7ff ff65 	bl	80036b4 <aiPbMgrSendResp>
    res = false;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	b010      	add	sp, #64	; 0x40
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
  resp->payload.ack.param = param;
 80037f0:	9a03      	ldr	r2, [sp, #12]
  aiPbMgrSendResp(req, resp, state);
 80037f2:	4621      	mov	r1, r4
 80037f4:	4630      	mov	r0, r6
  resp->payload.ack.error = error;
 80037f6:	7323      	strb	r3, [r4, #12]
  resp->payload.ack.param = param;
 80037f8:	60a2      	str	r2, [r4, #8]
  aiPbMgrSendResp(req, resp, state);
 80037fa:	462a      	mov	r2, r5
    if ((state == EnumState_S_WAITING) ||
 80037fc:	3d01      	subs	r5, #1
  aiPbMgrSendResp(req, resp, state);
 80037fe:	f7ff ff59 	bl	80036b4 <aiPbMgrSendResp>
    if ((state == EnumState_S_WAITING) ||
 8003802:	2d01      	cmp	r5, #1
 8003804:	d801      	bhi.n	800380a <aiPbMgrReceiveAiBuffer3+0x66>
      aiPbMgrWaitAck();
 8003806:	f7ff ffb3 	bl	8003770 <aiPbMgrWaitAck>
  bool res = true;
 800380a:	2001      	movs	r0, #1
 800380c:	e7ee      	b.n	80037ec <aiPbMgrReceiveAiBuffer3+0x48>
 800380e:	bf00      	nop
 8003810:	0800344f 	.word	0x0800344f
 8003814:	0804a0e5 	.word	0x0804a0e5
 8003818:	24000d84 	.word	0x24000d84

0800381c <aiPbMgrSendAiBuffer4>:
{
 800381c:	b5f0      	push	{r4, r5, r6, r7, lr}
    hdlb.n_max  = 0;
 800381e:	2b00      	cmp	r3, #0
{
 8003820:	b087      	sub	sp, #28
 8003822:	460c      	mov	r4, r1
 8003824:	4607      	mov	r7, r0
 8003826:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8003828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  hdlb.n_ops = 0;
 800382c:	f04f 0100 	mov.w	r1, #0
{
 8003830:	4616      	mov	r6, r2
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 8003832:	68a8      	ldr	r0, [r5, #8]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 8003834:	692a      	ldr	r2, [r5, #16]
    hdlb.n_max  = 0;
 8003836:	bfb8      	it	lt
 8003838:	460a      	movlt	r2, r1
  resp->payload.node.type = type;
 800383a:	60a3      	str	r3, [r4, #8]
  resp->payload.node.id = id;
 800383c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hdlb.n_max  = 0;
 800383e:	9202      	str	r2, [sp, #8]
  resp->which_payload = respMsg_node_tag;
 8003840:	220e      	movs	r2, #14
  resp->payload.node.id = id;
 8003842:	60e3      	str	r3, [r4, #12]
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 8003844:	682b      	ldr	r3, [r5, #0]
  hdlb.err = EnumError_E_NONE;
 8003846:	9104      	str	r1, [sp, #16]
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 8003848:	6163      	str	r3, [r4, #20]
  resp->payload.node.buffer.shape.n_batches = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 800384a:	69ab      	ldr	r3, [r5, #24]
  resp->payload.node.duration = dur_ms;
 800384c:	ed84 0a04 	vstr	s0, [r4, #16]
  hdlb.n_ops = 0;
 8003850:	9103      	str	r1, [sp, #12]
  resp->which_payload = respMsg_node_tag;
 8003852:	80e2      	strh	r2, [r4, #6]
  resp->payload.node.buffer.shape.n_batches = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003854:	681a      	ldr	r2, [r3, #0]
  hdlb.buffer = (ai_buffer *)buffer;
 8003856:	9501      	str	r5, [sp, #4]
  resp->payload.node.buffer.shape.n_batches = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003858:	61a2      	str	r2, [r4, #24]
  resp->payload.node.buffer.shape.height = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT);
 800385a:	68da      	ldr	r2, [r3, #12]
  hdlb.msg = NULL;
 800385c:	9105      	str	r1, [sp, #20]
  resp->payload.node.buffer.shape.height = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT);
 800385e:	61e2      	str	r2, [r4, #28]
  resp->payload.node.buffer.shape.width = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH);
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	6222      	str	r2, [r4, #32]
  resp->payload.node.buffer.shape.channels = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL);
 8003864:	685b      	ldr	r3, [r3, #4]
  resp->payload.node.buffer.shape.addr = 0;
 8003866:	6321      	str	r1, [r4, #48]	; 0x30
  resp->payload.node.buffer.shape.channels = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL);
 8003868:	6263      	str	r3, [r4, #36]	; 0x24
  if (meta_info && scale == 0.0f)
 800386a:	b1b8      	cbz	r0, 800389c <aiPbMgrSendAiBuffer4+0x80>
 800386c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8003870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003874:	d112      	bne.n	800389c <aiPbMgrSendAiBuffer4+0x80>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 8003876:	f104 0114 	add.w	r1, r4, #20
 800387a:	f7ff fe6c 	bl	8003556 <aiPbMgrSetMetaInfo.constprop.0>
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <aiPbMgrSendAiBuffer4+0x90>)
  aiPbMgrSendResp(req, resp, state);
 8003880:	4632      	mov	r2, r6
 8003882:	4621      	mov	r1, r4
 8003884:	4638      	mov	r0, r7
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8003886:	6363      	str	r3, [r4, #52]	; 0x34
  resp->payload.node.buffer.datas.arg = &hdlb;
 8003888:	ab01      	add	r3, sp, #4
 800388a:	63a3      	str	r3, [r4, #56]	; 0x38
  aiPbMgrSendResp(req, resp, state);
 800388c:	f7ff ff12 	bl	80036b4 <aiPbMgrSendResp>
  if (state == EnumState_S_PROCESSING)
 8003890:	2e02      	cmp	r6, #2
 8003892:	d108      	bne.n	80038a6 <aiPbMgrSendAiBuffer4+0x8a>
    return aiPbMgrWaitAck();
 8003894:	f7ff ff6c 	bl	8003770 <aiPbMgrWaitAck>
}
 8003898:	b007      	add	sp, #28
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 800389c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    resp->payload.node.buffer.shape.scale = scale;
 800389e:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 80038a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038a4:	e7eb      	b.n	800387e <aiPbMgrSendAiBuffer4+0x62>
    return true;
 80038a6:	2001      	movs	r0, #1
 80038a8:	e7f6      	b.n	8003898 <aiPbMgrSendAiBuffer4+0x7c>
 80038aa:	bf00      	nop
 80038ac:	080034fd 	.word	0x080034fd

080038b0 <aiPbCmdSync>:
{
 80038b0:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80038b2:	240a      	movs	r4, #10
 80038b4:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80038b6:	f240 2402 	movw	r4, #514	; 0x202
 80038ba:	608c      	str	r4, [r1, #8]
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80038bc:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 80038be:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80038c0:	f044 0402 	orr.w	r4, r4, #2
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80038c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80038c8:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80038ca:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80038cc:	2200      	movs	r2, #0
}
 80038ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80038d2:	f7ff beef 	b.w	80036b4 <aiPbMgrSendResp>

080038d6 <aiPbCmdSysInfo>:
{
 80038d6:	b538      	push	{r3, r4, r5, lr}
  resp->which_payload = respMsg_sinfo_tag;
 80038d8:	230b      	movs	r3, #11
{
 80038da:	460c      	mov	r4, r1
 80038dc:	4605      	mov	r5, r0
  resp->which_payload = respMsg_sinfo_tag;
 80038de:	80cb      	strh	r3, [r1, #6]
  resp->payload.sinfo.devid = HAL_GetDEVID();
 80038e0:	f7fd fbb2 	bl	8001048 <HAL_GetDEVID>
 80038e4:	60a0      	str	r0, [r4, #8]
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 80038e6:	f7fd ffdd 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 80038ea:	60e0      	str	r0, [r4, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 80038ec:	f7fe f9a0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 80038f0:	6120      	str	r0, [r4, #16]
  resp->payload.sinfo.cache = getFlashCacheConf();
 80038f2:	f000 fba9 	bl	8004048 <getFlashCacheConf>
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80038f6:	4621      	mov	r1, r4
  resp->payload.sinfo.cache = getFlashCacheConf();
 80038f8:	6160      	str	r0, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80038fa:	2200      	movs	r2, #0
 80038fc:	4628      	mov	r0, r5
}
 80038fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003902:	f7ff bed7 	b.w	80036b4 <aiPbMgrSendResp>
	...

08003908 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8003908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800390a:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <aiPbStrCopy+0x4c>)
{
 800390e:	4605      	mov	r5, r0
 8003910:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8003912:	6810      	ldr	r0, [r2, #0]
 8003914:	ab01      	add	r3, sp, #4
 8003916:	6851      	ldr	r1, [r2, #4]
 8003918:	8912      	ldrh	r2, [r2, #8]
 800391a:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 800391c:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 800391e:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8003920:	f7fc fcf6 	bl	8000310 <strlen>

  if (l > max)
 8003924:	42b0      	cmp	r0, r6
    l = max-1;
 8003926:	bf88      	it	hi
 8003928:	f106 30ff 	addhi.w	r0, r6, #4294967295	; 0xffffffff

  if (!dst)
 800392c:	b184      	cbz	r4, 8003950 <aiPbStrCopy+0x48>
    return;

  if (src && l)
 800392e:	b138      	cbz	r0, 8003940 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8003930:	1c42      	adds	r2, r0, #1
 8003932:	4629      	mov	r1, r5
 8003934:	4620      	mov	r0, r4
  else
    memcpy(dst, undef, strlen(undef)+1);
}
 8003936:	b004      	add	sp, #16
 8003938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 800393c:	f007 bcce 	b.w	800b2dc <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8003940:	a801      	add	r0, sp, #4
 8003942:	f7fc fce5 	bl	8000310 <strlen>
 8003946:	a901      	add	r1, sp, #4
 8003948:	1c42      	adds	r2, r0, #1
 800394a:	4620      	mov	r0, r4
 800394c:	f007 fcc6 	bl	800b2dc <memcpy>
}
 8003950:	b004      	add	sp, #16
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	0800dd40 	.word	0x0800dd40

08003958 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
  if (!ver)
 8003958:	b108      	cbz	r0, 800395e <aiPbVersionToUint32+0x6>
    return 0;

  return ver->major << 24 | ver->minor << 16
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	ba00      	rev	r0, r0
      | ver->micro << 8 | ver->reserved;
}
 800395e:	4770      	bx	lr

08003960 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 8003960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003964:	461d      	mov	r5, r3
  resp->which_payload = respMsg_ninfo_tag;
 8003966:	2314      	movs	r3, #20
{
 8003968:	460c      	mov	r4, r1
 800396a:	b096      	sub	sp, #88	; 0x58
  resp->which_payload = respMsg_ninfo_tag;
 800396c:	80cb      	strh	r3, [r1, #6]
{
 800396e:	4607      	mov	r7, r0

  aiPbStrCopy(nn->model_name,
 8003970:	3108      	adds	r1, #8
 8003972:	6828      	ldr	r0, [r5, #0]
{
 8003974:	4690      	mov	r8, r2
  aiPbStrCopy(nn->model_name,
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	f7ff ffc6 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8003982:	6868      	ldr	r0, [r5, #4]
 8003984:	f7ff ffc0 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 8003988:	2240      	movs	r2, #64	; 0x40
 800398a:	f104 0188 	add.w	r1, r4, #136	; 0x88
 800398e:	68a8      	ldr	r0, [r5, #8]
 8003990:	f7ff ffba 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800399a:	68e8      	ldr	r0, [r5, #12]
 800399c:	f7ff ffb4 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	f504 7184 	add.w	r1, r4, #264	; 0x108
 80039a6:	6928      	ldr	r0, [r5, #16]
 80039a8:	f7ff ffae 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 80039ac:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 80039b0:	69a8      	ldr	r0, [r5, #24]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	f7ff ffa8 	bl	8003908 <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 80039b8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
  resp->payload.ninfo.n_nodes = nn->n_nodes;
  resp->payload.ninfo.n_macc = nn->n_macc;

  resp->payload.ninfo.signature = nn->signature;
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 80039ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
  resp->payload.ninfo.n_inputs = nn->n_inputs;
 80039be:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 80039c2:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80039c4:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 80039c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039ca:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 80039ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80039d0:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  resp->payload.ninfo.signature = nn->signature;
 80039d4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80039d6:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
      aiPbVersionToUint32(&nn->api_version);
 80039da:	f7ff ffbd 	bl	8003958 <aiPbVersionToUint32>
  resp->payload.ninfo.api_version =
 80039de:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 80039e2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80039e6:	f7ff ffb7 	bl	8003958 <aiPbVersionToUint32>
  resp->payload.ninfo.interface_api_version =
 80039ea:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 80039ee:	f105 0014 	add.w	r0, r5, #20
 80039f2:	f7ff ffb1 	bl	8003958 <aiPbVersionToUint32>
  resp->payload.ninfo.runtime_version =
 80039f6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 80039fa:	f105 001c 	add.w	r0, r5, #28
 80039fe:	f7ff ffab 	bl	8003958 <aiPbVersionToUint32>
  resp->payload.ninfo.tool_version =
 8003a02:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 8003a06:	f105 0020 	add.w	r0, r5, #32
 8003a0a:	f7ff ffa5 	bl	8003958 <aiPbVersionToUint32>
   */
  ai_size size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->activations, AI_SHAPE_CHANNEL);
#else
  if (nn->map_activations.size) {
 8003a0e:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
  resp->payload.ninfo.tool_api_version =
 8003a12:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
  if (nn->map_activations.size) {
 8003a16:	2900      	cmp	r1, #0
 8003a18:	d056      	beq.n	8003ac8 <aiPbMgrSendNNInfo+0x168>
    for (int i=0; i<nn->map_activations.size; i++)
      size += nn->map_activations.buffer[i].size;
 8003a1a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    for (int i=0; i<nn->map_activations.size; i++)
 8003a1c:	2200      	movs	r2, #0
      size += nn->map_activations.buffer[i].size;
 8003a1e:	f04f 0c1c 	mov.w	ip, #28
  ai_size size = 0;
 8003a22:	4613      	mov	r3, r2
      size += nn->map_activations.buffer[i].size;
 8003a24:	3010      	adds	r0, #16
 8003a26:	fb0c f602 	mul.w	r6, ip, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8003a2a:	3201      	adds	r2, #1
      size += nn->map_activations.buffer[i].size;
 8003a2c:	5986      	ldr	r6, [r0, r6]
    for (int i=0; i<nn->map_activations.size; i++)
 8003a2e:	4291      	cmp	r1, r2
      size += nn->map_activations.buffer[i].size;
 8003a30:	4433      	add	r3, r6
    for (int i=0; i<nn->map_activations.size; i++)
 8003a32:	dcf8      	bgt.n	8003a26 <aiPbMgrSendNNInfo+0xc6>
    }
#endif
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <aiPbMgrSendNNInfo+0x170>)
 8003a36:	2600      	movs	r6, #0
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8003a38:	a808      	add	r0, sp, #32
 8003a3a:	f504 71de 	add.w	r1, r4, #444	; 0x1bc
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003a40:	f8cd d038 	str.w	sp, [sp, #56]	; 0x38
 8003a44:	e9cd 2608 	strd	r2, r6, [sp, #32]
 8003a48:	f240 4201 	movw	r2, #1025	; 0x401
 8003a4c:	920d      	str	r2, [sp, #52]	; 0x34
 8003a4e:	2201      	movs	r2, #1
 8003a50:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8003a54:	e9cd 2300 	strd	r2, r3, [sp]
 8003a58:	e9cd 2202 	strd	r2, r2, [sp, #8]
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8003a5c:	f7ff fda1 	bl	80035a2 <init_aibuffer_msg>

  size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->params, AI_SHAPE_CHANNEL);
#else
  if (nn->map_weights.size) {
 8003a60:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
 8003a64:	b390      	cbz	r0, 8003acc <aiPbMgrSendNNInfo+0x16c>
    for (int i=0; i<nn->map_weights.size; i++)
      size += nn->map_weights.buffer[i].size;
 8003a66:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    for (int i=0; i<nn->map_weights.size; i++)
 8003a68:	4633      	mov	r3, r6
  size = 0;
 8003a6a:	4631      	mov	r1, r6
      size += nn->map_weights.buffer[i].size;
 8003a6c:	f04f 0c1c 	mov.w	ip, #28
 8003a70:	3210      	adds	r2, #16
 8003a72:	fb0c f603 	mul.w	r6, ip, r3
    for (int i=0; i<nn->map_weights.size; i++)
 8003a76:	3301      	adds	r3, #1
      size += nn->map_weights.buffer[i].size;
 8003a78:	5996      	ldr	r6, [r2, r6]
    for (int i=0; i<nn->map_weights.size; i++)
 8003a7a:	4298      	cmp	r0, r3
      size += nn->map_weights.buffer[i].size;
 8003a7c:	4431      	add	r1, r6
    for (int i=0; i<nn->map_weights.size; i++)
 8003a7e:	dcf8      	bgt.n	8003a72 <aiPbMgrSendNNInfo+0x112>
  }
#endif
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <aiPbMgrSendNNInfo+0x170>)
 8003a82:	2300      	movs	r3, #0
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003a84:	a80f      	add	r0, sp, #60	; 0x3c
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003a86:	9113      	str	r1, [sp, #76]	; 0x4c
 8003a88:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8003a8c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8003a90:	f240 4301 	movw	r3, #1025	; 0x401
 8003a94:	9314      	str	r3, [sp, #80]	; 0x50
 8003a96:	2301      	movs	r3, #1
 8003a98:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8003a9c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003aa0:	ab04      	add	r3, sp, #16
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003aa2:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003aa6:	9315      	str	r3, [sp, #84]	; 0x54
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003aa8:	f7ff fd7b 	bl	80035a2 <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <aiPbMgrSendNNInfo+0x174>)
  resp->payload.ninfo.inputs.arg = (void *)nn;

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
  resp->payload.ninfo.outputs.arg = (void *)nn;

  aiPbMgrSendResp(req, resp, state);
 8003aae:	4642      	mov	r2, r8
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4638      	mov	r0, r7
  resp->payload.ninfo.inputs.arg = (void *)nn;
 8003ab4:	e9c4 356b 	strd	r3, r5, [r4, #428]	; 0x1ac
  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <aiPbMgrSendNNInfo+0x178>)
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8003aba:	e9c4 356d 	strd	r3, r5, [r4, #436]	; 0x1b4
  aiPbMgrSendResp(req, resp, state);
 8003abe:	f7ff fdf9 	bl	80036b4 <aiPbMgrSendResp>
}
 8003ac2:	b016      	add	sp, #88	; 0x58
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size = 0;
 8003ac8:	460b      	mov	r3, r1
 8003aca:	e7b3      	b.n	8003a34 <aiPbMgrSendNNInfo+0xd4>
  size = 0;
 8003acc:	4601      	mov	r1, r0
 8003ace:	e7d7      	b.n	8003a80 <aiPbMgrSendNNInfo+0x120>
 8003ad0:	00040440 	.word	0x00040440
 8003ad4:	08003631 	.word	0x08003631
 8003ad8:	08003621 	.word	0x08003621

08003adc <aiPlatformVersion>:
#include <aiTestUtility.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8003adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2107      	movs	r1, #7
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4804      	ldr	r0, [pc, #16]	; (8003af8 <aiPlatformVersion+0x1c>)
 8003ae6:	9100      	str	r1, [sp, #0]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003aee:	f000 fa17 	bl	8003f20 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8003af2:	b005      	add	sp, #20
 8003af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003af8:	0800dd4a 	.word	0x0800dd4a

08003afc <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8003afc:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003afe:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003b02:	b2c4      	uxtb	r4, r0
  if (fct)
 8003b04:	b129      	cbz	r1, 8003b12 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003b06:	4622      	mov	r2, r4
 8003b08:	4805      	ldr	r0, [pc, #20]	; (8003b20 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8003b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003b0e:	f000 ba07 	b.w	8003f20 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003b12:	4621      	mov	r1, r4
 8003b14:	461a      	mov	r2, r3
 8003b16:	4803      	ldr	r0, [pc, #12]	; (8003b24 <aiLogErr+0x28>)
}
 8003b18:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003b1c:	f000 ba00 	b.w	8003f20 <lc_print>
 8003b20:	0800dd7c 	.word	0x0800dd7c
 8003b24:	0800dda9 	.word	0x0800dda9

08003b28 <aiPrintBufferInfo>:

void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;
  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b28:	6981      	ldr	r1, [r0, #24]
{
 8003b2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b2e:	68ca      	ldr	r2, [r1, #12]
{
 8003b30:	4605      	mov	r5, r0
  const ai_buffer_format fmt = buffer->format;
 8003b32:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b34:	688b      	ldr	r3, [r1, #8]
 8003b36:	684f      	ldr	r7, [r1, #4]
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003b38:	ea4f 18e6 	mov.w	r8, r6, asr #7
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b3c:	680c      	ldr	r4, [r1, #0]
 8003b3e:	2101      	movs	r1, #1
{
 8003b40:	ed2d 8b02 	vpush	{d8}
 8003b44:	b085      	sub	sp, #20
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b46:	9203      	str	r2, [sp, #12]
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	f002 fcf3 	bl	8006534 <ai_buffer_get_size>
 8003b4e:	4621      	mov	r1, r4
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003b50:	f3c6 14c6 	ubfx	r4, r6, #7, #7
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b54:	e9cd 7000 	strd	r7, r0, [sp]
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003b58:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003b5c:	485a      	ldr	r0, [pc, #360]	; (8003cc8 <aiPrintBufferInfo+0x1a0>)
 8003b5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003b62:	f000 f9dd 	bl	8003f20 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003b66:	2f01      	cmp	r7, #1
 8003b68:	d118      	bne.n	8003b9c <aiPrintBufferInfo+0x74>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4857      	ldr	r0, [pc, #348]	; (8003ccc <aiPrintBufferInfo+0x1a4>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003b6e:	f000 f9d7 	bl	8003f20 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8003b72:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 8003b74:	2101      	movs	r1, #1
 8003b76:	4628      	mov	r0, r5
  if (buffer->data)
 8003b78:	2c00      	cmp	r4, #0
 8003b7a:	f000 808f 	beq.w	8003c9c <aiPrintBufferInfo+0x174>
    LC_PRINT(" @0x%X/%d",
 8003b7e:	f002 fcd9 	bl	8006534 <ai_buffer_get_size>
 8003b82:	4631      	mov	r1, r6
 8003b84:	f002 fd06 	bl	8006594 <ai_buffer_get_byte_size>
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4850      	ldr	r0, [pc, #320]	; (8003cd0 <aiPrintBufferInfo+0x1a8>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8003b8e:	b005      	add	sp, #20
 8003b90:	ecbd 8b02 	vpop	{d8}
 8003b94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8003b98:	f000 b9c2 	b.w	8003f20 <lc_print>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003b9c:	2f03      	cmp	r7, #3
 8003b9e:	d102      	bne.n	8003ba6 <aiPrintBufferInfo+0x7e>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	484c      	ldr	r0, [pc, #304]	; (8003cd4 <aiPrintBufferInfo+0x1ac>)
 8003ba4:	e7e3      	b.n	8003b6e <aiPrintBufferInfo+0x46>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8003ba6:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8003cec <aiPrintBufferInfo+0x1c4>
 8003baa:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8003bae:	4622      	mov	r2, r4
 8003bb0:	f109 0102 	add.w	r1, r9, #2
 8003bb4:	f109 0029 	add.w	r0, r9, #41	; 0x29
 8003bb8:	bf18      	it	ne
 8003bba:	4649      	movne	r1, r9
 8003bbc:	f000 f9b0 	bl	8003f20 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8003bc0:	2f02      	cmp	r7, #2
 8003bc2:	d1d6      	bne.n	8003b72 <aiPrintBufferInfo+0x4a>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003bc4:	68ab      	ldr	r3, [r5, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d057      	beq.n	8003c7a <aiPrintBufferInfo+0x152>
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	07d2      	lsls	r2, r2, #31
 8003bce:	d554      	bpl.n	8003c7a <aiPrintBufferInfo+0x152>
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d051      	beq.n	8003c7a <aiPrintBufferInfo+0x152>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8003bd6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8003bda:	f109 002e 	add.w	r0, r9, #46	; 0x2e
      for (int idx=0; idx<max_; idx++) {
 8003bde:	2400      	movs	r4, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003be0:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8003cd8 <aiPrintBufferInfo+0x1b0>
      const int max_ = s_> 4?4:s_;
 8003be4:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", scale, zero_point);
 8003be6:	f109 0933 	add.w	r9, r9, #51	; 0x33
      LC_PRINT(" %d:", s_);
 8003bea:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8003bec:	2f04      	cmp	r7, #4
 8003bee:	bf28      	it	cs
 8003bf0:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8003bf2:	f000 f995 	bl	8003f20 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003bf6:	42bc      	cmp	r4, r7
 8003bf8:	db07      	blt.n	8003c0a <aiPrintBufferInfo+0xe2>
      LC_PRINT((s_ > max_)?"..":"");
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <aiPrintBufferInfo+0x1b4>)
 8003bfc:	1cd8      	adds	r0, r3, #3
 8003bfe:	4547      	cmp	r7, r8
 8003c00:	bf38      	it	cc
 8003c02:	4618      	movcc	r0, r3
 8003c04:	f000 f98c 	bl	8003f20 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003c08:	e7b3      	b.n	8003b72 <aiPrintBufferInfo+0x4a>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003c0a:	68a9      	ldr	r1, [r5, #8]
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d053      	beq.n	8003cb8 <aiPrintBufferInfo+0x190>
 8003c10:	680a      	ldr	r2, [r1, #0]
 8003c12:	f012 0301 	ands.w	r3, r2, #1
 8003c16:	d02b      	beq.n	8003c70 <aiPrintBufferInfo+0x148>
 8003c18:	6849      	ldr	r1, [r1, #4]
 8003c1a:	2900      	cmp	r1, #0
 8003c1c:	d04c      	beq.n	8003cb8 <aiPrintBufferInfo+0x190>
 8003c1e:	684b      	ldr	r3, [r1, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d04d      	beq.n	8003cc0 <aiPrintBufferInfo+0x198>
 8003c24:	884a      	ldrh	r2, [r1, #2]
 8003c26:	42a2      	cmp	r2, r4
 8003c28:	dd4a      	ble.n	8003cc0 <aiPrintBufferInfo+0x198>
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c30:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003c34:	2900      	cmp	r1, #0
 8003c36:	d041      	beq.n	8003cbc <aiPrintBufferInfo+0x194>
 8003c38:	880a      	ldrh	r2, [r1, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003c3a:	6848      	ldr	r0, [r1, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003c3c:	f012 0302 	ands.w	r3, r2, #2
 8003c40:	d00f      	beq.n	8003c62 <aiPrintBufferInfo+0x13a>
 8003c42:	b1c0      	cbz	r0, 8003c76 <aiPrintBufferInfo+0x14e>
 8003c44:	884b      	ldrh	r3, [r1, #2]
 8003c46:	42a3      	cmp	r3, r4
 8003c48:	dd38      	ble.n	8003cbc <aiPrintBufferInfo+0x194>
 8003c4a:	6843      	ldr	r3, [r0, #4]
 8003c4c:	5d1b      	ldrb	r3, [r3, r4]
        LC_PRINT("(%f,%d),", scale, zero_point);
 8003c4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8003c56:	3401      	adds	r4, #1
        LC_PRINT("(%f,%d),", scale, zero_point);
 8003c58:	ec53 2b17 	vmov	r2, r3, d7
 8003c5c:	f000 f960 	bl	8003f20 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003c60:	e7c9      	b.n	8003bf6 <aiPrintBufferInfo+0xce>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003c62:	b140      	cbz	r0, 8003c76 <aiPrintBufferInfo+0x14e>
 8003c64:	884a      	ldrh	r2, [r1, #2]
 8003c66:	42a2      	cmp	r2, r4
 8003c68:	ddf1      	ble.n	8003c4e <aiPrintBufferInfo+0x126>
 8003c6a:	6843      	ldr	r3, [r0, #4]
 8003c6c:	571b      	ldrsb	r3, [r3, r4]
 8003c6e:	e7ee      	b.n	8003c4e <aiPrintBufferInfo+0x126>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003c70:	eef0 7a48 	vmov.f32	s15, s16
 8003c74:	e7eb      	b.n	8003c4e <aiPrintBufferInfo+0x126>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003c76:	4603      	mov	r3, r0
 8003c78:	e7e9      	b.n	8003c4e <aiPrintBufferInfo+0x126>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003c7a:	f018 0f78 	tst.w	r8, #120	; 0x78
 8003c7e:	d102      	bne.n	8003c86 <aiPrintBufferInfo+0x15e>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003c80:	4621      	mov	r1, r4
 8003c82:	4817      	ldr	r0, [pc, #92]	; (8003ce0 <aiPrintBufferInfo+0x1b8>)
 8003c84:	e773      	b.n	8003b6e <aiPrintBufferInfo+0x46>
      LC_PRINT(" Q%d.%d",
 8003c86:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8003c8a:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8003c8e:	4815      	ldr	r0, [pc, #84]	; (8003ce4 <aiPrintBufferInfo+0x1bc>)
 8003c90:	3a40      	subs	r2, #64	; 0x40
 8003c92:	4411      	add	r1, r2
 8003c94:	1a61      	subs	r1, r4, r1
 8003c96:	f000 f943 	bl	8003f20 <lc_print>
 8003c9a:	e76a      	b.n	8003b72 <aiPrintBufferInfo+0x4a>
    LC_PRINT(" (User Domain)/%d",
 8003c9c:	f002 fc4a 	bl	8006534 <ai_buffer_get_size>
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	f002 fc77 	bl	8006594 <ai_buffer_get_byte_size>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	480f      	ldr	r0, [pc, #60]	; (8003ce8 <aiPrintBufferInfo+0x1c0>)
}
 8003caa:	b005      	add	sp, #20
 8003cac:	ecbd 8b02 	vpop	{d8}
 8003cb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8003cb4:	f000 b934 	b.w	8003f20 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003cb8:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e7c6      	b.n	8003c4e <aiPrintBufferInfo+0x126>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003cc0:	eef0 7a48 	vmov.f32	s15, s16
 8003cc4:	e7b6      	b.n	8003c34 <aiPrintBufferInfo+0x10c>
 8003cc6:	bf00      	nop
 8003cc8:	0800ddd9 	.word	0x0800ddd9
 8003ccc:	0800ddeb 	.word	0x0800ddeb
 8003cd0:	0800de20 	.word	0x0800de20
 8003cd4:	0800ddf3 	.word	0x0800ddf3
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	0800ddd5 	.word	0x0800ddd5
 8003ce0:	0800de0d 	.word	0x0800de0d
 8003ce4:	0800de18 	.word	0x0800de18
 8003ce8:	0800de2a 	.word	0x0800de2a
 8003cec:	0800ddd1 	.word	0x0800ddd1

08003cf0 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf4:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8003cf6:	484e      	ldr	r0, [pc, #312]	; (8003e30 <aiPrintNetworkInfo+0x140>)
 8003cf8:	f000 f912 	bl	8003f20 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8003cfc:	484d      	ldr	r0, [pc, #308]	; (8003e34 <aiPrintNetworkInfo+0x144>)
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	f000 f90e 	bl	8003f20 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003d04:	6861      	ldr	r1, [r4, #4]
 8003d06:	484c      	ldr	r0, [pc, #304]	; (8003e38 <aiPrintNetworkInfo+0x148>)
 8003d08:	f000 f90a 	bl	8003f20 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	484b      	ldr	r0, [pc, #300]	; (8003e3c <aiPrintNetworkInfo+0x14c>)
 8003d10:	f000 f906 	bl	8003f20 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8003d14:	68e1      	ldr	r1, [r4, #12]
 8003d16:	484a      	ldr	r0, [pc, #296]	; (8003e40 <aiPrintNetworkInfo+0x150>)
 8003d18:	f000 f902 	bl	8003f20 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8003d1c:	7da3      	ldrb	r3, [r4, #22]
 8003d1e:	7d21      	ldrb	r1, [r4, #20]
 8003d20:	7d62      	ldrb	r2, [r4, #21]
 8003d22:	4848      	ldr	r0, [pc, #288]	; (8003e44 <aiPrintNetworkInfo+0x154>)
 8003d24:	f000 f8fc 	bl	8003f20 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8003d28:	69a1      	ldr	r1, [r4, #24]
 8003d2a:	780b      	ldrb	r3, [r1, #0]
 8003d2c:	b113      	cbz	r3, 8003d34 <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003d2e:	4846      	ldr	r0, [pc, #280]	; (8003e48 <aiPrintNetworkInfo+0x158>)
 8003d30:	f000 f8f6 	bl	8003f20 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003d34:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003d36:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003d38:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003d3a:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003d3e:	7f21      	ldrb	r1, [r4, #28]
 8003d40:	4842      	ldr	r0, [pc, #264]	; (8003e4c <aiPrintNetworkInfo+0x15c>)
      LC_PRINT("  [%d] ", idx);
 8003d42:	4f43      	ldr	r7, [pc, #268]	; (8003e50 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003d44:	f000 f8ec 	bl	8003f20 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8003d48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d4a:	4842      	ldr	r0, [pc, #264]	; (8003e54 <aiPrintNetworkInfo+0x164>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003d4c:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8003d50:	f000 f8e6 	bl	8003f20 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003d54:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003d56:	4840      	ldr	r0, [pc, #256]	; (8003e58 <aiPrintNetworkInfo+0x168>)
 8003d58:	f000 f8e2 	bl	8003f20 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8003d5c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8003d60:	483e      	ldr	r0, [pc, #248]	; (8003e5c <aiPrintNetworkInfo+0x16c>)
 8003d62:	f000 f8dd 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003d66:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8003d6a:	42ab      	cmp	r3, r5
 8003d6c:	dc25      	bgt.n	8003dba <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003d6e:	4f38      	ldr	r7, [pc, #224]	; (8003e50 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003d70:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003d72:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003d76:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003d7a:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003d7e:	4838      	ldr	r0, [pc, #224]	; (8003e60 <aiPrintNetworkInfo+0x170>)
 8003d80:	f000 f8ce 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003d84:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8003d88:	42ab      	cmp	r3, r5
 8003d8a:	dc25      	bgt.n	8003dd8 <aiPrintNetworkInfo+0xe8>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8003d8c:	4e35      	ldr	r6, [pc, #212]	; (8003e64 <aiPrintNetworkInfo+0x174>)
  for (int i=0; i<report->n_inputs; i++) {
 8003d8e:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8003d90:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003d92:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    LC_PRINT("\r\n");
 8003d94:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003d98:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8003d9a:	4833      	ldr	r0, [pc, #204]	; (8003e68 <aiPrintNetworkInfo+0x178>)
 8003d9c:	f000 f8c0 	bl	8003f20 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003da0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8003da2:	42ab      	cmp	r3, r5
 8003da4:	dc27      	bgt.n	8003df6 <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8003da6:	4e31      	ldr	r6, [pc, #196]	; (8003e6c <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 8003da8:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8003daa:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003dac:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8003db0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003db2:	42ab      	cmp	r3, r5
 8003db4:	dc2d      	bgt.n	8003e12 <aiPrintNetworkInfo+0x122>
  }
}
 8003db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003dba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8003dbc:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003dbe:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f000 f8ac 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003dc8:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7ff feac 	bl	8003b28 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8003dd0:	4648      	mov	r0, r9
 8003dd2:	f000 f8a5 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003dd6:	e7c6      	b.n	8003d66 <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003dd8:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8003dda:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003ddc:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8003de0:	4638      	mov	r0, r7
 8003de2:	f000 f89d 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003de6:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff fe9d 	bl	8003b28 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8003dee:	4648      	mov	r0, r9
 8003df0:	f000 f896 	bl	8003f20 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003df4:	e7c6      	b.n	8003d84 <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 8003df6:	4629      	mov	r1, r5
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f000 f891 	bl	8003f20 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8003dfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003e00:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8003e04:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8003e06:	f7ff fe8f 	bl	8003b28 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	f000 f888 	bl	8003f20 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003e10:	e7c6      	b.n	8003da0 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 8003e12:	4629      	mov	r1, r5
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f883 	bl	8003f20 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8003e1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e1c:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8003e20:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8003e22:	f7ff fe81 	bl	8003b28 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003e26:	4640      	mov	r0, r8
 8003e28:	f000 f87a 	bl	8003f20 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8003e2c:	e7c0      	b.n	8003db0 <aiPrintNetworkInfo+0xc0>
 8003e2e:	bf00      	nop
 8003e30:	0800de3c 	.word	0x0800de3c
 8003e34:	0800de56 	.word	0x0800de56
 8003e38:	0800de71 	.word	0x0800de71
 8003e3c:	0800de8c 	.word	0x0800de8c
 8003e40:	0800dea7 	.word	0x0800dea7
 8003e44:	0800dec2 	.word	0x0800dec2
 8003e48:	0800dee3 	.word	0x0800dee3
 8003e4c:	0800defe 	.word	0x0800defe
 8003e50:	0800df76 	.word	0x0800df76
 8003e54:	0800df1f 	.word	0x0800df1f
 8003e58:	0800df40 	.word	0x0800df40
 8003e5c:	0800df5b 	.word	0x0800df5b
 8003e60:	0800df81 	.word	0x0800df81
 8003e64:	0800dfba 	.word	0x0800dfba
 8003e68:	0800df9c 	.word	0x0800df9c
 8003e6c:	0800dfc3 	.word	0x0800dfc3

08003e70 <_put_c_driver>:

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
  if (_ioWriteAllowed)
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <_put_c_driver+0x24>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
{
 8003e74:	b507      	push	{r0, r1, r2, lr}
 8003e76:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003e7a:	b13b      	cbz	r3, 8003e8c <_put_c_driver+0x1c>
    HAL_UART_Transmit(&UartHandle, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e80:	2201      	movs	r2, #1
 8003e82:	f10d 0107 	add.w	r1, sp, #7
 8003e86:	4804      	ldr	r0, [pc, #16]	; (8003e98 <_put_c_driver+0x28>)
 8003e88:	f7ff f881 	bl	8002f8e <HAL_UART_Transmit>
}
 8003e8c:	b003      	add	sp, #12
 8003e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e92:	bf00      	nop
 8003e94:	24000010 	.word	0x24000010
 8003e98:	24000ca0 	.word	0x24000ca0

08003e9c <ioRawWriteBuffer>:
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003e9c:	b28a      	uxth	r2, r1
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <ioRawWriteBuffer+0x18>)
{
 8003ea2:	b508      	push	{r3, lr}
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea8:	f7ff f871 	bl	8002f8e <HAL_UART_Transmit>
}
 8003eac:	fab0 f080 	clz	r0, r0
 8003eb0:	0940      	lsrs	r0, r0, #5
 8003eb2:	bd08      	pop	{r3, pc}
 8003eb4:	24000ca0 	.word	0x24000ca0

08003eb8 <ioRawReadBuffer>:
  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003eb8:	b28a      	uxth	r2, r1
 8003eba:	4601      	mov	r1, r0
 8003ebc:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <ioRawReadBuffer+0x18>)
{
 8003ebe:	b508      	push	{r3, lr}
  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec4:	f7ff f8c0 	bl	8003048 <HAL_UART_Receive>
}
 8003ec8:	fab0 f080 	clz	r0, r0
 8003ecc:	0940      	lsrs	r0, r0, #5
 8003ece:	bd08      	pop	{r3, pc}
 8003ed0:	24000ca0 	.word	0x24000ca0

08003ed4 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8003ed4:	4b01      	ldr	r3, [pc, #4]	; (8003edc <ioRawDisableLLWrite+0x8>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
}
 8003eda:	4770      	bx	lr
 8003edc:	24000010 	.word	0x24000010

08003ee0 <_write>:
{
 8003ee0:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003ee2:	1e14      	subs	r4, r2, #0
 8003ee4:	da0a      	bge.n	8003efc <_write+0x1c>
 8003ee6:	3801      	subs	r0, #1
 8003ee8:	2801      	cmp	r0, #1
 8003eea:	d907      	bls.n	8003efc <_write+0x1c>
    errno = EBADF;
 8003eec:	f007 f9c4 	bl	800b278 <__errno>
    return -1;
 8003ef0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    errno = EBADF;
 8003ef4:	2309      	movs	r3, #9
 8003ef6:	6003      	str	r3, [r0, #0]
}
 8003ef8:	4620      	mov	r0, r4
 8003efa:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <_write+0x38>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f9      	beq.n	8003ef8 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8003f04:	b2a2      	uxth	r2, r4
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f0a:	4804      	ldr	r0, [pc, #16]	; (8003f1c <_write+0x3c>)
 8003f0c:	f7ff f83f 	bl	8002f8e <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8003f10:	2800      	cmp	r0, #0
 8003f12:	bf18      	it	ne
 8003f14:	2400      	movne	r4, #0
 8003f16:	e7ef      	b.n	8003ef8 <_write+0x18>
 8003f18:	24000010 	.word	0x24000010
 8003f1c:	24000ca0 	.word	0x24000ca0

08003f20 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003f20:	b40f      	push	{r0, r1, r2, r3}
 8003f22:	b507      	push	{r0, r1, r2, lr}
 8003f24:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003f26:	2100      	movs	r1, #0
 8003f28:	4805      	ldr	r0, [pc, #20]	; (8003f40 <lc_print+0x20>)
{
 8003f2a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8003f2e:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003f30:	f000 fe52 	bl	8004bd8 <vlc_print>
  va_end(ap);
}
 8003f34:	b003      	add	sp, #12
 8003f36:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3a:	b004      	add	sp, #16
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	08003e71 	.word	0x08003e71

08003f44 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003f44:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8003f46:	4d11      	ldr	r5, [pc, #68]	; (8003f8c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003f48:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8003f4a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003f4c:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003f50:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003f54:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003f58:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003f5a:	f007 f9b7 	bl	800b2cc <malloc>

  /* remember size */
  if (ptr) {
 8003f5e:	b1a0      	cbz	r0, 8003f8a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003f60:	1903      	adds	r3, r0, r4
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003f64:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003f66:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	07db      	lsls	r3, r3, #31
 8003f6c:	d50c      	bpl.n	8003f88 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003f6e:	68eb      	ldr	r3, [r5, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003f74:	686b      	ldr	r3, [r5, #4]
 8003f76:	4423      	add	r3, r4
 8003f78:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003f7a:	69ab      	ldr	r3, [r5, #24]
 8003f7c:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003f7e:	696b      	ldr	r3, [r5, #20]
 8003f80:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8003f82:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8003f84:	bf88      	it	hi
 8003f86:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003f88:	3004      	adds	r0, #4
}
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	24001010 	.word	0x24001010
 8003f90:	efdcba98 	.word	0xefdcba98

08003f94 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	4604      	mov	r4, r0
 8003f9a:	468a      	mov	sl, r1
  if (!t)
 8003f9c:	4617      	mov	r7, r2
 8003f9e:	b382      	cbz	r2, 8004002 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8003fa0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  return HAL_RCC_GetSysClockFreq();
 8003fa4:	f7fd fc7e 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
  uint64_t s  = clks / fcpu;
 8003fa8:	2300      	movs	r3, #0
  return HAL_RCC_GetSysClockFreq();
 8003faa:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003fac:	9001      	str	r0, [sp, #4]
 8003fae:	4651      	mov	r1, sl
 8003fb0:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003fb2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8004008 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 8003fb6:	f7fc fb11 	bl	80005dc <__aeabi_uldivmod>
 8003fba:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003fbc:	fba4 0106 	umull	r0, r1, r4, r6
 8003fc0:	9a01      	ldr	r2, [sp, #4]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	fb06 110a 	mla	r1, r6, sl, r1
 8003fc8:	f7fc fb08 	bl	80005dc <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003fcc:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003fd0:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 8003fd2:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003fd4:	fba4 0109 	umull	r0, r1, r4, r9
 8003fd8:	2300      	movs	r3, #0
 8003fda:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 8003fde:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003fe2:	f7fc fafb 	bl	80005dc <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8003fe6:	60bd      	str	r5, [r7, #8]
 8003fe8:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8003fec:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 8003ff0:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 8003ff2:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003ff4:	60f8      	str	r0, [r7, #12]
  return 0;
 8003ff6:	2000      	movs	r0, #0
  t->s = s;
 8003ff8:	e9c7 2b00 	strd	r2, fp, [r7]
}
 8003ffc:	b003      	add	sp, #12
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8004002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004006:	e7f9      	b.n	8003ffc <dwtCyclesToTime+0x68>
 8004008:	000f4240 	.word	0x000f4240

0800400c <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 800400c:	b510      	push	{r4, lr}
 800400e:	4604      	mov	r4, r0
 8004010:	ed2d 8b02 	vpush	{d8}
 8004014:	b082      	sub	sp, #8
 8004016:	9101      	str	r1, [sp, #4]
  return HAL_RCC_GetSysClockFreq();
 8004018:	f7fd fc44 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 800401c:	9901      	ldr	r1, [sp, #4]
  return HAL_RCC_GetSysClockFreq();
 800401e:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8004022:	4620      	mov	r0, r4
 8004024:	f7fc fa94 	bl	8000550 <__aeabi_ul2f>
 8004028:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004044 <dwtCyclesToFloatMs+0x38>
 800402c:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 8004030:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8004034:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8004038:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800403c:	b002      	add	sp, #8
 800403e:	ecbd 8b02 	vpop	{d8}
 8004042:	bd10      	pop	{r4, pc}
 8004044:	447a0000 	.word	0x447a0000

08004048 <getFlashCacheConf>:
static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
  return mconf;
}
 8004048:	4b01      	ldr	r3, [pc, #4]	; (8004050 <getFlashCacheConf+0x8>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	2400102c 	.word	0x2400102c

08004054 <systemSettingLog>:

void systemSettingLog(void)
{

#if !defined(STM32F0) && !defined(STM32L0) && !defined(STM32G0) && !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5)
  uint32_t acr = FLASH->ACR ;
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <systemSettingLog+0x10c>)
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8004056:	2203      	movs	r2, #3
{
 8004058:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800405a:	210a      	movs	r1, #10
  uint32_t acr = FLASH->ACR ;
 800405c:	681d      	ldr	r5, [r3, #0]
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800405e:	4841      	ldr	r0, [pc, #260]	; (8004164 <systemSettingLog+0x110>)
 8004060:	2301      	movs	r3, #1
 8004062:	f7ff ff5d 	bl	8003f20 <lc_print>
#endif


  /* Display Device configuration */

  LC_PRINT("STM32 Runtime configuration...\r\n");
 8004066:	4840      	ldr	r0, [pc, #256]	; (8004168 <systemSettingLog+0x114>)
 8004068:	f7ff ff5a 	bl	8003f20 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800406c:	f7fc ffec 	bl	8001048 <HAL_GetDEVID>
 8004070:	4606      	mov	r6, r0
 8004072:	f7fc ffe9 	bl	8001048 <HAL_GetDEVID>
 8004076:	b283      	uxth	r3, r0
  switch (dev_id) {
 8004078:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800407c:	d050      	beq.n	8004120 <systemSettingLog+0xcc>
 800407e:	f240 4283 	movw	r2, #1155	; 0x483
 8004082:	4293      	cmp	r3, r2
 8004084:	d04e      	beq.n	8004124 <systemSettingLog+0xd0>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 8004086:	4c39      	ldr	r4, [pc, #228]	; (800416c <systemSettingLog+0x118>)
 8004088:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800408c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004090:	bf08      	it	eq
 8004092:	4614      	moveq	r4, r2
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004094:	f7fc ffd2 	bl	800103c <HAL_GetREVID>
 8004098:	4622      	mov	r2, r4
 800409a:	4603      	mov	r3, r0
 800409c:	4631      	mov	r1, r6
 800409e:	4834      	ldr	r0, [pc, #208]	; (8004170 <systemSettingLog+0x11c>)
 80040a0:	f7ff ff3e 	bl	8003f20 <lc_print>
      (int)HAL_GetDEVID(),
      devIdToStr(HAL_GetDEVID()),
      (int)HAL_GetREVID()
  );

  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <systemSettingLog+0x120>)
 80040a6:	2107      	movs	r1, #7
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 80040a8:	4c33      	ldr	r4, [pc, #204]	; (8004178 <systemSettingLog+0x124>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 80040aa:	1d5a      	adds	r2, r3, #5
 80040ac:	f103 000a 	add.w	r0, r3, #10
 80040b0:	f7ff ff36 	bl	8003f20 <lc_print>
  mconf = (1 << 16);  /* FPU present and used */
 80040b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());

  val = systemCoreClock()/1000000;
 80040b8:	4e30      	ldr	r6, [pc, #192]	; (800417c <systemSettingLog+0x128>)
  mconf = (1 << 16);  /* FPU present and used */
 80040ba:	6023      	str	r3, [r4, #0]
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 80040bc:	f7fc ffba 	bl	8001034 <HAL_GetHalVersion>
 80040c0:	4601      	mov	r1, r0
 80040c2:	482f      	ldr	r0, [pc, #188]	; (8004180 <systemSettingLog+0x12c>)
 80040c4:	f7ff ff2c 	bl	8003f20 <lc_print>
  return HAL_RCC_GetSysClockFreq();
 80040c8:	f7fd fbec 	bl	80018a4 <HAL_RCC_GetSysClockFreq>

#if !defined(STM32H7)
  LC_PRINT(" system clock : %u MHz\r\n", (int)val);
#else
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)val);
 80040cc:	fbb0 f1f6 	udiv	r1, r0, r6
 80040d0:	482c      	ldr	r0, [pc, #176]	; (8004184 <systemSettingLog+0x130>)
 80040d2:	f7ff ff25 	bl	8003f20 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);
 80040d6:	f7fd fdab 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 80040da:	fb90 f1f6 	sdiv	r1, r0, r6
 80040de:	482a      	ldr	r0, [pc, #168]	; (8004188 <systemSettingLog+0x134>)
 80040e0:	f7ff ff1e 	bl	8003f20 <lc_print>
#endif

#if defined(STM32F7) || defined(STM32H7)
  val = SCB->CCR;
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <systemSettingLog+0x138>)
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#else
  mconf |= (3 << 24);  /* H7 conf. */
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 80040e6:	f005 020f 	and.w	r2, r5, #15
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80040ea:	4629      	mov	r1, r5
  val = SCB->CCR;
 80040ec:	695e      	ldr	r6, [r3, #20]
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 80040ee:	6823      	ldr	r3, [r4, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80040f0:	4827      	ldr	r0, [pc, #156]	; (8004190 <systemSettingLog+0x13c>)
  mconf |= (acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos;
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80040f8:	6023      	str	r3, [r4, #0]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80040fa:	f7ff ff11 	bl	8003f20 <lc_print>
      (int)acr,
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#endif
#if !defined(CORE_CM4)
  if (val & SCB_CCR_IC_Msk)
 80040fe:	f416 3200 	ands.w	r2, r6, #131072	; 0x20000
    mconf |= (1 << 10);
 8004102:	bf1e      	ittt	ne
 8004104:	6823      	ldrne	r3, [r4, #0]
 8004106:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800410a:	6023      	strne	r3, [r4, #0]
  if (val & SCB_CCR_DC_Msk)
 800410c:	03f3      	lsls	r3, r6, #15
 800410e:	d522      	bpl.n	8004156 <systemSettingLog+0x102>
    mconf |= (1 << 11);
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004116:	6023      	str	r3, [r4, #0]
  if (val)
 8004118:	b132      	cbz	r2, 8004128 <systemSettingLog+0xd4>
    return "True";
 800411a:	491e      	ldr	r1, [pc, #120]	; (8004194 <systemSettingLog+0x140>)
    return "False";
 800411c:	460a      	mov	r2, r1
 800411e:	e005      	b.n	800412c <systemSettingLog+0xd8>
  switch (dev_id) {
 8004120:	4c1d      	ldr	r4, [pc, #116]	; (8004198 <systemSettingLog+0x144>)
 8004122:	e7b7      	b.n	8004094 <systemSettingLog+0x40>
  case 0x483: str = "STM32H7[2,3]x"; break;
 8004124:	4c1d      	ldr	r4, [pc, #116]	; (800419c <systemSettingLog+0x148>)
 8004126:	e7b5      	b.n	8004094 <systemSettingLog+0x40>
    return "False";
 8004128:	491d      	ldr	r1, [pc, #116]	; (80041a0 <systemSettingLog+0x14c>)
    return "True";
 800412a:	1f4a      	subs	r2, r1, #5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 800412c:	481d      	ldr	r0, [pc, #116]	; (80041a4 <systemSettingLog+0x150>)
 800412e:	f7ff fef7 	bl	8003f20 <lc_print>
  __HAL_RCC_CRC_CLK_ENABLE();
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <systemSettingLog+0x154>)
 8004134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004138:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800413c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	9b01      	ldr	r3, [sp, #4]
    mconf |= (1 << 9);
#endif
#endif

  crcIpInit();
}
 800414c:	b002      	add	sp, #8
 800414e:	bd70      	pop	{r4, r5, r6, pc}
    return "True";
 8004150:	4910      	ldr	r1, [pc, #64]	; (8004194 <systemSettingLog+0x140>)
    return "False";
 8004152:	1d4a      	adds	r2, r1, #5
 8004154:	e7ea      	b.n	800412c <systemSettingLog+0xd8>
  if (val)
 8004156:	2a00      	cmp	r2, #0
 8004158:	d1fa      	bne.n	8004150 <systemSettingLog+0xfc>
    return "False";
 800415a:	4911      	ldr	r1, [pc, #68]	; (80041a0 <systemSettingLog+0x14c>)
 800415c:	e7de      	b.n	800411c <systemSettingLog+0xc8>
 800415e:	bf00      	nop
 8004160:	52002000 	.word	0x52002000
 8004164:	0800e090 	.word	0x0800e090
 8004168:	0800e0ad 	.word	0x0800e0ad
 800416c:	0800e032 	.word	0x0800e032
 8004170:	0800e0ce 	.word	0x0800e0ce
 8004174:	0800e0ff 	.word	0x0800e0ff
 8004178:	2400102c 	.word	0x2400102c
 800417c:	000f4240 	.word	0x000f4240
 8004180:	0800e127 	.word	0x0800e127
 8004184:	0800e140 	.word	0x0800e140
 8004188:	0800e159 	.word	0x0800e159
 800418c:	e000ed00 	.word	0xe000ed00
 8004190:	0800e172 	.word	0x0800e172
 8004194:	0800e085 	.word	0x0800e085
 8004198:	0800e048 	.word	0x0800e048
 800419c:	0800e03a 	.word	0x0800e03a
 80041a0:	0800e08a 	.word	0x0800e08a
 80041a4:	0800e19c 	.word	0x0800e19c
 80041a8:	58024400 	.word	0x58024400

080041ac <dwtIpInit>:
};

#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <dwtIpInit+0x24>)
 80041ae:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 80041ba:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 80041be:	2300      	movs	r3, #0
 80041c0:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <cyclesCounterStart>:
  dwtIpInit();
#endif
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 80041d4:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 80041d6:	f7fc ff15 	bl	8001004 <HAL_GetTick>
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <cyclesCounterStart+0x1c>)
 80041de:	2100      	movs	r1, #0
  cyclesCount.tick_start = HAL_GetTick();
 80041e0:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80041e2:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 80041e4:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 80041e6:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 80041e8:	bd08      	pop	{r3, pc}
 80041ea:	bf00      	nop
 80041ec:	24001004 	.word	0x24001004
 80041f0:	e0001000 	.word	0xe0001000

080041f4 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80041f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <cyclesCounterEnd+0x40>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 80041f8:	2100      	movs	r1, #0
 80041fa:	4d0f      	ldr	r5, [pc, #60]	; (8004238 <cyclesCounterEnd+0x44>)
  return DWT->CYCCNT;
 80041fc:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 80041fe:	686b      	ldr	r3, [r5, #4]
 8004200:	9101      	str	r1, [sp, #4]
 8004202:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8004204:	f7fc fefe 	bl	8001004 <HAL_GetTick>
 8004208:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 800420a:	682a      	ldr	r2, [r5, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800420c:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 800420e:	9901      	ldr	r1, [sp, #4]
 8004210:	4290      	cmp	r0, r2
 8004212:	d90c      	bls.n	800422e <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8004214:	460b      	mov	r3, r1
 8004216:	f7fc f9e1 	bl	80005dc <__aeabi_uldivmod>
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	fba0 0303 	umull	r0, r3, r0, r3
 8004222:	1900      	adds	r0, r0, r4
 8004224:	eba3 0101 	sub.w	r1, r3, r1
 8004228:	4604      	mov	r4, r0
 800422a:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 800422e:	4620      	mov	r0, r4
 8004230:	b003      	add	sp, #12
 8004232:	bd30      	pop	{r4, r5, pc}
 8004234:	e0001000 	.word	0xe0001000
 8004238:	24001004 	.word	0x24001004

0800423c <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	460d      	mov	r5, r1
 8004242:	4617      	mov	r7, r2

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004244:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    const ai_observer_node *node) {
 8004248:	ed2d 8b02 	vpush	{d8}
 800424c:	b095      	sub	sp, #84	; 0x54

  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 800424e:	f7ff ffd1 	bl	80041f4 <cyclesCounterEnd>

  if (flags & AI_OBSERVER_PRE_EVT) {
 8004252:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8004256:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (flags & AI_OBSERVER_PRE_EVT) {
 800425a:	d011      	beq.n	8004280 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 800425c:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800425e:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8004260:	f103 0301 	add.w	r3, r3, #1
 8004264:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8004266:	d503      	bpl.n	8004270 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 8004268:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800426c:	e9c4 2308 	strd	r2, r3, [r4, #32]
      // break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
    }
    obs_ctx->tcom += cyclesCounterEnd();
  }

  cyclesCounterStart();
 8004270:	f7ff ffb0 	bl	80041d4 <cyclesCounterStart>
  return 0;
}
 8004274:	2000      	movs	r0, #0
 8004276:	b015      	add	sp, #84	; 0x54
 8004278:	ecbd 8b02 	vpop	{d8}
 800427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8004280:	076b      	lsls	r3, r5, #29
 8004282:	d5f5      	bpl.n	8004270 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8004284:	f7ff ffa6 	bl	80041d4 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8004288:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800428c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004290:	181b      	adds	r3, r3, r0
 8004292:	eb42 0201 	adc.w	r2, r2, r1
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8004296:	f415 7f00 	tst.w	r5, #512	; 0x200
    obs_ctx->tnodes += ts;
 800429a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 800429e:	68a3      	ldr	r3, [r4, #8]
    if (obs_ctx->no_data)
 80042a0:	7d22      	ldrb	r2, [r4, #20]
    obs_ctx->n_cb_out++;
 80042a2:	f103 0301 	add.w	r3, r3, #1
 80042a6:	60a3      	str	r3, [r4, #8]
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 80042a8:	bf14      	ite	ne
 80042aa:	2302      	movne	r3, #2
 80042ac:	2301      	moveq	r3, #1
    type = type << 16;
 80042ae:	041b      	lsls	r3, r3, #16
    if (obs_ctx->no_data)
 80042b0:	b10a      	cbz	r2, 80042b6 <aiOnExecNode_cb+0x7a>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 80042b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	880a      	ldrh	r2, [r1, #0]
 80042ba:	2a01      	cmp	r2, #1
 80042bc:	d809      	bhi.n	80042d2 <aiOnExecNode_cb+0x96>
    obs_ctx->tcom += cyclesCounterEnd();
 80042be:	f7ff ff99 	bl	80041f4 <cyclesCounterEnd>
 80042c2:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80042c6:	1818      	adds	r0, r3, r0
 80042c8:	eb42 0101 	adc.w	r1, r2, r1
 80042cc:	e9c4 0106 	strd	r0, r1, [r4, #24]
 80042d0:	e7ce      	b.n	8004270 <aiOnExecNode_cb+0x34>
    type |= (node->type & (ai_u16)0x7FFF);
 80042d2:	887a      	ldrh	r2, [r7, #2]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80042d4:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8004404 <aiOnExecNode_cb+0x1c8>
    type |= (node->type & (ai_u16)0x7FFF);
 80042d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80042dc:	ea42 0803 	orr.w	r8, r2, r3
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 80042e0:	684b      	ldr	r3, [r1, #4]
 80042e2:	9304      	str	r3, [sp, #16]
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	8999      	ldrh	r1, [r3, #12]
 80042e8:	428e      	cmp	r6, r1
 80042ea:	d2e8      	bcs.n	80042be <aiOnExecNode_cb+0x82>
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0e5      	beq.n	80042be <aiOnExecNode_cb+0x82>
 80042f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d0e1      	beq.n	80042be <aiOnExecNode_cb+0x82>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80042fa:	6802      	ldr	r2, [r0, #0]
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	d06e      	beq.n	80043de <aiOnExecNode_cb+0x1a2>
 8004300:	6853      	ldr	r3, [r2, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06b      	beq.n	80043de <aiOnExecNode_cb+0x1a2>
 8004306:	8855      	ldrh	r5, [r2, #2]
 8004308:	2d00      	cmp	r5, #0
 800430a:	d068      	beq.n	80043de <aiOnExecNode_cb+0x1a2>
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	ed93 8a00 	vldr	s16, [r3]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8004312:	f8d0 b018 	ldr.w	fp, [r0, #24]
 8004316:	f8db 3000 	ldr.w	r3, [fp]
 800431a:	f413 0500 	ands.w	r5, r3, #8388608	; 0x800000
 800431e:	d061      	beq.n	80043e4 <aiOnExecNode_cb+0x1a8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004320:	2a00      	cmp	r2, #0
 8004322:	d06d      	beq.n	8004400 <aiOnExecNode_cb+0x1c4>
 8004324:	6855      	ldr	r5, [r2, #4]
 8004326:	b12d      	cbz	r5, 8004334 <aiOnExecNode_cb+0xf8>
 8004328:	8852      	ldrh	r2, [r2, #2]
 800432a:	2a00      	cmp	r2, #0
 800432c:	d068      	beq.n	8004400 <aiOnExecNode_cb+0x1c4>
 800432e:	686a      	ldr	r2, [r5, #4]
 8004330:	f992 5000 	ldrsb.w	r5, [r2]
      const ai_i32 h_ = AI_SHAPE_H(AI_TENSOR_SHAPE(t));
 8004334:	68c2      	ldr	r2, [r0, #12]
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 8004336:	3901      	subs	r1, #1
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 8004338:	6880      	ldr	r0, [r0, #8]
      const ai_i32 ch_ = AI_SHAPE_CH(AI_TENSOR_SHAPE(t));
 800433a:	f8d2 c004 	ldr.w	ip, [r2, #4]
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 800433e:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 8004342:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
      ai_buffer buffer =
 8004346:	930d      	str	r3, [sp, #52]	; 0x34
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 8004348:	f3c3 13c6 	ubfx	r3, r3, #7, #7
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 800434c:	bf2c      	ite	cs
 800434e:	f8d2 a010 	ldrcs.w	sl, [r2, #16]
 8004352:	f04f 0a01 	movcc.w	sl, #1
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 8004356:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
      ai_buffer buffer =
 800435a:	f8db 000c 	ldr.w	r0, [fp, #12]
      const ai_i32 w_ = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 800435e:	e9d2 9e02 	ldrd	r9, lr, [r2, #8]
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 8004362:	bf0c      	ite	eq
 8004364:	6952      	ldreq	r2, [r2, #20]
 8004366:	2201      	movne	r2, #1
      ai_buffer buffer =
 8004368:	900e      	str	r0, [sp, #56]	; 0x38
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 800436a:	2b01      	cmp	r3, #1
 800436c:	fb02 f20a 	mul.w	r2, r2, sl
      ai_buffer buffer =
 8004370:	f04f 0000 	mov.w	r0, #0
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 8004374:	bf0c      	ite	eq
 8004376:	f10c 031f 	addeq.w	r3, ip, #31
 800437a:	4663      	movne	r3, ip
      ai_buffer buffer =
 800437c:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 8004380:	fb0e f002 	mul.w	r0, lr, r2
 8004384:	bf08      	it	eq
 8004386:	f023 031f 	biceq.w	r3, r3, #31
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 800438a:	428e      	cmp	r6, r1
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 800438c:	f106 0601 	add.w	r6, r6, #1
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 8004390:	fb09 f000 	mul.w	r0, r9, r0
        n_type = type | (EnumLayerType_LAYER_TYPE_INTERNAL_DATA_NO_LAST << 16);
 8004394:	bf34      	ite	cc
 8004396:	f448 2b80 	orrcc.w	fp, r8, #262144	; 0x40000
        n_type = type;
 800439a:	46c3      	movcs	fp, r8
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 800439c:	4343      	muls	r3, r0
      ai_buffer buffer =
 800439e:	9311      	str	r3, [sp, #68]	; 0x44
 80043a0:	f240 4301 	movw	r3, #1025	; 0x401
 80043a4:	9312      	str	r3, [sp, #72]	; 0x48
 80043a6:	ab09      	add	r3, sp, #36	; 0x24
 80043a8:	9313      	str	r3, [sp, #76]	; 0x4c
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80043aa:	88bb      	ldrh	r3, [r7, #4]
 80043ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80043b0:	e9cd 2c09 	strd	r2, ip, [sp, #36]	; 0x24
 80043b4:	e9cd 9e0b 	strd	r9, lr, [sp, #44]	; 0x2c
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80043b8:	9305      	str	r3, [sp, #20]
 80043ba:	e9d4 9a03 	ldrd	r9, sl, [r4, #12]
 80043be:	f7ff fe25 	bl	800400c <dwtCyclesToFloatMs>
 80043c2:	9b05      	ldr	r3, [sp, #20]
 80043c4:	aa0d      	add	r2, sp, #52	; 0x34
 80043c6:	eef0 0a48 	vmov.f32	s1, s16
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4651      	mov	r1, sl
 80043ce:	9201      	str	r2, [sp, #4]
 80043d0:	465b      	mov	r3, fp
 80043d2:	2202      	movs	r2, #2
 80043d4:	4648      	mov	r0, r9
 80043d6:	9502      	str	r5, [sp, #8]
 80043d8:	f7ff fa20 	bl	800381c <aiPbMgrSendAiBuffer4>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80043dc:	e782      	b.n	80042e4 <aiOnExecNode_cb+0xa8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80043de:	eeb0 8a68 	vmov.f32	s16, s17
 80043e2:	e796      	b.n	8004312 <aiOnExecNode_cb+0xd6>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d0a5      	beq.n	8004334 <aiOnExecNode_cb+0xf8>
 80043e8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80043ec:	f1bc 0f00 	cmp.w	ip, #0
 80043f0:	d0a0      	beq.n	8004334 <aiOnExecNode_cb+0xf8>
 80043f2:	8852      	ldrh	r2, [r2, #2]
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	d09d      	beq.n	8004334 <aiOnExecNode_cb+0xf8>
 80043f8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80043fc:	7815      	ldrb	r5, [r2, #0]
 80043fe:	e799      	b.n	8004334 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004400:	4615      	mov	r5, r2
 8004402:	e797      	b.n	8004334 <aiOnExecNode_cb+0xf8>
 8004404:	00000000 	.word	0x00000000

08004408 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	4604      	mov	r4, r0
  struct ai_network_exec_ctx *cur = NULL;

  if (!nn_name)
    return NULL;

  if (!nn_name[0]) {
 800440c:	7800      	ldrb	r0, [r0, #0]
 800440e:	b930      	cbnz	r0, 800441e <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8004410:	b921      	cbnz	r1, 800441c <aiExecCtx+0x14>
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <aiExecCtx+0x4c>)
 8004414:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8004416:	2800      	cmp	r0, #0
 8004418:	bf18      	it	ne
 800441a:	4618      	movne	r0, r3
      }
      cur = NULL;
    }
  }
  return cur;
}
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 800441e:	4e0d      	ldr	r6, [pc, #52]	; (8004454 <aiExecCtx+0x4c>)
 8004420:	6830      	ldr	r0, [r6, #0]
 8004422:	2800      	cmp	r0, #0
 8004424:	d0fa      	beq.n	800441c <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8004426:	6877      	ldr	r7, [r6, #4]
 8004428:	4638      	mov	r0, r7
 800442a:	f7fb ff71 	bl	8000310 <strlen>
 800442e:	4605      	mov	r5, r0
 8004430:	4620      	mov	r0, r4
 8004432:	f7fb ff6d 	bl	8000310 <strlen>
      if (cur->handle &&
 8004436:	4285      	cmp	r5, r0
 8004438:	d109      	bne.n	800444e <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 800443a:	462a      	mov	r2, r5
 800443c:	4621      	mov	r1, r4
 800443e:	4638      	mov	r0, r7
 8004440:	f007 fc94 	bl	800bd6c <strncmp>
      cur = &net_exec_ctx[pos];
 8004444:	2800      	cmp	r0, #0
 8004446:	bf0c      	ite	eq
 8004448:	4630      	moveq	r0, r6
 800444a:	2000      	movne	r0, #0
 800444c:	e7e6      	b.n	800441c <aiExecCtx+0x14>
 800444e:	2000      	movs	r0, #0
 8004450:	e7e4      	b.n	800441c <aiExecCtx+0x14>
 8004452:	bf00      	nop
 8004454:	24001030 	.word	0x24001030

08004458 <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8004458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	460d      	mov	r5, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 800445e:	300c      	adds	r0, #12
 8004460:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8004464:	f7ff ffd0 	bl	8004408 <aiExecCtx>
  if (ctx)
 8004468:	b140      	cbz	r0, 800447c <aiPbCmdNNInfo+0x24>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 800446a:	1d03      	adds	r3, r0, #4
 800446c:	2200      	movs	r2, #0
 800446e:	4629      	mov	r1, r5
 8004470:	4620      	mov	r0, r4
        &ctx->report);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8004472:	b003      	add	sp, #12
 8004474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8004478:	f7ff ba72 	b.w	8003960 <aiPbMgrSendNNInfo>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800447c:	2304      	movs	r3, #4
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	461a      	mov	r2, r3
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f7ff f969 	bl	800375c <aiPbMgrSendAck>
}
 800448a:	b003      	add	sp, #12
 800448c:	bd30      	pop	{r4, r5, pc}
	...

08004490 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8004490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	4606      	mov	r6, r0
 8004496:	460d      	mov	r5, r1
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8004498:	300c      	adds	r0, #12
 800449a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 800449e:	ed2d 8b02 	vpush	{d8}
 80044a2:	b0a5      	sub	sp, #148	; 0x94
  ctx = aiExecCtx(req->name, -1);
 80044a4:	f7ff ffb0 	bl	8004408 <aiExecCtx>
  if (!ctx) {
 80044a8:	4604      	mov	r4, r0
 80044aa:	b958      	cbnz	r0, 80044c4 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80044ac:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80044ae:	2204      	movs	r2, #4
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	f7ff f951 	bl	800375c <aiPbMgrSendAck>
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
  }

  aiObserverUnbind(ctx);
}
 80044ba:	b025      	add	sp, #148	; 0x94
 80044bc:	ecbd 8b02 	vpop	{d8}
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aiObserverConfig(ctx, req);
 80044c4:	68b2      	ldr	r2, [r6, #8]
  net_obs_ctx.no_data = false;
 80044c6:	2100      	movs	r1, #0
 80044c8:	4b80      	ldr	r3, [pc, #512]	; (80046cc <aiPbCmdNNRun+0x23c>)
  net_obs_ctx.tcom = 0ULL;
 80044ca:	2000      	movs	r0, #0
  net_obs_ctx.n_cb_in  = 0;
 80044cc:	2700      	movs	r7, #0
return 0;
 80044ce:	f10d 0820 	add.w	r8, sp, #32
  net_obs_ctx.no_data = false;
 80044d2:	7519      	strb	r1, [r3, #20]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 80044d4:	f012 0101 	ands.w	r1, r2, #1
    ai_input[i] = ctx->report.inputs[i];
 80044d8:	f04f 0a1c 	mov.w	sl, #28
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80044dc:	f8df b200 	ldr.w	fp, [pc, #512]	; 80046e0 <aiPbCmdNNRun+0x250>
    net_obs_ctx.is_enabled = true;
 80044e0:	bf18      	it	ne
 80044e2:	2101      	movne	r1, #1
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 80044e4:	0792      	lsls	r2, r2, #30
  ctx->obs_ctx = &net_obs_ctx;
 80044e6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    net_obs_ctx.is_enabled = true;
 80044ea:	bf48      	it	mi
 80044ec:	2201      	movmi	r2, #1
    net_obs_ctx.is_enabled = true;
 80044ee:	7019      	strb	r1, [r3, #0]
  net_obs_ctx.tcom = 0ULL;
 80044f0:	f04f 0100 	mov.w	r1, #0
    net_obs_ctx.is_enabled = true;
 80044f4:	bf44      	itt	mi
 80044f6:	701a      	strbmi	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 80044f8:	751a      	strbmi	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 80044fa:	e9c3 0106 	strd	r0, r1, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 80044fe:	e9c3 0108 	strd	r0, r1, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8004502:	e9c3 7701 	strd	r7, r7, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004506:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004508:	42bb      	cmp	r3, r7
 800450a:	dc42      	bgt.n	8004592 <aiPbCmdNNRun+0x102>
 800450c:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004510:	f04f 0e00 	mov.w	lr, #0
    ai_output[i] = ctx->report.outputs[i];
 8004514:	f04f 0b1c 	mov.w	fp, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004518:	46c1      	mov	r9, r8
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800451a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800451c:	4573      	cmp	r3, lr
 800451e:	dc50      	bgt.n	80045c2 <aiPbCmdNNRun+0x132>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004520:	2700      	movs	r7, #0
 8004522:	a808      	add	r0, sp, #32
 8004524:	f7ff f93a 	bl	800379c <aiPbAiBufferSize>
 8004528:	2201      	movs	r2, #1
 800452a:	4603      	mov	r3, r0
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	9700      	str	r7, [sp, #0]
 8004532:	f7ff f913 	bl	800375c <aiPbMgrSendAck>
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8004536:	f04f 091c 	mov.w	r9, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800453a:	463b      	mov	r3, r7
 800453c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800453e:	429a      	cmp	r2, r3
 8004540:	dc58      	bgt.n	80045f4 <aiPbCmdNNRun+0x164>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004542:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 8004546:	783b      	ldrb	r3, [r7, #0]
 8004548:	b18b      	cbz	r3, 800456e <aiPbCmdNNRun+0xde>
  if (ctx->handle == AI_HANDLE_NULL)
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	b178      	cbz	r0, 800456e <aiPbCmdNNRun+0xde>
  ai_mnetwork_get_private_handle(ctx->handle,
 800454e:	a907      	add	r1, sp, #28
 8004550:	aa16      	add	r2, sp, #88	; 0x58
  obs_ctx->cresp = cresp;
 8004552:	e9c7 6503 	strd	r6, r5, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8004556:	f000 fa91 	bl	8004a7c <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 800455a:	4b5d      	ldr	r3, [pc, #372]	; (80046d0 <aiPbCmdNNRun+0x240>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 800455c:	f107 0128 	add.w	r1, r7, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8004560:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004564:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004566:	9807      	ldr	r0, [sp, #28]
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 800456a:	f004 f981 	bl	8008870 <ai_platform_observer_register_s>
  cyclesCounterStart();
 800456e:	f7ff fe31 	bl	80041d4 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8004572:	aa0f      	add	r2, sp, #60	; 0x3c
 8004574:	a908      	add	r1, sp, #32
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f000 fa6f 	bl	8004a5a <ai_mnetwork_run>
  if (batch != 1) {
 800457c:	2801      	cmp	r0, #1
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 800457e:	4682      	mov	sl, r0
  if (batch != 1) {
 8004580:	d049      	beq.n	8004616 <aiPbCmdNNRun+0x186>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	f000 fa3d 	bl	8004a02 <ai_mnetwork_get_error>
 8004588:	4952      	ldr	r1, [pc, #328]	; (80046d4 <aiPbCmdNNRun+0x244>)
 800458a:	f7ff fab7 	bl	8003afc <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800458e:	230a      	movs	r3, #10
 8004590:	e78d      	b.n	80044ae <aiPbCmdNNRun+0x1e>
    ai_input[i] = ctx->report.inputs[i];
 8004592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004594:	46c4      	mov	ip, r8
 8004596:	fb0a 3907 	mla	r9, sl, r7, r3
 800459a:	46ce      	mov	lr, r9
 800459c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80045a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80045a4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 80045a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ai_input[i] = ctx->report.inputs[i];
 80045ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 80045b0:	b90b      	cbnz	r3, 80045b6 <aiPbCmdNNRun+0x126>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80045b2:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80045b6:	f8c8 3004 	str.w	r3, [r8, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80045ba:	3701      	adds	r7, #1
 80045bc:	f108 081c 	add.w	r8, r8, #28
 80045c0:	e7a1      	b.n	8004506 <aiPbCmdNNRun+0x76>
    ai_output[i] = ctx->report.outputs[i];
 80045c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045c4:	464f      	mov	r7, r9
 80045c6:	fb0b 3a0e 	mla	sl, fp, lr, r3
 80045ca:	46d4      	mov	ip, sl
 80045cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80045d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80045d2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 80045d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = ctx->report.outputs[i];
 80045da:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 80045de:	b913      	cbnz	r3, 80045e6 <aiPbCmdNNRun+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80045e0:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <aiPbCmdNNRun+0x248>)
 80045e2:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80045e6:	f8c9 3004 	str.w	r3, [r9, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80045ea:	f10e 0e01 	add.w	lr, lr, #1
 80045ee:	f109 091c 	add.w	r9, r9, #28
 80045f2:	e792      	b.n	800451a <aiPbCmdNNRun+0x8a>
    if ((i + 1) == ctx->report.n_inputs)
 80045f4:	1c5f      	adds	r7, r3, #1
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 80045f6:	a908      	add	r1, sp, #32
 80045f8:	4630      	mov	r0, r6
 80045fa:	fb09 1303 	mla	r3, r9, r3, r1
 80045fe:	42ba      	cmp	r2, r7
 8004600:	bf0c      	ite	eq
 8004602:	2202      	moveq	r2, #2
 8004604:	2201      	movne	r2, #1
 8004606:	4629      	mov	r1, r5
 8004608:	f7ff f8cc 	bl	80037a4 <aiPbMgrReceiveAiBuffer3>
    if (res != true)
 800460c:	2800      	cmp	r0, #0
 800460e:	f43f af54 	beq.w	80044ba <aiPbCmdNNRun+0x2a>
 8004612:	463b      	mov	r3, r7
 8004614:	e792      	b.n	800453c <aiPbCmdNNRun+0xac>
  tend = cyclesCounterEnd();
 8004616:	f7ff fded 	bl	80041f4 <cyclesCounterEnd>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800461a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 800461e:	e9d2 3706 	ldrd	r3, r7, [r2, #24]
 8004622:	e9d2 c208 	ldrd	ip, r2, [r2, #32]
 8004626:	eb13 030c 	adds.w	r3, r3, ip
 800462a:	eb47 0202 	adc.w	r2, r7, r2
 800462e:	181f      	adds	r7, r3, r0
 8004630:	eb42 0901 	adc.w	r9, r2, r1
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 8004634:	4638      	mov	r0, r7
 8004636:	4649      	mov	r1, r9
 8004638:	f7ff fce8 	bl	800400c <dwtCyclesToFloatMs>
  if (obs_ctx->is_enabled == false)
 800463c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b183      	cbz	r3, 8004666 <aiPbCmdNNRun+0x1d6>
  resp->which_payload = respMsg_report_tag;
 8004644:	2315      	movs	r3, #21
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 8004646:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  aiPbMgrSendResp(req, resp, state);
 8004648:	4629      	mov	r1, r5
 800464a:	4630      	mov	r0, r6
  resp->which_payload = respMsg_report_tag;
 800464c:	80eb      	strh	r3, [r5, #6]
  resp->payload.report.id = 0;
 800464e:	2300      	movs	r3, #0
  resp->payload.report.elapsed_ms = dur_ms;
 8004650:	ed85 0a06 	vstr	s0, [r5, #24]
  resp->payload.report.id = 0;
 8004654:	60ab      	str	r3, [r5, #8]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 8004656:	616a      	str	r2, [r5, #20]
  aiPbMgrSendResp(req, resp, state);
 8004658:	2202      	movs	r2, #2
  resp->payload.report.num_inferences = 1;
 800465a:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  aiPbMgrSendResp(req, resp, state);
 800465e:	f7ff f829 	bl	80036b4 <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 8004662:	f7ff f885 	bl	8003770 <aiPbMgrWaitAck>
      state = EnumState_S_DONE;
 8004666:	f04f 0a00 	mov.w	sl, #0
    aiPbMgrSendAiBuffer4(req, resp, state,
 800466a:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 80046dc <aiPbCmdNNRun+0x24c>
 800466e:	46d3      	mov	fp, sl
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004670:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004672:	4552      	cmp	r2, sl
 8004674:	dc10      	bgt.n	8004698 <aiPbCmdNNRun+0x208>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004676:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 800467a:	782b      	ldrb	r3, [r5, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f43f af1c 	beq.w	80044ba <aiPbCmdNNRun+0x2a>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8004682:	a907      	add	r1, sp, #28
 8004684:	aa16      	add	r2, sp, #88	; 0x58
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	f000 f9f8 	bl	8004a7c <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 800468c:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8004690:	9807      	ldr	r0, [sp, #28]
 8004692:	f004 f9af 	bl	80089f4 <ai_platform_observer_unregister_s>
  return 0;
 8004696:	e710      	b.n	80044ba <aiPbCmdNNRun+0x2a>
    if ((i + 1) == ctx->report.n_outputs)
 8004698:	f10a 0a01 	add.w	sl, sl, #1
    aiPbMgrSendAiBuffer4(req, resp, state,
 800469c:	4638      	mov	r0, r7
 800469e:	4649      	mov	r1, r9
      state = EnumState_S_DONE;
 80046a0:	4592      	cmp	sl, r2
 80046a2:	bf14      	ite	ne
 80046a4:	2202      	movne	r2, #2
 80046a6:	2203      	moveq	r2, #3
 80046a8:	9205      	str	r2, [sp, #20]
    aiPbMgrSendAiBuffer4(req, resp, state,
 80046aa:	f7ff fcaf 	bl	800400c <dwtCyclesToFloatMs>
 80046ae:	eef0 0a48 	vmov.f32	s1, s16
 80046b2:	2300      	movs	r3, #0
 80046b4:	9a05      	ldr	r2, [sp, #20]
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	f8cd b000 	str.w	fp, [sp]
 80046be:	e9cd 8b01 	strd	r8, fp, [sp, #4]
 80046c2:	f7ff f8ab 	bl	800381c <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80046c6:	f108 081c 	add.w	r8, r8, #28
 80046ca:	e7d1      	b.n	8004670 <aiPbCmdNNRun+0x1e0>
 80046cc:	240010b8 	.word	0x240010b8
 80046d0:	0800423d 	.word	0x0800423d
 80046d4:	0800e1bc 	.word	0x0800e1bc
 80046d8:	24000058 	.word	0x24000058
 80046dc:	00000000 	.word	0x00000000
 80046e0:	24000054 	.word	0x24000054

080046e4 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 80046e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 80046e6:	4c1f      	ldr	r4, [pc, #124]	; (8004764 <aiValidationInit+0x80>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80046e8:	2500      	movs	r5, #0
 80046ea:	4e1f      	ldr	r6, [pc, #124]	; (8004768 <aiValidationInit+0x84>)
 80046ec:	f104 0010 	add.w	r0, r4, #16
 80046f0:	f7ff fc16 	bl	8003f20 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80046f4:	2300      	movs	r3, #0
 80046f6:	2206      	movs	r2, #6
 80046f8:	f104 0116 	add.w	r1, r4, #22
 80046fc:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8004700:	f7ff fc0e 	bl	8003f20 <lc_print>
  LC_PRINT("#\r\n");
 8004704:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8004708:	f7ff fc0a 	bl	8003f20 <lc_print>

  systemSettingLog();
 800470c:	f7ff fca2 	bl	8004054 <systemSettingLog>
  HAL_Delay(100);
 8004710:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8004712:	f7ff fd4b 	bl	80041ac <dwtIpInit>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004716:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 8004718:	f7fc fc7a 	bl	8001010 <HAL_Delay>
  return DWT->CYCCNT;
 800471c:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 800471e:	2664      	movs	r6, #100	; 0x64
 8004720:	466a      	mov	r2, sp
 8004722:	4629      	mov	r1, r5
 8004724:	fbb0 f0f6 	udiv	r0, r0, r6
 8004728:	f7ff fc34 	bl	8003f94 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 800472c:	9a03      	ldr	r2, [sp, #12]
 800472e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8004732:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8004736:	fb06 3101 	mla	r1, r6, r1, r3
 800473a:	f7ff fbf1 	bl	8003f20 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 800473e:	466a      	mov	r2, sp
 8004740:	2100      	movs	r1, #0
 8004742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004746:	f7ff fc25 	bl	8003f94 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	9b02      	ldr	r3, [sp, #8]
 800474e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8

  cyclesCounterInit();

  return 0;
}
 8004752:	4628      	mov	r0, r5
 8004754:	fb01 3302 	mla	r3, r1, r2, r3
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <aiValidationInit+0x88>)
 800475a:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 800475c:	f7ff fd26 	bl	80041ac <dwtIpInit>
 8004760:	b004      	add	sp, #16
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	0800e1bc 	.word	0x0800e1bc
 8004768:	e0001000 	.word	0xe0001000
 800476c:	24001004 	.word	0x24001004

08004770 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8004770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8004774:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80048ec <aiValidationProcess+0x17c>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004778:	2700      	movs	r7, #0
 800477a:	4c4f      	ldr	r4, [pc, #316]	; (80048b8 <aiValidationProcess+0x148>)
  int res = -1;
 800477c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8004780:	f108 0917 	add.w	r9, r8, #23
  LC_PRINT("Initializing the network\r\n");
 8004784:	f108 0a48 	add.w	sl, r8, #72	; 0x48
  aiPlatformVersion();
 8004788:	f7ff f9a8 	bl	8003adc <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 800478c:	484b      	ldr	r0, [pc, #300]	; (80048bc <aiValidationProcess+0x14c>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800478e:	f844 7b04 	str.w	r7, [r4], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 8004792:	f7ff fbc5 	bl	8003f20 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8004796:	4639      	mov	r1, r7
 8004798:	2000      	movs	r0, #0
 800479a:	f000 f8d5 	bl	8004948 <ai_mnetwork_find>
    if (nn_name) {
 800479e:	4606      	mov	r6, r0
 80047a0:	b1a8      	cbz	r0, 80047ce <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80047a2:	4601      	mov	r1, r0
 80047a4:	4640      	mov	r0, r8
 80047a6:	f7ff fbbb 	bl	8003f20 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80047aa:	4631      	mov	r1, r6
 80047ac:	4648      	mov	r0, r9
 80047ae:	f7ff fbb7 	bl	8003f20 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80047b2:	2200      	movs	r2, #0
 80047b4:	1f21      	subs	r1, r4, #4
 80047b6:	4630      	mov	r0, r6
 80047b8:	f000 f8d4 	bl	8004964 <ai_mnetwork_create>
  if (err.type) {
 80047bc:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80047c0:	d016      	beq.n	80047f0 <aiValidationProcess+0x80>
        nn_name = NULL;
 80047c2:	2600      	movs	r6, #0
    return -1;
 80047c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    aiLogErr(err, "ai_mnetwork_create");
 80047c8:	493d      	ldr	r1, [pc, #244]	; (80048c0 <aiValidationProcess+0x150>)
 80047ca:	f7ff f997 	bl	8003afc <aiLogErr>
    idx++;
 80047ce:	3701      	adds	r7, #1
  } while (nn_name);
 80047d0:	3484      	adds	r4, #132	; 0x84
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	d1df      	bne.n	8004796 <aiValidationProcess+0x26>
  int r;

  r = aiInit();
  if (r) {
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	d04a      	beq.n	8004870 <aiValidationProcess+0x100>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 80047da:	483a      	ldr	r0, [pc, #232]	; (80048c4 <aiValidationProcess+0x154>)
 80047dc:	4629      	mov	r1, r5
 80047de:	f7ff fb9f 	bl	8003f20 <lc_print>
    HAL_Delay(2000);
 80047e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80047e6:	f7fc fc13 	bl	8001010 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 80047ea:	4628      	mov	r0, r5
 80047ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 80047f0:	4650      	mov	r0, sl
 80047f2:	f7ff fb95 	bl	8003f20 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80047f6:	4621      	mov	r1, r4
 80047f8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80047fc:	f000 f8f6 	bl	80049ec <ai_mnetwork_get_report>
 8004800:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8004802:	f854 0c04 	ldr.w	r0, [r4, #-4]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004806:	f1bb 0f00 	cmp.w	fp, #0
 800480a:	d10e      	bne.n	800482a <aiValidationProcess+0xba>
    err = ai_mnetwork_get_error(ctx->handle);
 800480c:	f000 f8f9 	bl	8004a02 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8004810:	492d      	ldr	r1, [pc, #180]	; (80048c8 <aiValidationProcess+0x158>)
 8004812:	f7ff f973 	bl	8003afc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8004816:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800481a:	f000 f8d1 	bl	80049c0 <ai_mnetwork_destroy>
        nn_name = NULL;
 800481e:	465e      	mov	r6, fp
    return -2;
 8004820:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8004824:	f844 bc04 	str.w	fp, [r4, #-4]
      if (res)
 8004828:	e7d1      	b.n	80047ce <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 800482a:	f000 f8f7 	bl	8004a1c <ai_mnetwork_init>
 800482e:	4683      	mov	fp, r0
 8004830:	b980      	cbnz	r0, 8004854 <aiValidationProcess+0xe4>
    err = ai_mnetwork_get_error(ctx->handle);
 8004832:	f854 0c04 	ldr.w	r0, [r4, #-4]
        nn_name = NULL;
 8004836:	465e      	mov	r6, fp
    err = ai_mnetwork_get_error(ctx->handle);
 8004838:	f000 f8e3 	bl	8004a02 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 800483c:	4923      	ldr	r1, [pc, #140]	; (80048cc <aiValidationProcess+0x15c>)
 800483e:	f7ff f95d 	bl	8003afc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8004842:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004846:	f000 f8bb 	bl	80049c0 <ai_mnetwork_destroy>
    return -4;
 800484a:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 800484e:	f844 bc04 	str.w	fp, [r4, #-4]
      if (res)
 8004852:	e7bc      	b.n	80047ce <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 8004854:	4621      	mov	r1, r4
 8004856:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800485a:	f000 f8c7 	bl	80049ec <ai_mnetwork_get_report>
 800485e:	4683      	mov	fp, r0
 8004860:	b118      	cbz	r0, 800486a <aiValidationProcess+0xfa>
    aiPrintNetworkInfo(&ctx->report);
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff fa44 	bl	8003cf0 <aiPrintNetworkInfo>
      if (res)
 8004868:	e7b1      	b.n	80047ce <aiValidationProcess+0x5e>
    err = ai_mnetwork_get_error(ctx->handle);
 800486a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800486e:	e7cd      	b.n	800480c <aiValidationProcess+0x9c>
    LC_PRINT("\r\n");
 8004870:	4817      	ldr	r0, [pc, #92]	; (80048d0 <aiValidationProcess+0x160>)
 8004872:	f7ff fb55 	bl	8003f20 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004876:	4817      	ldr	r0, [pc, #92]	; (80048d4 <aiValidationProcess+0x164>)
 8004878:	f7ff fb52 	bl	8003f20 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 800487c:	4816      	ldr	r0, [pc, #88]	; (80048d8 <aiValidationProcess+0x168>)
 800487e:	f7ff fb4f 	bl	8003f20 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004882:	4814      	ldr	r0, [pc, #80]	; (80048d4 <aiValidationProcess+0x164>)
 8004884:	f7ff fb4c 	bl	8003f20 <lc_print>
    LC_PRINT("\r\n");
 8004888:	4811      	ldr	r0, [pc, #68]	; (80048d0 <aiValidationProcess+0x160>)
 800488a:	f7ff fb49 	bl	8003f20 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800488e:	4813      	ldr	r0, [pc, #76]	; (80048dc <aiValidationProcess+0x16c>)
 8004890:	f7ff fb46 	bl	8003f20 <lc_print>
    LC_PRINT("# and a stm32com-base interface should be used\r\n");
 8004894:	4812      	ldr	r0, [pc, #72]	; (80048e0 <aiValidationProcess+0x170>)
 8004896:	f7ff fb43 	bl	8003f20 <lc_print>
    LC_PRINT("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 800489a:	2202      	movs	r2, #2
 800489c:	4811      	ldr	r0, [pc, #68]	; (80048e4 <aiValidationProcess+0x174>)
 800489e:	4611      	mov	r1, r2
 80048a0:	f7ff fb3e 	bl	8003f20 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 80048a4:	4810      	ldr	r0, [pc, #64]	; (80048e8 <aiValidationProcess+0x178>)
 80048a6:	f7fe fecb 	bl	8003640 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 80048aa:	f7fe ff15 	bl	80036d8 <aiPbMgrWaitAndProcess>
  } while (r==0);
 80048ae:	4605      	mov	r5, r0
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d0fa      	beq.n	80048aa <aiValidationProcess+0x13a>
 80048b4:	e799      	b.n	80047ea <aiValidationProcess+0x7a>
 80048b6:	bf00      	nop
 80048b8:	24001030 	.word	0x24001030
 80048bc:	0800e23c 	.word	0x0800e23c
 80048c0:	0800e291 	.word	0x0800e291
 80048c4:	0800e2e5 	.word	0x0800e2e5
 80048c8:	0800e2bf 	.word	0x0800e2bf
 80048cc:	0800e2d4 	.word	0x0800e2d4
 80048d0:	0800e2fb 	.word	0x0800e2fb
 80048d4:	0800e2fe 	.word	0x0800e2fe
 80048d8:	0800e32c 	.word	0x0800e32c
 80048dc:	0800e35a 	.word	0x0800e35a
 80048e0:	0800e3a0 	.word	0x0800e3a0
 80048e4:	0800e3d1 	.word	0x0800e3d1
 80048e8:	24000014 	.word	0x24000014
 80048ec:	0800e25c 	.word	0x0800e25c

080048f0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <ai_mnetwork_handle+0x18>)
 80048f2:	b120      	cbz	r0, 80048fe <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 80048f4:	4298      	cmp	r0, r3
 80048f6:	bf0c      	ite	eq
 80048f8:	4618      	moveq	r0, r3
 80048fa:	2000      	movne	r0, #0
 80048fc:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80048fe:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004900:	2a00      	cmp	r2, #0
 8004902:	bf08      	it	eq
 8004904:	4618      	moveq	r0, r3
}
 8004906:	4770      	bx	lr
 8004908:	24002108 	.word	0x24002108

0800490c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 800490c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800490e:	4604      	mov	r4, r0
 8004910:	b160      	cbz	r0, 800492c <ai_mnetwork_is_valid.constprop.0+0x20>
 8004912:	f7fb fcfd 	bl	8000310 <strlen>
 8004916:	2807      	cmp	r0, #7
 8004918:	4602      	mov	r2, r0
 800491a:	d107      	bne.n	800492c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800491c:	4621      	mov	r1, r4
 800491e:	4804      	ldr	r0, [pc, #16]	; (8004930 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8004920:	f007 fa24 	bl	800bd6c <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004924:	fab0 f080 	clz	r0, r0
 8004928:	0940      	lsrs	r0, r0, #5
}
 800492a:	bd10      	pop	{r4, pc}
    return false;
 800492c:	2000      	movs	r0, #0
 800492e:	e7fc      	b.n	800492a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8004930:	0800e4e2 	.word	0x0800e4e2

08004934 <MX_X_CUBE_AI_Init>:
{
 8004934:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8004936:	f7fc f983 	bl	8000c40 <MX_USART3_UART_Init>
}
 800493a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 800493e:	f7ff bed1 	b.w	80046e4 <aiValidationInit>

08004942 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8004942:	f7ff bf15 	b.w	8004770 <aiValidationProcess>
	...

08004948 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 800494c:	f7ff ffde 	bl	800490c <ai_mnetwork_is_valid.constprop.0>
 8004950:	b920      	cbnz	r0, 800495c <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8004952:	2c00      	cmp	r4, #0
 8004954:	4802      	ldr	r0, [pc, #8]	; (8004960 <ai_mnetwork_find+0x18>)
 8004956:	bf18      	it	ne
 8004958:	2000      	movne	r0, #0
}
 800495a:	bd10      	pop	{r4, pc}
            return entry->name;
 800495c:	4800      	ldr	r0, [pc, #0]	; (8004960 <ai_mnetwork_find+0x18>)
 800495e:	e7fc      	b.n	800495a <ai_mnetwork_find+0x12>
 8004960:	0800e4e2 	.word	0x0800e4e2

08004964 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8004964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004966:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004968:	2000      	movs	r0, #0
{
 800496a:	460d      	mov	r5, r1
 800496c:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800496e:	f7ff ffbf 	bl	80048f0 <ai_mnetwork_handle>

    if (!inst) {
 8004972:	4604      	mov	r4, r0
 8004974:	b930      	cbnz	r0, 8004984 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8004976:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 800497a:	b002      	add	sp, #8
 800497c:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 800497e:	f241 0014 	movw	r0, #4116	; 0x1014
 8004982:	e7fa      	b.n	800497a <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8004984:	4630      	mov	r0, r6
 8004986:	9101      	str	r1, [sp, #4]
 8004988:	f7ff ffc0 	bl	800490c <ai_mnetwork_is_valid.constprop.0>
 800498c:	9901      	ldr	r1, [sp, #4]
 800498e:	2800      	cmp	r0, #0
 8004990:	d0f5      	beq.n	800497e <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fb76 	bl	8005084 <ai_network_create>
 8004998:	f3c0 2317 	ubfx	r3, r0, #8, #24
 800499c:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800499e:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 80049a2:	d104      	bne.n	80049ae <ai_mnetwork_create+0x4a>
        inst->entry = found;
 80049a4:	4905      	ldr	r1, [pc, #20]	; (80049bc <ai_mnetwork_create+0x58>)
 80049a6:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 80049a8:	6829      	ldr	r1, [r5, #0]
 80049aa:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 80049ac:	602c      	str	r4, [r5, #0]
    return err;
 80049ae:	2000      	movs	r0, #0
 80049b0:	f362 0007 	bfi	r0, r2, #0, #8
 80049b4:	f363 201f 	bfi	r0, r3, #8, #24
 80049b8:	e7df      	b.n	800497a <ai_mnetwork_create+0x16>
 80049ba:	bf00      	nop
 80049bc:	0800e4ec 	.word	0x0800e4ec

080049c0 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049c4:	f7ff ff94 	bl	80048f0 <ai_mnetwork_handle>
    if (inn) {
 80049c8:	4605      	mov	r5, r0
 80049ca:	b158      	cbz	r0, 80049e4 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80049cc:	6803      	ldr	r3, [r0, #0]
 80049ce:	6840      	ldr	r0, [r0, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	4798      	blx	r3
        if (hdl != inn->handle) {
 80049d4:	686b      	ldr	r3, [r5, #4]
 80049d6:	4283      	cmp	r3, r0
 80049d8:	d004      	beq.n	80049e4 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 80049da:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <ai_mnetwork_destroy+0x28>)
 80049dc:	2400      	movs	r4, #0
 80049de:	429d      	cmp	r5, r3
 80049e0:	d100      	bne.n	80049e4 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 80049e2:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 80049e4:	4620      	mov	r0, r4
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	24002108 	.word	0x24002108

080049ec <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80049ec:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80049ee:	f7ff ff7f 	bl	80048f0 <ai_mnetwork_handle>
    if (inn)
 80049f2:	b128      	cbz	r0, 8004a00 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 80049f4:	6802      	ldr	r2, [r0, #0]
 80049f6:	6840      	ldr	r0, [r0, #4]
 80049f8:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 80049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 80049fe:	4710      	bx	r2
}
 8004a00:	bd10      	pop	{r4, pc}

08004a02 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004a02:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a04:	f7ff ff74 	bl	80048f0 <ai_mnetwork_handle>
    if (inn)
 8004a08:	b128      	cbz	r0, 8004a16 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004a0a:	6803      	ldr	r3, [r0, #0]
 8004a0c:	6840      	ldr	r0, [r0, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004a14:	4718      	bx	r3
}
 8004a16:	f241 0014 	movw	r0, #4116	; 0x1014
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004a1c:	b530      	push	{r4, r5, lr}
 8004a1e:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a20:	f7ff ff66 	bl	80048f0 <ai_mnetwork_handle>
    if (inn) {
 8004a24:	4604      	mov	r4, r0
 8004a26:	b168      	cbz	r0, 8004a44 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8004a28:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004a2a:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8004a2c:	4668      	mov	r0, sp
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004a32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004a36:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004a38:	42aa      	cmp	r2, r5
 8004a3a:	dc05      	bgt.n	8004a48 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4669      	mov	r1, sp
 8004a40:	6860      	ldr	r0, [r4, #4]
 8004a42:	4798      	blx	r3
    }
    else
        return false;
}
 8004a44:	b00f      	add	sp, #60	; 0x3c
 8004a46:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	a803      	add	r0, sp, #12
 8004a4e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004a52:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004a54:	f001 fdb0 	bl	80065b8 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004a58:	e7eb      	b.n	8004a32 <ai_mnetwork_init+0x16>

08004a5a <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8004a5a:	b513      	push	{r0, r1, r4, lr}
 8004a5c:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a5e:	f7ff ff47 	bl	80048f0 <ai_mnetwork_handle>
    if (inn)
 8004a62:	4603      	mov	r3, r0
 8004a64:	b140      	cbz	r0, 8004a78 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	9a01      	ldr	r2, [sp, #4]
 8004a6a:	6a04      	ldr	r4, [r0, #32]
 8004a6c:	6858      	ldr	r0, [r3, #4]
 8004a6e:	4623      	mov	r3, r4
    else
        return 0;
}
 8004a70:	b002      	add	sp, #8
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8004a76:	4718      	bx	r3
}
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004a80:	f7ff ff36 	bl	80048f0 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004a84:	b188      	cbz	r0, 8004aaa <ai_mnetwork_get_private_handle+0x2e>
 8004a86:	b181      	cbz	r1, 8004aaa <ai_mnetwork_get_private_handle+0x2e>
 8004a88:	b17d      	cbz	r5, 8004aaa <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8004a8a:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8004a8c:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8004a90:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004aa2:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004aa6:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aae:	e7fb      	b.n	8004aa8 <ai_mnetwork_get_private_handle+0x2c>

08004ab0 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004ab4:	6896      	ldr	r6, [r2, #8]
{
 8004ab6:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004ab8:	2500      	movs	r5, #0
{
 8004aba:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004abc:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8004ac0:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004ac4:	d02a      	beq.n	8004b1c <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8004ac6:	42a9      	cmp	r1, r5
 8004ac8:	da08      	bge.n	8004adc <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004aca:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004acc:	4240      	negs	r0, r0
      sign_neg = '-';
 8004ace:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8004ad2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      number = -number;
 8004ad6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	f016 0f08 	tst.w	r6, #8
 8004ae0:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004ae4:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004ae8:	f006 0a10 	and.w	sl, r6, #16
 8004aec:	bf14      	ite	ne
 8004aee:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004af2:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004af6:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004afa:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004afe:	f1ba 0f00 	cmp.w	sl, #0
 8004b02:	d032      	beq.n	8004b6a <_write_number+0xba>
      chr = number & 0x0F;
 8004b04:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004b08:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004b0a:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004b0c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004b10:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004b14:	d906      	bls.n	8004b24 <_write_number+0x74>
 8004b16:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e004      	b.n	8004b26 <_write_number+0x76>
  char sign_neg = 0;
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	e7dd      	b.n	8004adc <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8004b20:	4617      	mov	r7, r2
 8004b22:	e7ea      	b.n	8004afa <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004b24:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004b26:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8004b2a:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004b2e:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    count++;
 8004b32:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004b36:	d1f3      	bne.n	8004b20 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004b38:	f006 0101 	and.w	r1, r6, #1
 8004b3c:	b14d      	cbz	r5, 8004b52 <_write_number+0xa2>
 8004b3e:	b941      	cbnz	r1, 8004b52 <_write_number+0xa2>
    buf[idx--] = sign_neg;
 8004b40:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8004b44:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004b48:	eb0d 0203 	add.w	r2, sp, r3
 8004b4c:	f802 5c40 	strb.w	r5, [r2, #-64]
 8004b50:	1eba      	subs	r2, r7, #2
 8004b52:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f006 0602 	and.w	r6, r6, #2
 8004b5a:	bf14      	ite	ne
 8004b5c:	2130      	movne	r1, #48	; 0x30
 8004b5e:	2120      	moveq	r1, #32
 8004b60:	455b      	cmp	r3, fp
 8004b62:	dd13      	ble.n	8004b8c <_write_number+0xdc>
 8004b64:	b166      	cbz	r6, 8004b80 <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004b66:	b9a5      	cbnz	r5, 8004b92 <_write_number+0xe2>
 8004b68:	e01b      	b.n	8004ba2 <_write_number+0xf2>
      t = number / 10;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 8004b6e:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 8004b72:	f7fb fd33 	bl	80005dc <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004b76:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004b7a:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8004b7e:	e7cb      	b.n	8004b18 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004b80:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004b84:	f10b 0b01 	add.w	fp, fp, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	e7e9      	b.n	8004b60 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004b8c:	b14d      	cbz	r5, 8004ba2 <_write_number+0xf2>
 8004b8e:	455b      	cmp	r3, fp
 8004b90:	d107      	bne.n	8004ba2 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 8004b92:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8004b96:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	446b      	add	r3, sp
 8004b9e:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004ba2:	eb0d 0602 	add.w	r6, sp, r2
 8004ba6:	2500      	movs	r5, #0
 8004ba8:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bb0:	6920      	ldr	r0, [r4, #16]
 8004bb2:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004bb4:	45ab      	cmp	fp, r5
 8004bb6:	d1f7      	bne.n	8004ba8 <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	d408      	bmi.n	8004bd0 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	b011      	add	sp, #68	; 0x44
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004bc6:	3501      	adds	r5, #1
 8004bc8:	68e3      	ldr	r3, [r4, #12]
 8004bca:	2120      	movs	r1, #32
 8004bcc:	6920      	ldr	r0, [r4, #16]
 8004bce:	4798      	blx	r3
    while (count < specifier->width) {
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	dcf7      	bgt.n	8004bc6 <_write_number+0x116>
 8004bd6:	e7f2      	b.n	8004bbe <_write_number+0x10e>

08004bd8 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	4683      	mov	fp, r0
 8004bde:	460f      	mov	r7, r1
 8004be0:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004be2:	2500      	movs	r5, #0
{
 8004be4:	ed2d 8b02 	vpush	{d8}
 8004be8:	b09b      	sub	sp, #108	; 0x6c
  return *(*fmtP)++;
 8004bea:	4613      	mov	r3, r2
 8004bec:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004bf0:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004bf2:	b929      	cbnz	r1, 8004c00 <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	b01b      	add	sp, #108	; 0x6c
 8004bf8:	ecbd 8b02 	vpop	{d8}
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004c00:	290a      	cmp	r1, #10
 8004c02:	d103      	bne.n	8004c0c <vlc_print+0x34>
      putc_fct(user, c);
 8004c04:	4638      	mov	r0, r7
      count++;
 8004c06:	3501      	adds	r5, #1
      putc_fct(user, c);
 8004c08:	47d8      	blx	fp
      count++;
 8004c0a:	e0c9      	b.n	8004da0 <vlc_print+0x1c8>
    else if (c == '%')
 8004c0c:	2925      	cmp	r1, #37	; 0x25
 8004c0e:	d1f9      	bne.n	8004c04 <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004c10:	2300      	movs	r3, #0
 8004c12:	f04f 090a 	mov.w	r9, #10
 8004c16:	9709      	str	r7, [sp, #36]	; 0x24
 8004c18:	4698      	mov	r8, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4618      	mov	r0, r3
      bool has_precision = false;
 8004c20:	469c      	mov	ip, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004c22:	9301      	str	r3, [sp, #4]
      bool long_type = false;
 8004c24:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004c26:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004c2a:	e9cd 3b07 	strd	r3, fp, [sp, #28]
  return *(*fmtP)++;
 8004c2e:	9e02      	ldr	r6, [sp, #8]
 8004c30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004c34:	9602      	str	r6, [sp, #8]
        if (!c)
 8004c36:	2900      	cmp	r1, #0
 8004c38:	f000 81c0 	beq.w	8004fbc <vlc_print+0x3e4>
        else if (c == '0')
 8004c3c:	2930      	cmp	r1, #48	; 0x30
 8004c3e:	d116      	bne.n	8004c6e <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 8004c40:	ea50 0102 	orrs.w	r1, r0, r2
 8004c44:	d107      	bne.n	8004c56 <vlc_print+0x7e>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	460a      	mov	r2, r1
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2301      	movs	r3, #1
 8004c54:	e7eb      	b.n	8004c2e <vlc_print+0x56>
          } else if (has_precision) {
 8004c56:	f1bc 0f00 	cmp.w	ip, #0
 8004c5a:	d003      	beq.n	8004c64 <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c5c:	fb09 f202 	mul.w	r2, r9, r2
 8004c60:	46e0      	mov	r8, ip
 8004c62:	e7e4      	b.n	8004c2e <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 8004c64:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004c68:	f04f 0e01 	mov.w	lr, #1
 8004c6c:	e7df      	b.n	8004c2e <vlc_print+0x56>
        else if (c == '-')
 8004c6e:	292d      	cmp	r1, #45	; 0x2d
 8004c70:	d104      	bne.n	8004c7c <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 8004c72:	9b01      	ldr	r3, [sp, #4]
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	e7ea      	b.n	8004c52 <vlc_print+0x7a>
        else if (c == '.')
 8004c7c:	292e      	cmp	r1, #46	; 0x2e
 8004c7e:	f000 81ab 	beq.w	8004fd8 <vlc_print+0x400>
        else if ((c >= '1') && (c <= '9'))
 8004c82:	f1a1 0a31 	sub.w	sl, r1, #49	; 0x31
 8004c86:	f1ba 0f08 	cmp.w	sl, #8
 8004c8a:	d809      	bhi.n	8004ca0 <vlc_print+0xc8>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c8c:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004c8e:	f1bc 0f00 	cmp.w	ip, #0
 8004c92:	d002      	beq.n	8004c9a <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004c94:	fb09 1202 	mla	r2, r9, r2, r1
 8004c98:	e7e2      	b.n	8004c60 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 8004c9a:	fb09 1000 	mla	r0, r9, r0, r1
 8004c9e:	e7e3      	b.n	8004c68 <vlc_print+0x90>
        else if (c == 'l')
 8004ca0:	296c      	cmp	r1, #108	; 0x6c
 8004ca2:	f000 819c 	beq.w	8004fde <vlc_print+0x406>
 8004ca6:	f1be 0f00 	cmp.w	lr, #0
 8004caa:	d000      	beq.n	8004cae <vlc_print+0xd6>
 8004cac:	9005      	str	r0, [sp, #20]
 8004cae:	f1b8 0f00 	cmp.w	r8, #0
 8004cb2:	d000      	beq.n	8004cb6 <vlc_print+0xde>
 8004cb4:	9206      	str	r2, [sp, #24]
 8004cb6:	b10b      	cbz	r3, 8004cbc <vlc_print+0xe4>
 8004cb8:	9b01      	ldr	r3, [sp, #4]
 8004cba:	9307      	str	r3, [sp, #28]
          switch(c)
 8004cbc:	2978      	cmp	r1, #120	; 0x78
 8004cbe:	d809      	bhi.n	8004cd4 <vlc_print+0xfc>
 8004cc0:	2962      	cmp	r1, #98	; 0x62
 8004cc2:	d813      	bhi.n	8004cec <vlc_print+0x114>
 8004cc4:	2946      	cmp	r1, #70	; 0x46
 8004cc6:	f000 80b3 	beq.w	8004e30 <vlc_print+0x258>
 8004cca:	2958      	cmp	r1, #88	; 0x58
 8004ccc:	f000 808f 	beq.w	8004dee <vlc_print+0x216>
 8004cd0:	2925      	cmp	r1, #37	; 0x25
 8004cd2:	d097      	beq.n	8004c04 <vlc_print+0x2c>
        putc_fct(user, '<');
 8004cd4:	213c      	movs	r1, #60	; 0x3c
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47d8      	blx	fp
        putc_fct(user, '!');
 8004cda:	2121      	movs	r1, #33	; 0x21
 8004cdc:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8004cde:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8004ce0:	47d8      	blx	fp
        putc_fct(user, '>');
 8004ce2:	213e      	movs	r1, #62	; 0x3e
 8004ce4:	4638      	mov	r0, r7
        count += 3;
 8004ce6:	3503      	adds	r5, #3
        putc_fct(user, '>');
 8004ce8:	47d8      	blx	fp
        error = false;
 8004cea:	e059      	b.n	8004da0 <vlc_print+0x1c8>
          switch(c)
 8004cec:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8004cf0:	2b15      	cmp	r3, #21
 8004cf2:	d8ef      	bhi.n	8004cd4 <vlc_print+0xfc>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <vlc_print+0x124>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004e0f 	.word	0x08004e0f
 8004d04:	08004cd5 	.word	0x08004cd5
 8004d08:	08004e31 	.word	0x08004e31
 8004d0c:	08004cd5 	.word	0x08004cd5
 8004d10:	08004cd5 	.word	0x08004cd5
 8004d14:	08004e0f 	.word	0x08004e0f
 8004d18:	08004cd5 	.word	0x08004cd5
 8004d1c:	08004cd5 	.word	0x08004cd5
 8004d20:	08004cd5 	.word	0x08004cd5
 8004d24:	08004cd5 	.word	0x08004cd5
 8004d28:	08004cd5 	.word	0x08004cd5
 8004d2c:	08004cd5 	.word	0x08004cd5
 8004d30:	08004de3 	.word	0x08004de3
 8004d34:	08004cd5 	.word	0x08004cd5
 8004d38:	08004cd5 	.word	0x08004cd5
 8004d3c:	08004d5d 	.word	0x08004d5d
 8004d40:	08004cd5 	.word	0x08004cd5
 8004d44:	08004e17 	.word	0x08004e17
 8004d48:	08004cd5 	.word	0x08004cd5
 8004d4c:	08004cd5 	.word	0x08004cd5
 8004d50:	08004df7 	.word	0x08004df7
            t = (char)va_arg(vl, signed int);
 8004d54:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8004d58:	b2c9      	uxtb	r1, r1
 8004d5a:	e753      	b.n	8004c04 <vlc_print+0x2c>
            if (!str) str = "(null)";
 8004d5c:	4ba1      	ldr	r3, [pc, #644]	; (8004fe4 <vlc_print+0x40c>)
            str = va_arg(vl, char*);
 8004d5e:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004d62:	f1b9 0f00 	cmp.w	r9, #0
 8004d66:	bf08      	it	eq
 8004d68:	4699      	moveq	r9, r3
  int len = strlen(str);
 8004d6a:	4648      	mov	r0, r9
 8004d6c:	f7fb fad0 	bl	8000310 <strlen>
  if (specifier->precision) {
 8004d70:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 8004d72:	4680      	mov	r8, r0
  if (specifier->precision) {
 8004d74:	b113      	cbz	r3, 8004d7c <vlc_print+0x1a4>
    len = (len > specifier->precision)?specifier->precision:len;
 8004d76:	4298      	cmp	r0, r3
 8004d78:	bfa8      	it	ge
 8004d7a:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004d7c:	9e07      	ldr	r6, [sp, #28]
 8004d7e:	f016 0602 	ands.w	r6, r6, #2
 8004d82:	d014      	beq.n	8004dae <vlc_print+0x1d6>
  int count = 0;
 8004d84:	2600      	movs	r6, #0
 8004d86:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8004d88:	ebaa 0309 	sub.w	r3, sl, r9
 8004d8c:	4598      	cmp	r8, r3
 8004d8e:	dc14      	bgt.n	8004dba <vlc_print+0x1e2>
  if (specifier->flags & FLAG_NEG_PAD) {
 8004d90:	9b07      	ldr	r3, [sp, #28]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	bfa8      	it	ge
 8004d98:	4446      	addge	r6, r8
 8004d9a:	079b      	lsls	r3, r3, #30
 8004d9c:	d41e      	bmi.n	8004ddc <vlc_print+0x204>
            count += _write_string(str, &specifier);
 8004d9e:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8004da0:	9a02      	ldr	r2, [sp, #8]
 8004da2:	e722      	b.n	8004bea <vlc_print+0x12>
      _WRITE_C(' ');
 8004da4:	3601      	adds	r6, #1
 8004da6:	2120      	movs	r1, #32
 8004da8:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8004dac:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8004dae:	eb08 0306 	add.w	r3, r8, r6
 8004db2:	9a05      	ldr	r2, [sp, #20]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	dbf5      	blt.n	8004da4 <vlc_print+0x1cc>
 8004db8:	e7e5      	b.n	8004d86 <vlc_print+0x1ae>
    _WRITE_C(*str++);
 8004dba:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004dbe:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8004dc2:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8004dc4:	e7e0      	b.n	8004d88 <vlc_print+0x1b0>
      _WRITE_C(' ');
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	2120      	movs	r1, #32
 8004dca:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8004dce:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8004dd0:	eb08 0306 	add.w	r3, r8, r6
 8004dd4:	9a05      	ldr	r2, [sp, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	dcf5      	bgt.n	8004dc6 <vlc_print+0x1ee>
 8004dda:	e7e0      	b.n	8004d9e <vlc_print+0x1c6>
 8004ddc:	eba8 0806 	sub.w	r8, r8, r6
 8004de0:	e7f6      	b.n	8004dd0 <vlc_print+0x1f8>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004de2:	9b07      	ldr	r3, [sp, #28]
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 8004dea:	2308      	movs	r3, #8
 8004dec:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8004df6:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004df8:	aa05      	add	r2, sp, #20
 8004dfa:	f854 0b04 	ldr.w	r0, [r4], #4
 8004dfe:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004e00:	f043 0310 	orr.w	r3, r3, #16
 8004e04:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004e06:	f7ff fe53 	bl	8004ab0 <_write_number>
 8004e0a:	4405      	add	r5, r0
            break;
 8004e0c:	e7c8      	b.n	8004da0 <vlc_print+0x1c8>
            specifier.flags |= FLAG_IS_SIGNED;
 8004e0e:	9b07      	ldr	r3, [sp, #28]
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	9307      	str	r3, [sp, #28]
            if (c == 'u')
 8004e16:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	f104 0604 	add.w	r6, r4, #4
            count += _write_number(val, &specifier);
 8004e1e:	aa05      	add	r2, sp, #20
              val = va_arg(vl, unsigned int);
 8004e20:	bf0c      	ite	eq
 8004e22:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 8004e24:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8004e26:	f7ff fe43 	bl	8004ab0 <_write_number>
            break;
 8004e2a:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 8004e2c:	4405      	add	r5, r0
            break;
 8004e2e:	e7b7      	b.n	8004da0 <vlc_print+0x1c8>
            dbl = va_arg(vl, double);
 8004e30:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8004e32:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 8004e34:	f024 0407 	bic.w	r4, r4, #7
 8004e38:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8004e3c:	b90b      	cbnz	r3, 8004e42 <vlc_print+0x26a>
              specifier.precision = 6;
 8004e3e:	2306      	movs	r3, #6
 8004e40:	9306      	str	r3, [sp, #24]
  float mul = 1.0;
 8004e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8004e46:	9e06      	ldr	r6, [sp, #24]
    mul *= 10;
 8004e48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	42b3      	cmp	r3, r6
 8004e50:	f2c0 80a6 	blt.w	8004fa0 <vlc_print+0x3c8>
  if (is_signed)
 8004e54:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5c:	f140 80a4 	bpl.w	8004fa8 <vlc_print+0x3d0>
    number = -number;
 8004e60:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 8004e64:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  uint32_t count = 0;
 8004e68:	f04f 0800 	mov.w	r8, #0
  number += (half_ / mul);
 8004e6c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t idx = sizeof(buf) - 1;
 8004e70:	f04f 093f 	mov.w	r9, #63	; 0x3f
  number += (half_ / mul);
 8004e74:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8004e78:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8004e7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e80:	ec51 0b17 	vmov	r0, r1, d7
 8004e84:	f7fb fbc4 	bl	8000610 <__aeabi_d2ulz>
 8004e88:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 8004e8a:	469a      	mov	sl, r3
 8004e8c:	220a      	movs	r2, #10
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9101      	str	r1, [sp, #4]
 8004e92:	4650      	mov	r0, sl
 8004e94:	f7fb fba2 	bl	80005dc <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004e98:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 8004e9c:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 8004e9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 8004ea2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    chr = (val - t * 10) + '0';
 8004ea6:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 8004eaa:	f109 0c68 	add.w	ip, r9, #104	; 0x68
 8004eae:	44ec      	add	ip, sp
 8004eb0:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 8004eb4:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 8004eb8:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 8004eba:	bf05      	ittet	eq
 8004ebc:	3268      	addeq	r2, #104	; 0x68
 8004ebe:	202e      	moveq	r0, #46	; 0x2e
    buf[idx--] = chr;
 8004ec0:	4691      	movne	r9, r2
      buf[idx--] = '.';
 8004ec2:	f1a9 0902 	subeq.w	r9, r9, #2
 8004ec6:	bf05      	ittet	eq
 8004ec8:	446a      	addeq	r2, sp
      count++;
 8004eca:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8004ece:	4680      	movne	r8, r0
      buf[idx--] = '.';
 8004ed0:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 8004ed4:	f1ba 0f0a 	cmp.w	sl, #10
 8004ed8:	9a01      	ldr	r2, [sp, #4]
 8004eda:	f172 0200 	sbcs.w	r2, r2, #0
 8004ede:	d2d4      	bcs.n	8004e8a <vlc_print+0x2b2>
    buf[idx--] = '0';
 8004ee0:	45b0      	cmp	r8, r6
 8004ee2:	f1c6 0001 	rsb	r0, r6, #1
 8004ee6:	eba6 0a08 	sub.w	sl, r6, r8
 8004eea:	ab0a      	add	r3, sp, #40	; 0x28
 8004eec:	4440      	add	r0, r8
 8004eee:	bf84      	itt	hi
 8004ef0:	2001      	movhi	r0, #1
 8004ef2:	f04f 0a00 	movhi.w	sl, #0
 8004ef6:	2130      	movs	r1, #48	; 0x30
 8004ef8:	4448      	add	r0, r9
 8004efa:	4652      	mov	r2, sl
 8004efc:	4418      	add	r0, r3
 8004efe:	f006 f9fb 	bl	800b2f8 <memset>
 8004f02:	eba8 0306 	sub.w	r3, r8, r6
 8004f06:	45b0      	cmp	r8, r6
 8004f08:	bf88      	it	hi
 8004f0a:	2300      	movhi	r3, #0
 8004f0c:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 8004f0e:	4546      	cmp	r6, r8
 8004f10:	4499      	add	r9, r3
 8004f12:	f106 0601 	add.w	r6, r6, #1
 8004f16:	d108      	bne.n	8004f2a <vlc_print+0x352>
    buf[idx--] = '.';
 8004f18:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8004f1c:	222e      	movs	r2, #46	; 0x2e
    count++;
 8004f1e:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 8004f20:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004f24:	446b      	add	r3, sp
 8004f26:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8004f2a:	4546      	cmp	r6, r8
 8004f2c:	d109      	bne.n	8004f42 <vlc_print+0x36a>
    buf[idx--] = '0';
 8004f2e:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8004f32:	2230      	movs	r2, #48	; 0x30
    count++;
 8004f34:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 8004f38:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004f3c:	446b      	add	r3, sp
 8004f3e:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8004f42:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d509      	bpl.n	8004f60 <vlc_print+0x388>
    buf[idx--] = '-';
 8004f4c:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8004f50:	222d      	movs	r2, #45	; 0x2d
    count++;
 8004f52:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 8004f56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004f5a:	446b      	add	r3, sp
 8004f5c:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8004f60:	9e05      	ldr	r6, [sp, #20]
    buf[idx--] = ' ';
 8004f62:	ab0a      	add	r3, sp, #40	; 0x28
 8004f64:	2120      	movs	r1, #32
 8004f66:	45b0      	cmp	r8, r6
 8004f68:	f1c6 0001 	rsb	r0, r6, #1
 8004f6c:	eba6 0a08 	sub.w	sl, r6, r8
 8004f70:	4440      	add	r0, r8
 8004f72:	bf84      	itt	hi
 8004f74:	2001      	movhi	r0, #1
 8004f76:	f04f 0a00 	movhi.w	sl, #0
 8004f7a:	4448      	add	r0, r9
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4418      	add	r0, r3
 8004f80:	f006 f9ba 	bl	800b2f8 <memset>
  for(int i = 0; i < count; i++) {
 8004f84:	eba8 0306 	sub.w	r3, r8, r6
 8004f88:	45b0      	cmp	r8, r6
 8004f8a:	bf88      	it	hi
 8004f8c:	2300      	movhi	r3, #0
 8004f8e:	44d0      	add	r8, sl
 8004f90:	2600      	movs	r6, #0
 8004f92:	4499      	add	r9, r3
 8004f94:	ab0a      	add	r3, sp, #40	; 0x28
 8004f96:	4499      	add	r9, r3
 8004f98:	45b0      	cmp	r8, r6
 8004f9a:	d108      	bne.n	8004fae <vlc_print+0x3d6>
            count += _write_double(dbl, &specifier);
 8004f9c:	4445      	add	r5, r8
            break;
 8004f9e:	e6ff      	b.n	8004da0 <vlc_print+0x1c8>
    mul *= 10;
 8004fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
  for (int i=0;i <specifier->precision; i++)
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	e752      	b.n	8004e4e <vlc_print+0x276>
 8004fa8:	eeb0 5b48 	vmov.f64	d5, d8
 8004fac:	e75a      	b.n	8004e64 <vlc_print+0x28c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004fae:	f819 1f01 	ldrb.w	r1, [r9, #1]!
  for(int i = 0; i < count; i++) {
 8004fb2:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004fb4:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8004fb8:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004fba:	e7ed      	b.n	8004f98 <vlc_print+0x3c0>
 8004fbc:	f1be 0f00 	cmp.w	lr, #0
 8004fc0:	d000      	beq.n	8004fc4 <vlc_print+0x3ec>
 8004fc2:	9005      	str	r0, [sp, #20]
 8004fc4:	f1b8 0f00 	cmp.w	r8, #0
 8004fc8:	d000      	beq.n	8004fcc <vlc_print+0x3f4>
 8004fca:	9206      	str	r2, [sp, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f43f ae81 	beq.w	8004cd4 <vlc_print+0xfc>
 8004fd2:	9b01      	ldr	r3, [sp, #4]
 8004fd4:	9307      	str	r3, [sp, #28]
 8004fd6:	e67d      	b.n	8004cd4 <vlc_print+0xfc>
          has_precision = true;
 8004fd8:	f04f 0c01 	mov.w	ip, #1
 8004fdc:	e627      	b.n	8004c2e <vlc_print+0x56>
          long_type = true;
 8004fde:	2101      	movs	r1, #1
 8004fe0:	9103      	str	r1, [sp, #12]
      while (done == false) {
 8004fe2:	e624      	b.n	8004c2e <vlc_print+0x56>
 8004fe4:	0800e518 	.word	0x0800e518

08004fe8 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	460d      	mov	r5, r1
 8004fec:	b0a0      	sub	sp, #128	; 0x80
 8004fee:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004ff0:	f001 fe7c 	bl	8006cec <ai_platform_context_acquire>
 8004ff4:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	d032      	beq.n	8005060 <ai_network_get_report+0x78>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d02d      	beq.n	800505a <ai_network_get_report+0x72>
  {
    ai_network_report r = {
 8004ffe:	226c      	movs	r2, #108	; 0x6c
 8005000:	2100      	movs	r1, #0
 8005002:	a805      	add	r0, sp, #20
 8005004:	f006 f978 	bl	800b2f8 <memset>
 8005008:	4b16      	ldr	r3, [pc, #88]	; (8005064 <ai_network_get_report+0x7c>)
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	4b16      	ldr	r3, [pc, #88]	; (8005068 <ai_network_get_report+0x80>)
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <ai_network_get_report+0x84>)
 8005012:	9303      	str	r3, [sp, #12]
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <ai_network_get_report+0x88>)
 8005016:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005018:	f001 fc3a 	bl	8006890 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800501c:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 800501e:	f001 fcb5 	bl	800698c <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <ai_network_get_report+0x8c>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005024:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	f240 1307 	movw	r3, #263	; 0x107
 800502c:	f8ad 3020 	strh.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005030:	f001 fd3c 	bl	8006aac <ai_platform_api_get_version>
 8005034:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005036:	f001 fdc9 	bl	8006bcc <ai_platform_interface_api_get_version>
    ai_network_report r = {
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <ai_network_get_report+0x90>)
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800503c:	a901      	add	r1, sp, #4
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800503e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005040:	4630      	mov	r0, r6
    ai_network_report r = {
 8005042:	930c      	str	r3, [sp, #48]	; 0x30
 8005044:	4b0d      	ldr	r3, [pc, #52]	; (800507c <ai_network_get_report+0x94>)
 8005046:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005048:	f001 ffce 	bl	8006fe8 <ai_platform_api_get_network_report>
 800504c:	4604      	mov	r4, r0
 800504e:	b120      	cbz	r0, 800505a <ai_network_get_report+0x72>

    *report = r;
 8005050:	227c      	movs	r2, #124	; 0x7c
 8005052:	a901      	add	r1, sp, #4
 8005054:	4628      	mov	r0, r5
 8005056:	f006 f941 	bl	800b2dc <memcpy>
    return true;
  }
  return false;
}
 800505a:	4620      	mov	r0, r4
 800505c:	b020      	add	sp, #128	; 0x80
 800505e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005060:	462c      	mov	r4, r5
 8005062:	e7fa      	b.n	800505a <ai_network_get_report+0x72>
 8005064:	0800e4e2 	.word	0x0800e4e2
 8005068:	0800e51f 	.word	0x0800e51f
 800506c:	0800e540 	.word	0x0800e540
 8005070:	0800e559 	.word	0x0800e559
 8005074:	0804a7af 	.word	0x0804a7af
 8005078:	00068b6e 	.word	0x00068b6e
 800507c:	a1facade 	.word	0xa1facade

08005080 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005080:	f001 beb8 	b.w	8006df4 <ai_platform_network_get_error>

08005084 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005084:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005086:	2305      	movs	r3, #5
 8005088:	2200      	movs	r2, #0
 800508a:	e9cd 3200 	strd	r3, r2, [sp]
 800508e:	2301      	movs	r3, #1
 8005090:	4a02      	ldr	r2, [pc, #8]	; (800509c <ai_network_create+0x18>)
 8005092:	f002 fbd7 	bl	8007844 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005096:	b003      	add	sp, #12
 8005098:	f85d fb04 	ldr.w	pc, [sp], #4
 800509c:	240008c8 	.word	0x240008c8

080050a0 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80050a0:	f002 bd70 	b.w	8007b84 <ai_platform_network_destroy>

080050a4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80050a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a6:	4607      	mov	r7, r0
 80050a8:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80050aa:	f002 fe5d 	bl	8007d68 <ai_platform_network_init>
  if (!net_ctx) return false;
 80050ae:	4604      	mov	r4, r0
 80050b0:	2800      	cmp	r0, #0
 80050b2:	f000 8083 	beq.w	80051bc <ai_network_init+0x118>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80050b6:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80050b8:	4632      	mov	r2, r6
 80050ba:	2101      	movs	r1, #1
 80050bc:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80050be:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80050c0:	f001 fb1a 	bl	80066f8 <ai_platform_get_weights_map>
 80050c4:	4605      	mov	r5, r0
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d07a      	beq.n	80051c0 <ai_network_init+0x11c>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80050ca:	4a43      	ldr	r2, [pc, #268]	; (80051d8 <ai_network_init+0x134>)
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d2:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 80050d4:	9b01      	ldr	r3, [sp, #4]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80050d6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80050da:	4a40      	ldr	r2, [pc, #256]	; (80051dc <ai_network_init+0x138>)
 80050dc:	6811      	ldr	r1, [r2, #0]
 80050de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050e2:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 600);
 80050e4:	f503 7116 	add.w	r1, r3, #600	; 0x258
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 600);
 80050e8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80050ec:	4a3c      	ldr	r2, [pc, #240]	; (80051e0 <ai_network_init+0x13c>)
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050f4:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 624);
 80050f6:	f503 711c 	add.w	r1, r3, #624	; 0x270
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 624);
 80050fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80050fe:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <ai_network_init+0x140>)
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005106:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 10224);
 8005108:	f503 511f 	add.w	r1, r3, #10176	; 0x27c0
 800510c:	3130      	adds	r1, #48	; 0x30
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 10224);
 800510e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005112:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <ai_network_init+0x144>)
 8005114:	6811      	ldr	r1, [r2, #0]
 8005116:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800511a:	6011      	str	r1, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 10288);
 800511c:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
 8005120:	3130      	adds	r1, #48	; 0x30
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 10288);
 8005122:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005126:	4a31      	ldr	r2, [pc, #196]	; (80051ec <ai_network_init+0x148>)
 8005128:	6811      	ldr	r1, [r2, #0]
 800512a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800512e:	6011      	str	r1, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 202288);
 8005130:	f503 3145 	add.w	r1, r3, #201728	; 0x31400
    dense_7_weights_array.data = AI_PTR(weights_map[0] + 242608);
 8005134:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 202288);
 8005138:	f501 710c 	add.w	r1, r1, #560	; 0x230
    dense_7_weights_array.data = AI_PTR(weights_map[0] + 242608);
 800513c:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    dense_6_weights_array.data_start = AI_PTR(weights_map[0] + 202288);
 8005140:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005144:	4a2a      	ldr	r2, [pc, #168]	; (80051f0 <ai_network_init+0x14c>)
 8005146:	6811      	ldr	r1, [r2, #0]
 8005148:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_7_weights_array.data_start = AI_PTR(weights_map[0] + 242608);
 800514c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005150:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005152:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005154:	4632      	mov	r2, r6
 8005156:	2101      	movs	r1, #1
 8005158:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800515a:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800515c:	f001 fb22 	bl	80067a4 <ai_platform_get_activations_map>
 8005160:	4606      	mov	r6, r0
 8005162:	b398      	cbz	r0, 80051cc <ai_network_init+0x128>
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 5088);
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	4923      	ldr	r1, [pc, #140]	; (80051f4 <ai_network_init+0x150>)
 8005168:	f503 529f 	add.w	r2, r3, #5088	; 0x13e0
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 384);
 800516c:	f503 70c0 	add.w	r0, r3, #384	; 0x180
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 5088);
 8005170:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 384);
 8005174:	4920      	ldr	r1, [pc, #128]	; (80051f8 <ai_network_init+0x154>)
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 384);
 8005176:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 5088);
 800517a:	4920      	ldr	r1, [pc, #128]	; (80051fc <ai_network_init+0x158>)
    conv2d_2_scratch0_array.data_start = AI_PTR(activations_map[0] + 5088);
 800517c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 0);
 8005180:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <ai_network_init+0x15c>)
    dense_5_output_array.data = AI_PTR(activations_map[0] + 1600);
 8005182:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
    conv2d_2_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005186:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 1600);
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <ai_network_init+0x160>)
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 1600);
 800518c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_5_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <ai_network_init+0x164>)
    dense_6_output_array.data = AI_PTR(activations_map[0] + 480);
 8005192:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
    nl_5_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8005196:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_6_output_array.data = AI_PTR(activations_map[0] + 480);
 800519a:	4a1c      	ldr	r2, [pc, #112]	; (800520c <ai_network_init+0x168>)
    dense_6_output_array.data_start = AI_PTR(activations_map[0] + 480);
 800519c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_6_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <ai_network_init+0x16c>)
    nl_6_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80051a2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_7_output_array.data = AI_PTR(activations_map[0] + 336);
 80051a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <ai_network_init+0x170>)
    dense_7_output_array.data_start = AI_PTR(activations_map[0] + 336);
 80051ac:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80051b0:	4638      	mov	r0, r7
 80051b2:	f002 ff6b 	bl	800808c <ai_platform_network_post_init>
 80051b6:	4030      	ands	r0, r6
 80051b8:	4028      	ands	r0, r5
 80051ba:	b2c0      	uxtb	r0, r0

  return ok;
}
 80051bc:	b003      	add	sp, #12
 80051be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80051c0:	2212      	movs	r2, #18
 80051c2:	2130      	movs	r1, #48	; 0x30
 80051c4:	4620      	mov	r0, r4
 80051c6:	f001 ff09 	bl	8006fdc <ai_platform_network_set_error>
  return false;
 80051ca:	e7c2      	b.n	8005152 <ai_network_init+0xae>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80051cc:	2213      	movs	r2, #19
 80051ce:	2130      	movs	r1, #48	; 0x30
 80051d0:	4620      	mov	r0, r4
 80051d2:	f001 ff03 	bl	8006fdc <ai_platform_network_set_error>
  return false;
 80051d6:	e7eb      	b.n	80051b0 <ai_network_init+0x10c>
 80051d8:	24000634 	.word	0x24000634
 80051dc:	24000554 	.word	0x24000554
 80051e0:	2400075c 	.word	0x2400075c
 80051e4:	24000660 	.word	0x24000660
 80051e8:	240007d0 	.word	0x240007d0
 80051ec:	24000844 	.word	0x24000844
 80051f0:	240008b8 	.word	0x240008b8
 80051f4:	24000608 	.word	0x24000608
 80051f8:	240005dc 	.word	0x240005dc
 80051fc:	24000730 	.word	0x24000730
 8005200:	24000704 	.word	0x24000704
 8005204:	240007a4 	.word	0x240007a4
 8005208:	2400094c 	.word	0x2400094c
 800520c:	24000818 	.word	0x24000818
 8005210:	24000998 	.word	0x24000998
 8005214:	2400088c 	.word	0x2400088c

08005218 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005218:	f003 b84e 	b.w	80082b8 <ai_platform_network_process>

0800521c <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800521c:	2200      	movs	r2, #0
 800521e:	f003 b84b 	b.w	80082b8 <ai_platform_network_process>
	...

08005224 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005224:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8005226:	4603      	mov	r3, r0
{
 8005228:	b085      	sub	sp, #20
  if (!params) return false;
 800522a:	b170      	cbz	r0, 800524a <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800522c:	4c08      	ldr	r4, [pc, #32]	; (8005250 <ai_network_data_params_get+0x2c>)
 800522e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005230:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8005232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005236:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800523a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800523e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005242:	4629      	mov	r1, r5
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fb05 	bl	8006854 <ai_platform_bind_network_params>
}
 800524a:	b005      	add	sp, #20
 800524c:	bd30      	pop	{r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	0800e450 	.word	0x0800e450

08005254 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 8005254:	2300      	movs	r3, #0
    iter->pos = fields;
 8005256:	e9c0 1100 	strd	r1, r1, [r0]
    iter->dest_struct = dest_struct;
 800525a:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800525e:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 8005262:	441a      	add	r2, r3
 8005264:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005266:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 800526a:	441a      	add	r2, r3
 800526c:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 800526e:	8808      	ldrh	r0, [r1, #0]
}
 8005270:	3800      	subs	r0, #0
 8005272:	bf18      	it	ne
 8005274:	2001      	movne	r0, #1
 8005276:	4770      	bx	lr

08005278 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8005278:	6841      	ldr	r1, [r0, #4]
{
 800527a:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 800527c:	880a      	ldrh	r2, [r1, #0]
{
 800527e:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8005280:	2a00      	cmp	r2, #0
 8005282:	d038      	beq.n	80052f6 <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8005284:	f101 020f 	add.w	r2, r1, #15
    
    if (iter->pos->tag == 0)
 8005288:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 800528c:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 800528e:	b92c      	cbnz	r4, 800529c <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8005290:	68c2      	ldr	r2, [r0, #12]
 8005292:	6801      	ldr	r1, [r0, #0]
 8005294:	f7ff ffde 	bl	8005254 <pb_field_iter_begin>
        return false;
 8005298:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 800529a:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800529c:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 800529e:	f8b1 2007 	ldrh.w	r2, [r1, #7]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 80052a2:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 80052a6:	8a4c      	ldrh	r4, [r1, #18]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 80052a8:	2e30      	cmp	r6, #48	; 0x30
 80052aa:	d10a      	bne.n	80052c2 <pb_field_iter_next+0x4a>
 80052ac:	7c4d      	ldrb	r5, [r1, #17]
 80052ae:	f005 0530 	and.w	r5, r5, #48	; 0x30
 80052b2:	2d30      	cmp	r5, #48	; 0x30
 80052b4:	d119      	bne.n	80052ea <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 80052b6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80052ba:	42ac      	cmp	r4, r5
 80052bc:	d115      	bne.n	80052ea <pb_field_iter_next+0x72>
            return true;
 80052be:	2001      	movs	r0, #1
 80052c0:	e7eb      	b.n	800529a <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 80052c2:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 80052c6:	2d20      	cmp	r5, #32
 80052c8:	d10f      	bne.n	80052ea <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 80052ca:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 80052ce:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 80052d0:	b916      	cbnz	r6, 80052d8 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 80052d2:	6898      	ldr	r0, [r3, #8]
 80052d4:	3001      	adds	r0, #1
 80052d6:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80052d8:	4414      	add	r4, r2
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	4422      	add	r2, r4
 80052de:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80052e0:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 80052e4:	440a      	add	r2, r1
 80052e6:	615a      	str	r2, [r3, #20]
        return true;
 80052e8:	e7e9      	b.n	80052be <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 80052ea:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 80052ee:	2880      	cmp	r0, #128	; 0x80
 80052f0:	bf08      	it	eq
 80052f2:	2204      	moveq	r2, #4
 80052f4:	e7ec      	b.n	80052d0 <pb_field_iter_next+0x58>
        return false;
 80052f6:	4610      	mov	r0, r2
 80052f8:	e7cf      	b.n	800529a <pb_field_iter_next+0x22>

080052fa <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 8005300:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8005302:	6863      	ldr	r3, [r4, #4]
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	42aa      	cmp	r2, r5
 8005308:	d104      	bne.n	8005314 <pb_field_iter_find+0x1a>
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2b08      	cmp	r3, #8
 8005312:	d107      	bne.n	8005324 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8005314:	4620      	mov	r0, r4
 8005316:	f7ff ffaf 	bl	8005278 <pb_field_iter_next>
    } while (iter->pos != start);
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	42b3      	cmp	r3, r6
 800531e:	d1f0      	bne.n	8005302 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8005320:	2000      	movs	r0, #0
}
 8005322:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8005324:	2001      	movs	r0, #1
 8005326:	e7fc      	b.n	8005322 <pb_field_iter_find+0x28>

08005328 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005328:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800532a:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 800532c:	18a3      	adds	r3, r4, r2
 800532e:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8005330:	b939      	cbnz	r1, 8005342 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8005332:	2001      	movs	r0, #1
 8005334:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 8005336:	5ce0      	ldrb	r0, [r4, r3]
 8005338:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 800533a:	3301      	adds	r3, #1
 800533c:	4293      	cmp	r3, r2
 800533e:	d1fa      	bne.n	8005336 <buf_read+0xe>
 8005340:	e7f7      	b.n	8005332 <buf_read+0xa>
 8005342:	2300      	movs	r3, #0
 8005344:	e7fa      	b.n	800533c <buf_read+0x14>

08005346 <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8005346:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8005348:	6845      	ldr	r5, [r0, #4]
{
 800534a:	b086      	sub	sp, #24
 800534c:	4603      	mov	r3, r0
    type = iter->pos->type;
 800534e:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005350:	f002 060f 	and.w	r6, r2, #15
 8005354:	2e08      	cmp	r6, #8
 8005356:	d11e      	bne.n	8005396 <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8005358:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800535a:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800535c:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 800535e:	b90c      	cbnz	r4, 8005364 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8005360:	b006      	add	sp, #24
 8005362:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005364:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005366:	4668      	mov	r0, sp
 8005368:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800536a:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 800536c:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800536e:	4629      	mov	r1, r5
 8005370:	f7ff ff70 	bl	8005254 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005374:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 8005376:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 8005378:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 800537a:	f104 030c 	add.w	r3, r4, #12
 800537e:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005380:	78ab      	ldrb	r3, [r5, #2]
 8005382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005386:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8005388:	bf04      	itt	eq
 800538a:	1d23      	addeq	r3, r4, #4
 800538c:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 800538e:	f7ff ffda 	bl	8005346 <pb_field_set_to_default>
            ext = ext->next;
 8005392:	68a4      	ldr	r4, [r4, #8]
 8005394:	e7e3      	b.n	800535e <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005396:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 800539a:	d127      	bne.n	80053ec <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800539c:	f002 0030 	and.w	r0, r2, #48	; 0x30
 80053a0:	2810      	cmp	r0, #16
 80053a2:	d110      	bne.n	80053c6 <pb_field_set_to_default+0x80>
 80053a4:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 80053a8:	4282      	cmp	r2, r0
 80053aa:	d000      	beq.n	80053ae <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 80053ac:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80053ae:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053b0:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80053b4:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80053b6:	d10b      	bne.n	80053d0 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053b8:	4601      	mov	r1, r0
 80053ba:	4620      	mov	r0, r4
}
 80053bc:	b006      	add	sp, #24
 80053be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053c2:	f000 b81b 	b.w	80053fc <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053c6:	0690      	lsls	r0, r2, #26
 80053c8:	d5f1      	bpl.n	80053ae <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	8019      	strh	r1, [r3, #0]
}
 80053ce:	e7c7      	b.n	8005360 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80053d0:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 80053d4:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 80053d6:	b124      	cbz	r4, 80053e2 <pb_field_set_to_default+0x9c>
}
 80053d8:	b006      	add	sp, #24
 80053da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80053de:	f005 bf7d 	b.w	800b2dc <memcpy>
}
 80053e2:	b006      	add	sp, #24
 80053e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 80053e8:	f005 bf86 	b.w	800b2f8 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80053ec:	2980      	cmp	r1, #128	; 0x80
 80053ee:	d1b7      	bne.n	8005360 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 80053f0:	6900      	ldr	r0, [r0, #16]
 80053f2:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053f4:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 80053f6:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053f8:	d5b2      	bpl.n	8005360 <pb_field_set_to_default+0x1a>
 80053fa:	e7e6      	b.n	80053ca <pb_field_set_to_default+0x84>

080053fc <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 80053fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80053fe:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8005400:	4601      	mov	r1, r0
 8005402:	4668      	mov	r0, sp
 8005404:	f7ff ff26 	bl	8005254 <pb_field_iter_begin>
 8005408:	b130      	cbz	r0, 8005418 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800540a:	4668      	mov	r0, sp
 800540c:	f7ff ff9b 	bl	8005346 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8005410:	4668      	mov	r0, sp
 8005412:	f7ff ff31 	bl	8005278 <pb_field_iter_next>
 8005416:	e7f7      	b.n	8005408 <pb_message_set_to_defaults+0xc>
}
 8005418:	b007      	add	sp, #28
 800541a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005420 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8005420:	6883      	ldr	r3, [r0, #8]
{
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8005426:	b93b      	cbnz	r3, 8005438 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005428:	68c2      	ldr	r2, [r0, #12]
 800542a:	490b      	ldr	r1, [pc, #44]	; (8005458 <pb_readbyte+0x38>)
 800542c:	2a00      	cmp	r2, #0
 800542e:	bf08      	it	eq
 8005430:	460a      	moveq	r2, r1
 8005432:	60c2      	str	r2, [r0, #12]
 8005434:	4618      	mov	r0, r3
}
 8005436:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8005438:	6803      	ldr	r3, [r0, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	4798      	blx	r3
 800543e:	b930      	cbnz	r0, 800544e <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8005440:	68e3      	ldr	r3, [r4, #12]
 8005442:	4a06      	ldr	r2, [pc, #24]	; (800545c <pb_readbyte+0x3c>)
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf08      	it	eq
 8005448:	4613      	moveq	r3, r2
 800544a:	60e3      	str	r3, [r4, #12]
 800544c:	e7f3      	b.n	8005436 <pb_readbyte+0x16>
    stream->bytes_left--;
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60a3      	str	r3, [r4, #8]
    return true;    
 8005454:	e7ef      	b.n	8005436 <pb_readbyte+0x16>
 8005456:	bf00      	nop
 8005458:	08049eb0 	.word	0x08049eb0
 800545c:	08049ebe 	.word	0x08049ebe

08005460 <pb_decode_varint32_eof>:
{
 8005460:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005464:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8005466:	f10d 0107 	add.w	r1, sp, #7
{
 800546a:	4605      	mov	r5, r0
 800546c:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 800546e:	f7ff ffd7 	bl	8005420 <pb_readbyte>
 8005472:	4606      	mov	r6, r0
 8005474:	b958      	cbnz	r0, 800548e <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8005476:	68ab      	ldr	r3, [r5, #8]
 8005478:	b10b      	cbz	r3, 800547e <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800547a:	2600      	movs	r6, #0
 800547c:	e003      	b.n	8005486 <pb_decode_varint32_eof+0x26>
            if (eof)
 800547e:	2c00      	cmp	r4, #0
 8005480:	d0fb      	beq.n	800547a <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8005482:	2301      	movs	r3, #1
 8005484:	7023      	strb	r3, [r4, #0]
}
 8005486:	4630      	mov	r0, r6
 8005488:	b002      	add	sp, #8
 800548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 800548e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005492:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005496:	2b00      	cmp	r3, #0
 8005498:	da2a      	bge.n	80054f0 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 800549a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 800549e:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 80054a0:	f10d 0107 	add.w	r1, sp, #7
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff ffbb 	bl	8005420 <pb_readbyte>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d0e5      	beq.n	800547a <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80054ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 80054b2:	2f1f      	cmp	r7, #31
 80054b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054b8:	d90f      	bls.n	80054da <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80054ba:	2f3f      	cmp	r7, #63	; 0x3f
 80054bc:	bf34      	ite	cc
 80054be:	21ff      	movcc	r1, #255	; 0xff
 80054c0:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80054c2:	b162      	cbz	r2, 80054de <pb_decode_varint32_eof+0x7e>
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	da01      	bge.n	80054cc <pb_decode_varint32_eof+0x6c>
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d008      	beq.n	80054de <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80054cc:	68eb      	ldr	r3, [r5, #12]
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <pb_decode_varint32_eof+0x98>)
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf08      	it	eq
 80054d4:	4613      	moveq	r3, r2
 80054d6:	60eb      	str	r3, [r5, #12]
 80054d8:	e7cf      	b.n	800547a <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80054da:	40ba      	lsls	r2, r7
 80054dc:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 80054de:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 80054e0:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 80054e4:	d4dc      	bmi.n	80054a0 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 80054e6:	2f23      	cmp	r7, #35	; 0x23
 80054e8:	d102      	bne.n	80054f0 <pb_decode_varint32_eof+0x90>
 80054ea:	f013 0f70 	tst.w	r3, #112	; 0x70
 80054ee:	d1ed      	bne.n	80054cc <pb_decode_varint32_eof+0x6c>
   *dest = result;
 80054f0:	f8c8 4000 	str.w	r4, [r8]
   return true;
 80054f4:	e7c7      	b.n	8005486 <pb_decode_varint32_eof+0x26>
 80054f6:	bf00      	nop
 80054f8:	08049ec7 	.word	0x08049ec7

080054fc <pb_read>:
{
 80054fc:	b530      	push	{r4, r5, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	b085      	sub	sp, #20
 8005502:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8005504:	b9a9      	cbnz	r1, 8005532 <pb_read+0x36>
 8005506:	6802      	ldr	r2, [r0, #0]
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <pb_read+0x6c>)
 800550a:	429a      	cmp	r2, r3
 800550c:	d011      	beq.n	8005532 <pb_read+0x36>
		while (count > 16)
 800550e:	2d10      	cmp	r5, #16
 8005510:	d806      	bhi.n	8005520 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8005512:	462a      	mov	r2, r5
 8005514:	4669      	mov	r1, sp
 8005516:	4620      	mov	r0, r4
 8005518:	f7ff fff0 	bl	80054fc <pb_read>
}
 800551c:	b005      	add	sp, #20
 800551e:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8005520:	2210      	movs	r2, #16
 8005522:	4669      	mov	r1, sp
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff ffe9 	bl	80054fc <pb_read>
 800552a:	2800      	cmp	r0, #0
 800552c:	d0f6      	beq.n	800551c <pb_read+0x20>
			count -= 16;
 800552e:	3d10      	subs	r5, #16
 8005530:	e7ed      	b.n	800550e <pb_read+0x12>
    if (stream->bytes_left < count)
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	42ab      	cmp	r3, r5
 8005536:	d207      	bcs.n	8005548 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005538:	68e3      	ldr	r3, [r4, #12]
 800553a:	2000      	movs	r0, #0
 800553c:	4a0b      	ldr	r2, [pc, #44]	; (800556c <pb_read+0x70>)
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf08      	it	eq
 8005542:	4613      	moveq	r3, r2
 8005544:	60e3      	str	r3, [r4, #12]
 8005546:	e7e9      	b.n	800551c <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	462a      	mov	r2, r5
 800554c:	4620      	mov	r0, r4
 800554e:	4798      	blx	r3
 8005550:	b930      	cbnz	r0, 8005560 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <pb_read+0x74>)
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf08      	it	eq
 800555a:	4613      	moveq	r3, r2
 800555c:	60e3      	str	r3, [r4, #12]
 800555e:	e7dd      	b.n	800551c <pb_read+0x20>
    stream->bytes_left -= count;
 8005560:	68a2      	ldr	r2, [r4, #8]
 8005562:	1b52      	subs	r2, r2, r5
 8005564:	60a2      	str	r2, [r4, #8]
    return true;
 8005566:	e7d9      	b.n	800551c <pb_read+0x20>
 8005568:	08005329 	.word	0x08005329
 800556c:	08049eb0 	.word	0x08049eb0
 8005570:	08049ebe 	.word	0x08049ebe

08005574 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005574:	2200      	movs	r2, #0
 8005576:	f7ff bf73 	b.w	8005460 <pb_decode_varint32_eof>
	...

0800557c <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800557c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557e:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8005580:	a901      	add	r1, sp, #4
{
 8005582:	4605      	mov	r5, r0
 8005584:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8005586:	f7ff fff5 	bl	8005574 <pb_decode_varint32>
 800558a:	4604      	mov	r4, r0
 800558c:	b188      	cbz	r0, 80055b2 <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 800558e:	9901      	ldr	r1, [sp, #4]
 8005590:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005594:	d307      	bcc.n	80055a6 <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8005596:	68eb      	ldr	r3, [r5, #12]
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800559a:	2b00      	cmp	r3, #0
 800559c:	bf08      	it	eq
 800559e:	4613      	moveq	r3, r2
 80055a0:	2400      	movs	r4, #0
 80055a2:	60eb      	str	r3, [r5, #12]
 80055a4:	e005      	b.n	80055b2 <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 80055a6:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 80055aa:	b929      	cbnz	r1, 80055b8 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 80055ac:	4630      	mov	r0, r6
 80055ae:	f005 fea3 	bl	800b2f8 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 80055b2:	4620      	mov	r0, r4
 80055b4:	b003      	add	sp, #12
 80055b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 80055b8:	4291      	cmp	r1, r2
 80055ba:	d002      	beq.n	80055c2 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80055bc:	68eb      	ldr	r3, [r5, #12]
 80055be:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <pb_dec_fixed_length_bytes+0x58>)
 80055c0:	e7eb      	b.n	800559a <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80055c2:	460a      	mov	r2, r1
 80055c4:	4628      	mov	r0, r5
 80055c6:	4631      	mov	r1, r6
 80055c8:	f7ff ff98 	bl	80054fc <pb_read>
 80055cc:	4604      	mov	r4, r0
 80055ce:	e7f0      	b.n	80055b2 <pb_dec_fixed_length_bytes+0x36>
 80055d0:	08049ed7 	.word	0x08049ed7
 80055d4:	08049ee6 	.word	0x08049ee6

080055d8 <pb_dec_string>:
{
 80055d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055da:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 80055dc:	a901      	add	r1, sp, #4
{
 80055de:	4604      	mov	r4, r0
 80055e0:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80055e2:	f7ff ffc7 	bl	8005574 <pb_decode_varint32>
 80055e6:	b190      	cbz	r0, 800560e <pb_dec_string+0x36>
    alloc_size = size + 1;
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	2600      	movs	r6, #0
 80055ec:	1c51      	adds	r1, r2, #1
 80055ee:	d207      	bcs.n	8005600 <pb_dec_string+0x28>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80055f0:	78bb      	ldrb	r3, [r7, #2]
 80055f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d10b      	bne.n	8005612 <pb_dec_string+0x3a>
        PB_RETURN_ERROR(stream, "no malloc support");
 80055fa:	68e3      	ldr	r3, [r4, #12]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <pb_dec_string+0x58>)
 80055fe:	e001      	b.n	8005604 <pb_dec_string+0x2c>
        PB_RETURN_ERROR(stream, "size too large");
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf08      	it	eq
 8005608:	4613      	moveq	r3, r2
 800560a:	4630      	mov	r0, r6
 800560c:	60e3      	str	r3, [r4, #12]
}
 800560e:	b003      	add	sp, #12
 8005610:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 8005612:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 8005616:	428b      	cmp	r3, r1
 8005618:	d202      	bcs.n	8005620 <pb_dec_string+0x48>
            PB_RETURN_ERROR(stream, "string overflow");
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	4a06      	ldr	r2, [pc, #24]	; (8005638 <pb_dec_string+0x60>)
 800561e:	e7f1      	b.n	8005604 <pb_dec_string+0x2c>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8005620:	4629      	mov	r1, r5
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ff6a 	bl	80054fc <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	54ee      	strb	r6, [r5, r3]
    return status;
 800562c:	e7ef      	b.n	800560e <pb_dec_string+0x36>
 800562e:	bf00      	nop
 8005630:	08049f17 	.word	0x08049f17
 8005634:	08049f08 	.word	0x08049f08
 8005638:	08049f29 	.word	0x08049f29

0800563c <pb_dec_bytes>:
{
 800563c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800563e:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8005640:	a901      	add	r1, sp, #4
{
 8005642:	4604      	mov	r4, r0
 8005644:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8005646:	f7ff ff95 	bl	8005574 <pb_decode_varint32>
 800564a:	b198      	cbz	r0, 8005674 <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 800564c:	9a01      	ldr	r2, [sp, #4]
 800564e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005652:	d302      	bcc.n	800565a <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8005654:	68e3      	ldr	r3, [r4, #12]
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <pb_dec_bytes+0x54>)
 8005658:	e007      	b.n	800566a <pb_dec_bytes+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800565a:	78b3      	ldrb	r3, [r6, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800565c:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800565e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d108      	bne.n	8005678 <pb_dec_bytes+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf08      	it	eq
 800566e:	4613      	moveq	r3, r2
 8005670:	2000      	movs	r0, #0
 8005672:	60e3      	str	r3, [r4, #12]
}
 8005674:	b002      	add	sp, #8
 8005676:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8005678:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800567c:	428b      	cmp	r3, r1
 800567e:	d3e9      	bcc.n	8005654 <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8005680:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8005682:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8005684:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8005688:	f7ff ff38 	bl	80054fc <pb_read>
 800568c:	e7f2      	b.n	8005674 <pb_dec_bytes+0x38>
 800568e:	bf00      	nop
 8005690:	08049ed7 	.word	0x08049ed7
 8005694:	08049f17 	.word	0x08049f17

08005698 <pb_decode_varint>:
{
 8005698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 800569c:	2500      	movs	r5, #0
{
 800569e:	4606      	mov	r6, r0
 80056a0:	460f      	mov	r7, r1
    uint64_t result = 0;
 80056a2:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 80056a4:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 80056a6:	f10d 0107 	add.w	r1, sp, #7
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff feb8 	bl	8005420 <pb_readbyte>
 80056b0:	b320      	cbz	r0, 80056fc <pb_decode_varint+0x64>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80056b2:	f89d c007 	ldrb.w	ip, [sp, #7]
 80056b6:	f1a4 0320 	sub.w	r3, r4, #32
 80056ba:	f1c4 0120 	rsb	r1, r4, #32
 80056be:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 80056c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	fa22 f101 	lsr.w	r1, r2, r1
 80056ce:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 80056d2:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80056d6:	ea43 0301 	orr.w	r3, r3, r1
 80056da:	ea45 0502 	orr.w	r5, r5, r2
 80056de:	ea43 0808 	orr.w	r8, r3, r8
    } while (byte & 0x80);
 80056e2:	d102      	bne.n	80056ea <pb_decode_varint+0x52>
    *dest = result;
 80056e4:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 80056e8:	e008      	b.n	80056fc <pb_decode_varint+0x64>
        if (bitpos >= 64)
 80056ea:	2c46      	cmp	r4, #70	; 0x46
 80056ec:	d1db      	bne.n	80056a6 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 80056ee:	68f3      	ldr	r3, [r6, #12]
 80056f0:	2000      	movs	r0, #0
 80056f2:	4a04      	ldr	r2, [pc, #16]	; (8005704 <pb_decode_varint+0x6c>)
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf08      	it	eq
 80056f8:	4613      	moveq	r3, r2
 80056fa:	60f3      	str	r3, [r6, #12]
}
 80056fc:	b002      	add	sp, #8
 80056fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005702:	bf00      	nop
 8005704:	08049ec7 	.word	0x08049ec7

08005708 <pb_dec_uvarint>:
{
 8005708:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800570a:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 800570c:	4669      	mov	r1, sp
{
 800570e:	4604      	mov	r4, r0
 8005710:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8005712:	f7ff ffc1 	bl	8005698 <pb_decode_varint>
 8005716:	b138      	cbz	r0, 8005728 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8005718:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d105      	bne.n	800572c <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 8005720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005724:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005728:	b002      	add	sp, #8
 800572a:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 800572c:	2b04      	cmp	r3, #4
 800572e:	d10b      	bne.n	8005748 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8005730:	9b00      	ldr	r3, [sp, #0]
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	2200      	movs	r2, #0
    if (clamped != value)
 8005736:	e9dd 5100 	ldrd	r5, r1, [sp]
 800573a:	4291      	cmp	r1, r2
 800573c:	bf08      	it	eq
 800573e:	429d      	cmpeq	r5, r3
 8005740:	d0f2      	beq.n	8005728 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <pb_dec_uvarint+0x6c>)
 8005746:	e00e      	b.n	8005766 <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 8005748:	2b02      	cmp	r3, #2
 800574a:	d103      	bne.n	8005754 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800574c:	9b00      	ldr	r3, [sp, #0]
 800574e:	802b      	strh	r3, [r5, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	e7ef      	b.n	8005734 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8005754:	2b01      	cmp	r3, #1
 8005756:	d104      	bne.n	8005762 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8005758:	9b00      	ldr	r3, [sp, #0]
 800575a:	702b      	strb	r3, [r5, #0]
 800575c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005760:	e7e8      	b.n	8005734 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf08      	it	eq
 800576a:	4613      	moveq	r3, r2
 800576c:	2000      	movs	r0, #0
 800576e:	60e3      	str	r3, [r4, #12]
 8005770:	e7da      	b.n	8005728 <pb_dec_uvarint+0x20>
 8005772:	bf00      	nop
 8005774:	08049f4b 	.word	0x08049f4b
 8005778:	08049f39 	.word	0x08049f39

0800577c <pb_dec_varint>:
{
 800577c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800577e:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8005780:	4669      	mov	r1, sp
{
 8005782:	4605      	mov	r5, r0
 8005784:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8005786:	f7ff ff87 	bl	8005698 <pb_decode_varint>
 800578a:	b138      	cbz	r0, 800579c <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800578c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005790:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8005792:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8005796:	d103      	bne.n	80057a0 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8005798:	e9c4 2100 	strd	r2, r1, [r4]
}
 800579c:	b002      	add	sp, #8
 800579e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 80057a0:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 80057a2:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 80057a6:	d101      	bne.n	80057ac <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 80057a8:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 80057aa:	e7f7      	b.n	800579c <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d109      	bne.n	80057c4 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 80057b0:	b213      	sxth	r3, r2
 80057b2:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80057b4:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 80057b6:	42b1      	cmp	r1, r6
 80057b8:	bf08      	it	eq
 80057ba:	4293      	cmpeq	r3, r2
 80057bc:	d0ee      	beq.n	800579c <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 80057be:	68eb      	ldr	r3, [r5, #12]
 80057c0:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <pb_dec_varint+0x64>)
 80057c2:	e006      	b.n	80057d2 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d102      	bne.n	80057ce <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80057c8:	b253      	sxtb	r3, r2
 80057ca:	7023      	strb	r3, [r4, #0]
 80057cc:	e7f2      	b.n	80057b4 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80057ce:	68eb      	ldr	r3, [r5, #12]
 80057d0:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf08      	it	eq
 80057d6:	4613      	moveq	r3, r2
 80057d8:	2000      	movs	r0, #0
 80057da:	60eb      	str	r3, [r5, #12]
 80057dc:	e7de      	b.n	800579c <pb_dec_varint+0x20>
 80057de:	bf00      	nop
 80057e0:	08049f4b 	.word	0x08049f4b
 80057e4:	08049f39 	.word	0x08049f39

080057e8 <pb_decode_tag>:
{
 80057e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ea:	461d      	mov	r5, r3
    *eof = false;
 80057ec:	2300      	movs	r3, #0
{
 80057ee:	460e      	mov	r6, r1
 80057f0:	4617      	mov	r7, r2
    *eof = false;
 80057f2:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 80057f4:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80057f6:	a901      	add	r1, sp, #4
    *tag = 0;
 80057f8:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80057fa:	462a      	mov	r2, r5
 80057fc:	f7ff fe30 	bl	8005460 <pb_decode_varint32_eof>
 8005800:	b120      	cbz	r0, 800580c <pb_decode_tag+0x24>
    if (temp == 0)
 8005802:	9c01      	ldr	r4, [sp, #4]
 8005804:	b924      	cbnz	r4, 8005810 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8005806:	2301      	movs	r3, #1
        return false;
 8005808:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800580a:	702b      	strb	r3, [r5, #0]
}
 800580c:	b003      	add	sp, #12
 800580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8005810:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005812:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8005816:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005818:	7034      	strb	r4, [r6, #0]
    return true;
 800581a:	e7f7      	b.n	800580c <pb_decode_tag+0x24>

0800581c <pb_skip_field>:
{
 800581c:	b513      	push	{r0, r1, r4, lr}
 800581e:	4604      	mov	r4, r0
    switch (wire_type)
 8005820:	2905      	cmp	r1, #5
 8005822:	d825      	bhi.n	8005870 <pb_skip_field+0x54>
 8005824:	e8df f001 	tbb	[pc, r1]
 8005828:	24170f03 	.word	0x24170f03
 800582c:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 800582e:	2201      	movs	r2, #1
 8005830:	a901      	add	r1, sp, #4
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fe62 	bl	80054fc <pb_read>
 8005838:	b118      	cbz	r0, 8005842 <pb_skip_field+0x26>
    } while (byte & 0x80);
 800583a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dbf5      	blt.n	800582e <pb_skip_field+0x12>
}
 8005842:	b002      	add	sp, #8
 8005844:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8005846:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005848:	2100      	movs	r1, #0
 800584a:	4620      	mov	r0, r4
}
 800584c:	b002      	add	sp, #8
 800584e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005852:	f7ff be53 	b.w	80054fc <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8005856:	a901      	add	r1, sp, #4
 8005858:	f7ff fe8c 	bl	8005574 <pb_decode_varint32>
 800585c:	2800      	cmp	r0, #0
 800585e:	d0f0      	beq.n	8005842 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8005860:	9a01      	ldr	r2, [sp, #4]
 8005862:	2100      	movs	r1, #0
 8005864:	4620      	mov	r0, r4
 8005866:	f7ff fe49 	bl	80054fc <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 800586a:	e7ea      	b.n	8005842 <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800586c:	2204      	movs	r2, #4
 800586e:	e7eb      	b.n	8005848 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005870:	68c3      	ldr	r3, [r0, #12]
 8005872:	4a03      	ldr	r2, [pc, #12]	; (8005880 <pb_skip_field+0x64>)
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf08      	it	eq
 8005878:	4613      	moveq	r3, r2
 800587a:	60c3      	str	r3, [r0, #12]
 800587c:	2000      	movs	r0, #0
 800587e:	e7e0      	b.n	8005842 <pb_skip_field+0x26>
 8005880:	08049f5d 	.word	0x08049f5d

08005884 <pb_make_string_substream>:
{
 8005884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005886:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8005888:	a901      	add	r1, sp, #4
{
 800588a:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 800588c:	f7ff fe72 	bl	8005574 <pb_decode_varint32>
 8005890:	4606      	mov	r6, r0
 8005892:	b168      	cbz	r0, 80058b0 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8005894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800589c:	9901      	ldr	r1, [sp, #4]
 800589e:	428a      	cmp	r2, r1
 80058a0:	d209      	bcs.n	80058b6 <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	2600      	movs	r6, #0
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <pb_make_string_substream+0x3c>)
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf08      	it	eq
 80058ac:	4613      	moveq	r3, r2
 80058ae:	60e3      	str	r3, [r4, #12]
}
 80058b0:	4630      	mov	r0, r6
 80058b2:	b002      	add	sp, #8
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 80058b6:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 80058b8:	68a3      	ldr	r3, [r4, #8]
 80058ba:	1a5b      	subs	r3, r3, r1
 80058bc:	60a3      	str	r3, [r4, #8]
    return true;
 80058be:	e7f7      	b.n	80058b0 <pb_make_string_substream+0x2c>
 80058c0:	08049f6f 	.word	0x08049f6f

080058c4 <pb_close_string_substream>:
    if (substream->bytes_left) {
 80058c4:	688a      	ldr	r2, [r1, #8]
{
 80058c6:	b538      	push	{r3, r4, r5, lr}
 80058c8:	4605      	mov	r5, r0
 80058ca:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 80058cc:	b92a      	cbnz	r2, 80058da <pb_close_string_substream+0x16>
    stream->state = substream->state;
 80058ce:	6863      	ldr	r3, [r4, #4]
    return true;
 80058d0:	2001      	movs	r0, #1
    stream->state = substream->state;
 80058d2:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 80058d4:	68e3      	ldr	r3, [r4, #12]
 80058d6:	60eb      	str	r3, [r5, #12]
}
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 80058da:	2100      	movs	r1, #0
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff fe0d 	bl	80054fc <pb_read>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1f3      	bne.n	80058ce <pb_close_string_substream+0xa>
 80058e6:	e7f7      	b.n	80058d8 <pb_close_string_substream+0x14>

080058e8 <decode_field>:
{
 80058e8:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 80058ea:	6851      	ldr	r1, [r2, #4]
{
 80058ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 80058f2:	788a      	ldrb	r2, [r1, #2]
{
 80058f4:	b089      	sub	sp, #36	; 0x24
 80058f6:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 80058f8:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 80058fc:	2c40      	cmp	r4, #64	; 0x40
 80058fe:	f000 8083 	beq.w	8005a08 <decode_field+0x120>
 8005902:	2c80      	cmp	r4, #128	; 0x80
 8005904:	d07d      	beq.n	8005a02 <decode_field+0x11a>
 8005906:	b964      	cbnz	r4, 8005922 <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8005908:	f002 0c0f 	and.w	ip, r2, #15
 800590c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005910:	4f6e      	ldr	r7, [pc, #440]	; (8005acc <decode_field+0x1e4>)
    switch (PB_HTYPE(type))
 8005912:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8005914:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8005918:	d02b      	beq.n	8005972 <decode_field+0x8a>
 800591a:	d805      	bhi.n	8005928 <decode_field+0x40>
 800591c:	b1da      	cbz	r2, 8005956 <decode_field+0x6e>
 800591e:	2a10      	cmp	r2, #16
 8005920:	d01f      	beq.n	8005962 <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005922:	68eb      	ldr	r3, [r5, #12]
 8005924:	4a6a      	ldr	r2, [pc, #424]	; (8005ad0 <decode_field+0x1e8>)
 8005926:	e04c      	b.n	80059c2 <decode_field+0xda>
    switch (PB_HTYPE(type))
 8005928:	2a30      	cmp	r2, #48	; 0x30
 800592a:	d1fa      	bne.n	8005922 <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 800592c:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800592e:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8005932:	6973      	ldr	r3, [r6, #20]
 8005934:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005936:	d10b      	bne.n	8005950 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8005938:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800593c:	4621      	mov	r1, r4
 800593e:	6930      	ldr	r0, [r6, #16]
 8005940:	f005 fcda 	bl	800b2f8 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8005944:	6873      	ldr	r3, [r6, #4]
 8005946:	6931      	ldr	r1, [r6, #16]
 8005948:	f8d3 000b 	ldr.w	r0, [r3, #11]
 800594c:	f7ff fd56 	bl	80053fc <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8005950:	6932      	ldr	r2, [r6, #16]
 8005952:	6871      	ldr	r1, [r6, #4]
 8005954:	e00b      	b.n	800596e <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 8005956:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 8005958:	463b      	mov	r3, r7
}
 800595a:	b009      	add	sp, #36	; 0x24
 800595c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8005960:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8005962:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8005966:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8005968:	bf1c      	itt	ne
 800596a:	2001      	movne	r0, #1
 800596c:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 800596e:	4628      	mov	r0, r5
 8005970:	e7f2      	b.n	8005958 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8005972:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8005974:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8005978:	d134      	bne.n	80059e4 <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800597a:	f1bc 0f04 	cmp.w	ip, #4
 800597e:	d831      	bhi.n	80059e4 <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8005980:	a904      	add	r1, sp, #16
 8005982:	f7ff ff7f 	bl	8005884 <pb_make_string_substream>
 8005986:	4604      	mov	r4, r0
 8005988:	b970      	cbnz	r0, 80059a8 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 800598a:	2400      	movs	r4, #0
 800598c:	e026      	b.n	80059dc <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800598e:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8005992:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 8005994:	fb03 2200 	mla	r2, r3, r0, r2
 8005998:	a804      	add	r0, sp, #16
 800599a:	47b8      	blx	r7
 800599c:	b1b0      	cbz	r0, 80059cc <decode_field+0xe4>
                    (*size)++;
 800599e:	f8b8 3000 	ldrh.w	r3, [r8]
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 80059a8:	9b06      	ldr	r3, [sp, #24]
 80059aa:	b133      	cbz	r3, 80059ba <decode_field+0xd2>
 80059ac:	6871      	ldr	r1, [r6, #4]
 80059ae:	f8b8 3000 	ldrh.w	r3, [r8]
 80059b2:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d8e9      	bhi.n	800598e <decode_field+0xa6>
                if (substream.bytes_left != 0)
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	b143      	cbz	r3, 80059d0 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 80059be:	68eb      	ldr	r3, [r5, #12]
 80059c0:	4a44      	ldr	r2, [pc, #272]	; (8005ad4 <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf08      	it	eq
 80059c6:	4613      	moveq	r3, r2
 80059c8:	60eb      	str	r3, [r5, #12]
 80059ca:	e7de      	b.n	800598a <decode_field+0xa2>
                        status = false;
 80059cc:	4604      	mov	r4, r0
 80059ce:	e7f4      	b.n	80059ba <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 80059d0:	a904      	add	r1, sp, #16
 80059d2:	4628      	mov	r0, r5
 80059d4:	f7ff ff76 	bl	80058c4 <pb_close_string_substream>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d0d6      	beq.n	800598a <decode_field+0xa2>
}
 80059dc:	4620      	mov	r0, r4
 80059de:	b009      	add	sp, #36	; 0x24
 80059e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80059e4:	f8b8 3000 	ldrh.w	r3, [r8]
 80059e8:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 80059ea:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80059ec:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 80059f0:	f8a8 4000 	strh.w	r4, [r8]
 80059f4:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d9e0      	bls.n	80059be <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 80059fc:	fb03 2200 	mla	r2, r3, r0, r2
 8005a00:	e7b5      	b.n	800596e <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 8005a02:	68c3      	ldr	r3, [r0, #12]
 8005a04:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <decode_field+0x1f0>)
 8005a06:	e7dc      	b.n	80059c2 <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8005a08:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8005a0a:	b10f      	cbz	r7, 8005a10 <decode_field+0x128>
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	b932      	cbnz	r2, 8005a1e <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8005a10:	4619      	mov	r1, r3
 8005a12:	4628      	mov	r0, r5
}
 8005a14:	b009      	add	sp, #36	; 0x24
 8005a16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8005a1a:	f7ff beff 	b.w	800581c <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8005a1e:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8005a20:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8005a24:	d11c      	bne.n	8005a60 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	f7ff ff2c 	bl	8005884 <pb_make_string_substream>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0d4      	beq.n	80059dc <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	4642      	mov	r2, r8
 8005a36:	6871      	ldr	r1, [r6, #4]
 8005a38:	a804      	add	r0, sp, #16
 8005a3a:	4798      	blx	r3
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	b930      	cbnz	r0, 8005a4e <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 8005a40:	68eb      	ldr	r3, [r5, #12]
 8005a42:	4a26      	ldr	r2, [pc, #152]	; (8005adc <decode_field+0x1f4>)
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf08      	it	eq
 8005a48:	4613      	moveq	r3, r2
 8005a4a:	60eb      	str	r3, [r5, #12]
 8005a4c:	e7c6      	b.n	80059dc <decode_field+0xf4>
        } while (substream.bytes_left);
 8005a4e:	9b06      	ldr	r3, [sp, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1ee      	bne.n	8005a32 <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff ff34 	bl	80058c4 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	e7bd      	b.n	80059dc <decode_field+0xf4>
    switch (wire_type)
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d020      	beq.n	8005aa6 <decode_field+0x1be>
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d026      	beq.n	8005ab6 <decode_field+0x1ce>
 8005a68:	bb63      	cbnz	r3, 8005ac4 <decode_field+0x1dc>
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 8005a70:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8005a72:	2c0b      	cmp	r4, #11
 8005a74:	d089      	beq.n	800598a <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 8005a76:	2201      	movs	r2, #1
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7ff fd3e 	bl	80054fc <pb_read>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d082      	beq.n	800598a <decode_field+0xa2>
            } while (*buf++ & 0x80);
 8005a84:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dbf1      	blt.n	8005a70 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <decode_field+0x1f8>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005a8e:	4642      	mov	r2, r8
 8005a90:	6871      	ldr	r1, [r6, #4]
 8005a92:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	ab01      	add	r3, sp, #4
 8005a98:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4798      	blx	r3
 8005aa4:	e7da      	b.n	8005a5c <decode_field+0x174>
            *size = 8;
 8005aa6:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	a901      	add	r1, sp, #4
 8005aac:	f7ff fd26 	bl	80054fc <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1eb      	bne.n	8005a8c <decode_field+0x1a4>
 8005ab4:	e769      	b.n	800598a <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 8005ab6:	2204      	movs	r2, #4
            *size = 4;
 8005ab8:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8005aba:	eb0d 0102 	add.w	r1, sp, r2
 8005abe:	f7ff fd1d 	bl	80054fc <pb_read>
 8005ac2:	e7f5      	b.n	8005ab0 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005ac4:	68c3      	ldr	r3, [r0, #12]
 8005ac6:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <decode_field+0x1fc>)
 8005ac8:	e77b      	b.n	80059c2 <decode_field+0xda>
 8005aca:	bf00      	nop
 8005acc:	0804a00c 	.word	0x0804a00c
 8005ad0:	08049f96 	.word	0x08049f96
 8005ad4:	08049f87 	.word	0x08049f87
 8005ad8:	08049f17 	.word	0x08049f17
 8005adc:	08049fa9 	.word	0x08049fa9
 8005ae0:	08005329 	.word	0x08005329
 8005ae4:	08049f5d 	.word	0x08049f5d

08005ae8 <pb_decode_noinit>:
{
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005aec:	2500      	movs	r5, #0
{
 8005aee:	b091      	sub	sp, #68	; 0x44
 8005af0:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 8005af2:	462f      	mov	r7, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005af4:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 8005af6:	f8ad 5002 	strh.w	r5, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005afa:	e9cd 5502 	strd	r5, r5, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005afe:	f7ff fba9 	bl	8005254 <pb_field_iter_begin>
    while (stream->bytes_left)
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	b9f3      	cbnz	r3, 8005b44 <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 8005b06:	b135      	cbz	r5, 8005b16 <pb_decode_noinit+0x2e>
 8005b08:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8005b0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f040 8095 	bne.w	8005c40 <pb_decode_noinit+0x158>
        } while (pb_field_iter_next(&iter));
 8005b16:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8005b18:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 8005b1c:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8005b1e:	f7ff fbab 	bl	8005278 <pb_field_iter_next>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d1f7      	bne.n	8005b16 <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8005b26:	f016 0f30 	tst.w	r6, #48	; 0x30
 8005b2a:	d103      	bne.n	8005b34 <pb_decode_noinit+0x4c>
 8005b2c:	9b05      	ldr	r3, [sp, #20]
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b103      	cbz	r3, 8005b34 <pb_decode_noinit+0x4c>
            req_field_count++;
 8005b32:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8005b34:	2d40      	cmp	r5, #64	; 0x40
 8005b36:	f200 80cc 	bhi.w	8005cd2 <pb_decode_noinit+0x1ea>
        if (req_field_count > 0)
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	f040 80ca 	bne.w	8005cd4 <pb_decode_noinit+0x1ec>
    return true;
 8005b40:	2001      	movs	r0, #1
 8005b42:	e00c      	b.n	8005b5e <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8005b44:	f10d 0301 	add.w	r3, sp, #1
 8005b48:	aa01      	add	r2, sp, #4
 8005b4a:	4669      	mov	r1, sp
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff fe4b 	bl	80057e8 <pb_decode_tag>
 8005b52:	b938      	cbnz	r0, 8005b64 <pb_decode_noinit+0x7c>
            if (eof)
 8005b54:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1d4      	bne.n	8005b06 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005b5c:	2000      	movs	r0, #0
}
 8005b5e:	b011      	add	sp, #68	; 0x44
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8005b64:	9901      	ldr	r1, [sp, #4]
 8005b66:	a804      	add	r0, sp, #16
 8005b68:	f7ff fbc7 	bl	80052fa <pb_field_iter_find>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d154      	bne.n	8005c1a <pb_decode_noinit+0x132>
            if (tag >= extension_range_start)
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	42bb      	cmp	r3, r7
 8005b74:	f0c0 80b5 	bcc.w	8005ce2 <pb_decode_noinit+0x1fa>
    const pb_field_t *start = iter->pos;
 8005b78:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005b7a:	9a05      	ldr	r2, [sp, #20]
 8005b7c:	7893      	ldrb	r3, [r2, #2]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	f000 80b6 	beq.w	8005cf4 <pb_decode_noinit+0x20c>
        (void)pb_field_iter_next(iter);
 8005b88:	a804      	add	r0, sp, #16
 8005b8a:	f7ff fb75 	bl	8005278 <pb_field_iter_next>
    } while (iter->pos != start);
 8005b8e:	9b05      	ldr	r3, [sp, #20]
 8005b90:	429e      	cmp	r6, r3
 8005b92:	d1f2      	bne.n	8005b7a <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 8005b94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
                if (tag >= extension_range_start)
 8005b98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b9c:	45b8      	cmp	r8, r7
 8005b9e:	f0c0 80a0 	bcc.w	8005ce2 <pb_decode_noinit+0x1fa>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005ba2:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8005ba4:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 8005ba8:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005bac:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8005bae:	68a2      	ldr	r2, [r4, #8]
 8005bb0:	2e00      	cmp	r6, #0
 8005bb2:	f000 8093 	beq.w	8005cdc <pb_decode_noinit+0x1f4>
 8005bb6:	4591      	cmp	r9, r2
 8005bb8:	d1a3      	bne.n	8005b02 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8005bba:	6832      	ldr	r2, [r6, #0]
 8005bbc:	f8d2 a000 	ldr.w	sl, [r2]
 8005bc0:	f1ba 0f00 	cmp.w	sl, #0
 8005bc4:	d008      	beq.n	8005bd8 <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8005bc6:	465b      	mov	r3, fp
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4620      	mov	r0, r4
 8005bce:	47d0      	blx	sl
        if (!status)
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d0c3      	beq.n	8005b5c <pb_decode_noinit+0x74>
        extension = extension->next;
 8005bd4:	68b6      	ldr	r6, [r6, #8]
 8005bd6:	e7ea      	b.n	8005bae <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005bd8:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8005bdc:	f8ba 2000 	ldrh.w	r2, [sl]
 8005be0:	4590      	cmp	r8, r2
 8005be2:	d1f7      	bne.n	8005bd4 <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005be4:	6872      	ldr	r2, [r6, #4]
 8005be6:	4651      	mov	r1, sl
 8005be8:	a80a      	add	r0, sp, #40	; 0x28
 8005bea:	f7ff fb33 	bl	8005254 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005bee:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8005bf0:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8005bf4:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 8005bf6:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8005bf8:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8005bfc:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 8005bfe:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005c00:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005c04:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005c08:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8005c0a:	bf04      	itt	eq
 8005c0c:	1d32      	addeq	r2, r6, #4
 8005c0e:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005c10:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8005c12:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005c14:	f7ff fe68 	bl	80058e8 <decode_field>
 8005c18:	e7da      	b.n	8005bd0 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8005c1a:	9a05      	ldr	r2, [sp, #20]
 8005c1c:	7893      	ldrb	r3, [r2, #2]
 8005c1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d121      	bne.n	8005c6a <pb_decode_noinit+0x182>
            && iter.pSize == iter.pData)
 8005c26:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d116      	bne.n	8005c5c <pb_decode_noinit+0x174>
            if (fixed_count_field != iter.pos) {
 8005c2e:	42aa      	cmp	r2, r5
 8005c30:	d010      	beq.n	8005c54 <pb_decode_noinit+0x16c>
                if (fixed_count_field != NULL &&
 8005c32:	b165      	cbz	r5, 8005c4e <pb_decode_noinit+0x166>
 8005c34:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 8005c38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d006      	beq.n	8005c4e <pb_decode_noinit+0x166>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005c40:	68e3      	ldr	r3, [r4, #12]
 8005c42:	4a2d      	ldr	r2, [pc, #180]	; (8005cf8 <pb_decode_noinit+0x210>)
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf08      	it	eq
 8005c48:	4613      	moveq	r3, r2
 8005c4a:	60e3      	str	r3, [r4, #12]
 8005c4c:	e786      	b.n	8005b5c <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8005c54:	f10d 0302 	add.w	r3, sp, #2
 8005c58:	4615      	mov	r5, r2
 8005c5a:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 8005c5c:	aa04      	add	r2, sp, #16
 8005c5e:	f89d 1000 	ldrb.w	r1, [sp]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff fe40 	bl	80058e8 <decode_field>
 8005c68:	e040      	b.n	8005cec <pb_decode_noinit+0x204>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f6      	bne.n	8005c5c <pb_decode_noinit+0x174>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8005c6e:	9a06      	ldr	r2, [sp, #24]
 8005c70:	2a3f      	cmp	r2, #63	; 0x3f
 8005c72:	d8f3      	bhi.n	8005c5c <pb_decode_noinit+0x174>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005c74:	0951      	lsrs	r1, r2, #5
 8005c76:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005c78:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005c7c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005c80:	2301      	movs	r3, #1
 8005c82:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005c84:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f841 3c38 	str.w	r3, [r1, #-56]
 8005c8e:	e7e5      	b.n	8005c5c <pb_decode_noinit+0x174>
                if (fields_seen[i] != allbits)
 8005c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c94:	3601      	adds	r6, #1
 8005c96:	d006      	beq.n	8005ca6 <pb_decode_noinit+0x1be>
                    PB_RETURN_ERROR(stream, "missing required field");
 8005c98:	68e3      	ldr	r3, [r4, #12]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <pb_decode_noinit+0x214>)
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf08      	it	eq
 8005ca0:	4613      	moveq	r3, r2
 8005ca2:	60e3      	str	r3, [r4, #12]
 8005ca4:	e75b      	b.n	8005b5e <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 8005ca6:	3201      	adds	r2, #1
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d1f1      	bne.n	8005c90 <pb_decode_noinit+0x1a8>
            if ((req_field_count & 31) != 0)
 8005cac:	f015 051f 	ands.w	r5, r5, #31
 8005cb0:	f43f af46 	beq.w	8005b40 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 8005cb4:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 8005cb6:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8005cba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8005cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                if (fields_seen[req_field_count >> 5] !=
 8005cc2:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8005cc6:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8005cca:	42ab      	cmp	r3, r5
 8005ccc:	f43f af38 	beq.w	8005b40 <pb_decode_noinit+0x58>
 8005cd0:	e7e2      	b.n	8005c98 <pb_decode_noinit+0x1b0>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8005cd2:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8005cd4:	096b      	lsrs	r3, r5, #5
 8005cd6:	a902      	add	r1, sp, #8
 8005cd8:	2200      	movs	r2, #0
 8005cda:	e7e5      	b.n	8005ca8 <pb_decode_noinit+0x1c0>
                    if (pos != stream->bytes_left)
 8005cdc:	4591      	cmp	r9, r2
 8005cde:	f47f af10 	bne.w	8005b02 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8005ce2:	f89d 1000 	ldrb.w	r1, [sp]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff fd98 	bl	800581c <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f47f af08 	bne.w	8005b02 <pb_decode_noinit+0x1a>
 8005cf2:	e733      	b.n	8005b5c <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 8005cf4:	8817      	ldrh	r7, [r2, #0]
 8005cf6:	e74f      	b.n	8005b98 <pb_decode_noinit+0xb0>
 8005cf8:	08049fb9 	.word	0x08049fb9
 8005cfc:	08049fda 	.word	0x08049fda

08005d00 <pb_decode>:
{
 8005d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d02:	460c      	mov	r4, r1
 8005d04:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8005d06:	4611      	mov	r1, r2
 8005d08:	9201      	str	r2, [sp, #4]
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff fb76 	bl	80053fc <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005d10:	9a01      	ldr	r2, [sp, #4]
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
}
 8005d16:	b003      	add	sp, #12
 8005d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005d1c:	f7ff bee4 	b.w	8005ae8 <pb_decode_noinit>

08005d20 <pb_dec_submessage>:
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	b087      	sub	sp, #28
 8005d24:	460e      	mov	r6, r1
 8005d26:	4605      	mov	r5, r0
 8005d28:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005d2a:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8005d2e:	a902      	add	r1, sp, #8
 8005d30:	f7ff fda8 	bl	8005884 <pb_make_string_substream>
 8005d34:	b1e0      	cbz	r0, 8005d70 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 8005d36:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8005d3a:	9a01      	ldr	r2, [sp, #4]
 8005d3c:	b944      	cbnz	r4, 8005d50 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005d3e:	68eb      	ldr	r3, [r5, #12]
 8005d40:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <pb_dec_submessage+0x5c>)
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf08      	it	eq
 8005d46:	4613      	moveq	r3, r2
 8005d48:	60eb      	str	r3, [r5, #12]
}
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	b007      	add	sp, #28
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005d50:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 8005d52:	4639      	mov	r1, r7
 8005d54:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005d56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d10a      	bne.n	8005d74 <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 8005d5e:	f7ff ffcf 	bl	8005d00 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005d62:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005d64:	a902      	add	r1, sp, #8
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7ff fdac 	bl	80058c4 <pb_close_string_substream>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d1ec      	bne.n	8005d4a <pb_dec_submessage+0x2a>
        return false;
 8005d70:	2400      	movs	r4, #0
 8005d72:	e7ea      	b.n	8005d4a <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005d74:	f7ff feb8 	bl	8005ae8 <pb_decode_noinit>
 8005d78:	e7f3      	b.n	8005d62 <pb_dec_submessage+0x42>
 8005d7a:	bf00      	nop
 8005d7c:	08049ff1 	.word	0x08049ff1

08005d80 <pb_decode_delimited>:
{
 8005d80:	b530      	push	{r4, r5, lr}
 8005d82:	b087      	sub	sp, #28
 8005d84:	460c      	mov	r4, r1
 8005d86:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8005d88:	a902      	add	r1, sp, #8
{
 8005d8a:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005d8c:	f7ff fd7a 	bl	8005884 <pb_make_string_substream>
 8005d90:	b150      	cbz	r0, 8005da8 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005d92:	4621      	mov	r1, r4
 8005d94:	9a01      	ldr	r2, [sp, #4]
 8005d96:	a802      	add	r0, sp, #8
 8005d98:	f7ff ffb2 	bl	8005d00 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005d9c:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8005d9e:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005da0:	4628      	mov	r0, r5
 8005da2:	f7ff fd8f 	bl	80058c4 <pb_close_string_substream>
 8005da6:	b900      	cbnz	r0, 8005daa <pb_decode_delimited+0x2a>
        return false;
 8005da8:	2400      	movs	r4, #0
}
 8005daa:	4620      	mov	r0, r4
 8005dac:	b007      	add	sp, #28
 8005dae:	bd30      	pop	{r4, r5, pc}

08005db0 <pb_decode_svarint>:
{
 8005db0:	b513      	push	{r0, r1, r4, lr}
 8005db2:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005db4:	4669      	mov	r1, sp
 8005db6:	f7ff fc6f 	bl	8005698 <pb_decode_varint>
 8005dba:	b160      	cbz	r0, 8005dd6 <pb_decode_svarint+0x26>
    if (value & 1)
 8005dbc:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005dc0:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 8005dc2:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005dc4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8005dc8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005dcc:	bf44      	itt	mi
 8005dce:	43d2      	mvnmi	r2, r2
 8005dd0:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005dd2:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005dd6:	b002      	add	sp, #8
 8005dd8:	bd10      	pop	{r4, pc}
	...

08005ddc <pb_dec_svarint>:
{
 8005ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dde:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8005de0:	4669      	mov	r1, sp
{
 8005de2:	4604      	mov	r4, r0
 8005de4:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 8005de6:	f7ff ffe3 	bl	8005db0 <pb_decode_svarint>
 8005dea:	b138      	cbz	r0, 8005dfc <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005dec:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d105      	bne.n	8005e00 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8005df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005df8:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d10b      	bne.n	8005e1c <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8005e04:	9b00      	ldr	r3, [sp, #0]
 8005e06:	602b      	str	r3, [r5, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005e08:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8005e0a:	e9dd 5100 	ldrd	r5, r1, [sp]
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	bf08      	it	eq
 8005e12:	429d      	cmpeq	r5, r3
 8005e14:	d0f2      	beq.n	8005dfc <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <pb_dec_svarint+0x68>)
 8005e1a:	e00d      	b.n	8005e38 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d103      	bne.n	8005e28 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8005e20:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005e24:	802b      	strh	r3, [r5, #0]
 8005e26:	e7ef      	b.n	8005e08 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d103      	bne.n	8005e34 <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005e2c:	f99d 3000 	ldrsb.w	r3, [sp]
 8005e30:	702b      	strb	r3, [r5, #0]
 8005e32:	e7e9      	b.n	8005e08 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005e34:	68e3      	ldr	r3, [r4, #12]
 8005e36:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf08      	it	eq
 8005e3c:	4613      	moveq	r3, r2
 8005e3e:	2000      	movs	r0, #0
 8005e40:	60e3      	str	r3, [r4, #12]
 8005e42:	e7db      	b.n	8005dfc <pb_dec_svarint+0x20>
 8005e44:	08049f4b 	.word	0x08049f4b
 8005e48:	08049f39 	.word	0x08049f39

08005e4c <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 8005e4c:	2204      	movs	r2, #4
{
 8005e4e:	b513      	push	{r0, r1, r4, lr}
 8005e50:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8005e52:	eb0d 0102 	add.w	r1, sp, r2
 8005e56:	f7ff fb51 	bl	80054fc <pb_read>
 8005e5a:	b108      	cbz	r0, 8005e60 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8005e5c:	9b01      	ldr	r3, [sp, #4]
 8005e5e:	6023      	str	r3, [r4, #0]
}
 8005e60:	b002      	add	sp, #8
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8005e64:	4611      	mov	r1, r2
 8005e66:	f7ff bff1 	b.w	8005e4c <pb_decode_fixed32>

08005e6a <pb_decode_fixed64>:
{
 8005e6a:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8005e6c:	2208      	movs	r2, #8
{
 8005e6e:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8005e70:	4669      	mov	r1, sp
 8005e72:	f7ff fb43 	bl	80054fc <pb_read>
 8005e76:	b118      	cbz	r0, 8005e80 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8005e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e7c:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005e80:	b002      	add	sp, #8
 8005e82:	bd10      	pop	{r4, pc}

08005e84 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8005e84:	4611      	mov	r1, r2
 8005e86:	f7ff bff0 	b.w	8005e6a <pb_decode_fixed64>

08005e8a <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8005e8a:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 8005e8c:	7882      	ldrb	r2, [r0, #2]
{
 8005e8e:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005e90:	f012 0330 	ands.w	r3, r2, #48	; 0x30
 8005e94:	d043      	beq.n	8005f1e <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005e96:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005e98:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005e9c:	d104      	bne.n	8005ea8 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005e9e:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8005ea0:	fab0 f080 	clz	r0, r0
 8005ea4:	0940      	lsrs	r0, r0, #5
 8005ea6:	e007      	b.n	8005eb8 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d0f8      	beq.n	8005e9e <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d105      	bne.n	8005ebc <pb_check_proto3_default_value+0x32>
 8005eb0:	b124      	cbz	r4, 8005ebc <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 8005eb2:	5d08      	ldrb	r0, [r1, r4]
 8005eb4:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005eb8:	b006      	add	sp, #24
 8005eba:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005ebc:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005ec0:	d006      	beq.n	8005ed0 <pb_check_proto3_default_value+0x46>
 8005ec2:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8005ec6:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d124      	bne.n	8005f16 <pb_check_proto3_default_value+0x8c>
	    return true;
 8005ecc:	2001      	movs	r0, #1
 8005ece:	e7f3      	b.n	8005eb8 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005ed0:	f002 030f 	and.w	r3, r2, #15
 8005ed4:	2b05      	cmp	r3, #5
 8005ed6:	d101      	bne.n	8005edc <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8005ed8:	8808      	ldrh	r0, [r1, #0]
 8005eda:	e7e1      	b.n	8005ea0 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005edc:	2b06      	cmp	r3, #6
 8005ede:	d101      	bne.n	8005ee4 <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8005ee0:	7808      	ldrb	r0, [r1, #0]
 8005ee2:	e7dd      	b.n	8005ea0 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d102      	bne.n	8005eee <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 8005ee8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8005eec:	e7d8      	b.n	8005ea0 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005eee:	2b07      	cmp	r3, #7
 8005ef0:	d1e7      	bne.n	8005ec2 <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	f8d0 100b 	ldr.w	r1, [r0, #11]
 8005ef8:	4668      	mov	r0, sp
 8005efa:	f7ff f9ab 	bl	8005254 <pb_field_iter_begin>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0e4      	beq.n	8005ecc <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8005f02:	9904      	ldr	r1, [sp, #16]
 8005f04:	9801      	ldr	r0, [sp, #4]
 8005f06:	f7ff ffc0 	bl	8005e8a <pb_check_proto3_default_value>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0d4      	beq.n	8005eb8 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 8005f0e:	4668      	mov	r0, sp
 8005f10:	f7ff f9b2 	bl	8005278 <pb_field_iter_next>
 8005f14:	e7f3      	b.n	8005efe <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 8005f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d0d4      	beq.n	8005ec8 <pb_check_proto3_default_value+0x3e>
        return false;
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e7ca      	b.n	8005eb8 <pb_check_proto3_default_value+0x2e>
	...

08005f24 <pb_write>:
{
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8005f26:	6806      	ldr	r6, [r0, #0]
{
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8005f2c:	b1ae      	cbz	r6, 8005f5a <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8005f2e:	68c3      	ldr	r3, [r0, #12]
 8005f30:	6887      	ldr	r7, [r0, #8]
 8005f32:	4413      	add	r3, r2
 8005f34:	429f      	cmp	r7, r3
 8005f36:	d207      	bcs.n	8005f48 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 8005f38:	6903      	ldr	r3, [r0, #16]
 8005f3a:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <pb_write+0x40>)
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf08      	it	eq
 8005f40:	4613      	moveq	r3, r2
 8005f42:	6103      	str	r3, [r0, #16]
 8005f44:	2000      	movs	r0, #0
}
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8005f48:	47b0      	blx	r6
 8005f4a:	b930      	cbnz	r0, 8005f5a <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	4a06      	ldr	r2, [pc, #24]	; (8005f68 <pb_write+0x44>)
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf08      	it	eq
 8005f54:	4613      	moveq	r3, r2
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	e7f5      	b.n	8005f46 <pb_write+0x22>
    stream->bytes_written += count;
 8005f5a:	68e2      	ldr	r2, [r4, #12]
    return true;
 8005f5c:	2001      	movs	r0, #1
    stream->bytes_written += count;
 8005f5e:	442a      	add	r2, r5
 8005f60:	60e2      	str	r2, [r4, #12]
    return true;
 8005f62:	e7f0      	b.n	8005f46 <pb_write+0x22>
 8005f64:	0804a034 	.word	0x0804a034
 8005f68:	08049ebe 	.word	0x08049ebe

08005f6c <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8005f6c:	2a80      	cmp	r2, #128	; 0x80
{
 8005f6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 8005f70:	f173 0100 	sbcs.w	r1, r3, #0
{
 8005f74:	4605      	mov	r5, r0
    if (value <= 0x7F)
 8005f76:	d207      	bcs.n	8005f88 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 8005f78:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8005f7c:	a901      	add	r1, sp, #4
 8005f7e:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005f80:	f7ff ffd0 	bl	8005f24 <pb_write>
}
 8005f84:	b004      	add	sp, #16
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8005f8a:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005f8c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005f90:	b2d0      	uxtb	r0, r2
 8005f92:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8005f96:	09d1      	lsrs	r1, r2, #7
 8005f98:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	09db      	lsrs	r3, r3, #7
        i++;
 8005fa0:	3401      	adds	r4, #1
    while (value)
 8005fa2:	ea52 0c03 	orrs.w	ip, r2, r3
 8005fa6:	d1f1      	bne.n	8005f8c <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005fa8:	f101 0310 	add.w	r3, r1, #16
 8005fac:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8005fb0:	a901      	add	r1, sp, #4
 8005fb2:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005fb4:	446b      	add	r3, sp
 8005fb6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005fba:	4622      	mov	r2, r4
 8005fbc:	e7e0      	b.n	8005f80 <pb_encode_varint+0x14>
	...

08005fc0 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005fc0:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d104      	bne.n	8005fd2 <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 8005fc8:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 8005fca:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005fcc:	460a      	mov	r2, r1
 8005fce:	f7ff bfcd 	b.w	8005f6c <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d101      	bne.n	8005fda <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 8005fd6:	8811      	ldrh	r1, [r2, #0]
 8005fd8:	e7f7      	b.n	8005fca <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d101      	bne.n	8005fe2 <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8005fde:	6811      	ldr	r1, [r2, #0]
 8005fe0:	e7f3      	b.n	8005fca <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d102      	bne.n	8005fec <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 8005fe6:	e9d2 1300 	ldrd	r1, r3, [r2]
 8005fea:	e7ef      	b.n	8005fcc <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005fec:	6903      	ldr	r3, [r0, #16]
 8005fee:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <pb_enc_uvarint+0x3c>)
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	bf08      	it	eq
 8005ff4:	4613      	moveq	r3, r2
 8005ff6:	6103      	str	r3, [r0, #16]
}
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	4770      	bx	lr
 8005ffc:	08049f39 	.word	0x08049f39

08006000 <pb_enc_varint>:
{
 8006000:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8006002:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8006006:	2a01      	cmp	r2, #1
 8006008:	d104      	bne.n	8006014 <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 800600a:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 800600e:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8006010:	f7ff bfac 	b.w	8005f6c <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8006014:	2a02      	cmp	r2, #2
 8006016:	d102      	bne.n	800601e <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 8006018:	f9b3 2000 	ldrsh.w	r2, [r3]
 800601c:	e7f7      	b.n	800600e <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800601e:	2a04      	cmp	r2, #4
 8006020:	d101      	bne.n	8006026 <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	e7f3      	b.n	800600e <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8006026:	2a08      	cmp	r2, #8
 8006028:	d102      	bne.n	8006030 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	e7ef      	b.n	8006010 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006030:	6903      	ldr	r3, [r0, #16]
 8006032:	4a03      	ldr	r2, [pc, #12]	; (8006040 <pb_enc_varint+0x40>)
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf08      	it	eq
 8006038:	4613      	moveq	r3, r2
 800603a:	6103      	str	r3, [r0, #16]
}
 800603c:	2000      	movs	r0, #0
 800603e:	4770      	bx	lr
 8006040:	08049f39 	.word	0x08049f39

08006044 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8006044:	1892      	adds	r2, r2, r2
{
 8006046:	b410      	push	{r4}
 8006048:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 800604a:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 800604e:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 8006050:	460b      	mov	r3, r1
}
 8006052:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 8006056:	bfbc      	itt	lt
 8006058:	43d2      	mvnlt	r2, r2
 800605a:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 800605c:	f7ff bf86 	b.w	8005f6c <pb_encode_varint>

08006060 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006060:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 8006062:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8006066:	2a01      	cmp	r2, #1
 8006068:	d104      	bne.n	8006074 <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 800606a:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 800606e:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8006070:	f7ff bfe8 	b.w	8006044 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8006074:	2a02      	cmp	r2, #2
 8006076:	d102      	bne.n	800607e <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 8006078:	f9b3 2000 	ldrsh.w	r2, [r3]
 800607c:	e7f7      	b.n	800606e <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 800607e:	2a04      	cmp	r2, #4
 8006080:	d101      	bne.n	8006086 <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	e7f3      	b.n	800606e <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8006086:	2a08      	cmp	r2, #8
 8006088:	d102      	bne.n	8006090 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	e7ef      	b.n	8006070 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006090:	6903      	ldr	r3, [r0, #16]
 8006092:	4a03      	ldr	r2, [pc, #12]	; (80060a0 <pb_enc_svarint+0x40>)
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf08      	it	eq
 8006098:	4613      	moveq	r3, r2
 800609a:	6103      	str	r3, [r0, #16]
}
 800609c:	2000      	movs	r0, #0
 800609e:	4770      	bx	lr
 80060a0:	08049f39 	.word	0x08049f39

080060a4 <pb_encode_fixed32>:
    uint32_t val = *(const uint32_t*)value;
 80060a4:	680b      	ldr	r3, [r1, #0]
{
 80060a6:	b507      	push	{r0, r1, r2, lr}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80060a8:	0a1a      	lsrs	r2, r3, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80060aa:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80060ae:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80060b2:	0c1a      	lsrs	r2, r3, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80060b4:	0e1b      	lsrs	r3, r3, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80060b6:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 80060ba:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80060bc:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 80060c0:	eb0d 0102 	add.w	r1, sp, r2
 80060c4:	f7ff ff2e 	bl	8005f24 <pb_write>
}
 80060c8:	b003      	add	sp, #12
 80060ca:	f85d fb04 	ldr.w	pc, [sp], #4

080060ce <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 80060ce:	4611      	mov	r1, r2
 80060d0:	f7ff bfe8 	b.w	80060a4 <pb_encode_fixed32>

080060d4 <pb_encode_fixed64>:
{
 80060d4:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 80060d6:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80060da:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80060dc:	f88d 2000 	strb.w	r2, [sp]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 80060e0:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80060e4:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80060e8:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80060ea:	0e12      	lsrs	r2, r2, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80060ec:	f88d 1002 	strb.w	r1, [sp, #2]
    return pb_write(stream, bytes, 8);
 80060f0:	4669      	mov	r1, sp
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80060f2:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 80060f6:	0a1a      	lsrs	r2, r3, #8
 80060f8:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 80060fc:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 80060fe:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8006100:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 8006104:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8006106:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 800610a:	f7ff ff0b 	bl	8005f24 <pb_write>
}
 800610e:	b003      	add	sp, #12
 8006110:	f85d fb04 	ldr.w	pc, [sp], #4

08006114 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8006114:	4611      	mov	r1, r2
 8006116:	f7ff bfdd 	b.w	80060d4 <pb_encode_fixed64>

0800611a <pb_encode_tag>:
{
 800611a:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 800611c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8006120:	0f5b      	lsrs	r3, r3, #29
 8006122:	f7ff bf23 	b.w	8005f6c <pb_encode_varint>
	...

08006128 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8006128:	788a      	ldrb	r2, [r1, #2]
{
 800612a:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 800612c:	f002 020f 	and.w	r2, r2, #15
 8006130:	2a09      	cmp	r2, #9
 8006132:	d810      	bhi.n	8006156 <pb_encode_tag_for_field+0x2e>
 8006134:	e8df f002 	tbb	[pc, r2]
 8006138:	050b0b0b 	.word	0x050b0b0b
 800613c:	0909090d 	.word	0x0909090d
 8006140:	090f      	.short	0x090f
 8006142:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8006144:	881a      	ldrh	r2, [r3, #0]
 8006146:	f7ff bfe8 	b.w	800611a <pb_encode_tag>
            wiretype = PB_WT_STRING;
 800614a:	2102      	movs	r1, #2
            break;
 800614c:	e7fa      	b.n	8006144 <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 800614e:	2100      	movs	r1, #0
 8006150:	e7f8      	b.n	8006144 <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 8006152:	2101      	movs	r1, #1
 8006154:	e7f6      	b.n	8006144 <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 8006156:	6903      	ldr	r3, [r0, #16]
 8006158:	4a03      	ldr	r2, [pc, #12]	; (8006168 <pb_encode_tag_for_field+0x40>)
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf08      	it	eq
 800615e:	4613      	moveq	r3, r2
 8006160:	6103      	str	r3, [r0, #16]
}
 8006162:	2000      	movs	r0, #0
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	08049f96 	.word	0x08049f96

0800616c <encode_field>:
{
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 8006172:	788a      	ldrb	r2, [r1, #2]
{
 8006174:	b086      	sub	sp, #24
 8006176:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 8006178:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 800617c:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	f000 80dd 	beq.w	800633e <encode_field+0x1d2>
 8006184:	0653      	lsls	r3, r2, #25
 8006186:	d41b      	bmi.n	80061c0 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8006188:	4b75      	ldr	r3, [pc, #468]	; (8006360 <encode_field+0x1f4>)
 800618a:	f002 010f 	and.w	r1, r2, #15
 800618e:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 8006192:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 8006196:	b1b3      	cbz	r3, 80061c6 <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 8006198:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800619a:	78a2      	ldrb	r2, [r4, #2]
 800619c:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80061a0:	2880      	cmp	r0, #128	; 0x80
 80061a2:	d105      	bne.n	80061b0 <encode_field+0x44>
        pData = *(const void* const*)pData;
 80061a4:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 80061a6:	1e31      	subs	r1, r6, #0
 80061a8:	bf18      	it	ne
 80061aa:	2101      	movne	r1, #1
 80061ac:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 80061b0:	f002 0130 	and.w	r1, r2, #48	; 0x30
 80061b4:	2920      	cmp	r1, #32
 80061b6:	d03e      	beq.n	8006236 <encode_field+0xca>
 80061b8:	d818      	bhi.n	80061ec <encode_field+0x80>
 80061ba:	b361      	cbz	r1, 8006216 <encode_field+0xaa>
 80061bc:	2910      	cmp	r1, #16
 80061be:	d033      	beq.n	8006228 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 80061c0:	692b      	ldr	r3, [r5, #16]
 80061c2:	4a68      	ldr	r2, [pc, #416]	; (8006364 <encode_field+0x1f8>)
 80061c4:	e02b      	b.n	800621e <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80061c6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80061ca:	2a10      	cmp	r2, #16
 80061cc:	d10a      	bne.n	80061e4 <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80061ce:	4631      	mov	r1, r6
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7ff fe5a 	bl	8005e8a <pb_check_proto3_default_value>
 80061d6:	f080 0001 	eor.w	r0, r0, #1
 80061da:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 80061de:	f10d 0303 	add.w	r3, sp, #3
 80061e2:	e7da      	b.n	800619a <encode_field+0x2e>
        implicit_has = true;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f88d 3003 	strb.w	r3, [sp, #3]
 80061ea:	e7f8      	b.n	80061de <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 80061ec:	2930      	cmp	r1, #48	; 0x30
 80061ee:	d1e7      	bne.n	80061c0 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 80061f0:	881a      	ldrh	r2, [r3, #0]
 80061f2:	8823      	ldrh	r3, [r4, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d11a      	bne.n	800622e <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 80061f8:	4621      	mov	r1, r4
 80061fa:	4628      	mov	r0, r5
 80061fc:	f7ff ff94 	bl	8006128 <pb_encode_tag_for_field>
 8006200:	2800      	cmp	r0, #0
 8006202:	f000 8090 	beq.w	8006326 <encode_field+0x1ba>
                if (!func(stream, field, pData))
 8006206:	4632      	mov	r2, r6
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	463b      	mov	r3, r7
}
 800620e:	b006      	add	sp, #24
 8006210:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 8006214:	4718      	bx	r3
            if (!pData)
 8006216:	2e00      	cmp	r6, #0
 8006218:	d1ee      	bne.n	80061f8 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800621a:	692b      	ldr	r3, [r5, #16]
 800621c:	4a52      	ldr	r2, [pc, #328]	; (8006368 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf08      	it	eq
 8006222:	4613      	moveq	r3, r2
 8006224:	612b      	str	r3, [r5, #16]
 8006226:	e07e      	b.n	8006326 <encode_field+0x1ba>
            if (*(const bool*)pSize)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e4      	bne.n	80061f8 <encode_field+0x8c>
    return true;
 800622e:	2001      	movs	r0, #1
}
 8006230:	b006      	add	sp, #24
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 8006236:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 800623a:	b169      	cbz	r1, 8006258 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 800623c:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8006240:	f1b8 0f00 	cmp.w	r8, #0
 8006244:	d0f3      	beq.n	800622e <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8006246:	2880      	cmp	r0, #128	; 0x80
 8006248:	d009      	beq.n	800625e <encode_field+0xf2>
 800624a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 800624e:	4598      	cmp	r8, r3
 8006250:	d905      	bls.n	800625e <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8006252:	692b      	ldr	r3, [r5, #16]
 8006254:	4a45      	ldr	r2, [pc, #276]	; (800636c <encode_field+0x200>)
 8006256:	e7e2      	b.n	800621e <encode_field+0xb2>
                count = field->array_size;
 8006258:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 800625c:	e7f0      	b.n	8006240 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800625e:	f002 020f 	and.w	r2, r2, #15
 8006262:	2a04      	cmp	r2, #4
 8006264:	d849      	bhi.n	80062fa <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8006266:	8822      	ldrh	r2, [r4, #0]
 8006268:	2102      	movs	r1, #2
 800626a:	4628      	mov	r0, r5
 800626c:	f7ff ff55 	bl	800611a <pb_encode_tag>
 8006270:	2800      	cmp	r0, #0
 8006272:	d058      	beq.n	8006326 <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8006274:	78a3      	ldrb	r3, [r4, #2]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	2b03      	cmp	r3, #3
 800627c:	d111      	bne.n	80062a2 <encode_field+0x136>
            size = 4 * count;
 800627e:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006282:	464a      	mov	r2, r9
 8006284:	2300      	movs	r3, #0
 8006286:	4628      	mov	r0, r5
 8006288:	f7ff fe70 	bl	8005f6c <pb_encode_varint>
 800628c:	2800      	cmp	r0, #0
 800628e:	d04a      	beq.n	8006326 <encode_field+0x1ba>
        if (stream->callback == NULL)
 8006290:	6829      	ldr	r1, [r5, #0]
 8006292:	bb19      	cbnz	r1, 80062dc <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006294:	464a      	mov	r2, r9
 8006296:	4628      	mov	r0, r5
}
 8006298:	b006      	add	sp, #24
 800629a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800629e:	f7ff be41 	b.w	8005f24 <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d102      	bne.n	80062ac <encode_field+0x140>
            size = 8 * count;
 80062a6:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80062aa:	e7ea      	b.n	8006282 <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80062ac:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 80062ae:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80062b2:	2214      	movs	r2, #20
 80062b4:	2100      	movs	r1, #0
 80062b6:	a801      	add	r0, sp, #4
 80062b8:	f005 f81e 	bl	800b2f8 <memset>
                if (!func(&sizestream, field, p))
 80062bc:	4652      	mov	r2, sl
 80062be:	4621      	mov	r1, r4
 80062c0:	a801      	add	r0, sp, #4
 80062c2:	47b8      	blx	r7
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d0b3      	beq.n	8006230 <encode_field+0xc4>
            for (i = 0; i < count; i++)
 80062c8:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 80062cc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 80062d0:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 80062d2:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 80062d4:	d8f2      	bhi.n	80062bc <encode_field+0x150>
            size = sizestream.bytes_written;
 80062d6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80062da:	e7d2      	b.n	8006282 <encode_field+0x116>
        for (i = 0; i < count; i++)
 80062dc:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 80062e0:	4632      	mov	r2, r6
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	b1e8      	cbz	r0, 8006326 <encode_field+0x1ba>
        for (i = 0; i < count; i++)
 80062ea:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 80062ee:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 80062f2:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80062f4:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 80062f6:	d8f3      	bhi.n	80062e0 <encode_field+0x174>
 80062f8:	e799      	b.n	800622e <encode_field+0xc2>
        for (i = 0; i < count; i++)
 80062fa:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff ff11 	bl	8006128 <pb_encode_tag_for_field>
 8006306:	b170      	cbz	r0, 8006326 <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8006308:	78a3      	ldrb	r3, [r4, #2]
 800630a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800630e:	2a80      	cmp	r2, #128	; 0x80
 8006310:	d113      	bne.n	800633a <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8006318:	2b01      	cmp	r3, #1
 800631a:	d80e      	bhi.n	800633a <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 800631c:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	b908      	cbnz	r0, 800632a <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 8006326:	2000      	movs	r0, #0
 8006328:	e782      	b.n	8006230 <encode_field+0xc4>
        for (i = 0; i < count; i++)
 800632a:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800632e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8006332:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8006334:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8006336:	d8e2      	bhi.n	80062fe <encode_field+0x192>
 8006338:	e779      	b.n	800622e <encode_field+0xc2>
                if (!func(stream, field, p))
 800633a:	4632      	mov	r2, r6
 800633c:	e7ef      	b.n	800631e <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f43f af74 	beq.w	800622e <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 8006346:	1d32      	adds	r2, r6, #4
 8006348:	4798      	blx	r3
 800634a:	2800      	cmp	r0, #0
 800634c:	f47f af6f 	bne.w	800622e <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 8006350:	692b      	ldr	r3, [r5, #16]
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <encode_field+0x204>)
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf08      	it	eq
 8006358:	4613      	moveq	r3, r2
 800635a:	612b      	str	r3, [r5, #16]
 800635c:	e768      	b.n	8006230 <encode_field+0xc4>
 800635e:	bf00      	nop
 8006360:	0804a090 	.word	0x0804a090
 8006364:	08049f96 	.word	0x08049f96
 8006368:	08049fda 	.word	0x08049fda
 800636c:	0804a040 	.word	0x0804a040
 8006370:	0804a058 	.word	0x0804a058

08006374 <pb_encode>:
{
 8006374:	b530      	push	{r4, r5, lr}
 8006376:	b087      	sub	sp, #28
 8006378:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800637a:	4668      	mov	r0, sp
 800637c:	f7fe ff6a 	bl	8005254 <pb_field_iter_begin>
 8006380:	b910      	cbnz	r0, 8006388 <pb_encode+0x14>
        return true; /* Empty message type */
 8006382:	2001      	movs	r0, #1
}
 8006384:	b007      	add	sp, #28
 8006386:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006388:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800638a:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800638c:	788b      	ldrb	r3, [r1, #2]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8006396:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8006398:	b91c      	cbnz	r4, 80063a2 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800639a:	4668      	mov	r0, sp
 800639c:	f7fe ff6c 	bl	8005278 <pb_field_iter_next>
 80063a0:	e7ee      	b.n	8006380 <pb_encode+0xc>
        if (extension->type->encode)
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	b12a      	cbz	r2, 80063b4 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 80063a8:	4621      	mov	r1, r4
 80063aa:	4628      	mov	r0, r5
 80063ac:	4790      	blx	r2
        if (!status)
 80063ae:	b968      	cbnz	r0, 80063cc <pb_encode+0x58>
                return false;
 80063b0:	2000      	movs	r0, #0
 80063b2:	e7e7      	b.n	8006384 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80063b4:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 80063b6:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80063b8:	788b      	ldrb	r3, [r1, #2]
 80063ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063be:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 80063c0:	bf0c      	ite	eq
 80063c2:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 80063c4:	6862      	ldrne	r2, [r4, #4]
 80063c6:	f7ff fed1 	bl	800616c <encode_field>
 80063ca:	e7f0      	b.n	80063ae <pb_encode+0x3a>
        extension = extension->next;
 80063cc:	68a4      	ldr	r4, [r4, #8]
 80063ce:	e7e3      	b.n	8006398 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80063d0:	4628      	mov	r0, r5
 80063d2:	f7ff fecb 	bl	800616c <encode_field>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1df      	bne.n	800639a <pb_encode+0x26>
 80063da:	e7e9      	b.n	80063b0 <pb_encode+0x3c>

080063dc <pb_encode_string>:
{
 80063dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80063de:	2300      	movs	r3, #0
{
 80063e0:	4604      	mov	r4, r0
 80063e2:	4615      	mov	r5, r2
 80063e4:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80063e6:	f7ff fdc1 	bl	8005f6c <pb_encode_varint>
 80063ea:	b138      	cbz	r0, 80063fc <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 80063ec:	462a      	mov	r2, r5
 80063ee:	9901      	ldr	r1, [sp, #4]
 80063f0:	4620      	mov	r0, r4
}
 80063f2:	b003      	add	sp, #12
 80063f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 80063f8:	f7ff bd94 	b.w	8005f24 <pb_write>
}
 80063fc:	b003      	add	sp, #12
 80063fe:	bd30      	pop	{r4, r5, pc}

08006400 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006400:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8006402:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8006406:	4619      	mov	r1, r3
 8006408:	f7ff bfe8 	b.w	80063dc <pb_encode_string>

0800640c <pb_enc_string>:
{
 800640c:	b410      	push	{r4}
    size_t max_size = field->data_size;
 800640e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006412:	7889      	ldrb	r1, [r1, #2]
 8006414:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8006418:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 800641a:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 800641c:	bf08      	it	eq
 800641e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (src == NULL)
 8006422:	b122      	cbz	r2, 800642e <pb_enc_string+0x22>
    size_t size = 0;
 8006424:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8006426:	429a      	cmp	r2, r3
 8006428:	d001      	beq.n	800642e <pb_enc_string+0x22>
 800642a:	5c8c      	ldrb	r4, [r1, r2]
 800642c:	b91c      	cbnz	r4, 8006436 <pb_enc_string+0x2a>
}
 800642e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8006432:	f7ff bfd3 	b.w	80063dc <pb_encode_string>
            size++;
 8006436:	3201      	adds	r2, #1
            p++;
 8006438:	e7f5      	b.n	8006426 <pb_enc_string+0x1a>
	...

0800643c <pb_enc_bytes>:
{
 800643c:	b470      	push	{r4, r5, r6}
 800643e:	4603      	mov	r3, r0
 8006440:	460c      	mov	r4, r1
    if (src == NULL)
 8006442:	4611      	mov	r1, r2
 8006444:	b912      	cbnz	r2, 800644c <pb_enc_bytes+0x10>
}
 8006446:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006448:	f7ff bfc8 	b.w	80063dc <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800644c:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800644e:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006450:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8006454:	d104      	bne.n	8006460 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8006456:	1c95      	adds	r5, r2, #2
 8006458:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800645c:	42b5      	cmp	r5, r6
 800645e:	d802      	bhi.n	8006466 <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006460:	3102      	adds	r1, #2
 8006462:	4618      	mov	r0, r3
 8006464:	e7ef      	b.n	8006446 <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	4903      	ldr	r1, [pc, #12]	; (8006478 <pb_enc_bytes+0x3c>)
 800646a:	2a00      	cmp	r2, #0
 800646c:	bf08      	it	eq
 800646e:	460a      	moveq	r2, r1
}
 8006470:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8006472:	611a      	str	r2, [r3, #16]
}
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	0804a067 	.word	0x0804a067

0800647c <pb_encode_submessage>:
{
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	460f      	mov	r7, r1
 8006484:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006486:	2100      	movs	r1, #0
 8006488:	2214      	movs	r2, #20
{
 800648a:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800648c:	a801      	add	r0, sp, #4
 800648e:	f004 ff33 	bl	800b2f8 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8006492:	4642      	mov	r2, r8
 8006494:	4639      	mov	r1, r7
 8006496:	a801      	add	r0, sp, #4
 8006498:	f7ff ff6c 	bl	8006374 <pb_encode>
 800649c:	b910      	cbnz	r0, 80064a4 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 800649e:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	e00d      	b.n	80064c0 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 80064a4:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80064a6:	2500      	movs	r5, #0
 80064a8:	4620      	mov	r0, r4
 80064aa:	4632      	mov	r2, r6
 80064ac:	462b      	mov	r3, r5
 80064ae:	f7ff fd5d 	bl	8005f6c <pb_encode_varint>
 80064b2:	b128      	cbz	r0, 80064c0 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	b931      	cbnz	r1, 80064c6 <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 80064b8:	4632      	mov	r2, r6
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7ff fd32 	bl	8005f24 <pb_write>
}
 80064c0:	b006      	add	sp, #24
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	68a2      	ldr	r2, [r4, #8]
 80064ca:	4433      	add	r3, r6
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d907      	bls.n	80064e0 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	4a0e      	ldr	r2, [pc, #56]	; (800650c <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf08      	it	eq
 80064d8:	4613      	moveq	r3, r2
 80064da:	4628      	mov	r0, r5
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	e7ef      	b.n	80064c0 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 80064e0:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 80064e2:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 80064e4:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 80064e6:	a801      	add	r0, sp, #4
 80064e8:	4639      	mov	r1, r7
    substream.max_size = size;
 80064ea:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 80064ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 80064f2:	f7ff ff3f 	bl	8006374 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80064f6:	9a04      	ldr	r2, [sp, #16]
 80064f8:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 80064fa:	42b2      	cmp	r2, r6
    stream->bytes_written += substream.bytes_written;
 80064fc:	4413      	add	r3, r2
 80064fe:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8006504:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 8006506:	d0cb      	beq.n	80064a0 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8006508:	4a01      	ldr	r2, [pc, #4]	; (8006510 <pb_encode_submessage+0x94>)
 800650a:	e7e3      	b.n	80064d4 <pb_encode_submessage+0x58>
 800650c:	0804a034 	.word	0x0804a034
 8006510:	0804a07b 	.word	0x0804a07b

08006514 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8006514:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 8006518:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 800651a:	b109      	cbz	r1, 8006520 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800651c:	f7ff bfae 	b.w	800647c <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8006520:	6902      	ldr	r2, [r0, #16]
 8006522:	4803      	ldr	r0, [pc, #12]	; (8006530 <pb_enc_submessage+0x1c>)
 8006524:	2a00      	cmp	r2, #0
 8006526:	bf08      	it	eq
 8006528:	4602      	moveq	r2, r0
}
 800652a:	4608      	mov	r0, r1
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800652c:	611a      	str	r2, [r3, #16]
}
 800652e:	4770      	bx	lr
 8006530:	08049ff1 	.word	0x08049ff1

08006534 <ai_buffer_get_size>:
 8006534:	b340      	cbz	r0, 8006588 <ai_buffer_get_size+0x54>
 8006536:	4b15      	ldr	r3, [pc, #84]	; (800658c <ai_buffer_get_size+0x58>)
 8006538:	b430      	push	{r4, r5}
 800653a:	6802      	ldr	r2, [r0, #0]
 800653c:	4d14      	ldr	r5, [pc, #80]	; (8006590 <ai_buffer_get_size+0x5c>)
 800653e:	4013      	ands	r3, r2
 8006540:	6984      	ldr	r4, [r0, #24]
 8006542:	42ab      	cmp	r3, r5
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	d103      	bne.n	8006550 <ai_buffer_get_size+0x1c>
 8006548:	b111      	cbz	r1, 8006550 <ai_buffer_get_size+0x1c>
 800654a:	321f      	adds	r2, #31
 800654c:	f022 021f 	bic.w	r2, r2, #31
 8006550:	7d03      	ldrb	r3, [r0, #20]
 8006552:	6941      	ldr	r1, [r0, #20]
 8006554:	f1a3 0301 	sub.w	r3, r3, #1
 8006558:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800655c:	fab3 f383 	clz	r3, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	428b      	cmp	r3, r1
 8006564:	da0c      	bge.n	8006580 <ai_buffer_get_size+0x4c>
 8006566:	2b01      	cmp	r3, #1
 8006568:	d103      	bne.n	8006572 <ai_buffer_get_size+0x3e>
 800656a:	2902      	cmp	r1, #2
 800656c:	f04f 0302 	mov.w	r3, #2
 8006570:	d006      	beq.n	8006580 <ai_buffer_get_size+0x4c>
 8006572:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006576:	3301      	adds	r3, #1
 8006578:	428b      	cmp	r3, r1
 800657a:	fb00 f202 	mul.w	r2, r0, r2
 800657e:	d1f2      	bne.n	8006566 <ai_buffer_get_size+0x32>
 8006580:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006584:	bc30      	pop	{r4, r5}
 8006586:	4770      	bx	lr
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	017fffff 	.word	0x017fffff
 8006590:	000400c0 	.word	0x000400c0

08006594 <ai_buffer_get_byte_size>:
 8006594:	b128      	cbz	r0, 80065a2 <ai_buffer_get_byte_size+0xe>
 8006596:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800659a:	fb00 f001 	mul.w	r0, r0, r1
 800659e:	3007      	adds	r0, #7
 80065a0:	08c0      	lsrs	r0, r0, #3
 80065a2:	4770      	bx	lr

080065a4 <ai_buffer_array_sane>:
 80065a4:	b138      	cbz	r0, 80065b6 <ai_buffer_array_sane+0x12>
 80065a6:	6843      	ldr	r3, [r0, #4]
 80065a8:	b123      	cbz	r3, 80065b4 <ai_buffer_array_sane+0x10>
 80065aa:	8840      	ldrh	r0, [r0, #2]
 80065ac:	3000      	adds	r0, #0
 80065ae:	bf18      	it	ne
 80065b0:	2001      	movne	r0, #1
 80065b2:	4770      	bx	lr
 80065b4:	4618      	mov	r0, r3
 80065b6:	4770      	bx	lr

080065b8 <ai_buffer_array_item_set_address>:
 80065b8:	b120      	cbz	r0, 80065c4 <ai_buffer_array_item_set_address+0xc>
 80065ba:	6843      	ldr	r3, [r0, #4]
 80065bc:	b11b      	cbz	r3, 80065c6 <ai_buffer_array_item_set_address+0xe>
 80065be:	8840      	ldrh	r0, [r0, #2]
 80065c0:	b918      	cbnz	r0, 80065ca <ai_buffer_array_item_set_address+0x12>
 80065c2:	4770      	bx	lr
 80065c4:	4770      	bx	lr
 80065c6:	4618      	mov	r0, r3
 80065c8:	4770      	bx	lr
 80065ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80065ce:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80065d2:	d0f7      	beq.n	80065c4 <ai_buffer_array_item_set_address+0xc>
 80065d4:	6042      	str	r2, [r0, #4]
 80065d6:	2001      	movs	r0, #1
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop

080065dc <_platform_observer_node_exec_cb>:
 80065dc:	2a00      	cmp	r2, #0
 80065de:	d050      	beq.n	8006682 <_platform_observer_node_exec_cb+0xa6>
 80065e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065e4:	6816      	ldr	r6, [r2, #0]
 80065e6:	b085      	sub	sp, #20
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	d050      	beq.n	800668e <_platform_observer_node_exec_cb+0xb2>
 80065ec:	8993      	ldrh	r3, [r2, #12]
 80065ee:	f240 3802 	movw	r8, #770	; 0x302
 80065f2:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 80065f6:	f240 3701 	movw	r7, #769	; 0x301
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f240 2c02 	movw	ip, #514	; 0x202
 8006600:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006604:	f240 2501 	movw	r5, #513	; 0x201
 8006608:	bf04      	itt	eq
 800660a:	46c4      	moveq	ip, r8
 800660c:	463d      	moveq	r5, r7
 800660e:	f240 1401 	movw	r4, #257	; 0x101
 8006612:	bf0b      	itete	eq
 8006614:	f44f 7982 	moveq.w	r9, #260	; 0x104
 8006618:	f04f 0904 	movne.w	r9, #4
 800661c:	f44f 7781 	moveq.w	r7, #258	; 0x102
 8006620:	2702      	movne	r7, #2
 8006622:	bf16      	itet	ne
 8006624:	2401      	movne	r4, #1
 8006626:	f44f 7841 	moveq.w	r8, #772	; 0x304
 800662a:	f44f 7801 	movne.w	r8, #516	; 0x204
 800662e:	459e      	cmp	lr, r3
 8006630:	d002      	beq.n	8006638 <_platform_observer_node_exec_cb+0x5c>
 8006632:	46c8      	mov	r8, r9
 8006634:	46bc      	mov	ip, r7
 8006636:	4625      	mov	r5, r4
 8006638:	4614      	mov	r4, r2
 800663a:	460f      	mov	r7, r1
 800663c:	b9c8      	cbnz	r0, 8006672 <_platform_observer_node_exec_cb+0x96>
 800663e:	6892      	ldr	r2, [r2, #8]
 8006640:	07d2      	lsls	r2, r2, #31
 8006642:	d510      	bpl.n	8006666 <_platform_observer_node_exec_cb+0x8a>
 8006644:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8006648:	466a      	mov	r2, sp
 800664a:	f8ad 3000 	strh.w	r3, [sp]
 800664e:	4629      	mov	r1, r5
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	9002      	str	r0, [sp, #8]
 8006654:	8838      	ldrh	r0, [r7, #0]
 8006656:	f8ad c004 	strh.w	ip, [sp, #4]
 800665a:	9303      	str	r3, [sp, #12]
 800665c:	f8ad 0002 	strh.w	r0, [sp, #2]
 8006660:	6860      	ldr	r0, [r4, #4]
 8006662:	47b0      	blx	r6
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	2000      	movs	r0, #0
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	b005      	add	sp, #20
 800666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006672:	2801      	cmp	r0, #1
 8006674:	d007      	beq.n	8006686 <_platform_observer_node_exec_cb+0xaa>
 8006676:	2802      	cmp	r0, #2
 8006678:	d00d      	beq.n	8006696 <_platform_observer_node_exec_cb+0xba>
 800667a:	2803      	cmp	r0, #3
 800667c:	d021      	beq.n	80066c2 <_platform_observer_node_exec_cb+0xe6>
 800667e:	2000      	movs	r0, #0
 8006680:	e7f4      	b.n	800666c <_platform_observer_node_exec_cb+0x90>
 8006682:	2001      	movs	r0, #1
 8006684:	4770      	bx	lr
 8006686:	2000      	movs	r0, #0
 8006688:	6121      	str	r1, [r4, #16]
 800668a:	8190      	strh	r0, [r2, #12]
 800668c:	e7ee      	b.n	800666c <_platform_observer_node_exec_cb+0x90>
 800668e:	2001      	movs	r0, #1
 8006690:	b005      	add	sp, #20
 8006692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006696:	6892      	ldr	r2, [r2, #8]
 8006698:	6121      	str	r1, [r4, #16]
 800669a:	0791      	lsls	r1, r2, #30
 800669c:	d5ef      	bpl.n	800667e <_platform_observer_node_exec_cb+0xa2>
 800669e:	887a      	ldrh	r2, [r7, #2]
 80066a0:	2500      	movs	r5, #0
 80066a2:	f8ad 3000 	strh.w	r3, [sp]
 80066a6:	4661      	mov	r1, ip
 80066a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	883a      	ldrh	r2, [r7, #0]
 80066b0:	6860      	ldr	r0, [r4, #4]
 80066b2:	f8ad 2002 	strh.w	r2, [sp, #2]
 80066b6:	466a      	mov	r2, sp
 80066b8:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80066bc:	47b0      	blx	r6
 80066be:	4628      	mov	r0, r5
 80066c0:	e7d4      	b.n	800666c <_platform_observer_node_exec_cb+0x90>
 80066c2:	6892      	ldr	r2, [r2, #8]
 80066c4:	0752      	lsls	r2, r2, #29
 80066c6:	d5ce      	bpl.n	8006666 <_platform_observer_node_exec_cb+0x8a>
 80066c8:	6920      	ldr	r0, [r4, #16]
 80066ca:	2500      	movs	r5, #0
 80066cc:	f8ad 3000 	strh.w	r3, [sp]
 80066d0:	4641      	mov	r1, r8
 80066d2:	8843      	ldrh	r3, [r0, #2]
 80066d4:	466a      	mov	r2, sp
 80066d6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80066da:	8803      	ldrh	r3, [r0, #0]
 80066dc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80066e0:	6983      	ldr	r3, [r0, #24]
 80066e2:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80066e6:	6860      	ldr	r0, [r4, #4]
 80066e8:	47b0      	blx	r6
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	e7bb      	b.n	8006666 <_platform_observer_node_exec_cb+0x8a>
 80066ee:	bf00      	nop

080066f0 <_ai_platform_acquire_crc>:
 80066f0:	2001      	movs	r0, #1
 80066f2:	4770      	bx	lr

080066f4 <_ai_platform_release_crc>:
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop

080066f8 <ai_platform_get_weights_map>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	fab1 f381 	clz	r3, r1
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2800      	cmp	r0, #0
 8006702:	bf08      	it	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2a00      	cmp	r2, #0
 8006708:	bf14      	ite	ne
 800670a:	461c      	movne	r4, r3
 800670c:	2401      	moveq	r4, #1
 800670e:	b114      	cbz	r4, 8006716 <ai_platform_get_weights_map+0x1e>
 8006710:	2400      	movs	r4, #0
 8006712:	4620      	mov	r0, r4
 8006714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006716:	4b22      	ldr	r3, [pc, #136]	; (80067a0 <ai_platform_get_weights_map+0xa8>)
 8006718:	6815      	ldr	r5, [r2, #0]
 800671a:	429d      	cmp	r5, r3
 800671c:	d00c      	beq.n	8006738 <ai_platform_get_weights_map+0x40>
 800671e:	6855      	ldr	r5, [r2, #4]
 8006720:	2d00      	cmp	r5, #0
 8006722:	d0f5      	beq.n	8006710 <ai_platform_get_weights_map+0x18>
 8006724:	682e      	ldr	r6, [r5, #0]
 8006726:	429e      	cmp	r6, r3
 8006728:	d022      	beq.n	8006770 <ai_platform_get_weights_map+0x78>
 800672a:	f1a1 0401 	sub.w	r4, r1, #1
 800672e:	6005      	str	r5, [r0, #0]
 8006730:	fab4 f484 	clz	r4, r4
 8006734:	0964      	lsrs	r4, r4, #5
 8006736:	e7ec      	b.n	8006712 <ai_platform_get_weights_map+0x1a>
 8006738:	4606      	mov	r6, r0
 800673a:	1d10      	adds	r0, r2, #4
 800673c:	4615      	mov	r5, r2
 800673e:	460f      	mov	r7, r1
 8006740:	f7ff ff30 	bl	80065a4 <ai_buffer_array_sane>
 8006744:	2800      	cmp	r0, #0
 8006746:	d0e3      	beq.n	8006710 <ai_platform_get_weights_map+0x18>
 8006748:	88eb      	ldrh	r3, [r5, #6]
 800674a:	429f      	cmp	r7, r3
 800674c:	d1e0      	bne.n	8006710 <ai_platform_get_weights_map+0x18>
 800674e:	1f33      	subs	r3, r6, #4
 8006750:	4620      	mov	r0, r4
 8006752:	68aa      	ldr	r2, [r5, #8]
 8006754:	4422      	add	r2, r4
 8006756:	341c      	adds	r4, #28
 8006758:	6852      	ldr	r2, [r2, #4]
 800675a:	b122      	cbz	r2, 8006766 <ai_platform_get_weights_map+0x6e>
 800675c:	3001      	adds	r0, #1
 800675e:	f843 2f04 	str.w	r2, [r3, #4]!
 8006762:	4287      	cmp	r7, r0
 8006764:	d8f5      	bhi.n	8006752 <ai_platform_get_weights_map+0x5a>
 8006766:	1a3c      	subs	r4, r7, r0
 8006768:	fab4 f484 	clz	r4, r4
 800676c:	0964      	lsrs	r4, r4, #5
 800676e:	e7d0      	b.n	8006712 <ai_platform_get_weights_map+0x1a>
 8006770:	686b      	ldr	r3, [r5, #4]
 8006772:	3504      	adds	r5, #4
 8006774:	42b3      	cmp	r3, r6
 8006776:	d0cc      	beq.n	8006712 <ai_platform_get_weights_map+0x1a>
 8006778:	3804      	subs	r0, #4
 800677a:	462f      	mov	r7, r5
 800677c:	4622      	mov	r2, r4
 800677e:	e003      	b.n	8006788 <ai_platform_get_weights_map+0x90>
 8006780:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006784:	42b3      	cmp	r3, r6
 8006786:	d0c4      	beq.n	8006712 <ai_platform_get_weights_map+0x1a>
 8006788:	3201      	adds	r2, #1
 800678a:	f840 3f04 	str.w	r3, [r0, #4]!
 800678e:	4291      	cmp	r1, r2
 8006790:	d1f6      	bne.n	8006780 <ai_platform_get_weights_map+0x88>
 8006792:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8006796:	4b02      	ldr	r3, [pc, #8]	; (80067a0 <ai_platform_get_weights_map+0xa8>)
 8006798:	429a      	cmp	r2, r3
 800679a:	bf08      	it	eq
 800679c:	2401      	moveq	r4, #1
 800679e:	e7b8      	b.n	8006712 <ai_platform_get_weights_map+0x1a>
 80067a0:	a1facade 	.word	0xa1facade

080067a4 <ai_platform_get_activations_map>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	fab1 f381 	clz	r3, r1
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	2800      	cmp	r0, #0
 80067ae:	bf08      	it	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	bf14      	ite	ne
 80067b6:	461c      	movne	r4, r3
 80067b8:	2401      	moveq	r4, #1
 80067ba:	b114      	cbz	r4, 80067c2 <ai_platform_get_activations_map+0x1e>
 80067bc:	2400      	movs	r4, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c2:	4b23      	ldr	r3, [pc, #140]	; (8006850 <ai_platform_get_activations_map+0xac>)
 80067c4:	6815      	ldr	r5, [r2, #0]
 80067c6:	429d      	cmp	r5, r3
 80067c8:	d00c      	beq.n	80067e4 <ai_platform_get_activations_map+0x40>
 80067ca:	6a15      	ldr	r5, [r2, #32]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	d0f5      	beq.n	80067bc <ai_platform_get_activations_map+0x18>
 80067d0:	682e      	ldr	r6, [r5, #0]
 80067d2:	429e      	cmp	r6, r3
 80067d4:	d023      	beq.n	800681e <ai_platform_get_activations_map+0x7a>
 80067d6:	f1a1 0401 	sub.w	r4, r1, #1
 80067da:	6005      	str	r5, [r0, #0]
 80067dc:	fab4 f484 	clz	r4, r4
 80067e0:	0964      	lsrs	r4, r4, #5
 80067e2:	e7ec      	b.n	80067be <ai_platform_get_activations_map+0x1a>
 80067e4:	4606      	mov	r6, r0
 80067e6:	f102 000c 	add.w	r0, r2, #12
 80067ea:	4615      	mov	r5, r2
 80067ec:	460f      	mov	r7, r1
 80067ee:	f7ff fed9 	bl	80065a4 <ai_buffer_array_sane>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0e2      	beq.n	80067bc <ai_platform_get_activations_map+0x18>
 80067f6:	89eb      	ldrh	r3, [r5, #14]
 80067f8:	429f      	cmp	r7, r3
 80067fa:	d1df      	bne.n	80067bc <ai_platform_get_activations_map+0x18>
 80067fc:	1f33      	subs	r3, r6, #4
 80067fe:	4620      	mov	r0, r4
 8006800:	692a      	ldr	r2, [r5, #16]
 8006802:	4422      	add	r2, r4
 8006804:	341c      	adds	r4, #28
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	b122      	cbz	r2, 8006814 <ai_platform_get_activations_map+0x70>
 800680a:	3001      	adds	r0, #1
 800680c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006810:	4287      	cmp	r7, r0
 8006812:	d8f5      	bhi.n	8006800 <ai_platform_get_activations_map+0x5c>
 8006814:	1a3c      	subs	r4, r7, r0
 8006816:	fab4 f484 	clz	r4, r4
 800681a:	0964      	lsrs	r4, r4, #5
 800681c:	e7cf      	b.n	80067be <ai_platform_get_activations_map+0x1a>
 800681e:	686b      	ldr	r3, [r5, #4]
 8006820:	3504      	adds	r5, #4
 8006822:	42b3      	cmp	r3, r6
 8006824:	d0cb      	beq.n	80067be <ai_platform_get_activations_map+0x1a>
 8006826:	3804      	subs	r0, #4
 8006828:	462f      	mov	r7, r5
 800682a:	4622      	mov	r2, r4
 800682c:	e003      	b.n	8006836 <ai_platform_get_activations_map+0x92>
 800682e:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006832:	42b3      	cmp	r3, r6
 8006834:	d0c3      	beq.n	80067be <ai_platform_get_activations_map+0x1a>
 8006836:	3201      	adds	r2, #1
 8006838:	f840 3f04 	str.w	r3, [r0, #4]!
 800683c:	4291      	cmp	r1, r2
 800683e:	d1f6      	bne.n	800682e <ai_platform_get_activations_map+0x8a>
 8006840:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <ai_platform_get_activations_map+0xac>)
 8006846:	429a      	cmp	r2, r3
 8006848:	bf08      	it	eq
 800684a:	2401      	moveq	r4, #1
 800684c:	e7b7      	b.n	80067be <ai_platform_get_activations_map+0x1a>
 800684e:	bf00      	nop
 8006850:	a1facade 	.word	0xa1facade

08006854 <ai_platform_bind_network_params>:
 8006854:	2a00      	cmp	r2, #0
 8006856:	bf18      	it	ne
 8006858:	2900      	cmpne	r1, #0
 800685a:	b470      	push	{r4, r5, r6}
 800685c:	d011      	beq.n	8006882 <ai_platform_bind_network_params+0x2e>
 800685e:	b180      	cbz	r0, 8006882 <ai_platform_bind_network_params+0x2e>
 8006860:	4603      	mov	r3, r0
 8006862:	4e0a      	ldr	r6, [pc, #40]	; (800688c <ai_platform_bind_network_params+0x38>)
 8006864:	f100 050c 	add.w	r5, r0, #12
 8006868:	2401      	movs	r4, #1
 800686a:	f843 6b04 	str.w	r6, [r3], #4
 800686e:	c903      	ldmia	r1, {r0, r1}
 8006870:	e883 0003 	stmia.w	r3, {r0, r1}
 8006874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006878:	e885 0003 	stmia.w	r5, {r0, r1}
 800687c:	4620      	mov	r0, r4
 800687e:	bc70      	pop	{r4, r5, r6}
 8006880:	4770      	bx	lr
 8006882:	2400      	movs	r4, #0
 8006884:	4620      	mov	r0, r4
 8006886:	bc70      	pop	{r4, r5, r6}
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	a1facade 	.word	0xa1facade

08006890 <ai_platform_runtime_get_revision>:
 8006890:	4a34      	ldr	r2, [pc, #208]	; (8006964 <ai_platform_runtime_get_revision+0xd4>)
 8006892:	b508      	push	{r3, lr}
 8006894:	6813      	ldr	r3, [r2, #0]
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	f7ff ff28 	bl	80066f0 <_ai_platform_acquire_crc>
 80068a0:	4b31      	ldr	r3, [pc, #196]	; (8006968 <ai_platform_runtime_get_revision+0xd8>)
 80068a2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ac:	189a      	adds	r2, r3, r2
 80068ae:	2a01      	cmp	r2, #1
 80068b0:	d91b      	bls.n	80068ea <ai_platform_runtime_get_revision+0x5a>
 80068b2:	f240 4249 	movw	r2, #1097	; 0x449
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d017      	beq.n	80068ea <ai_platform_runtime_get_revision+0x5a>
 80068ba:	4b2c      	ldr	r3, [pc, #176]	; (800696c <ai_platform_runtime_get_revision+0xdc>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80068c2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80068c6:	d01f      	beq.n	8006908 <ai_platform_runtime_get_revision+0x78>
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	f240 4183 	movw	r1, #1155	; 0x483
 80068ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80068d2:	428a      	cmp	r2, r1
 80068d4:	d036      	beq.n	8006944 <ai_platform_runtime_get_revision+0xb4>
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068dc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80068e0:	d021      	beq.n	8006926 <ai_platform_runtime_get_revision+0x96>
 80068e2:	f7ff ff07 	bl	80066f4 <_ai_platform_release_crc>
 80068e6:	4822      	ldr	r0, [pc, #136]	; (8006970 <ai_platform_runtime_get_revision+0xe0>)
 80068e8:	bd08      	pop	{r3, pc}
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <ai_platform_runtime_get_revision+0xe4>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	4619      	mov	r1, r3
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	680b      	ldr	r3, [r1, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1fc      	bne.n	80068f2 <ai_platform_runtime_get_revision+0x62>
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <ai_platform_runtime_get_revision+0xe8>)
 80068fa:	4920      	ldr	r1, [pc, #128]	; (800697c <ai_platform_runtime_get_revision+0xec>)
 80068fc:	4a20      	ldr	r2, [pc, #128]	; (8006980 <ai_platform_runtime_get_revision+0xf0>)
 80068fe:	6019      	str	r1, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4293      	cmp	r3, r2
 8006904:	d0ed      	beq.n	80068e2 <ai_platform_runtime_get_revision+0x52>
 8006906:	e7fe      	b.n	8006906 <ai_platform_runtime_get_revision+0x76>
 8006908:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <ai_platform_runtime_get_revision+0xf4>)
 800690a:	2201      	movs	r2, #1
 800690c:	4619      	mov	r1, r3
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	680b      	ldr	r3, [r1, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1fc      	bne.n	8006910 <ai_platform_runtime_get_revision+0x80>
 8006916:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <ai_platform_runtime_get_revision+0xf8>)
 8006918:	4918      	ldr	r1, [pc, #96]	; (800697c <ai_platform_runtime_get_revision+0xec>)
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <ai_platform_runtime_get_revision+0xf0>)
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4293      	cmp	r3, r2
 8006922:	d0de      	beq.n	80068e2 <ai_platform_runtime_get_revision+0x52>
 8006924:	e7fe      	b.n	8006924 <ai_platform_runtime_get_revision+0x94>
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <ai_platform_runtime_get_revision+0xe4>)
 8006928:	2201      	movs	r2, #1
 800692a:	4619      	mov	r1, r3
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	680b      	ldr	r3, [r1, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1fc      	bne.n	800692e <ai_platform_runtime_get_revision+0x9e>
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <ai_platform_runtime_get_revision+0xe8>)
 8006936:	4911      	ldr	r1, [pc, #68]	; (800697c <ai_platform_runtime_get_revision+0xec>)
 8006938:	4a11      	ldr	r2, [pc, #68]	; (8006980 <ai_platform_runtime_get_revision+0xf0>)
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4293      	cmp	r3, r2
 8006940:	d0cf      	beq.n	80068e2 <ai_platform_runtime_get_revision+0x52>
 8006942:	e7fe      	b.n	8006942 <ai_platform_runtime_get_revision+0xb2>
 8006944:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <ai_platform_runtime_get_revision+0xf4>)
 8006946:	2201      	movs	r2, #1
 8006948:	4619      	mov	r1, r3
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1fc      	bne.n	800694c <ai_platform_runtime_get_revision+0xbc>
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <ai_platform_runtime_get_revision+0xf8>)
 8006954:	4909      	ldr	r1, [pc, #36]	; (800697c <ai_platform_runtime_get_revision+0xec>)
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <ai_platform_runtime_get_revision+0xf0>)
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4293      	cmp	r3, r2
 800695e:	d0c0      	beq.n	80068e2 <ai_platform_runtime_get_revision+0x52>
 8006960:	e7fe      	b.n	8006960 <ai_platform_runtime_get_revision+0xd0>
 8006962:	bf00      	nop
 8006964:	e0002000 	.word	0xe0002000
 8006968:	e0042000 	.word	0xe0042000
 800696c:	5c001000 	.word	0x5c001000
 8006970:	0804a544 	.word	0x0804a544
 8006974:	40023008 	.word	0x40023008
 8006978:	40023000 	.word	0x40023000
 800697c:	f407a5c2 	.word	0xf407a5c2
 8006980:	b5e8b5cd 	.word	0xb5e8b5cd
 8006984:	58024c08 	.word	0x58024c08
 8006988:	58024c00 	.word	0x58024c00

0800698c <ai_platform_runtime_get_version>:
 800698c:	4a3d      	ldr	r2, [pc, #244]	; (8006a84 <ai_platform_runtime_get_version+0xf8>)
 800698e:	b510      	push	{r4, lr}
 8006990:	6813      	ldr	r3, [r2, #0]
 8006992:	b082      	sub	sp, #8
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	f7ff fea9 	bl	80066f0 <_ai_platform_acquire_crc>
 800699e:	4b3a      	ldr	r3, [pc, #232]	; (8006a88 <ai_platform_runtime_get_version+0xfc>)
 80069a0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069aa:	189a      	adds	r2, r3, r2
 80069ac:	2a01      	cmp	r2, #1
 80069ae:	d92c      	bls.n	8006a0a <ai_platform_runtime_get_version+0x7e>
 80069b0:	f240 4249 	movw	r2, #1097	; 0x449
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d028      	beq.n	8006a0a <ai_platform_runtime_get_version+0x7e>
 80069b8:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <ai_platform_runtime_get_version+0x100>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80069c0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80069c4:	d030      	beq.n	8006a28 <ai_platform_runtime_get_version+0x9c>
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	f240 4183 	movw	r1, #1155	; 0x483
 80069cc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d047      	beq.n	8006a64 <ai_platform_runtime_get_version+0xd8>
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069da:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80069de:	d032      	beq.n	8006a46 <ai_platform_runtime_get_version+0xba>
 80069e0:	f7ff fe88 	bl	80066f4 <_ai_platform_release_crc>
 80069e4:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <ai_platform_runtime_get_version+0x104>)
 80069e6:	2000      	movs	r0, #0
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b2dc      	uxtb	r4, r3
 80069ec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80069f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	f364 0007 	bfi	r0, r4, #0, #8
 80069fa:	f361 200f 	bfi	r0, r1, #8, #8
 80069fe:	f362 4017 	bfi	r0, r2, #16, #8
 8006a02:	f363 601f 	bfi	r0, r3, #24, #8
 8006a06:	b002      	add	sp, #8
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <ai_platform_runtime_get_version+0x108>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	4619      	mov	r1, r3
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	680b      	ldr	r3, [r1, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1fc      	bne.n	8006a12 <ai_platform_runtime_get_version+0x86>
 8006a18:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <ai_platform_runtime_get_version+0x10c>)
 8006a1a:	4920      	ldr	r1, [pc, #128]	; (8006a9c <ai_platform_runtime_get_version+0x110>)
 8006a1c:	4a20      	ldr	r2, [pc, #128]	; (8006aa0 <ai_platform_runtime_get_version+0x114>)
 8006a1e:	6019      	str	r1, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d0dc      	beq.n	80069e0 <ai_platform_runtime_get_version+0x54>
 8006a26:	e7fe      	b.n	8006a26 <ai_platform_runtime_get_version+0x9a>
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <ai_platform_runtime_get_version+0x118>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	680b      	ldr	r3, [r1, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1fc      	bne.n	8006a30 <ai_platform_runtime_get_version+0xa4>
 8006a36:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <ai_platform_runtime_get_version+0x11c>)
 8006a38:	4918      	ldr	r1, [pc, #96]	; (8006a9c <ai_platform_runtime_get_version+0x110>)
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <ai_platform_runtime_get_version+0x114>)
 8006a3c:	6019      	str	r1, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d0cd      	beq.n	80069e0 <ai_platform_runtime_get_version+0x54>
 8006a44:	e7fe      	b.n	8006a44 <ai_platform_runtime_get_version+0xb8>
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <ai_platform_runtime_get_version+0x108>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	680b      	ldr	r3, [r1, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1fc      	bne.n	8006a4e <ai_platform_runtime_get_version+0xc2>
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <ai_platform_runtime_get_version+0x10c>)
 8006a56:	4911      	ldr	r1, [pc, #68]	; (8006a9c <ai_platform_runtime_get_version+0x110>)
 8006a58:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <ai_platform_runtime_get_version+0x114>)
 8006a5a:	6019      	str	r1, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d0be      	beq.n	80069e0 <ai_platform_runtime_get_version+0x54>
 8006a62:	e7fe      	b.n	8006a62 <ai_platform_runtime_get_version+0xd6>
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <ai_platform_runtime_get_version+0x118>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	680b      	ldr	r3, [r1, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1fc      	bne.n	8006a6c <ai_platform_runtime_get_version+0xe0>
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <ai_platform_runtime_get_version+0x11c>)
 8006a74:	4909      	ldr	r1, [pc, #36]	; (8006a9c <ai_platform_runtime_get_version+0x110>)
 8006a76:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <ai_platform_runtime_get_version+0x114>)
 8006a78:	6019      	str	r1, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d0af      	beq.n	80069e0 <ai_platform_runtime_get_version+0x54>
 8006a80:	e7fe      	b.n	8006a80 <ai_platform_runtime_get_version+0xf4>
 8006a82:	bf00      	nop
 8006a84:	e0002000 	.word	0xe0002000
 8006a88:	e0042000 	.word	0xe0042000
 8006a8c:	5c001000 	.word	0x5c001000
 8006a90:	0804a548 	.word	0x0804a548
 8006a94:	40023008 	.word	0x40023008
 8006a98:	40023000 	.word	0x40023000
 8006a9c:	f407a5c2 	.word	0xf407a5c2
 8006aa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006aa4:	58024c08 	.word	0x58024c08
 8006aa8:	58024c00 	.word	0x58024c00

08006aac <ai_platform_api_get_version>:
 8006aac:	4a3d      	ldr	r2, [pc, #244]	; (8006ba4 <ai_platform_api_get_version+0xf8>)
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	6813      	ldr	r3, [r2, #0]
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	f7ff fe19 	bl	80066f0 <_ai_platform_acquire_crc>
 8006abe:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <ai_platform_api_get_version+0xfc>)
 8006ac0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aca:	189a      	adds	r2, r3, r2
 8006acc:	2a01      	cmp	r2, #1
 8006ace:	d92c      	bls.n	8006b2a <ai_platform_api_get_version+0x7e>
 8006ad0:	f240 4249 	movw	r2, #1097	; 0x449
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d028      	beq.n	8006b2a <ai_platform_api_get_version+0x7e>
 8006ad8:	4b34      	ldr	r3, [pc, #208]	; (8006bac <ai_platform_api_get_version+0x100>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ae0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006ae4:	d030      	beq.n	8006b48 <ai_platform_api_get_version+0x9c>
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	f240 4183 	movw	r1, #1155	; 0x483
 8006aec:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006af0:	428a      	cmp	r2, r1
 8006af2:	d047      	beq.n	8006b84 <ai_platform_api_get_version+0xd8>
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006afa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006afe:	d032      	beq.n	8006b66 <ai_platform_api_get_version+0xba>
 8006b00:	f7ff fdf8 	bl	80066f4 <_ai_platform_release_crc>
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <ai_platform_api_get_version+0x104>)
 8006b06:	2000      	movs	r0, #0
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	b2dc      	uxtb	r4, r3
 8006b0c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006b10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	f364 0007 	bfi	r0, r4, #0, #8
 8006b1a:	f361 200f 	bfi	r0, r1, #8, #8
 8006b1e:	f362 4017 	bfi	r0, r2, #16, #8
 8006b22:	f363 601f 	bfi	r0, r3, #24, #8
 8006b26:	b002      	add	sp, #8
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <ai_platform_api_get_version+0x108>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4619      	mov	r1, r3
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	680b      	ldr	r3, [r1, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1fc      	bne.n	8006b32 <ai_platform_api_get_version+0x86>
 8006b38:	4b1f      	ldr	r3, [pc, #124]	; (8006bb8 <ai_platform_api_get_version+0x10c>)
 8006b3a:	4920      	ldr	r1, [pc, #128]	; (8006bbc <ai_platform_api_get_version+0x110>)
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <ai_platform_api_get_version+0x114>)
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d0dc      	beq.n	8006b00 <ai_platform_api_get_version+0x54>
 8006b46:	e7fe      	b.n	8006b46 <ai_platform_api_get_version+0x9a>
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <ai_platform_api_get_version+0x118>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1fc      	bne.n	8006b50 <ai_platform_api_get_version+0xa4>
 8006b56:	4b1c      	ldr	r3, [pc, #112]	; (8006bc8 <ai_platform_api_get_version+0x11c>)
 8006b58:	4918      	ldr	r1, [pc, #96]	; (8006bbc <ai_platform_api_get_version+0x110>)
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <ai_platform_api_get_version+0x114>)
 8006b5c:	6019      	str	r1, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d0cd      	beq.n	8006b00 <ai_platform_api_get_version+0x54>
 8006b64:	e7fe      	b.n	8006b64 <ai_platform_api_get_version+0xb8>
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <ai_platform_api_get_version+0x108>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	680b      	ldr	r3, [r1, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1fc      	bne.n	8006b6e <ai_platform_api_get_version+0xc2>
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <ai_platform_api_get_version+0x10c>)
 8006b76:	4911      	ldr	r1, [pc, #68]	; (8006bbc <ai_platform_api_get_version+0x110>)
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <ai_platform_api_get_version+0x114>)
 8006b7a:	6019      	str	r1, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d0be      	beq.n	8006b00 <ai_platform_api_get_version+0x54>
 8006b82:	e7fe      	b.n	8006b82 <ai_platform_api_get_version+0xd6>
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <ai_platform_api_get_version+0x118>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	4619      	mov	r1, r3
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	680b      	ldr	r3, [r1, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1fc      	bne.n	8006b8c <ai_platform_api_get_version+0xe0>
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <ai_platform_api_get_version+0x11c>)
 8006b94:	4909      	ldr	r1, [pc, #36]	; (8006bbc <ai_platform_api_get_version+0x110>)
 8006b96:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <ai_platform_api_get_version+0x114>)
 8006b98:	6019      	str	r1, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d0af      	beq.n	8006b00 <ai_platform_api_get_version+0x54>
 8006ba0:	e7fe      	b.n	8006ba0 <ai_platform_api_get_version+0xf4>
 8006ba2:	bf00      	nop
 8006ba4:	e0002000 	.word	0xe0002000
 8006ba8:	e0042000 	.word	0xe0042000
 8006bac:	5c001000 	.word	0x5c001000
 8006bb0:	0804a54c 	.word	0x0804a54c
 8006bb4:	40023008 	.word	0x40023008
 8006bb8:	40023000 	.word	0x40023000
 8006bbc:	f407a5c2 	.word	0xf407a5c2
 8006bc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bc4:	58024c08 	.word	0x58024c08
 8006bc8:	58024c00 	.word	0x58024c00

08006bcc <ai_platform_interface_api_get_version>:
 8006bcc:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <ai_platform_interface_api_get_version+0xf8>)
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	f7ff fd89 	bl	80066f0 <_ai_platform_acquire_crc>
 8006bde:	4b3a      	ldr	r3, [pc, #232]	; (8006cc8 <ai_platform_interface_api_get_version+0xfc>)
 8006be0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bea:	189a      	adds	r2, r3, r2
 8006bec:	2a01      	cmp	r2, #1
 8006bee:	d92c      	bls.n	8006c4a <ai_platform_interface_api_get_version+0x7e>
 8006bf0:	f240 4249 	movw	r2, #1097	; 0x449
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d028      	beq.n	8006c4a <ai_platform_interface_api_get_version+0x7e>
 8006bf8:	4b34      	ldr	r3, [pc, #208]	; (8006ccc <ai_platform_interface_api_get_version+0x100>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c00:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006c04:	d030      	beq.n	8006c68 <ai_platform_interface_api_get_version+0x9c>
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	f240 4183 	movw	r1, #1155	; 0x483
 8006c0c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d047      	beq.n	8006ca4 <ai_platform_interface_api_get_version+0xd8>
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c1a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c1e:	d032      	beq.n	8006c86 <ai_platform_interface_api_get_version+0xba>
 8006c20:	f7ff fd68 	bl	80066f4 <_ai_platform_release_crc>
 8006c24:	4b2a      	ldr	r3, [pc, #168]	; (8006cd0 <ai_platform_interface_api_get_version+0x104>)
 8006c26:	2000      	movs	r0, #0
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	b2dc      	uxtb	r4, r3
 8006c2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006c30:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006c34:	0e1b      	lsrs	r3, r3, #24
 8006c36:	f364 0007 	bfi	r0, r4, #0, #8
 8006c3a:	f361 200f 	bfi	r0, r1, #8, #8
 8006c3e:	f362 4017 	bfi	r0, r2, #16, #8
 8006c42:	f363 601f 	bfi	r0, r3, #24, #8
 8006c46:	b002      	add	sp, #8
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <ai_platform_interface_api_get_version+0x108>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	4619      	mov	r1, r3
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	680b      	ldr	r3, [r1, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1fc      	bne.n	8006c52 <ai_platform_interface_api_get_version+0x86>
 8006c58:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <ai_platform_interface_api_get_version+0x10c>)
 8006c5a:	4920      	ldr	r1, [pc, #128]	; (8006cdc <ai_platform_interface_api_get_version+0x110>)
 8006c5c:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <ai_platform_interface_api_get_version+0x114>)
 8006c5e:	6019      	str	r1, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d0dc      	beq.n	8006c20 <ai_platform_interface_api_get_version+0x54>
 8006c66:	e7fe      	b.n	8006c66 <ai_platform_interface_api_get_version+0x9a>
 8006c68:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <ai_platform_interface_api_get_version+0x118>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	680b      	ldr	r3, [r1, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1fc      	bne.n	8006c70 <ai_platform_interface_api_get_version+0xa4>
 8006c76:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <ai_platform_interface_api_get_version+0x11c>)
 8006c78:	4918      	ldr	r1, [pc, #96]	; (8006cdc <ai_platform_interface_api_get_version+0x110>)
 8006c7a:	4a19      	ldr	r2, [pc, #100]	; (8006ce0 <ai_platform_interface_api_get_version+0x114>)
 8006c7c:	6019      	str	r1, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d0cd      	beq.n	8006c20 <ai_platform_interface_api_get_version+0x54>
 8006c84:	e7fe      	b.n	8006c84 <ai_platform_interface_api_get_version+0xb8>
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <ai_platform_interface_api_get_version+0x108>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	680b      	ldr	r3, [r1, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1fc      	bne.n	8006c8e <ai_platform_interface_api_get_version+0xc2>
 8006c94:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <ai_platform_interface_api_get_version+0x10c>)
 8006c96:	4911      	ldr	r1, [pc, #68]	; (8006cdc <ai_platform_interface_api_get_version+0x110>)
 8006c98:	4a11      	ldr	r2, [pc, #68]	; (8006ce0 <ai_platform_interface_api_get_version+0x114>)
 8006c9a:	6019      	str	r1, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d0be      	beq.n	8006c20 <ai_platform_interface_api_get_version+0x54>
 8006ca2:	e7fe      	b.n	8006ca2 <ai_platform_interface_api_get_version+0xd6>
 8006ca4:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <ai_platform_interface_api_get_version+0x118>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4619      	mov	r1, r3
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	680b      	ldr	r3, [r1, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1fc      	bne.n	8006cac <ai_platform_interface_api_get_version+0xe0>
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <ai_platform_interface_api_get_version+0x11c>)
 8006cb4:	4909      	ldr	r1, [pc, #36]	; (8006cdc <ai_platform_interface_api_get_version+0x110>)
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <ai_platform_interface_api_get_version+0x114>)
 8006cb8:	6019      	str	r1, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d0af      	beq.n	8006c20 <ai_platform_interface_api_get_version+0x54>
 8006cc0:	e7fe      	b.n	8006cc0 <ai_platform_interface_api_get_version+0xf4>
 8006cc2:	bf00      	nop
 8006cc4:	e0002000 	.word	0xe0002000
 8006cc8:	e0042000 	.word	0xe0042000
 8006ccc:	5c001000 	.word	0x5c001000
 8006cd0:	0804a550 	.word	0x0804a550
 8006cd4:	40023008 	.word	0x40023008
 8006cd8:	40023000 	.word	0x40023000
 8006cdc:	f407a5c2 	.word	0xf407a5c2
 8006ce0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ce4:	58024c08 	.word	0x58024c08
 8006ce8:	58024c00 	.word	0x58024c00

08006cec <ai_platform_context_acquire>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	b120      	cbz	r0, 8006cfc <ai_platform_context_acquire+0x10>
 8006cf2:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <ai_platform_context_acquire+0xe0>)
 8006cf4:	6802      	ldr	r2, [r0, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	bf18      	it	ne
 8006cfa:	2400      	movne	r4, #0
 8006cfc:	4a34      	ldr	r2, [pc, #208]	; (8006dd0 <ai_platform_context_acquire+0xe4>)
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	f7ff fcf3 	bl	80066f0 <_ai_platform_acquire_crc>
 8006d0a:	4b32      	ldr	r3, [pc, #200]	; (8006dd4 <ai_platform_context_acquire+0xe8>)
 8006d0c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d16:	189a      	adds	r2, r3, r2
 8006d18:	2a01      	cmp	r2, #1
 8006d1a:	d91b      	bls.n	8006d54 <ai_platform_context_acquire+0x68>
 8006d1c:	f240 4249 	movw	r2, #1097	; 0x449
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d017      	beq.n	8006d54 <ai_platform_context_acquire+0x68>
 8006d24:	4b2c      	ldr	r3, [pc, #176]	; (8006dd8 <ai_platform_context_acquire+0xec>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d2c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006d30:	d01f      	beq.n	8006d72 <ai_platform_context_acquire+0x86>
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	f240 4183 	movw	r1, #1155	; 0x483
 8006d38:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d3c:	428a      	cmp	r2, r1
 8006d3e:	d036      	beq.n	8006dae <ai_platform_context_acquire+0xc2>
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006d4a:	d021      	beq.n	8006d90 <ai_platform_context_acquire+0xa4>
 8006d4c:	f7ff fcd2 	bl	80066f4 <_ai_platform_release_crc>
 8006d50:	4620      	mov	r0, r4
 8006d52:	bd10      	pop	{r4, pc}
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <ai_platform_context_acquire+0xf0>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	680b      	ldr	r3, [r1, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1fc      	bne.n	8006d5c <ai_platform_context_acquire+0x70>
 8006d62:	4b1f      	ldr	r3, [pc, #124]	; (8006de0 <ai_platform_context_acquire+0xf4>)
 8006d64:	491f      	ldr	r1, [pc, #124]	; (8006de4 <ai_platform_context_acquire+0xf8>)
 8006d66:	4a20      	ldr	r2, [pc, #128]	; (8006de8 <ai_platform_context_acquire+0xfc>)
 8006d68:	6019      	str	r1, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d0ed      	beq.n	8006d4c <ai_platform_context_acquire+0x60>
 8006d70:	e7fe      	b.n	8006d70 <ai_platform_context_acquire+0x84>
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <ai_platform_context_acquire+0x100>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	4619      	mov	r1, r3
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	680b      	ldr	r3, [r1, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1fc      	bne.n	8006d7a <ai_platform_context_acquire+0x8e>
 8006d80:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <ai_platform_context_acquire+0x104>)
 8006d82:	4918      	ldr	r1, [pc, #96]	; (8006de4 <ai_platform_context_acquire+0xf8>)
 8006d84:	4a18      	ldr	r2, [pc, #96]	; (8006de8 <ai_platform_context_acquire+0xfc>)
 8006d86:	6019      	str	r1, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d0de      	beq.n	8006d4c <ai_platform_context_acquire+0x60>
 8006d8e:	e7fe      	b.n	8006d8e <ai_platform_context_acquire+0xa2>
 8006d90:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <ai_platform_context_acquire+0xf0>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	4619      	mov	r1, r3
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	680b      	ldr	r3, [r1, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1fc      	bne.n	8006d98 <ai_platform_context_acquire+0xac>
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <ai_platform_context_acquire+0xf4>)
 8006da0:	4910      	ldr	r1, [pc, #64]	; (8006de4 <ai_platform_context_acquire+0xf8>)
 8006da2:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <ai_platform_context_acquire+0xfc>)
 8006da4:	6019      	str	r1, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d0cf      	beq.n	8006d4c <ai_platform_context_acquire+0x60>
 8006dac:	e7fe      	b.n	8006dac <ai_platform_context_acquire+0xc0>
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <ai_platform_context_acquire+0x100>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	4619      	mov	r1, r3
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	680b      	ldr	r3, [r1, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1fc      	bne.n	8006db6 <ai_platform_context_acquire+0xca>
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <ai_platform_context_acquire+0x104>)
 8006dbe:	4909      	ldr	r1, [pc, #36]	; (8006de4 <ai_platform_context_acquire+0xf8>)
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <ai_platform_context_acquire+0xfc>)
 8006dc2:	6019      	str	r1, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d0c0      	beq.n	8006d4c <ai_platform_context_acquire+0x60>
 8006dca:	e7fe      	b.n	8006dca <ai_platform_context_acquire+0xde>
 8006dcc:	a1c00100 	.word	0xa1c00100
 8006dd0:	e0002000 	.word	0xe0002000
 8006dd4:	e0042000 	.word	0xe0042000
 8006dd8:	5c001000 	.word	0x5c001000
 8006ddc:	40023008 	.word	0x40023008
 8006de0:	40023000 	.word	0x40023000
 8006de4:	f407a5c2 	.word	0xf407a5c2
 8006de8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006dec:	58024c08 	.word	0x58024c08
 8006df0:	58024c00 	.word	0x58024c00

08006df4 <ai_platform_network_get_error>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	b120      	cbz	r0, 8006e02 <ai_platform_network_get_error+0xe>
 8006df8:	4b6e      	ldr	r3, [pc, #440]	; (8006fb4 <ai_platform_network_get_error+0x1c0>)
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	6802      	ldr	r2, [r0, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d03d      	beq.n	8006e7e <ai_platform_network_get_error+0x8a>
 8006e02:	4a6d      	ldr	r2, [pc, #436]	; (8006fb8 <ai_platform_network_get_error+0x1c4>)
 8006e04:	6813      	ldr	r3, [r2, #0]
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	f7ff fc70 	bl	80066f0 <_ai_platform_acquire_crc>
 8006e10:	4b6a      	ldr	r3, [pc, #424]	; (8006fbc <ai_platform_network_get_error+0x1c8>)
 8006e12:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e1c:	185a      	adds	r2, r3, r1
 8006e1e:	2a01      	cmp	r2, #1
 8006e20:	d91e      	bls.n	8006e60 <ai_platform_network_get_error+0x6c>
 8006e22:	f240 4249 	movw	r2, #1097	; 0x449
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01a      	beq.n	8006e60 <ai_platform_network_get_error+0x6c>
 8006e2a:	4b65      	ldr	r3, [pc, #404]	; (8006fc0 <ai_platform_network_get_error+0x1cc>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006e32:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006e36:	f000 80ad 	beq.w	8006f94 <ai_platform_network_get_error+0x1a0>
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f240 4183 	movw	r1, #1155	; 0x483
 8006e40:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006e44:	428a      	cmp	r2, r1
 8006e46:	f000 8095 	beq.w	8006f74 <ai_platform_network_get_error+0x180>
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e50:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006e54:	d043      	beq.n	8006ede <ai_platform_network_get_error+0xea>
 8006e56:	f7ff fc4d 	bl	80066f4 <_ai_platform_release_crc>
 8006e5a:	f241 0010 	movw	r0, #4112	; 0x1010
 8006e5e:	bd10      	pop	{r4, pc}
 8006e60:	4b58      	ldr	r3, [pc, #352]	; (8006fc4 <ai_platform_network_get_error+0x1d0>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	4619      	mov	r1, r3
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1fc      	bne.n	8006e68 <ai_platform_network_get_error+0x74>
 8006e6e:	4b56      	ldr	r3, [pc, #344]	; (8006fc8 <ai_platform_network_get_error+0x1d4>)
 8006e70:	4956      	ldr	r1, [pc, #344]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006e72:	4a57      	ldr	r2, [pc, #348]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d0ec      	beq.n	8006e56 <ai_platform_network_get_error+0x62>
 8006e7c:	e7fe      	b.n	8006e7c <ai_platform_network_get_error+0x88>
 8006e7e:	4a4e      	ldr	r2, [pc, #312]	; (8006fb8 <ai_platform_network_get_error+0x1c4>)
 8006e80:	6813      	ldr	r3, [r2, #0]
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f7ff fc32 	bl	80066f0 <_ai_platform_acquire_crc>
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <ai_platform_network_get_error+0x1c8>)
 8006e8e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e98:	189a      	adds	r2, r3, r2
 8006e9a:	2a01      	cmp	r2, #1
 8006e9c:	d95b      	bls.n	8006f56 <ai_platform_network_get_error+0x162>
 8006e9e:	f240 4249 	movw	r2, #1097	; 0x449
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d057      	beq.n	8006f56 <ai_platform_network_get_error+0x162>
 8006ea6:	4b46      	ldr	r3, [pc, #280]	; (8006fc0 <ai_platform_network_get_error+0x1cc>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006eae:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006eb2:	d041      	beq.n	8006f38 <ai_platform_network_get_error+0x144>
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	f240 4183 	movw	r1, #1155	; 0x483
 8006eba:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ebe:	428a      	cmp	r2, r1
 8006ec0:	d02b      	beq.n	8006f1a <ai_platform_network_get_error+0x126>
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ecc:	d016      	beq.n	8006efc <ai_platform_network_get_error+0x108>
 8006ece:	f7ff fc11 	bl	80066f4 <_ai_platform_release_crc>
 8006ed2:	f104 0010 	add.w	r0, r4, #16
 8006ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eda:	f001 be25 	b.w	8008b28 <core_get_error>
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <ai_platform_network_get_error+0x1d0>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	680b      	ldr	r3, [r1, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1fc      	bne.n	8006ee6 <ai_platform_network_get_error+0xf2>
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <ai_platform_network_get_error+0x1d4>)
 8006eee:	4937      	ldr	r1, [pc, #220]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006ef0:	4a37      	ldr	r2, [pc, #220]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006ef2:	6019      	str	r1, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d0ad      	beq.n	8006e56 <ai_platform_network_get_error+0x62>
 8006efa:	e7fe      	b.n	8006efa <ai_platform_network_get_error+0x106>
 8006efc:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <ai_platform_network_get_error+0x1d0>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	4619      	mov	r1, r3
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	680b      	ldr	r3, [r1, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1fc      	bne.n	8006f04 <ai_platform_network_get_error+0x110>
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <ai_platform_network_get_error+0x1d4>)
 8006f0c:	492f      	ldr	r1, [pc, #188]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006f0e:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006f10:	6019      	str	r1, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d0da      	beq.n	8006ece <ai_platform_network_get_error+0xda>
 8006f18:	e7fe      	b.n	8006f18 <ai_platform_network_get_error+0x124>
 8006f1a:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <ai_platform_network_get_error+0x1e0>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4619      	mov	r1, r3
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	680b      	ldr	r3, [r1, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1fc      	bne.n	8006f22 <ai_platform_network_get_error+0x12e>
 8006f28:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <ai_platform_network_get_error+0x1e4>)
 8006f2a:	4928      	ldr	r1, [pc, #160]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006f2e:	6019      	str	r1, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d0cb      	beq.n	8006ece <ai_platform_network_get_error+0xda>
 8006f36:	e7fe      	b.n	8006f36 <ai_platform_network_get_error+0x142>
 8006f38:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <ai_platform_network_get_error+0x1e0>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	680b      	ldr	r3, [r1, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1fc      	bne.n	8006f40 <ai_platform_network_get_error+0x14c>
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <ai_platform_network_get_error+0x1e4>)
 8006f48:	4920      	ldr	r1, [pc, #128]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006f4a:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006f4c:	6019      	str	r1, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d0bc      	beq.n	8006ece <ai_platform_network_get_error+0xda>
 8006f54:	e7fe      	b.n	8006f54 <ai_platform_network_get_error+0x160>
 8006f56:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <ai_platform_network_get_error+0x1d0>)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1fc      	bne.n	8006f5e <ai_platform_network_get_error+0x16a>
 8006f64:	4b18      	ldr	r3, [pc, #96]	; (8006fc8 <ai_platform_network_get_error+0x1d4>)
 8006f66:	4919      	ldr	r1, [pc, #100]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006f6a:	6019      	str	r1, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d0ad      	beq.n	8006ece <ai_platform_network_get_error+0xda>
 8006f72:	e7fe      	b.n	8006f72 <ai_platform_network_get_error+0x17e>
 8006f74:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <ai_platform_network_get_error+0x1e0>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	4619      	mov	r1, r3
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	680b      	ldr	r3, [r1, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1fc      	bne.n	8006f7c <ai_platform_network_get_error+0x188>
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <ai_platform_network_get_error+0x1e4>)
 8006f84:	4911      	ldr	r1, [pc, #68]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006f88:	6019      	str	r1, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	f43f af62 	beq.w	8006e56 <ai_platform_network_get_error+0x62>
 8006f92:	e7fe      	b.n	8006f92 <ai_platform_network_get_error+0x19e>
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <ai_platform_network_get_error+0x1e0>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	680b      	ldr	r3, [r1, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1fc      	bne.n	8006f9c <ai_platform_network_get_error+0x1a8>
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <ai_platform_network_get_error+0x1e4>)
 8006fa4:	4909      	ldr	r1, [pc, #36]	; (8006fcc <ai_platform_network_get_error+0x1d8>)
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <ai_platform_network_get_error+0x1dc>)
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	f43f af52 	beq.w	8006e56 <ai_platform_network_get_error+0x62>
 8006fb2:	e7fe      	b.n	8006fb2 <ai_platform_network_get_error+0x1be>
 8006fb4:	a1c00100 	.word	0xa1c00100
 8006fb8:	e0002000 	.word	0xe0002000
 8006fbc:	e0042000 	.word	0xe0042000
 8006fc0:	5c001000 	.word	0x5c001000
 8006fc4:	40023008 	.word	0x40023008
 8006fc8:	40023000 	.word	0x40023000
 8006fcc:	f407a5c2 	.word	0xf407a5c2
 8006fd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fd4:	58024c08 	.word	0x58024c08
 8006fd8:	58024c00 	.word	0x58024c00

08006fdc <ai_platform_network_set_error>:
 8006fdc:	b110      	cbz	r0, 8006fe4 <ai_platform_network_set_error+0x8>
 8006fde:	3010      	adds	r0, #16
 8006fe0:	f001 bda8 	b.w	8008b34 <core_set_error>
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop

08006fe8 <ai_platform_api_get_network_report>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	460c      	mov	r4, r1
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	b120      	cbz	r0, 8006ffe <ai_platform_api_get_network_report+0x16>
 8006ff4:	4bae      	ldr	r3, [pc, #696]	; (80072b0 <ai_platform_api_get_network_report+0x2c8>)
 8006ff6:	6802      	ldr	r2, [r0, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	bf18      	it	ne
 8006ffc:	2500      	movne	r5, #0
 8006ffe:	4aad      	ldr	r2, [pc, #692]	; (80072b4 <ai_platform_api_get_network_report+0x2cc>)
 8007000:	6813      	ldr	r3, [r2, #0]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	f7ff fb72 	bl	80066f0 <_ai_platform_acquire_crc>
 800700c:	4baa      	ldr	r3, [pc, #680]	; (80072b8 <ai_platform_api_get_network_report+0x2d0>)
 800700e:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007018:	eb03 020e 	add.w	r2, r3, lr
 800701c:	2a01      	cmp	r2, #1
 800701e:	f240 80a6 	bls.w	800716e <ai_platform_api_get_network_report+0x186>
 8007022:	f240 4249 	movw	r2, #1097	; 0x449
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 80a1 	beq.w	800716e <ai_platform_api_get_network_report+0x186>
 800702c:	4ba3      	ldr	r3, [pc, #652]	; (80072bc <ai_platform_api_get_network_report+0x2d4>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007034:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007038:	f000 80a9 	beq.w	800718e <ai_platform_api_get_network_report+0x1a6>
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f240 4183 	movw	r1, #1155	; 0x483
 8007042:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007046:	428a      	cmp	r2, r1
 8007048:	f000 83e0 	beq.w	800780c <ai_platform_api_get_network_report+0x824>
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007052:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007056:	f000 83c9 	beq.w	80077ec <ai_platform_api_get_network_report+0x804>
 800705a:	f7ff fb4b 	bl	80066f4 <_ai_platform_release_crc>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f000 83c2 	beq.w	80077e8 <ai_platform_api_get_network_report+0x800>
 8007064:	fab4 f384 	clz	r3, r4
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 83bc 	bne.w	80077e8 <ai_platform_api_get_network_report+0x800>
 8007070:	6763      	str	r3, [r4, #116]	; 0x74
 8007072:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007074:	2a00      	cmp	r2, #0
 8007076:	f000 83af 	beq.w	80077d8 <ai_platform_api_get_network_report+0x7f0>
 800707a:	2301      	movs	r3, #1
 800707c:	6763      	str	r3, [r4, #116]	; 0x74
 800707e:	6913      	ldr	r3, [r2, #16]
 8007080:	b183      	cbz	r3, 80070a4 <ai_platform_api_get_network_report+0xbc>
 8007082:	429a      	cmp	r2, r3
 8007084:	d00e      	beq.n	80070a4 <ai_platform_api_get_network_report+0xbc>
 8007086:	2202      	movs	r2, #2
 8007088:	e003      	b.n	8007092 <ai_platform_api_get_network_report+0xaa>
 800708a:	4299      	cmp	r1, r3
 800708c:	d006      	beq.n	800709c <ai_platform_api_get_network_report+0xb4>
 800708e:	460b      	mov	r3, r1
 8007090:	b121      	cbz	r1, 800709c <ai_platform_api_get_network_report+0xb4>
 8007092:	6762      	str	r2, [r4, #116]	; 0x74
 8007094:	3201      	adds	r2, #1
 8007096:	6919      	ldr	r1, [r3, #16]
 8007098:	2900      	cmp	r1, #0
 800709a:	d1f6      	bne.n	800708a <ai_platform_api_get_network_report+0xa2>
 800709c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 839a 	beq.w	80077d8 <ai_platform_api_get_network_report+0x7f0>
 80070a4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8081 	beq.w	80071ae <ai_platform_api_get_network_report+0x1c6>
 80070ac:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	d07b      	beq.n	80071ae <ai_platform_api_get_network_report+0x1c6>
 80070b6:	f8b8 3000 	ldrh.w	r3, [r8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d077      	beq.n	80071ae <ai_platform_api_get_network_report+0x1c6>
 80070be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d073      	beq.n	80071ae <ai_platform_api_get_network_report+0x1c6>
 80070c6:	681f      	ldr	r7, [r3, #0]
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	d070      	beq.n	80071ae <ai_platform_api_get_network_report+0x1c6>
 80070cc:	f04f 0b00 	mov.w	fp, #0
 80070d0:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80070d4:	46d9      	mov	r9, fp
 80070d6:	e029      	b.n	800712c <ai_platform_api_get_network_report+0x144>
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d044      	beq.n	8007168 <ai_platform_api_get_network_report+0x180>
 80070de:	2301      	movs	r3, #1
 80070e0:	f84a 3005 	str.w	r3, [sl, r5]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	685d      	ldr	r5, [r3, #4]
 80070e8:	f04f 0301 	mov.w	r3, #1
 80070ec:	9900      	ldr	r1, [sp, #0]
 80070ee:	f109 0701 	add.w	r7, r9, #1
 80070f2:	7533      	strb	r3, [r6, #20]
 80070f4:	6973      	ldr	r3, [r6, #20]
 80070f6:	46b9      	mov	r9, r7
 80070f8:	6135      	str	r5, [r6, #16]
 80070fa:	f361 231f 	bfi	r3, r1, #8, #24
 80070fe:	60b4      	str	r4, [r6, #8]
 8007100:	e9c6 0200 	strd	r0, r2, [r6]
 8007104:	2200      	movs	r2, #0
 8007106:	b2b8      	uxth	r0, r7
 8007108:	60f2      	str	r2, [r6, #12]
 800710a:	9a01      	ldr	r2, [sp, #4]
 800710c:	e9c6 3205 	strd	r3, r2, [r6, #20]
 8007110:	f8b8 3000 	ldrh.w	r3, [r8]
 8007114:	429f      	cmp	r7, r3
 8007116:	d256      	bcs.n	80071c6 <ai_platform_api_get_network_report+0x1de>
 8007118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d052      	beq.n	80071c6 <ai_platform_api_get_network_report+0x1de>
 8007120:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8007124:	f10b 0b1c 	add.w	fp, fp, #28
 8007128:	2f00      	cmp	r7, #0
 800712a:	d04c      	beq.n	80071c6 <ai_platform_api_get_network_report+0x1de>
 800712c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007130:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 8007134:	69b8      	ldr	r0, [r7, #24]
 8007136:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6800      	ldr	r0, [r0, #0]
 800713e:	eb0a 0405 	add.w	r4, sl, r5
 8007142:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007146:	445e      	add	r6, fp
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f004 f803 	bl	800b158 <ai_array_to_buffer_fmt>
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	2c00      	cmp	r4, #0
 8007158:	d0c5      	beq.n	80070e6 <ai_platform_api_get_network_report+0xfe>
 800715a:	2300      	movs	r3, #0
 800715c:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	6063      	str	r3, [r4, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1b7      	bne.n	80070d8 <ai_platform_api_get_network_report+0xf0>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2400      	movs	r4, #0
 800716c:	e7bb      	b.n	80070e6 <ai_platform_api_get_network_report+0xfe>
 800716e:	4b54      	ldr	r3, [pc, #336]	; (80072c0 <ai_platform_api_get_network_report+0x2d8>)
 8007170:	2201      	movs	r2, #1
 8007172:	4619      	mov	r1, r3
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	680b      	ldr	r3, [r1, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1fc      	bne.n	8007176 <ai_platform_api_get_network_report+0x18e>
 800717c:	4b51      	ldr	r3, [pc, #324]	; (80072c4 <ai_platform_api_get_network_report+0x2dc>)
 800717e:	4952      	ldr	r1, [pc, #328]	; (80072c8 <ai_platform_api_get_network_report+0x2e0>)
 8007180:	4a52      	ldr	r2, [pc, #328]	; (80072cc <ai_platform_api_get_network_report+0x2e4>)
 8007182:	6019      	str	r1, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4293      	cmp	r3, r2
 8007188:	f43f af67 	beq.w	800705a <ai_platform_api_get_network_report+0x72>
 800718c:	e7fe      	b.n	800718c <ai_platform_api_get_network_report+0x1a4>
 800718e:	4b50      	ldr	r3, [pc, #320]	; (80072d0 <ai_platform_api_get_network_report+0x2e8>)
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	680b      	ldr	r3, [r1, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1fc      	bne.n	8007196 <ai_platform_api_get_network_report+0x1ae>
 800719c:	4b4d      	ldr	r3, [pc, #308]	; (80072d4 <ai_platform_api_get_network_report+0x2ec>)
 800719e:	494a      	ldr	r1, [pc, #296]	; (80072c8 <ai_platform_api_get_network_report+0x2e0>)
 80071a0:	4a4a      	ldr	r2, [pc, #296]	; (80072cc <ai_platform_api_get_network_report+0x2e4>)
 80071a2:	6019      	str	r1, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	f43f af57 	beq.w	800705a <ai_platform_api_get_network_report+0x72>
 80071ac:	e7fe      	b.n	80071ac <ai_platform_api_get_network_report+0x1c4>
 80071ae:	2600      	movs	r6, #0
 80071b0:	f105 0010 	add.w	r0, r5, #16
 80071b4:	2218      	movs	r2, #24
 80071b6:	2112      	movs	r1, #18
 80071b8:	8626      	strh	r6, [r4, #48]	; 0x30
 80071ba:	f001 fcbb 	bl	8008b34 <core_set_error>
 80071be:	4630      	mov	r0, r6
 80071c0:	b009      	add	sp, #36	; 0x24
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d0ef      	beq.n	80071ae <ai_platform_api_get_network_report+0x1c6>
 80071ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	8620      	strh	r0, [r4, #48]	; 0x30
 80071d6:	6363      	str	r3, [r4, #52]	; 0x34
 80071d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d95e      	bls.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80071de:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80071e2:	f118 0f0c 	cmn.w	r8, #12
 80071e6:	d059      	beq.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80071e8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d055      	beq.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80071f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d051      	beq.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80071f8:	681f      	ldr	r7, [r3, #0]
 80071fa:	2f00      	cmp	r7, #0
 80071fc:	d04e      	beq.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80071fe:	f04f 0b00 	mov.w	fp, #0
 8007202:	46d9      	mov	r9, fp
 8007204:	e027      	b.n	8007256 <ai_platform_api_get_network_report+0x26e>
 8007206:	2301      	movs	r3, #1
 8007208:	f84a 3005 	str.w	r3, [sl, r5]
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	685d      	ldr	r5, [r3, #4]
 8007210:	f04f 0301 	mov.w	r3, #1
 8007214:	9900      	ldr	r1, [sp, #0]
 8007216:	f109 0701 	add.w	r7, r9, #1
 800721a:	7533      	strb	r3, [r6, #20]
 800721c:	6973      	ldr	r3, [r6, #20]
 800721e:	46b9      	mov	r9, r7
 8007220:	6135      	str	r5, [r6, #16]
 8007222:	fa1f fc87 	uxth.w	ip, r7
 8007226:	f361 231f 	bfi	r3, r1, #8, #24
 800722a:	60b4      	str	r4, [r6, #8]
 800722c:	e9c6 0200 	strd	r0, r2, [r6]
 8007230:	2200      	movs	r2, #0
 8007232:	60f2      	str	r2, [r6, #12]
 8007234:	9a01      	ldr	r2, [sp, #4]
 8007236:	e9c6 3205 	strd	r3, r2, [r6, #20]
 800723a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800723e:	429f      	cmp	r7, r3
 8007240:	d24a      	bcs.n	80072d8 <ai_platform_api_get_network_report+0x2f0>
 8007242:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d046      	beq.n	80072d8 <ai_platform_api_get_network_report+0x2f0>
 800724a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800724e:	f10b 0b1c 	add.w	fp, fp, #28
 8007252:	2f00      	cmp	r7, #0
 8007254:	d040      	beq.n	80072d8 <ai_platform_api_get_network_report+0x2f0>
 8007256:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800725a:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 800725e:	69b8      	ldr	r0, [r7, #24]
 8007260:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6800      	ldr	r0, [r0, #0]
 8007268:	eb0a 0405 	add.w	r4, sl, r5
 800726c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007270:	445e      	add	r6, fp
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	f003 ff6e 	bl	800b158 <ai_array_to_buffer_fmt>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	2c00      	cmp	r4, #0
 8007282:	d0c4      	beq.n	800720e <ai_platform_api_get_network_report+0x226>
 8007284:	2300      	movs	r3, #0
 8007286:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	b113      	cbz	r3, 8007296 <ai_platform_api_get_network_report+0x2ae>
 8007290:	885b      	ldrh	r3, [r3, #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1b7      	bne.n	8007206 <ai_platform_api_get_network_report+0x21e>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2400      	movs	r4, #0
 800729a:	e7b8      	b.n	800720e <ai_platform_api_get_network_report+0x226>
 800729c:	2600      	movs	r6, #0
 800729e:	f105 0010 	add.w	r0, r5, #16
 80072a2:	2218      	movs	r2, #24
 80072a4:	2113      	movs	r1, #19
 80072a6:	8666      	strh	r6, [r4, #50]	; 0x32
 80072a8:	f001 fc44 	bl	8008b34 <core_set_error>
 80072ac:	e787      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 80072ae:	bf00      	nop
 80072b0:	a1c00100 	.word	0xa1c00100
 80072b4:	e0002000 	.word	0xe0002000
 80072b8:	e0042000 	.word	0xe0042000
 80072bc:	5c001000 	.word	0x5c001000
 80072c0:	40023008 	.word	0x40023008
 80072c4:	40023000 	.word	0x40023000
 80072c8:	f407a5c2 	.word	0xf407a5c2
 80072cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80072d0:	58024c08 	.word	0x58024c08
 80072d4:	58024c00 	.word	0x58024c00
 80072d8:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80072dc:	f1bc 0f00 	cmp.w	ip, #0
 80072e0:	d0dc      	beq.n	800729c <ai_platform_api_get_network_report+0x2b4>
 80072e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80072e6:	f105 0724 	add.w	r7, r5, #36	; 0x24
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4638      	mov	r0, r7
 80072ee:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 80072f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80072f4:	f7ff f956 	bl	80065a4 <ai_buffer_array_sane>
 80072f8:	4606      	mov	r6, r0
 80072fa:	b938      	cbnz	r0, 800730c <ai_platform_api_get_network_report+0x324>
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff f951 	bl	80065a4 <ai_buffer_array_sane>
 8007302:	b118      	cbz	r0, 800730c <ai_platform_api_get_network_report+0x324>
 8007304:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 8109 	bne.w	800751e <ai_platform_api_get_network_report+0x536>
 800730c:	f105 081c 	add.w	r8, r5, #28
 8007310:	4640      	mov	r0, r8
 8007312:	f7ff f947 	bl	80065a4 <ai_buffer_array_sane>
 8007316:	4606      	mov	r6, r0
 8007318:	b938      	cbnz	r0, 800732a <ai_platform_api_get_network_report+0x342>
 800731a:	4640      	mov	r0, r8
 800731c:	f7ff f942 	bl	80065a4 <ai_buffer_array_sane>
 8007320:	b118      	cbz	r0, 800732a <ai_platform_api_get_network_report+0x342>
 8007322:	8beb      	ldrh	r3, [r5, #30]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f040 8101 	bne.w	800752c <ai_platform_api_get_network_report+0x544>
 800732a:	686b      	ldr	r3, [r5, #4]
 800732c:	4abd      	ldr	r2, [pc, #756]	; (8007624 <ai_platform_api_get_network_report+0x63c>)
 800732e:	67a3      	str	r3, [r4, #120]	; 0x78
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	f7ff f9da 	bl	80066f0 <_ai_platform_acquire_crc>
 800733c:	4bba      	ldr	r3, [pc, #744]	; (8007628 <ai_platform_api_get_network_report+0x640>)
 800733e:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007348:	eb03 020c 	add.w	r2, r3, ip
 800734c:	2a01      	cmp	r2, #1
 800734e:	f240 8233 	bls.w	80077b8 <ai_platform_api_get_network_report+0x7d0>
 8007352:	f240 4249 	movw	r2, #1097	; 0x449
 8007356:	4293      	cmp	r3, r2
 8007358:	f000 822e 	beq.w	80077b8 <ai_platform_api_get_network_report+0x7d0>
 800735c:	4bb3      	ldr	r3, [pc, #716]	; (800762c <ai_platform_api_get_network_report+0x644>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007364:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007368:	f000 8216 	beq.w	8007798 <ai_platform_api_get_network_report+0x7b0>
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	f240 4183 	movw	r1, #1155	; 0x483
 8007372:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007376:	428a      	cmp	r2, r1
 8007378:	f000 81fe 	beq.w	8007778 <ai_platform_api_get_network_report+0x790>
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007382:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007386:	f000 81e7 	beq.w	8007758 <ai_platform_api_get_network_report+0x770>
 800738a:	f7ff f9b3 	bl	80066f4 <_ai_platform_release_crc>
 800738e:	4aa5      	ldr	r2, [pc, #660]	; (8007624 <ai_platform_api_get_network_report+0x63c>)
 8007390:	4ba7      	ldr	r3, [pc, #668]	; (8007630 <ai_platform_api_get_network_report+0x648>)
 8007392:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	6813      	ldr	r3, [r2, #0]
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	f7ff f9a6 	bl	80066f0 <_ai_platform_acquire_crc>
 80073a4:	4ba0      	ldr	r3, [pc, #640]	; (8007628 <ai_platform_api_get_network_report+0x640>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ac:	199a      	adds	r2, r3, r6
 80073ae:	2a01      	cmp	r2, #1
 80073b0:	f240 81c2 	bls.w	8007738 <ai_platform_api_get_network_report+0x750>
 80073b4:	f240 4249 	movw	r2, #1097	; 0x449
 80073b8:	4293      	cmp	r3, r2
 80073ba:	f000 81bd 	beq.w	8007738 <ai_platform_api_get_network_report+0x750>
 80073be:	4b9b      	ldr	r3, [pc, #620]	; (800762c <ai_platform_api_get_network_report+0x644>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80073c6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80073ca:	f000 81a5 	beq.w	8007718 <ai_platform_api_get_network_report+0x730>
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	f240 4183 	movw	r1, #1155	; 0x483
 80073d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80073d8:	428a      	cmp	r2, r1
 80073da:	f000 818d 	beq.w	80076f8 <ai_platform_api_get_network_report+0x710>
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80073e8:	f000 8176 	beq.w	80076d8 <ai_platform_api_get_network_report+0x6f0>
 80073ec:	f7ff f982 	bl	80066f4 <_ai_platform_release_crc>
 80073f0:	4a8c      	ldr	r2, [pc, #560]	; (8007624 <ai_platform_api_get_network_report+0x63c>)
 80073f2:	f240 1307 	movw	r3, #263	; 0x107
 80073f6:	6163      	str	r3, [r4, #20]
 80073f8:	6813      	ldr	r3, [r2, #0]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	f7ff f976 	bl	80066f0 <_ai_platform_acquire_crc>
 8007404:	4b88      	ldr	r3, [pc, #544]	; (8007628 <ai_platform_api_get_network_report+0x640>)
 8007406:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007410:	185a      	adds	r2, r3, r1
 8007412:	2a01      	cmp	r2, #1
 8007414:	f240 8150 	bls.w	80076b8 <ai_platform_api_get_network_report+0x6d0>
 8007418:	f240 4249 	movw	r2, #1097	; 0x449
 800741c:	4293      	cmp	r3, r2
 800741e:	f000 814b 	beq.w	80076b8 <ai_platform_api_get_network_report+0x6d0>
 8007422:	4b82      	ldr	r3, [pc, #520]	; (800762c <ai_platform_api_get_network_report+0x644>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800742a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800742e:	f000 8133 	beq.w	8007698 <ai_platform_api_get_network_report+0x6b0>
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	f240 4183 	movw	r1, #1155	; 0x483
 8007438:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800743c:	428a      	cmp	r2, r1
 800743e:	f000 811b 	beq.w	8007678 <ai_platform_api_get_network_report+0x690>
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007448:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800744c:	f000 8104 	beq.w	8007658 <ai_platform_api_get_network_report+0x670>
 8007450:	f7ff f950 	bl	80066f4 <_ai_platform_release_crc>
 8007454:	4a73      	ldr	r2, [pc, #460]	; (8007624 <ai_platform_api_get_network_report+0x63c>)
 8007456:	f240 2301 	movw	r3, #513	; 0x201
 800745a:	6263      	str	r3, [r4, #36]	; 0x24
 800745c:	6813      	ldr	r3, [r2, #0]
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	f7ff f944 	bl	80066f0 <_ai_platform_acquire_crc>
 8007468:	4b6f      	ldr	r3, [pc, #444]	; (8007628 <ai_platform_api_get_network_report+0x640>)
 800746a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007474:	189a      	adds	r2, r3, r2
 8007476:	2a01      	cmp	r2, #1
 8007478:	f240 80c3 	bls.w	8007602 <ai_platform_api_get_network_report+0x61a>
 800747c:	f240 4249 	movw	r2, #1097	; 0x449
 8007480:	4293      	cmp	r3, r2
 8007482:	f000 80be 	beq.w	8007602 <ai_platform_api_get_network_report+0x61a>
 8007486:	4b69      	ldr	r3, [pc, #420]	; (800762c <ai_platform_api_get_network_report+0x644>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800748e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007492:	f000 80a6 	beq.w	80075e2 <ai_platform_api_get_network_report+0x5fa>
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	f240 4183 	movw	r1, #1155	; 0x483
 800749c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80074a0:	428a      	cmp	r2, r1
 80074a2:	f000 808e 	beq.w	80075c2 <ai_platform_api_get_network_report+0x5da>
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80074b0:	d077      	beq.n	80075a2 <ai_platform_api_get_network_report+0x5ba>
 80074b2:	f7ff f91f 	bl	80066f4 <_ai_platform_release_crc>
 80074b6:	f240 5301 	movw	r3, #1281	; 0x501
 80074ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80074bc:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80074be:	f003 fe21 	bl	800b104 <ai_platform_version_get>
 80074c2:	4b5c      	ldr	r3, [pc, #368]	; (8007634 <ai_platform_api_get_network_report+0x64c>)
 80074c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80074c6:	6220      	str	r0, [r4, #32]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d051      	beq.n	8007570 <ai_platform_api_get_network_report+0x588>
 80074cc:	495a      	ldr	r1, [pc, #360]	; (8007638 <ai_platform_api_get_network_report+0x650>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80074d4:	4b59      	ldr	r3, [pc, #356]	; (800763c <ai_platform_api_get_network_report+0x654>)
 80074d6:	63e1      	str	r1, [r4, #60]	; 0x3c
 80074d8:	f240 4101 	movw	r1, #1025	; 0x401
 80074dc:	f10d 0e10 	add.w	lr, sp, #16
 80074e0:	46b4      	mov	ip, r6
 80074e2:	6521      	str	r1, [r4, #80]	; 0x50
 80074e4:	f104 0958 	add.w	r9, r4, #88	; 0x58
 80074e8:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 80074ec:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 80074f0:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 80074f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80074f6:	464c      	mov	r4, r9
 80074f8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80074fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007502:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800750a:	4638      	mov	r0, r7
 800750c:	f7ff f84a 	bl	80065a4 <ai_buffer_array_sane>
 8007510:	bb08      	cbnz	r0, 8007556 <ai_platform_api_get_network_report+0x56e>
 8007512:	4640      	mov	r0, r8
 8007514:	f7ff f846 	bl	80065a4 <ai_buffer_array_sane>
 8007518:	b978      	cbnz	r0, 800753a <ai_platform_api_get_network_report+0x552>
 800751a:	2601      	movs	r6, #1
 800751c:	e64f      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 800751e:	f105 0010 	add.w	r0, r5, #16
 8007522:	2213      	movs	r2, #19
 8007524:	2111      	movs	r1, #17
 8007526:	f001 fb05 	bl	8008b34 <core_set_error>
 800752a:	e648      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 800752c:	f105 0010 	add.w	r0, r5, #16
 8007530:	2212      	movs	r2, #18
 8007532:	2111      	movs	r1, #17
 8007534:	f001 fafe 	bl	8008b34 <core_set_error>
 8007538:	e641      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 800753a:	4640      	mov	r0, r8
 800753c:	f7ff f832 	bl	80065a4 <ai_buffer_array_sane>
 8007540:	b318      	cbz	r0, 800758a <ai_platform_api_get_network_report+0x5a2>
 8007542:	6a2f      	ldr	r7, [r5, #32]
 8007544:	4634      	mov	r4, r6
 8007546:	2601      	movs	r6, #1
 8007548:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800754a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007554:	e633      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 8007556:	4638      	mov	r0, r7
 8007558:	f7ff f824 	bl	80065a4 <ai_buffer_array_sane>
 800755c:	b1f0      	cbz	r0, 800759c <ai_platform_api_get_network_report+0x5b4>
 800755e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8007560:	464c      	mov	r4, r9
 8007562:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007566:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800756a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800756e:	e7d0      	b.n	8007512 <ai_platform_api_get_network_report+0x52a>
 8007570:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007574:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8007578:	3440      	adds	r4, #64	; 0x40
 800757a:	2601      	movs	r6, #1
 800757c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007580:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007584:	e884 0003 	stmia.w	r4, {r0, r1}
 8007588:	e619      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 800758a:	4605      	mov	r5, r0
 800758c:	4634      	mov	r4, r6
 800758e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800759a:	deff      	udf	#255	; 0xff
 800759c:	4605      	mov	r5, r0
 800759e:	464c      	mov	r4, r9
 80075a0:	e7f5      	b.n	800758e <ai_platform_api_get_network_report+0x5a6>
 80075a2:	4b27      	ldr	r3, [pc, #156]	; (8007640 <ai_platform_api_get_network_report+0x658>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	4619      	mov	r1, r3
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	680b      	ldr	r3, [r1, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1fc      	bne.n	80075aa <ai_platform_api_get_network_report+0x5c2>
 80075b0:	4b24      	ldr	r3, [pc, #144]	; (8007644 <ai_platform_api_get_network_report+0x65c>)
 80075b2:	4925      	ldr	r1, [pc, #148]	; (8007648 <ai_platform_api_get_network_report+0x660>)
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <ai_platform_api_get_network_report+0x664>)
 80075b6:	6019      	str	r1, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f43f af79 	beq.w	80074b2 <ai_platform_api_get_network_report+0x4ca>
 80075c0:	e7fe      	b.n	80075c0 <ai_platform_api_get_network_report+0x5d8>
 80075c2:	4b23      	ldr	r3, [pc, #140]	; (8007650 <ai_platform_api_get_network_report+0x668>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1fc      	bne.n	80075ca <ai_platform_api_get_network_report+0x5e2>
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <ai_platform_api_get_network_report+0x66c>)
 80075d2:	491d      	ldr	r1, [pc, #116]	; (8007648 <ai_platform_api_get_network_report+0x660>)
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <ai_platform_api_get_network_report+0x664>)
 80075d6:	6019      	str	r1, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4293      	cmp	r3, r2
 80075dc:	f43f af69 	beq.w	80074b2 <ai_platform_api_get_network_report+0x4ca>
 80075e0:	e7fe      	b.n	80075e0 <ai_platform_api_get_network_report+0x5f8>
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <ai_platform_api_get_network_report+0x668>)
 80075e4:	2201      	movs	r2, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	680b      	ldr	r3, [r1, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1fc      	bne.n	80075ea <ai_platform_api_get_network_report+0x602>
 80075f0:	4b18      	ldr	r3, [pc, #96]	; (8007654 <ai_platform_api_get_network_report+0x66c>)
 80075f2:	4915      	ldr	r1, [pc, #84]	; (8007648 <ai_platform_api_get_network_report+0x660>)
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <ai_platform_api_get_network_report+0x664>)
 80075f6:	6019      	str	r1, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f43f af59 	beq.w	80074b2 <ai_platform_api_get_network_report+0x4ca>
 8007600:	e7fe      	b.n	8007600 <ai_platform_api_get_network_report+0x618>
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <ai_platform_api_get_network_report+0x658>)
 8007604:	2201      	movs	r2, #1
 8007606:	4619      	mov	r1, r3
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	680b      	ldr	r3, [r1, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1fc      	bne.n	800760a <ai_platform_api_get_network_report+0x622>
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <ai_platform_api_get_network_report+0x65c>)
 8007612:	490d      	ldr	r1, [pc, #52]	; (8007648 <ai_platform_api_get_network_report+0x660>)
 8007614:	4a0d      	ldr	r2, [pc, #52]	; (800764c <ai_platform_api_get_network_report+0x664>)
 8007616:	6019      	str	r1, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4293      	cmp	r3, r2
 800761c:	f43f af49 	beq.w	80074b2 <ai_platform_api_get_network_report+0x4ca>
 8007620:	e7fe      	b.n	8007620 <ai_platform_api_get_network_report+0x638>
 8007622:	bf00      	nop
 8007624:	e0002000 	.word	0xe0002000
 8007628:	e0042000 	.word	0xe0042000
 800762c:	5c001000 	.word	0x5c001000
 8007630:	0804a544 	.word	0x0804a544
 8007634:	a1facade 	.word	0xa1facade
 8007638:	00040440 	.word	0x00040440
 800763c:	0800e460 	.word	0x0800e460
 8007640:	40023008 	.word	0x40023008
 8007644:	40023000 	.word	0x40023000
 8007648:	f407a5c2 	.word	0xf407a5c2
 800764c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007650:	58024c08 	.word	0x58024c08
 8007654:	58024c00 	.word	0x58024c00
 8007658:	4b74      	ldr	r3, [pc, #464]	; (800782c <ai_platform_api_get_network_report+0x844>)
 800765a:	2201      	movs	r2, #1
 800765c:	4619      	mov	r1, r3
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	680b      	ldr	r3, [r1, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1fc      	bne.n	8007660 <ai_platform_api_get_network_report+0x678>
 8007666:	4b72      	ldr	r3, [pc, #456]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 8007668:	4972      	ldr	r1, [pc, #456]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800766a:	4a73      	ldr	r2, [pc, #460]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800766c:	6019      	str	r1, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4293      	cmp	r3, r2
 8007672:	f43f aeed 	beq.w	8007450 <ai_platform_api_get_network_report+0x468>
 8007676:	e7fe      	b.n	8007676 <ai_platform_api_get_network_report+0x68e>
 8007678:	4b70      	ldr	r3, [pc, #448]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800767a:	2201      	movs	r2, #1
 800767c:	4619      	mov	r1, r3
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	680b      	ldr	r3, [r1, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1fc      	bne.n	8007680 <ai_platform_api_get_network_report+0x698>
 8007686:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 8007688:	496a      	ldr	r1, [pc, #424]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800768a:	4a6b      	ldr	r2, [pc, #428]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800768c:	6019      	str	r1, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4293      	cmp	r3, r2
 8007692:	f43f aedd 	beq.w	8007450 <ai_platform_api_get_network_report+0x468>
 8007696:	e7fe      	b.n	8007696 <ai_platform_api_get_network_report+0x6ae>
 8007698:	4b68      	ldr	r3, [pc, #416]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800769a:	2201      	movs	r2, #1
 800769c:	4619      	mov	r1, r3
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1fc      	bne.n	80076a0 <ai_platform_api_get_network_report+0x6b8>
 80076a6:	4b66      	ldr	r3, [pc, #408]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 80076a8:	4962      	ldr	r1, [pc, #392]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80076aa:	4a63      	ldr	r2, [pc, #396]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 80076ac:	6019      	str	r1, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	f43f aecd 	beq.w	8007450 <ai_platform_api_get_network_report+0x468>
 80076b6:	e7fe      	b.n	80076b6 <ai_platform_api_get_network_report+0x6ce>
 80076b8:	4b5c      	ldr	r3, [pc, #368]	; (800782c <ai_platform_api_get_network_report+0x844>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	4619      	mov	r1, r3
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1fc      	bne.n	80076c0 <ai_platform_api_get_network_report+0x6d8>
 80076c6:	4b5a      	ldr	r3, [pc, #360]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 80076c8:	495a      	ldr	r1, [pc, #360]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80076ca:	4a5b      	ldr	r2, [pc, #364]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	f43f aebd 	beq.w	8007450 <ai_platform_api_get_network_report+0x468>
 80076d6:	e7fe      	b.n	80076d6 <ai_platform_api_get_network_report+0x6ee>
 80076d8:	4b54      	ldr	r3, [pc, #336]	; (800782c <ai_platform_api_get_network_report+0x844>)
 80076da:	2201      	movs	r2, #1
 80076dc:	4619      	mov	r1, r3
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	680b      	ldr	r3, [r1, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1fc      	bne.n	80076e0 <ai_platform_api_get_network_report+0x6f8>
 80076e6:	4b52      	ldr	r3, [pc, #328]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 80076e8:	4952      	ldr	r1, [pc, #328]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80076ea:	4a53      	ldr	r2, [pc, #332]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 80076ec:	6019      	str	r1, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	f43f ae7b 	beq.w	80073ec <ai_platform_api_get_network_report+0x404>
 80076f6:	e7fe      	b.n	80076f6 <ai_platform_api_get_network_report+0x70e>
 80076f8:	4b50      	ldr	r3, [pc, #320]	; (800783c <ai_platform_api_get_network_report+0x854>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	680b      	ldr	r3, [r1, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1fc      	bne.n	8007700 <ai_platform_api_get_network_report+0x718>
 8007706:	4b4e      	ldr	r3, [pc, #312]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 8007708:	494a      	ldr	r1, [pc, #296]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800770a:	4a4b      	ldr	r2, [pc, #300]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4293      	cmp	r3, r2
 8007712:	f43f ae6b 	beq.w	80073ec <ai_platform_api_get_network_report+0x404>
 8007716:	e7fe      	b.n	8007716 <ai_platform_api_get_network_report+0x72e>
 8007718:	4b48      	ldr	r3, [pc, #288]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800771a:	2201      	movs	r2, #1
 800771c:	4619      	mov	r1, r3
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	680b      	ldr	r3, [r1, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1fc      	bne.n	8007720 <ai_platform_api_get_network_report+0x738>
 8007726:	4b46      	ldr	r3, [pc, #280]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 8007728:	4942      	ldr	r1, [pc, #264]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800772a:	4a43      	ldr	r2, [pc, #268]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4293      	cmp	r3, r2
 8007732:	f43f ae5b 	beq.w	80073ec <ai_platform_api_get_network_report+0x404>
 8007736:	e7fe      	b.n	8007736 <ai_platform_api_get_network_report+0x74e>
 8007738:	4b3c      	ldr	r3, [pc, #240]	; (800782c <ai_platform_api_get_network_report+0x844>)
 800773a:	2201      	movs	r2, #1
 800773c:	4619      	mov	r1, r3
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1fc      	bne.n	8007740 <ai_platform_api_get_network_report+0x758>
 8007746:	4b3a      	ldr	r3, [pc, #232]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 8007748:	493a      	ldr	r1, [pc, #232]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800774a:	4a3b      	ldr	r2, [pc, #236]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800774c:	6019      	str	r1, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4293      	cmp	r3, r2
 8007752:	f43f ae4b 	beq.w	80073ec <ai_platform_api_get_network_report+0x404>
 8007756:	e7fe      	b.n	8007756 <ai_platform_api_get_network_report+0x76e>
 8007758:	4b34      	ldr	r3, [pc, #208]	; (800782c <ai_platform_api_get_network_report+0x844>)
 800775a:	2201      	movs	r2, #1
 800775c:	4619      	mov	r1, r3
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	680b      	ldr	r3, [r1, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1fc      	bne.n	8007760 <ai_platform_api_get_network_report+0x778>
 8007766:	4b32      	ldr	r3, [pc, #200]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 8007768:	4932      	ldr	r1, [pc, #200]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800776a:	4a33      	ldr	r2, [pc, #204]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800776c:	6019      	str	r1, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4293      	cmp	r3, r2
 8007772:	f43f ae0a 	beq.w	800738a <ai_platform_api_get_network_report+0x3a2>
 8007776:	e7fe      	b.n	8007776 <ai_platform_api_get_network_report+0x78e>
 8007778:	4b30      	ldr	r3, [pc, #192]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800777a:	2201      	movs	r2, #1
 800777c:	4619      	mov	r1, r3
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	680b      	ldr	r3, [r1, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1fc      	bne.n	8007780 <ai_platform_api_get_network_report+0x798>
 8007786:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 8007788:	492a      	ldr	r1, [pc, #168]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800778a:	4a2b      	ldr	r2, [pc, #172]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 800778c:	6019      	str	r1, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4293      	cmp	r3, r2
 8007792:	f43f adfa 	beq.w	800738a <ai_platform_api_get_network_report+0x3a2>
 8007796:	e7fe      	b.n	8007796 <ai_platform_api_get_network_report+0x7ae>
 8007798:	4b28      	ldr	r3, [pc, #160]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800779a:	2201      	movs	r2, #1
 800779c:	4619      	mov	r1, r3
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	680b      	ldr	r3, [r1, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1fc      	bne.n	80077a0 <ai_platform_api_get_network_report+0x7b8>
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 80077a8:	4922      	ldr	r1, [pc, #136]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80077aa:	4a23      	ldr	r2, [pc, #140]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 80077ac:	6019      	str	r1, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	f43f adea 	beq.w	800738a <ai_platform_api_get_network_report+0x3a2>
 80077b6:	e7fe      	b.n	80077b6 <ai_platform_api_get_network_report+0x7ce>
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <ai_platform_api_get_network_report+0x844>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	4619      	mov	r1, r3
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	680b      	ldr	r3, [r1, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1fc      	bne.n	80077c0 <ai_platform_api_get_network_report+0x7d8>
 80077c6:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 80077c8:	491a      	ldr	r1, [pc, #104]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80077ca:	4a1b      	ldr	r2, [pc, #108]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	f43f adda 	beq.w	800738a <ai_platform_api_get_network_report+0x3a2>
 80077d6:	e7fe      	b.n	80077d6 <ai_platform_api_get_network_report+0x7ee>
 80077d8:	f105 0010 	add.w	r0, r5, #16
 80077dc:	2218      	movs	r2, #24
 80077de:	2111      	movs	r1, #17
 80077e0:	2600      	movs	r6, #0
 80077e2:	f001 f9a7 	bl	8008b34 <core_set_error>
 80077e6:	e4ea      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 80077e8:	2600      	movs	r6, #0
 80077ea:	e4e8      	b.n	80071be <ai_platform_api_get_network_report+0x1d6>
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <ai_platform_api_get_network_report+0x844>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	4619      	mov	r1, r3
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	680b      	ldr	r3, [r1, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1fc      	bne.n	80077f4 <ai_platform_api_get_network_report+0x80c>
 80077fa:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <ai_platform_api_get_network_report+0x848>)
 80077fc:	490d      	ldr	r1, [pc, #52]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 80077fe:	4a0e      	ldr	r2, [pc, #56]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 8007800:	6019      	str	r1, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4293      	cmp	r3, r2
 8007806:	f43f ac28 	beq.w	800705a <ai_platform_api_get_network_report+0x72>
 800780a:	e7fe      	b.n	800780a <ai_platform_api_get_network_report+0x822>
 800780c:	4b0b      	ldr	r3, [pc, #44]	; (800783c <ai_platform_api_get_network_report+0x854>)
 800780e:	2201      	movs	r2, #1
 8007810:	4619      	mov	r1, r3
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	680b      	ldr	r3, [r1, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1fc      	bne.n	8007814 <ai_platform_api_get_network_report+0x82c>
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <ai_platform_api_get_network_report+0x858>)
 800781c:	4905      	ldr	r1, [pc, #20]	; (8007834 <ai_platform_api_get_network_report+0x84c>)
 800781e:	4a06      	ldr	r2, [pc, #24]	; (8007838 <ai_platform_api_get_network_report+0x850>)
 8007820:	6019      	str	r1, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4293      	cmp	r3, r2
 8007826:	f43f ac18 	beq.w	800705a <ai_platform_api_get_network_report+0x72>
 800782a:	e7fe      	b.n	800782a <ai_platform_api_get_network_report+0x842>
 800782c:	40023008 	.word	0x40023008
 8007830:	40023000 	.word	0x40023000
 8007834:	f407a5c2 	.word	0xf407a5c2
 8007838:	b5e8b5cd 	.word	0xb5e8b5cd
 800783c:	58024c08 	.word	0x58024c08
 8007840:	58024c00 	.word	0x58024c00

08007844 <ai_platform_network_create>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	4606      	mov	r6, r0
 800784c:	4615      	mov	r5, r2
 800784e:	461f      	mov	r7, r3
 8007850:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007854:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007858:	f7fe ff4a 	bl	80066f0 <_ai_platform_acquire_crc>
 800785c:	b328      	cbz	r0, 80078aa <ai_platform_network_create+0x66>
 800785e:	4baa      	ldr	r3, [pc, #680]	; (8007b08 <ai_platform_network_create+0x2c4>)
 8007860:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8007864:	4602      	mov	r2, r0
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800786c:	1919      	adds	r1, r3, r4
 800786e:	2901      	cmp	r1, #1
 8007870:	d921      	bls.n	80078b6 <ai_platform_network_create+0x72>
 8007872:	f240 4149 	movw	r1, #1097	; 0x449
 8007876:	428b      	cmp	r3, r1
 8007878:	d01d      	beq.n	80078b6 <ai_platform_network_create+0x72>
 800787a:	4ba4      	ldr	r3, [pc, #656]	; (8007b0c <ai_platform_network_create+0x2c8>)
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007882:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8007886:	d01e      	beq.n	80078c6 <ai_platform_network_create+0x82>
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	f240 4483 	movw	r4, #1155	; 0x483
 800788e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8007892:	42a1      	cmp	r1, r4
 8007894:	f000 8085 	beq.w	80079a2 <ai_platform_network_create+0x15e>
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800789e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80078a2:	f000 8157 	beq.w	8007b54 <ai_platform_network_create+0x310>
 80078a6:	f7fe ff25 	bl	80066f4 <_ai_platform_release_crc>
 80078aa:	f244 1333 	movw	r3, #16691	; 0x4133
 80078ae:	4618      	mov	r0, r3
 80078b0:	b002      	add	sp, #8
 80078b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b6:	4b96      	ldr	r3, [pc, #600]	; (8007b10 <ai_platform_network_create+0x2cc>)
 80078b8:	2118      	movs	r1, #24
 80078ba:	6019      	str	r1, [r3, #0]
 80078bc:	6819      	ldr	r1, [r3, #0]
 80078be:	2918      	cmp	r1, #24
 80078c0:	d059      	beq.n	8007976 <ai_platform_network_create+0x132>
 80078c2:	4610      	mov	r0, r2
 80078c4:	e7ef      	b.n	80078a6 <ai_platform_network_create+0x62>
 80078c6:	4b93      	ldr	r3, [pc, #588]	; (8007b14 <ai_platform_network_create+0x2d0>)
 80078c8:	2118      	movs	r1, #24
 80078ca:	6019      	str	r1, [r3, #0]
 80078cc:	6819      	ldr	r1, [r3, #0]
 80078ce:	2918      	cmp	r1, #24
 80078d0:	d1e9      	bne.n	80078a6 <ai_platform_network_create+0x62>
 80078d2:	2101      	movs	r1, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	6019      	str	r1, [r3, #0]
 80078d8:	6803      	ldr	r3, [r0, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1fc      	bne.n	80078d8 <ai_platform_network_create+0x94>
 80078de:	4610      	mov	r0, r2
 80078e0:	f7fe ff08 	bl	80066f4 <_ai_platform_release_crc>
 80078e4:	4a8c      	ldr	r2, [pc, #560]	; (8007b18 <ai_platform_network_create+0x2d4>)
 80078e6:	6813      	ldr	r3, [r2, #0]
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	f7fe feff 	bl	80066f0 <_ai_platform_acquire_crc>
 80078f2:	4b85      	ldr	r3, [pc, #532]	; (8007b08 <ai_platform_network_create+0x2c4>)
 80078f4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078fe:	185a      	adds	r2, r3, r1
 8007900:	2a01      	cmp	r2, #1
 8007902:	d93f      	bls.n	8007984 <ai_platform_network_create+0x140>
 8007904:	f240 4249 	movw	r2, #1097	; 0x449
 8007908:	4293      	cmp	r3, r2
 800790a:	d03b      	beq.n	8007984 <ai_platform_network_create+0x140>
 800790c:	4b7f      	ldr	r3, [pc, #508]	; (8007b0c <ai_platform_network_create+0x2c8>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007914:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007918:	f000 810c 	beq.w	8007b34 <ai_platform_network_create+0x2f0>
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f240 4183 	movw	r1, #1155	; 0x483
 8007922:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007926:	428a      	cmp	r2, r1
 8007928:	f000 80de 	beq.w	8007ae8 <ai_platform_network_create+0x2a4>
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007932:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007936:	d07e      	beq.n	8007a36 <ai_platform_network_create+0x1f2>
 8007938:	f7fe fedc 	bl	80066f4 <_ai_platform_release_crc>
 800793c:	2e00      	cmp	r6, #0
 800793e:	d077      	beq.n	8007a30 <ai_platform_network_create+0x1ec>
 8007940:	4b76      	ldr	r3, [pc, #472]	; (8007b1c <ai_platform_network_create+0x2d8>)
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	6035      	str	r5, [r6, #0]
 8007946:	f001 f8ed 	bl	8008b24 <core_init>
 800794a:	2800      	cmp	r0, #0
 800794c:	d137      	bne.n	80079be <ai_platform_network_create+0x17a>
 800794e:	2430      	movs	r4, #48	; 0x30
 8007950:	2300      	movs	r3, #0
 8007952:	f04f 0a10 	mov.w	sl, #16
 8007956:	6033      	str	r3, [r6, #0]
 8007958:	464a      	mov	r2, r9
 800795a:	4641      	mov	r1, r8
 800795c:	4638      	mov	r0, r7
 800795e:	f003 fbcb 	bl	800b0f8 <ai_version_get>
 8007962:	2300      	movs	r3, #0
 8007964:	6468      	str	r0, [r5, #68]	; 0x44
 8007966:	f364 0307 	bfi	r3, r4, #0, #8
 800796a:	f36a 231f 	bfi	r3, sl, #8, #24
 800796e:	4618      	mov	r0, r3
 8007970:	b002      	add	sp, #8
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	6019      	str	r1, [r3, #0]
 800797c:	6803      	ldr	r3, [r0, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1fc      	bne.n	800797c <ai_platform_network_create+0x138>
 8007982:	e7ac      	b.n	80078de <ai_platform_network_create+0x9a>
 8007984:	4b62      	ldr	r3, [pc, #392]	; (8007b10 <ai_platform_network_create+0x2cc>)
 8007986:	2201      	movs	r2, #1
 8007988:	4619      	mov	r1, r3
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	680b      	ldr	r3, [r1, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1fc      	bne.n	800798c <ai_platform_network_create+0x148>
 8007992:	4b63      	ldr	r3, [pc, #396]	; (8007b20 <ai_platform_network_create+0x2dc>)
 8007994:	4963      	ldr	r1, [pc, #396]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007996:	4a64      	ldr	r2, [pc, #400]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007998:	6019      	str	r1, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4293      	cmp	r3, r2
 800799e:	d0cb      	beq.n	8007938 <ai_platform_network_create+0xf4>
 80079a0:	e7fe      	b.n	80079a0 <ai_platform_network_create+0x15c>
 80079a2:	4b5c      	ldr	r3, [pc, #368]	; (8007b14 <ai_platform_network_create+0x2d0>)
 80079a4:	2118      	movs	r1, #24
 80079a6:	6019      	str	r1, [r3, #0]
 80079a8:	6819      	ldr	r1, [r3, #0]
 80079aa:	2918      	cmp	r1, #24
 80079ac:	f47f af7b 	bne.w	80078a6 <ai_platform_network_create+0x62>
 80079b0:	2101      	movs	r1, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	6803      	ldr	r3, [r0, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1fc      	bne.n	80079b6 <ai_platform_network_create+0x172>
 80079bc:	e78f      	b.n	80078de <ai_platform_network_create+0x9a>
 80079be:	4a56      	ldr	r2, [pc, #344]	; (8007b18 <ai_platform_network_create+0x2d4>)
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f7fe fe92 	bl	80066f0 <_ai_platform_acquire_crc>
 80079cc:	4b4e      	ldr	r3, [pc, #312]	; (8007b08 <ai_platform_network_create+0x2c4>)
 80079ce:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079d8:	189a      	adds	r2, r3, r2
 80079da:	2a01      	cmp	r2, #1
 80079dc:	d975      	bls.n	8007aca <ai_platform_network_create+0x286>
 80079de:	f240 4249 	movw	r2, #1097	; 0x449
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d071      	beq.n	8007aca <ai_platform_network_create+0x286>
 80079e6:	4b49      	ldr	r3, [pc, #292]	; (8007b0c <ai_platform_network_create+0x2c8>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80079ee:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80079f2:	d05b      	beq.n	8007aac <ai_platform_network_create+0x268>
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	f240 4183 	movw	r1, #1155	; 0x483
 80079fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80079fe:	428a      	cmp	r2, r1
 8007a00:	d045      	beq.n	8007a8e <ai_platform_network_create+0x24a>
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a08:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007a0c:	d030      	beq.n	8007a70 <ai_platform_network_create+0x22c>
 8007a0e:	f7fe fe71 	bl	80066f4 <_ai_platform_release_crc>
 8007a12:	2200      	movs	r2, #0
 8007a14:	4641      	mov	r1, r8
 8007a16:	4638      	mov	r0, r7
 8007a18:	f003 fb6e 	bl	800b0f8 <ai_version_get>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2105      	movs	r1, #5
 8007a22:	2001      	movs	r0, #1
 8007a24:	f003 fb68 	bl	800b0f8 <ai_version_get>
 8007a28:	4284      	cmp	r4, r0
 8007a2a:	d014      	beq.n	8007a56 <ai_platform_network_create+0x212>
 8007a2c:	2401      	movs	r4, #1
 8007a2e:	e78f      	b.n	8007950 <ai_platform_network_create+0x10c>
 8007a30:	f241 0310 	movw	r3, #4112	; 0x1010
 8007a34:	e73b      	b.n	80078ae <ai_platform_network_create+0x6a>
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <ai_platform_network_create+0x2cc>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	680b      	ldr	r3, [r1, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1fc      	bne.n	8007a3e <ai_platform_network_create+0x1fa>
 8007a44:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <ai_platform_network_create+0x2dc>)
 8007a46:	4937      	ldr	r1, [pc, #220]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007a48:	4a37      	ldr	r2, [pc, #220]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007a4a:	6019      	str	r1, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	f43f af72 	beq.w	8007938 <ai_platform_network_create+0xf4>
 8007a54:	e7fe      	b.n	8007a54 <ai_platform_network_create+0x210>
 8007a56:	4b35      	ldr	r3, [pc, #212]	; (8007b2c <ai_platform_network_create+0x2e8>)
 8007a58:	a802      	add	r0, sp, #8
 8007a5a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007a5e:	f003 fa95 	bl	800af8c <ai_check_custom_types>
 8007a62:	b118      	cbz	r0, 8007a6c <ai_platform_network_create+0x228>
 8007a64:	f04f 0a00 	mov.w	sl, #0
 8007a68:	4654      	mov	r4, sl
 8007a6a:	e775      	b.n	8007958 <ai_platform_network_create+0x114>
 8007a6c:	2402      	movs	r4, #2
 8007a6e:	e76f      	b.n	8007950 <ai_platform_network_create+0x10c>
 8007a70:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <ai_platform_network_create+0x2cc>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	680b      	ldr	r3, [r1, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1fc      	bne.n	8007a78 <ai_platform_network_create+0x234>
 8007a7e:	4b28      	ldr	r3, [pc, #160]	; (8007b20 <ai_platform_network_create+0x2dc>)
 8007a80:	4928      	ldr	r1, [pc, #160]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007a82:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007a84:	6019      	str	r1, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d0c0      	beq.n	8007a0e <ai_platform_network_create+0x1ca>
 8007a8c:	e7fe      	b.n	8007a8c <ai_platform_network_create+0x248>
 8007a8e:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <ai_platform_network_create+0x2d0>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	4619      	mov	r1, r3
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	680b      	ldr	r3, [r1, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1fc      	bne.n	8007a96 <ai_platform_network_create+0x252>
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <ai_platform_network_create+0x2ec>)
 8007a9e:	4921      	ldr	r1, [pc, #132]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007aa0:	4a21      	ldr	r2, [pc, #132]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007aa2:	6019      	str	r1, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d0b1      	beq.n	8007a0e <ai_platform_network_create+0x1ca>
 8007aaa:	e7fe      	b.n	8007aaa <ai_platform_network_create+0x266>
 8007aac:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <ai_platform_network_create+0x2d0>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	680b      	ldr	r3, [r1, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1fc      	bne.n	8007ab4 <ai_platform_network_create+0x270>
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <ai_platform_network_create+0x2ec>)
 8007abc:	4919      	ldr	r1, [pc, #100]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007abe:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d0a2      	beq.n	8007a0e <ai_platform_network_create+0x1ca>
 8007ac8:	e7fe      	b.n	8007ac8 <ai_platform_network_create+0x284>
 8007aca:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <ai_platform_network_create+0x2cc>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	4619      	mov	r1, r3
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	680b      	ldr	r3, [r1, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1fc      	bne.n	8007ad2 <ai_platform_network_create+0x28e>
 8007ad8:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <ai_platform_network_create+0x2dc>)
 8007ada:	4912      	ldr	r1, [pc, #72]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007adc:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007ade:	6019      	str	r1, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d093      	beq.n	8007a0e <ai_platform_network_create+0x1ca>
 8007ae6:	e7fe      	b.n	8007ae6 <ai_platform_network_create+0x2a2>
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <ai_platform_network_create+0x2d0>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	4619      	mov	r1, r3
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	680b      	ldr	r3, [r1, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1fc      	bne.n	8007af0 <ai_platform_network_create+0x2ac>
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <ai_platform_network_create+0x2ec>)
 8007af8:	490a      	ldr	r1, [pc, #40]	; (8007b24 <ai_platform_network_create+0x2e0>)
 8007afa:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <ai_platform_network_create+0x2e4>)
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	f43f af19 	beq.w	8007938 <ai_platform_network_create+0xf4>
 8007b06:	e7fe      	b.n	8007b06 <ai_platform_network_create+0x2c2>
 8007b08:	e0042000 	.word	0xe0042000
 8007b0c:	5c001000 	.word	0x5c001000
 8007b10:	40023008 	.word	0x40023008
 8007b14:	58024c08 	.word	0x58024c08
 8007b18:	e0002000 	.word	0xe0002000
 8007b1c:	a1c00100 	.word	0xa1c00100
 8007b20:	40023000 	.word	0x40023000
 8007b24:	f407a5c2 	.word	0xf407a5c2
 8007b28:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b2c:	84048403 	.word	0x84048403
 8007b30:	58024c00 	.word	0x58024c00
 8007b34:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <ai_platform_network_create+0x32c>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	4619      	mov	r1, r3
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	680b      	ldr	r3, [r1, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1fc      	bne.n	8007b3c <ai_platform_network_create+0x2f8>
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <ai_platform_network_create+0x330>)
 8007b44:	490c      	ldr	r1, [pc, #48]	; (8007b78 <ai_platform_network_create+0x334>)
 8007b46:	4a0d      	ldr	r2, [pc, #52]	; (8007b7c <ai_platform_network_create+0x338>)
 8007b48:	6019      	str	r1, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	f43f aef3 	beq.w	8007938 <ai_platform_network_create+0xf4>
 8007b52:	e7fe      	b.n	8007b52 <ai_platform_network_create+0x30e>
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <ai_platform_network_create+0x33c>)
 8007b56:	2118      	movs	r1, #24
 8007b58:	6019      	str	r1, [r3, #0]
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	2918      	cmp	r1, #24
 8007b5e:	f47f aea2 	bne.w	80078a6 <ai_platform_network_create+0x62>
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	6019      	str	r1, [r3, #0]
 8007b68:	6803      	ldr	r3, [r0, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1fc      	bne.n	8007b68 <ai_platform_network_create+0x324>
 8007b6e:	e6b6      	b.n	80078de <ai_platform_network_create+0x9a>
 8007b70:	58024c08 	.word	0x58024c08
 8007b74:	58024c00 	.word	0x58024c00
 8007b78:	f407a5c2 	.word	0xf407a5c2
 8007b7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b80:	40023008 	.word	0x40023008

08007b84 <ai_platform_network_destroy>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	b118      	cbz	r0, 8007b92 <ai_platform_network_destroy+0xe>
 8007b8a:	4b6d      	ldr	r3, [pc, #436]	; (8007d40 <ai_platform_network_destroy+0x1bc>)
 8007b8c:	6802      	ldr	r2, [r0, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d03c      	beq.n	8007c0c <ai_platform_network_destroy+0x88>
 8007b92:	4a6c      	ldr	r2, [pc, #432]	; (8007d44 <ai_platform_network_destroy+0x1c0>)
 8007b94:	6813      	ldr	r3, [r2, #0]
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	f7fe fda8 	bl	80066f0 <_ai_platform_acquire_crc>
 8007ba0:	4b69      	ldr	r3, [pc, #420]	; (8007d48 <ai_platform_network_destroy+0x1c4>)
 8007ba2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bac:	185a      	adds	r2, r3, r1
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	d91d      	bls.n	8007bee <ai_platform_network_destroy+0x6a>
 8007bb2:	f240 4249 	movw	r2, #1097	; 0x449
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d019      	beq.n	8007bee <ai_platform_network_destroy+0x6a>
 8007bba:	4b64      	ldr	r3, [pc, #400]	; (8007d4c <ai_platform_network_destroy+0x1c8>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007bc2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007bc6:	f000 80ab 	beq.w	8007d20 <ai_platform_network_destroy+0x19c>
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f240 4183 	movw	r1, #1155	; 0x483
 8007bd0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007bd4:	428a      	cmp	r2, r1
 8007bd6:	f000 8093 	beq.w	8007d00 <ai_platform_network_destroy+0x17c>
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007be4:	d041      	beq.n	8007c6a <ai_platform_network_destroy+0xe6>
 8007be6:	f7fe fd85 	bl	80066f4 <_ai_platform_release_crc>
 8007bea:	4620      	mov	r0, r4
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	4b58      	ldr	r3, [pc, #352]	; (8007d50 <ai_platform_network_destroy+0x1cc>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	680b      	ldr	r3, [r1, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1fc      	bne.n	8007bf6 <ai_platform_network_destroy+0x72>
 8007bfc:	4b55      	ldr	r3, [pc, #340]	; (8007d54 <ai_platform_network_destroy+0x1d0>)
 8007bfe:	4956      	ldr	r1, [pc, #344]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007c00:	4a56      	ldr	r2, [pc, #344]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007c02:	6019      	str	r1, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d0ed      	beq.n	8007be6 <ai_platform_network_destroy+0x62>
 8007c0a:	e7fe      	b.n	8007c0a <ai_platform_network_destroy+0x86>
 8007c0c:	4a4d      	ldr	r2, [pc, #308]	; (8007d44 <ai_platform_network_destroy+0x1c0>)
 8007c0e:	6813      	ldr	r3, [r2, #0]
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	f7fe fd6b 	bl	80066f0 <_ai_platform_acquire_crc>
 8007c1a:	4b4b      	ldr	r3, [pc, #300]	; (8007d48 <ai_platform_network_destroy+0x1c4>)
 8007c1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c26:	189a      	adds	r2, r3, r2
 8007c28:	2a01      	cmp	r2, #1
 8007c2a:	d95a      	bls.n	8007ce2 <ai_platform_network_destroy+0x15e>
 8007c2c:	f240 4249 	movw	r2, #1097	; 0x449
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d056      	beq.n	8007ce2 <ai_platform_network_destroy+0x15e>
 8007c34:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <ai_platform_network_destroy+0x1c8>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007c3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007c40:	d040      	beq.n	8007cc4 <ai_platform_network_destroy+0x140>
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	f240 4183 	movw	r1, #1155	; 0x483
 8007c48:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007c4c:	428a      	cmp	r2, r1
 8007c4e:	d02a      	beq.n	8007ca6 <ai_platform_network_destroy+0x122>
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c56:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007c5a:	d015      	beq.n	8007c88 <ai_platform_network_destroy+0x104>
 8007c5c:	f7fe fd4a 	bl	80066f4 <_ai_platform_release_crc>
 8007c60:	4620      	mov	r0, r4
 8007c62:	2400      	movs	r4, #0
 8007c64:	f003 fa32 	bl	800b0cc <ai_layers_destroy_all>
 8007c68:	e7bf      	b.n	8007bea <ai_platform_network_destroy+0x66>
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <ai_platform_network_destroy+0x1cc>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	4619      	mov	r1, r3
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	680b      	ldr	r3, [r1, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1fc      	bne.n	8007c72 <ai_platform_network_destroy+0xee>
 8007c78:	4b36      	ldr	r3, [pc, #216]	; (8007d54 <ai_platform_network_destroy+0x1d0>)
 8007c7a:	4937      	ldr	r1, [pc, #220]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007c7c:	4a37      	ldr	r2, [pc, #220]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007c7e:	6019      	str	r1, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d0af      	beq.n	8007be6 <ai_platform_network_destroy+0x62>
 8007c86:	e7fe      	b.n	8007c86 <ai_platform_network_destroy+0x102>
 8007c88:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <ai_platform_network_destroy+0x1cc>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	680b      	ldr	r3, [r1, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1fc      	bne.n	8007c90 <ai_platform_network_destroy+0x10c>
 8007c96:	4b2f      	ldr	r3, [pc, #188]	; (8007d54 <ai_platform_network_destroy+0x1d0>)
 8007c98:	492f      	ldr	r1, [pc, #188]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007c9a:	4a30      	ldr	r2, [pc, #192]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007c9c:	6019      	str	r1, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d0db      	beq.n	8007c5c <ai_platform_network_destroy+0xd8>
 8007ca4:	e7fe      	b.n	8007ca4 <ai_platform_network_destroy+0x120>
 8007ca6:	4b2e      	ldr	r3, [pc, #184]	; (8007d60 <ai_platform_network_destroy+0x1dc>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	4619      	mov	r1, r3
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	680b      	ldr	r3, [r1, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1fc      	bne.n	8007cae <ai_platform_network_destroy+0x12a>
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <ai_platform_network_destroy+0x1e0>)
 8007cb6:	4928      	ldr	r1, [pc, #160]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007cb8:	4a28      	ldr	r2, [pc, #160]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007cba:	6019      	str	r1, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d0cc      	beq.n	8007c5c <ai_platform_network_destroy+0xd8>
 8007cc2:	e7fe      	b.n	8007cc2 <ai_platform_network_destroy+0x13e>
 8007cc4:	4b26      	ldr	r3, [pc, #152]	; (8007d60 <ai_platform_network_destroy+0x1dc>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4619      	mov	r1, r3
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	680b      	ldr	r3, [r1, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1fc      	bne.n	8007ccc <ai_platform_network_destroy+0x148>
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <ai_platform_network_destroy+0x1e0>)
 8007cd4:	4920      	ldr	r1, [pc, #128]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007cd6:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007cd8:	6019      	str	r1, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d0bd      	beq.n	8007c5c <ai_platform_network_destroy+0xd8>
 8007ce0:	e7fe      	b.n	8007ce0 <ai_platform_network_destroy+0x15c>
 8007ce2:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <ai_platform_network_destroy+0x1cc>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	680b      	ldr	r3, [r1, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1fc      	bne.n	8007cea <ai_platform_network_destroy+0x166>
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <ai_platform_network_destroy+0x1d0>)
 8007cf2:	4919      	ldr	r1, [pc, #100]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007cf6:	6019      	str	r1, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d0ae      	beq.n	8007c5c <ai_platform_network_destroy+0xd8>
 8007cfe:	e7fe      	b.n	8007cfe <ai_platform_network_destroy+0x17a>
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <ai_platform_network_destroy+0x1dc>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	4619      	mov	r1, r3
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	680b      	ldr	r3, [r1, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1fc      	bne.n	8007d08 <ai_platform_network_destroy+0x184>
 8007d0e:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <ai_platform_network_destroy+0x1e0>)
 8007d10:	4911      	ldr	r1, [pc, #68]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007d12:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007d14:	6019      	str	r1, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	f43f af64 	beq.w	8007be6 <ai_platform_network_destroy+0x62>
 8007d1e:	e7fe      	b.n	8007d1e <ai_platform_network_destroy+0x19a>
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <ai_platform_network_destroy+0x1dc>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	4619      	mov	r1, r3
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	680b      	ldr	r3, [r1, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1fc      	bne.n	8007d28 <ai_platform_network_destroy+0x1a4>
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <ai_platform_network_destroy+0x1e0>)
 8007d30:	4909      	ldr	r1, [pc, #36]	; (8007d58 <ai_platform_network_destroy+0x1d4>)
 8007d32:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <ai_platform_network_destroy+0x1d8>)
 8007d34:	6019      	str	r1, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	f43f af54 	beq.w	8007be6 <ai_platform_network_destroy+0x62>
 8007d3e:	e7fe      	b.n	8007d3e <ai_platform_network_destroy+0x1ba>
 8007d40:	a1c00100 	.word	0xa1c00100
 8007d44:	e0002000 	.word	0xe0002000
 8007d48:	e0042000 	.word	0xe0042000
 8007d4c:	5c001000 	.word	0x5c001000
 8007d50:	40023008 	.word	0x40023008
 8007d54:	40023000 	.word	0x40023000
 8007d58:	f407a5c2 	.word	0xf407a5c2
 8007d5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d60:	58024c08 	.word	0x58024c08
 8007d64:	58024c00 	.word	0x58024c00

08007d68 <ai_platform_network_init>:
 8007d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d05a      	beq.n	8007e26 <ai_platform_network_init+0xbe>
 8007d70:	4ba7      	ldr	r3, [pc, #668]	; (8008010 <ai_platform_network_init+0x2a8>)
 8007d72:	4604      	mov	r4, r0
 8007d74:	6802      	ldr	r2, [r0, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d155      	bne.n	8007e26 <ai_platform_network_init+0xbe>
 8007d7a:	4aa6      	ldr	r2, [pc, #664]	; (8008014 <ai_platform_network_init+0x2ac>)
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	6813      	ldr	r3, [r2, #0]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	f7fe fcb3 	bl	80066f0 <_ai_platform_acquire_crc>
 8007d8a:	4ba3      	ldr	r3, [pc, #652]	; (8008018 <ai_platform_network_init+0x2b0>)
 8007d8c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d96:	189a      	adds	r2, r3, r2
 8007d98:	2a01      	cmp	r2, #1
 8007d9a:	d935      	bls.n	8007e08 <ai_platform_network_init+0xa0>
 8007d9c:	f240 4249 	movw	r2, #1097	; 0x449
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d031      	beq.n	8007e08 <ai_platform_network_init+0xa0>
 8007da4:	4b9d      	ldr	r3, [pc, #628]	; (800801c <ai_platform_network_init+0x2b4>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007dac:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007db0:	f000 8154 	beq.w	800805c <ai_platform_network_init+0x2f4>
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f240 4183 	movw	r1, #1155	; 0x483
 8007dba:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007dbe:	428a      	cmp	r2, r1
 8007dc0:	f000 813c 	beq.w	800803c <ai_platform_network_init+0x2d4>
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007dce:	f000 8107 	beq.w	8007fe0 <ai_platform_network_init+0x278>
 8007dd2:	f7fe fc8f 	bl	80066f4 <_ai_platform_release_crc>
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	f000 8112 	beq.w	8008000 <ai_platform_network_init+0x298>
 8007ddc:	4b90      	ldr	r3, [pc, #576]	; (8008020 <ai_platform_network_init+0x2b8>)
 8007dde:	682a      	ldr	r2, [r5, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d14e      	bne.n	8007e82 <ai_platform_network_init+0x11a>
 8007de4:	6928      	ldr	r0, [r5, #16]
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	89ee      	ldrh	r6, [r5, #14]
 8007dea:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 8007dee:	62a0      	str	r0, [r4, #40]	; 0x28
 8007df0:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007df4:	2203      	movs	r2, #3
 8007df6:	84e6      	strh	r6, [r4, #38]	; 0x26
 8007df8:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	60e2      	str	r2, [r4, #12]
 8007dfe:	f003 f8ef 	bl	800afe0 <ai_layers_init_all>
 8007e02:	4620      	mov	r0, r4
 8007e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e08:	4b86      	ldr	r3, [pc, #536]	; (8008024 <ai_platform_network_init+0x2bc>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	680b      	ldr	r3, [r1, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1fc      	bne.n	8007e10 <ai_platform_network_init+0xa8>
 8007e16:	4b84      	ldr	r3, [pc, #528]	; (8008028 <ai_platform_network_init+0x2c0>)
 8007e18:	4984      	ldr	r1, [pc, #528]	; (800802c <ai_platform_network_init+0x2c4>)
 8007e1a:	4a85      	ldr	r2, [pc, #532]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007e1c:	6019      	str	r1, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d0d6      	beq.n	8007dd2 <ai_platform_network_init+0x6a>
 8007e24:	e7fe      	b.n	8007e24 <ai_platform_network_init+0xbc>
 8007e26:	4a7b      	ldr	r2, [pc, #492]	; (8008014 <ai_platform_network_init+0x2ac>)
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	f7fe fc5e 	bl	80066f0 <_ai_platform_acquire_crc>
 8007e34:	4b78      	ldr	r3, [pc, #480]	; (8008018 <ai_platform_network_init+0x2b0>)
 8007e36:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e40:	185a      	adds	r2, r3, r1
 8007e42:	2a01      	cmp	r2, #1
 8007e44:	d93f      	bls.n	8007ec6 <ai_platform_network_init+0x15e>
 8007e46:	f240 4249 	movw	r2, #1097	; 0x449
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d03b      	beq.n	8007ec6 <ai_platform_network_init+0x15e>
 8007e4e:	4b73      	ldr	r3, [pc, #460]	; (800801c <ai_platform_network_init+0x2b4>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007e56:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8007e5a:	f000 80a5 	beq.w	8007fa8 <ai_platform_network_init+0x240>
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f240 4183 	movw	r1, #1155	; 0x483
 8007e64:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007e68:	428a      	cmp	r2, r1
 8007e6a:	f000 808d 	beq.w	8007f88 <ai_platform_network_init+0x220>
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e74:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007e78:	d076      	beq.n	8007f68 <ai_platform_network_init+0x200>
 8007e7a:	f7fe fc3b 	bl	80066f4 <_ai_platform_release_crc>
 8007e7e:	2000      	movs	r0, #0
 8007e80:	e7c0      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8007e82:	2101      	movs	r1, #1
 8007e84:	4628      	mov	r0, r5
 8007e86:	f105 081c 	add.w	r8, r5, #28
 8007e8a:	686f      	ldr	r7, [r5, #4]
 8007e8c:	f7fe fb52 	bl	8006534 <ai_buffer_get_size>
 8007e90:	4681      	mov	r9, r0
 8007e92:	2101      	movs	r1, #1
 8007e94:	4640      	mov	r0, r8
 8007e96:	6a2e      	ldr	r6, [r5, #32]
 8007e98:	f7fe fb4c 	bl	8006534 <ai_buffer_get_size>
 8007e9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ea0:	d020      	beq.n	8007ee4 <ai_platform_network_init+0x17c>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f040 8090 	bne.w	8007fc8 <ai_platform_network_init+0x260>
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	2f00      	cmp	r7, #0
 8007eae:	f000 808f 	beq.w	8007fd0 <ai_platform_network_init+0x268>
 8007eb2:	8be7      	ldrh	r7, [r4, #30]
 8007eb4:	bb7f      	cbnz	r7, 8007f16 <ai_platform_network_init+0x1ae>
 8007eb6:	f104 0010 	add.w	r0, r4, #16
 8007eba:	2212      	movs	r2, #18
 8007ebc:	2116      	movs	r1, #22
 8007ebe:	f000 fe39 	bl	8008b34 <core_set_error>
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	e79e      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8007ec6:	4b57      	ldr	r3, [pc, #348]	; (8008024 <ai_platform_network_init+0x2bc>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4619      	mov	r1, r3
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	680b      	ldr	r3, [r1, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1fc      	bne.n	8007ece <ai_platform_network_init+0x166>
 8007ed4:	4b54      	ldr	r3, [pc, #336]	; (8008028 <ai_platform_network_init+0x2c0>)
 8007ed6:	4955      	ldr	r1, [pc, #340]	; (800802c <ai_platform_network_init+0x2c4>)
 8007ed8:	4a55      	ldr	r2, [pc, #340]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007eda:	6019      	str	r1, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d0cb      	beq.n	8007e7a <ai_platform_network_init+0x112>
 8007ee2:	e7fe      	b.n	8007ee2 <ai_platform_network_init+0x17a>
 8007ee4:	b970      	cbnz	r0, 8007f04 <ai_platform_network_init+0x19c>
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4606      	mov	r6, r0
 8007eea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007eec:	2200      	movs	r2, #0
 8007eee:	42b3      	cmp	r3, r6
 8007ef0:	61e2      	str	r2, [r4, #28]
 8007ef2:	d21e      	bcs.n	8007f32 <ai_platform_network_init+0x1ca>
 8007ef4:	f104 0010 	add.w	r0, r4, #16
 8007ef8:	2213      	movs	r2, #19
 8007efa:	2116      	movs	r1, #22
 8007efc:	f000 fe1a 	bl	8008b34 <core_set_error>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e77f      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8007f04:	bb66      	cbnz	r6, 8007f60 <ai_platform_network_init+0x1f8>
 8007f06:	f104 0010 	add.w	r0, r4, #16
 8007f0a:	2213      	movs	r2, #19
 8007f0c:	2110      	movs	r1, #16
 8007f0e:	f000 fe11 	bl	8008b34 <core_set_error>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e776      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8007f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f18:	6a27      	ldr	r7, [r4, #32]
 8007f1a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8007f1e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f24:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8007f28:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007f2a:	f8c4 c01c 	str.w	ip, [r4, #28]
 8007f2e:	42b3      	cmp	r3, r6
 8007f30:	d3e0      	bcc.n	8007ef4 <ai_platform_network_init+0x18c>
 8007f32:	b1be      	cbz	r6, 8007f64 <ai_platform_network_init+0x1fc>
 8007f34:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8007f38:	f04f 0e00 	mov.w	lr, #0
 8007f3c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f40:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007f42:	eb08 070e 	add.w	r7, r8, lr
 8007f46:	4475      	add	r5, lr
 8007f48:	f10e 0e1c 	add.w	lr, lr, #28
 8007f4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007f4e:	45f4      	cmp	ip, lr
 8007f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f52:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007f56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007f5a:	d1f1      	bne.n	8007f40 <ai_platform_network_init+0x1d8>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e749      	b.n	8007df4 <ai_platform_network_init+0x8c>
 8007f60:	2601      	movs	r6, #1
 8007f62:	e7c2      	b.n	8007eea <ai_platform_network_init+0x182>
 8007f64:	4633      	mov	r3, r6
 8007f66:	e745      	b.n	8007df4 <ai_platform_network_init+0x8c>
 8007f68:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <ai_platform_network_init+0x2bc>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	680b      	ldr	r3, [r1, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1fc      	bne.n	8007f70 <ai_platform_network_init+0x208>
 8007f76:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <ai_platform_network_init+0x2c0>)
 8007f78:	492c      	ldr	r1, [pc, #176]	; (800802c <ai_platform_network_init+0x2c4>)
 8007f7a:	4a2d      	ldr	r2, [pc, #180]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007f7c:	6019      	str	r1, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	f43f af7a 	beq.w	8007e7a <ai_platform_network_init+0x112>
 8007f86:	e7fe      	b.n	8007f86 <ai_platform_network_init+0x21e>
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <ai_platform_network_init+0x2cc>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	680b      	ldr	r3, [r1, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1fc      	bne.n	8007f90 <ai_platform_network_init+0x228>
 8007f96:	4b28      	ldr	r3, [pc, #160]	; (8008038 <ai_platform_network_init+0x2d0>)
 8007f98:	4924      	ldr	r1, [pc, #144]	; (800802c <ai_platform_network_init+0x2c4>)
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007f9c:	6019      	str	r1, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	f43f af6a 	beq.w	8007e7a <ai_platform_network_init+0x112>
 8007fa6:	e7fe      	b.n	8007fa6 <ai_platform_network_init+0x23e>
 8007fa8:	4b22      	ldr	r3, [pc, #136]	; (8008034 <ai_platform_network_init+0x2cc>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	4619      	mov	r1, r3
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	680b      	ldr	r3, [r1, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1fc      	bne.n	8007fb0 <ai_platform_network_init+0x248>
 8007fb6:	4b20      	ldr	r3, [pc, #128]	; (8008038 <ai_platform_network_init+0x2d0>)
 8007fb8:	491c      	ldr	r1, [pc, #112]	; (800802c <ai_platform_network_init+0x2c4>)
 8007fba:	4a1d      	ldr	r2, [pc, #116]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007fbc:	6019      	str	r1, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	f43f af5a 	beq.w	8007e7a <ai_platform_network_init+0x112>
 8007fc6:	e7fe      	b.n	8007fc6 <ai_platform_network_init+0x25e>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	d09c      	beq.n	8007f06 <ai_platform_network_init+0x19e>
 8007fcc:	2601      	movs	r6, #1
 8007fce:	e76d      	b.n	8007eac <ai_platform_network_init+0x144>
 8007fd0:	f104 0010 	add.w	r0, r4, #16
 8007fd4:	2212      	movs	r2, #18
 8007fd6:	2110      	movs	r1, #16
 8007fd8:	f000 fdac 	bl	8008b34 <core_set_error>
 8007fdc:	4638      	mov	r0, r7
 8007fde:	e711      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <ai_platform_network_init+0x2bc>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	680b      	ldr	r3, [r1, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1fc      	bne.n	8007fe8 <ai_platform_network_init+0x280>
 8007fee:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <ai_platform_network_init+0x2c0>)
 8007ff0:	490e      	ldr	r1, [pc, #56]	; (800802c <ai_platform_network_init+0x2c4>)
 8007ff2:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <ai_platform_network_init+0x2c8>)
 8007ff4:	6019      	str	r1, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	f43f aeea 	beq.w	8007dd2 <ai_platform_network_init+0x6a>
 8007ffe:	e7fe      	b.n	8007ffe <ai_platform_network_init+0x296>
 8008000:	f104 0010 	add.w	r0, r4, #16
 8008004:	2211      	movs	r2, #17
 8008006:	2110      	movs	r1, #16
 8008008:	f000 fd94 	bl	8008b34 <core_set_error>
 800800c:	4628      	mov	r0, r5
 800800e:	e6f9      	b.n	8007e04 <ai_platform_network_init+0x9c>
 8008010:	a1c00100 	.word	0xa1c00100
 8008014:	e0002000 	.word	0xe0002000
 8008018:	e0042000 	.word	0xe0042000
 800801c:	5c001000 	.word	0x5c001000
 8008020:	a1facade 	.word	0xa1facade
 8008024:	40023008 	.word	0x40023008
 8008028:	40023000 	.word	0x40023000
 800802c:	f407a5c2 	.word	0xf407a5c2
 8008030:	b5e8b5cd 	.word	0xb5e8b5cd
 8008034:	58024c08 	.word	0x58024c08
 8008038:	58024c00 	.word	0x58024c00
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <ai_platform_network_init+0x314>)
 800803e:	2201      	movs	r2, #1
 8008040:	4619      	mov	r1, r3
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1fc      	bne.n	8008044 <ai_platform_network_init+0x2dc>
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <ai_platform_network_init+0x318>)
 800804c:	490d      	ldr	r1, [pc, #52]	; (8008084 <ai_platform_network_init+0x31c>)
 800804e:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <ai_platform_network_init+0x320>)
 8008050:	6019      	str	r1, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4293      	cmp	r3, r2
 8008056:	f43f aebc 	beq.w	8007dd2 <ai_platform_network_init+0x6a>
 800805a:	e7fe      	b.n	800805a <ai_platform_network_init+0x2f2>
 800805c:	4b07      	ldr	r3, [pc, #28]	; (800807c <ai_platform_network_init+0x314>)
 800805e:	2201      	movs	r2, #1
 8008060:	4619      	mov	r1, r3
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	680b      	ldr	r3, [r1, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1fc      	bne.n	8008064 <ai_platform_network_init+0x2fc>
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <ai_platform_network_init+0x318>)
 800806c:	4905      	ldr	r1, [pc, #20]	; (8008084 <ai_platform_network_init+0x31c>)
 800806e:	4a06      	ldr	r2, [pc, #24]	; (8008088 <ai_platform_network_init+0x320>)
 8008070:	6019      	str	r1, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4293      	cmp	r3, r2
 8008076:	f43f aeac 	beq.w	8007dd2 <ai_platform_network_init+0x6a>
 800807a:	e7fe      	b.n	800807a <ai_platform_network_init+0x312>
 800807c:	58024c08 	.word	0x58024c08
 8008080:	58024c00 	.word	0x58024c00
 8008084:	f407a5c2 	.word	0xf407a5c2
 8008088:	b5e8b5cd 	.word	0xb5e8b5cd

0800808c <ai_platform_network_post_init>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	b120      	cbz	r0, 800809a <ai_platform_network_post_init+0xe>
 8008090:	4b7f      	ldr	r3, [pc, #508]	; (8008290 <ai_platform_network_post_init+0x204>)
 8008092:	4604      	mov	r4, r0
 8008094:	6802      	ldr	r2, [r0, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d03c      	beq.n	8008114 <ai_platform_network_post_init+0x88>
 800809a:	4a7e      	ldr	r2, [pc, #504]	; (8008294 <ai_platform_network_post_init+0x208>)
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	f7fe fb24 	bl	80066f0 <_ai_platform_acquire_crc>
 80080a8:	4b7b      	ldr	r3, [pc, #492]	; (8008298 <ai_platform_network_post_init+0x20c>)
 80080aa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080b4:	185a      	adds	r2, r3, r1
 80080b6:	2a01      	cmp	r2, #1
 80080b8:	d91d      	bls.n	80080f6 <ai_platform_network_post_init+0x6a>
 80080ba:	f240 4249 	movw	r2, #1097	; 0x449
 80080be:	4293      	cmp	r3, r2
 80080c0:	d019      	beq.n	80080f6 <ai_platform_network_post_init+0x6a>
 80080c2:	4b76      	ldr	r3, [pc, #472]	; (800829c <ai_platform_network_post_init+0x210>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80080ca:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80080ce:	f000 80a7 	beq.w	8008220 <ai_platform_network_post_init+0x194>
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	f240 4183 	movw	r1, #1155	; 0x483
 80080d8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80080dc:	428a      	cmp	r2, r1
 80080de:	f000 808f 	beq.w	8008200 <ai_platform_network_post_init+0x174>
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80080ec:	d05b      	beq.n	80081a6 <ai_platform_network_post_init+0x11a>
 80080ee:	f7fe fb01 	bl	80066f4 <_ai_platform_release_crc>
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	4b6a      	ldr	r3, [pc, #424]	; (80082a0 <ai_platform_network_post_init+0x214>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	4619      	mov	r1, r3
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	680b      	ldr	r3, [r1, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1fc      	bne.n	80080fe <ai_platform_network_post_init+0x72>
 8008104:	4b67      	ldr	r3, [pc, #412]	; (80082a4 <ai_platform_network_post_init+0x218>)
 8008106:	4968      	ldr	r1, [pc, #416]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 8008108:	4a68      	ldr	r2, [pc, #416]	; (80082ac <ai_platform_network_post_init+0x220>)
 800810a:	6019      	str	r1, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4293      	cmp	r3, r2
 8008110:	d0ed      	beq.n	80080ee <ai_platform_network_post_init+0x62>
 8008112:	e7fe      	b.n	8008112 <ai_platform_network_post_init+0x86>
 8008114:	4a5f      	ldr	r2, [pc, #380]	; (8008294 <ai_platform_network_post_init+0x208>)
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	f7fe fae7 	bl	80066f0 <_ai_platform_acquire_crc>
 8008122:	4b5d      	ldr	r3, [pc, #372]	; (8008298 <ai_platform_network_post_init+0x20c>)
 8008124:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800812e:	189a      	adds	r2, r3, r2
 8008130:	2a01      	cmp	r2, #1
 8008132:	d956      	bls.n	80081e2 <ai_platform_network_post_init+0x156>
 8008134:	f240 4249 	movw	r2, #1097	; 0x449
 8008138:	4293      	cmp	r3, r2
 800813a:	d052      	beq.n	80081e2 <ai_platform_network_post_init+0x156>
 800813c:	4b57      	ldr	r3, [pc, #348]	; (800829c <ai_platform_network_post_init+0x210>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008144:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008148:	d03c      	beq.n	80081c4 <ai_platform_network_post_init+0x138>
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f240 4183 	movw	r1, #1155	; 0x483
 8008150:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008154:	428a      	cmp	r2, r1
 8008156:	f000 8082 	beq.w	800825e <ai_platform_network_post_init+0x1d2>
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008160:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008164:	d06c      	beq.n	8008240 <ai_platform_network_post_init+0x1b4>
 8008166:	f7fe fac5 	bl	80066f4 <_ai_platform_release_crc>
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	f013 0502 	ands.w	r5, r3, #2
 8008170:	f000 8085 	beq.w	800827e <ai_platform_network_post_init+0x1f2>
 8008174:	4620      	mov	r0, r4
 8008176:	f002 ff47 	bl	800b008 <ai_layers_post_init_all>
 800817a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800817c:	b18b      	cbz	r3, 80081a2 <ai_platform_network_post_init+0x116>
 800817e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008180:	b90d      	cbnz	r5, 8008186 <ai_platform_network_post_init+0xfa>
 8008182:	e00e      	b.n	80081a2 <ai_platform_network_post_init+0x116>
 8008184:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008186:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008188:	4629      	mov	r1, r5
 800818a:	2000      	movs	r0, #0
 800818c:	4798      	blx	r3
 800818e:	692a      	ldr	r2, [r5, #16]
 8008190:	1b53      	subs	r3, r2, r5
 8008192:	4615      	mov	r5, r2
 8008194:	bf18      	it	ne
 8008196:	2301      	movne	r3, #1
 8008198:	2a00      	cmp	r2, #0
 800819a:	bf08      	it	eq
 800819c:	2300      	moveq	r3, #0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f0      	bne.n	8008184 <ai_platform_network_post_init+0xf8>
 80081a2:	2001      	movs	r0, #1
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	4b3e      	ldr	r3, [pc, #248]	; (80082a0 <ai_platform_network_post_init+0x214>)
 80081a8:	2201      	movs	r2, #1
 80081aa:	4619      	mov	r1, r3
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	680b      	ldr	r3, [r1, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1fc      	bne.n	80081ae <ai_platform_network_post_init+0x122>
 80081b4:	4b3b      	ldr	r3, [pc, #236]	; (80082a4 <ai_platform_network_post_init+0x218>)
 80081b6:	493c      	ldr	r1, [pc, #240]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 80081b8:	4a3c      	ldr	r2, [pc, #240]	; (80082ac <ai_platform_network_post_init+0x220>)
 80081ba:	6019      	str	r1, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4293      	cmp	r3, r2
 80081c0:	d095      	beq.n	80080ee <ai_platform_network_post_init+0x62>
 80081c2:	e7fe      	b.n	80081c2 <ai_platform_network_post_init+0x136>
 80081c4:	4b3a      	ldr	r3, [pc, #232]	; (80082b0 <ai_platform_network_post_init+0x224>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	4619      	mov	r1, r3
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	680b      	ldr	r3, [r1, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1fc      	bne.n	80081cc <ai_platform_network_post_init+0x140>
 80081d2:	4b38      	ldr	r3, [pc, #224]	; (80082b4 <ai_platform_network_post_init+0x228>)
 80081d4:	4934      	ldr	r1, [pc, #208]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 80081d6:	4a35      	ldr	r2, [pc, #212]	; (80082ac <ai_platform_network_post_init+0x220>)
 80081d8:	6019      	str	r1, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4293      	cmp	r3, r2
 80081de:	d0c2      	beq.n	8008166 <ai_platform_network_post_init+0xda>
 80081e0:	e7fe      	b.n	80081e0 <ai_platform_network_post_init+0x154>
 80081e2:	4b2f      	ldr	r3, [pc, #188]	; (80082a0 <ai_platform_network_post_init+0x214>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	4619      	mov	r1, r3
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	680b      	ldr	r3, [r1, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1fc      	bne.n	80081ea <ai_platform_network_post_init+0x15e>
 80081f0:	4b2c      	ldr	r3, [pc, #176]	; (80082a4 <ai_platform_network_post_init+0x218>)
 80081f2:	492d      	ldr	r1, [pc, #180]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 80081f4:	4a2d      	ldr	r2, [pc, #180]	; (80082ac <ai_platform_network_post_init+0x220>)
 80081f6:	6019      	str	r1, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d0b3      	beq.n	8008166 <ai_platform_network_post_init+0xda>
 80081fe:	e7fe      	b.n	80081fe <ai_platform_network_post_init+0x172>
 8008200:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <ai_platform_network_post_init+0x224>)
 8008202:	2201      	movs	r2, #1
 8008204:	4619      	mov	r1, r3
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	680b      	ldr	r3, [r1, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1fc      	bne.n	8008208 <ai_platform_network_post_init+0x17c>
 800820e:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <ai_platform_network_post_init+0x228>)
 8008210:	4925      	ldr	r1, [pc, #148]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 8008212:	4a26      	ldr	r2, [pc, #152]	; (80082ac <ai_platform_network_post_init+0x220>)
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4293      	cmp	r3, r2
 800821a:	f43f af68 	beq.w	80080ee <ai_platform_network_post_init+0x62>
 800821e:	e7fe      	b.n	800821e <ai_platform_network_post_init+0x192>
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <ai_platform_network_post_init+0x224>)
 8008222:	2201      	movs	r2, #1
 8008224:	4619      	mov	r1, r3
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	680b      	ldr	r3, [r1, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1fc      	bne.n	8008228 <ai_platform_network_post_init+0x19c>
 800822e:	4b21      	ldr	r3, [pc, #132]	; (80082b4 <ai_platform_network_post_init+0x228>)
 8008230:	491d      	ldr	r1, [pc, #116]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 8008232:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <ai_platform_network_post_init+0x220>)
 8008234:	6019      	str	r1, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4293      	cmp	r3, r2
 800823a:	f43f af58 	beq.w	80080ee <ai_platform_network_post_init+0x62>
 800823e:	e7fe      	b.n	800823e <ai_platform_network_post_init+0x1b2>
 8008240:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <ai_platform_network_post_init+0x214>)
 8008242:	2201      	movs	r2, #1
 8008244:	4619      	mov	r1, r3
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	680b      	ldr	r3, [r1, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1fc      	bne.n	8008248 <ai_platform_network_post_init+0x1bc>
 800824e:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <ai_platform_network_post_init+0x218>)
 8008250:	4915      	ldr	r1, [pc, #84]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 8008252:	4a16      	ldr	r2, [pc, #88]	; (80082ac <ai_platform_network_post_init+0x220>)
 8008254:	6019      	str	r1, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4293      	cmp	r3, r2
 800825a:	d084      	beq.n	8008166 <ai_platform_network_post_init+0xda>
 800825c:	e7fe      	b.n	800825c <ai_platform_network_post_init+0x1d0>
 800825e:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <ai_platform_network_post_init+0x224>)
 8008260:	2201      	movs	r2, #1
 8008262:	4619      	mov	r1, r3
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	680b      	ldr	r3, [r1, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1fc      	bne.n	8008266 <ai_platform_network_post_init+0x1da>
 800826c:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <ai_platform_network_post_init+0x228>)
 800826e:	490e      	ldr	r1, [pc, #56]	; (80082a8 <ai_platform_network_post_init+0x21c>)
 8008270:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <ai_platform_network_post_init+0x220>)
 8008272:	6019      	str	r1, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4293      	cmp	r3, r2
 8008278:	f43f af75 	beq.w	8008166 <ai_platform_network_post_init+0xda>
 800827c:	e7fe      	b.n	800827c <ai_platform_network_post_init+0x1f0>
 800827e:	f104 0010 	add.w	r0, r4, #16
 8008282:	2210      	movs	r2, #16
 8008284:	2111      	movs	r1, #17
 8008286:	f000 fc55 	bl	8008b34 <core_set_error>
 800828a:	4628      	mov	r0, r5
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	a1c00100 	.word	0xa1c00100
 8008294:	e0002000 	.word	0xe0002000
 8008298:	e0042000 	.word	0xe0042000
 800829c:	5c001000 	.word	0x5c001000
 80082a0:	40023008 	.word	0x40023008
 80082a4:	40023000 	.word	0x40023000
 80082a8:	f407a5c2 	.word	0xf407a5c2
 80082ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80082b0:	58024c08 	.word	0x58024c08
 80082b4:	58024c00 	.word	0x58024c00

080082b8 <ai_platform_network_process>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460f      	mov	r7, r1
 80082be:	b083      	sub	sp, #12
 80082c0:	4615      	mov	r5, r2
 80082c2:	4604      	mov	r4, r0
 80082c4:	b120      	cbz	r0, 80082d0 <ai_platform_network_process+0x18>
 80082c6:	4ba8      	ldr	r3, [pc, #672]	; (8008568 <ai_platform_network_process+0x2b0>)
 80082c8:	6802      	ldr	r2, [r0, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	bf18      	it	ne
 80082ce:	2400      	movne	r4, #0
 80082d0:	4aa6      	ldr	r2, [pc, #664]	; (800856c <ai_platform_network_process+0x2b4>)
 80082d2:	6813      	ldr	r3, [r2, #0]
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	f7fe fa09 	bl	80066f0 <_ai_platform_acquire_crc>
 80082de:	4ba4      	ldr	r3, [pc, #656]	; (8008570 <ai_platform_network_process+0x2b8>)
 80082e0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082ea:	185a      	adds	r2, r3, r1
 80082ec:	2a01      	cmp	r2, #1
 80082ee:	f240 80d3 	bls.w	8008498 <ai_platform_network_process+0x1e0>
 80082f2:	f240 4249 	movw	r2, #1097	; 0x449
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f000 80ce 	beq.w	8008498 <ai_platform_network_process+0x1e0>
 80082fc:	4b9d      	ldr	r3, [pc, #628]	; (8008574 <ai_platform_network_process+0x2bc>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008304:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008308:	f000 80e4 	beq.w	80084d4 <ai_platform_network_process+0x21c>
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	f240 4183 	movw	r1, #1155	; 0x483
 8008312:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008316:	428a      	cmp	r2, r1
 8008318:	f000 8104 	beq.w	8008524 <ai_platform_network_process+0x26c>
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008322:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008326:	f000 80ed 	beq.w	8008504 <ai_platform_network_process+0x24c>
 800832a:	f7fe f9e3 	bl	80066f4 <_ai_platform_release_crc>
 800832e:	2c00      	cmp	r4, #0
 8008330:	f000 80cb 	beq.w	80084ca <ai_platform_network_process+0x212>
 8008334:	68e2      	ldr	r2, [r4, #12]
 8008336:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008338:	f002 0203 	and.w	r2, r2, #3
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80bb 	beq.w	80084b8 <ai_platform_network_process+0x200>
 8008342:	2100      	movs	r1, #0
 8008344:	2a03      	cmp	r2, #3
 8008346:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800834a:	6161      	str	r1, [r4, #20]
 800834c:	f040 80b7 	bne.w	80084be <ai_platform_network_process+0x206>
 8008350:	2f00      	cmp	r7, #0
 8008352:	f000 80cf 	beq.w	80084f4 <ai_platform_network_process+0x23c>
 8008356:	faba f28a 	clz	r2, sl
 800835a:	0952      	lsrs	r2, r2, #5
 800835c:	2a00      	cmp	r2, #0
 800835e:	f040 80c9 	bne.w	80084f4 <ai_platform_network_process+0x23c>
 8008362:	f8ba 1000 	ldrh.w	r1, [sl]
 8008366:	2900      	cmp	r1, #0
 8008368:	f000 80c4 	beq.w	80084f4 <ai_platform_network_process+0x23c>
 800836c:	69b8      	ldr	r0, [r7, #24]
 800836e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008372:	6806      	ldr	r6, [r0, #0]
 8008374:	2900      	cmp	r1, #0
 8008376:	f000 810c 	beq.w	8008592 <ai_platform_network_process+0x2da>
 800837a:	f8d1 9000 	ldr.w	r9, [r1]
 800837e:	f1b9 0f00 	cmp.w	r9, #0
 8008382:	f000 8106 	beq.w	8008592 <ai_platform_network_process+0x2da>
 8008386:	f8da 3008 	ldr.w	r3, [sl, #8]
 800838a:	4690      	mov	r8, r2
 800838c:	f8d3 b000 	ldr.w	fp, [r3]
 8008390:	f1bb 0f00 	cmp.w	fp, #0
 8008394:	d16d      	bne.n	8008472 <ai_platform_network_process+0x1ba>
 8008396:	e0ad      	b.n	80084f4 <ai_platform_network_process+0x23c>
 8008398:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800839c:	69b9      	ldr	r1, [r7, #24]
 800839e:	68c2      	ldr	r2, [r0, #12]
 80083a0:	68cb      	ldr	r3, [r1, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d170      	bne.n	8008488 <ai_platform_network_process+0x1d0>
 80083a6:	6882      	ldr	r2, [r0, #8]
 80083a8:	688b      	ldr	r3, [r1, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d16c      	bne.n	8008488 <ai_platform_network_process+0x1d0>
 80083ae:	6842      	ldr	r2, [r0, #4]
 80083b0:	684b      	ldr	r3, [r1, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d168      	bne.n	8008488 <ai_platform_network_process+0x1d0>
 80083b6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80083ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083be:	f002 ff4b 	bl	800b258 <ai_array_get_data_byte_size>
 80083c2:	9000      	str	r0, [sp, #0]
 80083c4:	4648      	mov	r0, r9
 80083c6:	f002 feaf 	bl	800b128 <get_tensor_byte_size>
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	4283      	cmp	r3, r0
 80083ce:	d35b      	bcc.n	8008488 <ai_platform_network_process+0x1d0>
 80083d0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f002 febf 	bl	800b158 <ai_array_to_buffer_fmt>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	4043      	eors	r3, r0
 80083de:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80083e2:	f040 823c 	bne.w	800885e <ai_platform_network_process+0x5a6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80b4 	beq.w	8008556 <ai_platform_network_process+0x29e>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 80a6 	beq.w	8008544 <ai_platform_network_process+0x28c>
 80083f8:	429e      	cmp	r6, r3
 80083fa:	4648      	mov	r0, r9
 80083fc:	bf38      	it	cc
 80083fe:	461e      	movcc	r6, r3
 8008400:	f002 fe92 	bl	800b128 <get_tensor_byte_size>
 8008404:	f8cb 0008 	str.w	r0, [fp, #8]
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	fb02 f200 	mul.w	r2, r2, r0
 8008410:	f8cb 200c 	str.w	r2, [fp, #12]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f8cb 0004 	str.w	r0, [fp, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	f8cb 3000 	str.w	r3, [fp]
 8008422:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8008426:	680b      	ldr	r3, [r1, #0]
 8008428:	009a      	lsls	r2, r3, #2
 800842a:	d409      	bmi.n	8008440 <ai_platform_network_process+0x188>
 800842c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	4418      	add	r0, r3
 8008434:	6088      	str	r0, [r1, #8]
 8008436:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800843a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	f108 0801 	add.w	r8, r8, #1
 8008444:	f8ba 3000 	ldrh.w	r3, [sl]
 8008448:	4598      	cmp	r8, r3
 800844a:	f080 80a1 	bcs.w	8008590 <ai_platform_network_process+0x2d8>
 800844e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 809c 	beq.w	8008590 <ai_platform_network_process+0x2d8>
 8008458:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 800845c:	f1b9 0f00 	cmp.w	r9, #0
 8008460:	f000 8096 	beq.w	8008590 <ai_platform_network_process+0x2d8>
 8008464:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008468:	371c      	adds	r7, #28
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 8008470:	d040      	beq.n	80084f4 <ai_platform_network_process+0x23c>
 8008472:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008476:	2101      	movs	r1, #1
 8008478:	4638      	mov	r0, r7
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	f7fe f859 	bl	8006534 <ai_buffer_get_size>
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	4283      	cmp	r3, r0
 8008486:	d287      	bcs.n	8008398 <ai_platform_network_process+0xe0>
 8008488:	f104 0010 	add.w	r0, r4, #16
 800848c:	2218      	movs	r2, #24
 800848e:	2112      	movs	r1, #18
 8008490:	f000 fb50 	bl	8008b34 <core_set_error>
 8008494:	2300      	movs	r3, #0
 8008496:	e019      	b.n	80084cc <ai_platform_network_process+0x214>
 8008498:	4b37      	ldr	r3, [pc, #220]	; (8008578 <ai_platform_network_process+0x2c0>)
 800849a:	2201      	movs	r2, #1
 800849c:	4619      	mov	r1, r3
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	680b      	ldr	r3, [r1, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1fc      	bne.n	80084a0 <ai_platform_network_process+0x1e8>
 80084a6:	4b35      	ldr	r3, [pc, #212]	; (800857c <ai_platform_network_process+0x2c4>)
 80084a8:	4935      	ldr	r1, [pc, #212]	; (8008580 <ai_platform_network_process+0x2c8>)
 80084aa:	4a36      	ldr	r2, [pc, #216]	; (8008584 <ai_platform_network_process+0x2cc>)
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	f43f af3a 	beq.w	800832a <ai_platform_network_process+0x72>
 80084b6:	e7fe      	b.n	80084b6 <ai_platform_network_process+0x1fe>
 80084b8:	2a03      	cmp	r2, #3
 80084ba:	6163      	str	r3, [r4, #20]
 80084bc:	d01a      	beq.n	80084f4 <ai_platform_network_process+0x23c>
 80084be:	f104 0010 	add.w	r0, r4, #16
 80084c2:	2230      	movs	r2, #48	; 0x30
 80084c4:	2111      	movs	r1, #17
 80084c6:	f000 fb35 	bl	8008b34 <core_set_error>
 80084ca:	2300      	movs	r3, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	b003      	add	sp, #12
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <ai_platform_network_process+0x2d0>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	4619      	mov	r1, r3
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	680b      	ldr	r3, [r1, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1fc      	bne.n	80084dc <ai_platform_network_process+0x224>
 80084e2:	4b2a      	ldr	r3, [pc, #168]	; (800858c <ai_platform_network_process+0x2d4>)
 80084e4:	4926      	ldr	r1, [pc, #152]	; (8008580 <ai_platform_network_process+0x2c8>)
 80084e6:	4a27      	ldr	r2, [pc, #156]	; (8008584 <ai_platform_network_process+0x2cc>)
 80084e8:	6019      	str	r1, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	f43f af1c 	beq.w	800832a <ai_platform_network_process+0x72>
 80084f2:	e7fe      	b.n	80084f2 <ai_platform_network_process+0x23a>
 80084f4:	f104 0010 	add.w	r0, r4, #16
 80084f8:	2217      	movs	r2, #23
 80084fa:	2112      	movs	r1, #18
 80084fc:	f000 fb1a 	bl	8008b34 <core_set_error>
 8008500:	2300      	movs	r3, #0
 8008502:	e7e3      	b.n	80084cc <ai_platform_network_process+0x214>
 8008504:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <ai_platform_network_process+0x2c0>)
 8008506:	2201      	movs	r2, #1
 8008508:	4619      	mov	r1, r3
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	680b      	ldr	r3, [r1, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1fc      	bne.n	800850c <ai_platform_network_process+0x254>
 8008512:	4b1a      	ldr	r3, [pc, #104]	; (800857c <ai_platform_network_process+0x2c4>)
 8008514:	491a      	ldr	r1, [pc, #104]	; (8008580 <ai_platform_network_process+0x2c8>)
 8008516:	4a1b      	ldr	r2, [pc, #108]	; (8008584 <ai_platform_network_process+0x2cc>)
 8008518:	6019      	str	r1, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4293      	cmp	r3, r2
 800851e:	f43f af04 	beq.w	800832a <ai_platform_network_process+0x72>
 8008522:	e7fe      	b.n	8008522 <ai_platform_network_process+0x26a>
 8008524:	4b18      	ldr	r3, [pc, #96]	; (8008588 <ai_platform_network_process+0x2d0>)
 8008526:	2201      	movs	r2, #1
 8008528:	4619      	mov	r1, r3
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	680b      	ldr	r3, [r1, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1fc      	bne.n	800852c <ai_platform_network_process+0x274>
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <ai_platform_network_process+0x2d4>)
 8008534:	4912      	ldr	r1, [pc, #72]	; (8008580 <ai_platform_network_process+0x2c8>)
 8008536:	4a13      	ldr	r2, [pc, #76]	; (8008584 <ai_platform_network_process+0x2cc>)
 8008538:	6019      	str	r1, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4293      	cmp	r3, r2
 800853e:	f43f aef4 	beq.w	800832a <ai_platform_network_process+0x72>
 8008542:	e7fe      	b.n	8008542 <ai_platform_network_process+0x28a>
 8008544:	f104 0010 	add.w	r0, r4, #16
 8008548:	2221      	movs	r2, #33	; 0x21
 800854a:	2112      	movs	r1, #18
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	f000 faf1 	bl	8008b34 <core_set_error>
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	e7ba      	b.n	80084cc <ai_platform_network_process+0x214>
 8008556:	f104 0010 	add.w	r0, r4, #16
 800855a:	2217      	movs	r2, #23
 800855c:	2112      	movs	r1, #18
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	f000 fae8 	bl	8008b34 <core_set_error>
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	e7b1      	b.n	80084cc <ai_platform_network_process+0x214>
 8008568:	a1c00100 	.word	0xa1c00100
 800856c:	e0002000 	.word	0xe0002000
 8008570:	e0042000 	.word	0xe0042000
 8008574:	5c001000 	.word	0x5c001000
 8008578:	40023008 	.word	0x40023008
 800857c:	40023000 	.word	0x40023000
 8008580:	f407a5c2 	.word	0xf407a5c2
 8008584:	b5e8b5cd 	.word	0xb5e8b5cd
 8008588:	58024c08 	.word	0x58024c08
 800858c:	58024c00 	.word	0x58024c00
 8008590:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008592:	2d00      	cmp	r5, #0
 8008594:	f000 80ad 	beq.w	80086f2 <ai_platform_network_process+0x43a>
 8008598:	2b01      	cmp	r3, #1
 800859a:	f240 8158 	bls.w	800884e <ai_platform_network_process+0x596>
 800859e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 80085a2:	f119 0f0c 	cmn.w	r9, #12
 80085a6:	f000 8152 	beq.w	800884e <ai_platform_network_process+0x596>
 80085aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 814d 	beq.w	800884e <ai_platform_network_process+0x596>
 80085b4:	f04f 0800 	mov.w	r8, #0
 80085b8:	4598      	cmp	r8, r3
 80085ba:	f080 8099 	bcs.w	80086f0 <ai_platform_network_process+0x438>
 80085be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8094 	beq.w	80086f0 <ai_platform_network_process+0x438>
 80085c8:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 80085cc:	f1bb 0f00 	cmp.w	fp, #0
 80085d0:	f000 808e 	beq.w	80086f0 <ai_platform_network_process+0x438>
 80085d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80085d8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	eb13 070a 	adds.w	r7, r3, sl
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	d07c      	beq.n	80086e0 <ai_platform_network_process+0x428>
 80085e6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80085ea:	2101      	movs	r1, #1
 80085ec:	4628      	mov	r0, r5
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	f7fd ff9f 	bl	8006534 <ai_buffer_get_size>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	4283      	cmp	r3, r0
 80085fa:	f0c0 8128 	bcc.w	800884e <ai_platform_network_process+0x596>
 80085fe:	f8db 000c 	ldr.w	r0, [fp, #12]
 8008602:	69a9      	ldr	r1, [r5, #24]
 8008604:	68c2      	ldr	r2, [r0, #12]
 8008606:	68cb      	ldr	r3, [r1, #12]
 8008608:	429a      	cmp	r2, r3
 800860a:	f040 8120 	bne.w	800884e <ai_platform_network_process+0x596>
 800860e:	6882      	ldr	r2, [r0, #8]
 8008610:	688b      	ldr	r3, [r1, #8]
 8008612:	429a      	cmp	r2, r3
 8008614:	f040 811b 	bne.w	800884e <ai_platform_network_process+0x596>
 8008618:	6842      	ldr	r2, [r0, #4]
 800861a:	684b      	ldr	r3, [r1, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	f040 8116 	bne.w	800884e <ai_platform_network_process+0x596>
 8008622:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800862a:	f002 fe15 	bl	800b258 <ai_array_get_data_byte_size>
 800862e:	9001      	str	r0, [sp, #4]
 8008630:	4658      	mov	r0, fp
 8008632:	f002 fd79 	bl	800b128 <get_tensor_byte_size>
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	4283      	cmp	r3, r0
 800863a:	f0c0 8108 	bcc.w	800884e <ai_platform_network_process+0x596>
 800863e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f002 fd88 	bl	800b158 <ai_array_to_buffer_fmt>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	4043      	eors	r3, r0
 800864c:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008650:	d13e      	bne.n	80086d0 <ai_platform_network_process+0x418>
 8008652:	686b      	ldr	r3, [r5, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d032      	beq.n	80086be <ai_platform_network_process+0x406>
 8008658:	69ab      	ldr	r3, [r5, #24]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	b333      	cbz	r3, 80086ac <ai_platform_network_process+0x3f4>
 800865e:	429e      	cmp	r6, r3
 8008660:	4658      	mov	r0, fp
 8008662:	bf38      	it	cc
 8008664:	461e      	movcc	r6, r3
 8008666:	f002 fd5f 	bl	800b128 <get_tensor_byte_size>
 800866a:	60b8      	str	r0, [r7, #8]
 800866c:	69ab      	ldr	r3, [r5, #24]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	fb02 f200 	mul.w	r2, r2, r0
 8008674:	60fa      	str	r2, [r7, #12]
 8008676:	6868      	ldr	r0, [r5, #4]
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	686b      	ldr	r3, [r5, #4]
 800867c:	4413      	add	r3, r2
 800867e:	9a00      	ldr	r2, [sp, #0]
 8008680:	f842 300a 	str.w	r3, [r2, sl]
 8008684:	f8db 1018 	ldr.w	r1, [fp, #24]
 8008688:	680b      	ldr	r3, [r1, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	d408      	bmi.n	80086a0 <ai_platform_network_process+0x3e8>
 800868e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	4418      	add	r0, r3
 8008696:	6088      	str	r0, [r1, #8]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	f108 0801 	add.w	r8, r8, #1
 80086a4:	351c      	adds	r5, #28
 80086a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80086aa:	e785      	b.n	80085b8 <ai_platform_network_process+0x300>
 80086ac:	f104 0010 	add.w	r0, r4, #16
 80086b0:	2221      	movs	r2, #33	; 0x21
 80086b2:	2113      	movs	r1, #19
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	f000 fa3d 	bl	8008b34 <core_set_error>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	e706      	b.n	80084cc <ai_platform_network_process+0x214>
 80086be:	f104 0010 	add.w	r0, r4, #16
 80086c2:	2217      	movs	r2, #23
 80086c4:	2113      	movs	r1, #19
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	f000 fa34 	bl	8008b34 <core_set_error>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	e6fd      	b.n	80084cc <ai_platform_network_process+0x214>
 80086d0:	f104 0010 	add.w	r0, r4, #16
 80086d4:	2219      	movs	r2, #25
 80086d6:	2113      	movs	r1, #19
 80086d8:	f000 fa2c 	bl	8008b34 <core_set_error>
 80086dc:	2300      	movs	r3, #0
 80086de:	e6f5      	b.n	80084cc <ai_platform_network_process+0x214>
 80086e0:	f104 0010 	add.w	r0, r4, #16
 80086e4:	2217      	movs	r2, #23
 80086e6:	2113      	movs	r1, #19
 80086e8:	f000 fa24 	bl	8008b34 <core_set_error>
 80086ec:	463b      	mov	r3, r7
 80086ee:	e6ed      	b.n	80084cc <ai_platform_network_process+0x214>
 80086f0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80086f2:	82a6      	strh	r6, [r4, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a5 	beq.w	8008844 <ai_platform_network_process+0x58c>
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80086fe:	f240 80a4 	bls.w	800884a <ai_platform_network_process+0x592>
 8008702:	f105 070c 	add.w	r7, r5, #12
 8008706:	8ae3      	ldrh	r3, [r4, #22]
 8008708:	8aa2      	ldrh	r2, [r4, #20]
 800870a:	429a      	cmp	r2, r3
 800870c:	f67f aede 	bls.w	80084cc <ai_platform_network_process+0x214>
 8008710:	2d00      	cmp	r5, #0
 8008712:	d03a      	beq.n	800878a <ai_platform_network_process+0x4d2>
 8008714:	882b      	ldrh	r3, [r5, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d037      	beq.n	800878a <ai_platform_network_process+0x4d2>
 800871a:	686b      	ldr	r3, [r5, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d034      	beq.n	800878a <ai_platform_network_process+0x4d2>
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	2a00      	cmp	r2, #0
 8008724:	d031      	beq.n	800878a <ai_platform_network_process+0x4d2>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	e01b      	b.n	8008764 <ai_platform_network_process+0x4ac>
 800872c:	68d9      	ldr	r1, [r3, #12]
 800872e:	1a40      	subs	r0, r0, r1
 8008730:	eb0c 0100 	add.w	r1, ip, r0
 8008734:	6099      	str	r1, [r3, #8]
 8008736:	6993      	ldr	r3, [r2, #24]
 8008738:	6872      	ldr	r2, [r6, #4]
 800873a:	60da      	str	r2, [r3, #12]
 800873c:	6873      	ldr	r3, [r6, #4]
 800873e:	f108 0801 	add.w	r8, r8, #1
 8008742:	68b1      	ldr	r1, [r6, #8]
 8008744:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008748:	440b      	add	r3, r1
 800874a:	4293      	cmp	r3, r2
 800874c:	d301      	bcc.n	8008752 <ai_platform_network_process+0x49a>
 800874e:	68f3      	ldr	r3, [r6, #12]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	6073      	str	r3, [r6, #4]
 8008754:	882b      	ldrh	r3, [r5, #0]
 8008756:	4598      	cmp	r8, r3
 8008758:	d217      	bcs.n	800878a <ai_platform_network_process+0x4d2>
 800875a:	686b      	ldr	r3, [r5, #4]
 800875c:	b1ab      	cbz	r3, 800878a <ai_platform_network_process+0x4d2>
 800875e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8008762:	b192      	cbz	r2, 800878a <ai_platform_network_process+0x4d2>
 8008764:	68a9      	ldr	r1, [r5, #8]
 8008766:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800876a:	6993      	ldr	r3, [r2, #24]
 800876c:	f8d1 a000 	ldr.w	sl, [r1]
 8008770:	6819      	ldr	r1, [r3, #0]
 8008772:	eb0a 0609 	add.w	r6, sl, r9
 8008776:	6898      	ldr	r0, [r3, #8]
 8008778:	0089      	lsls	r1, r1, #2
 800877a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800877e:	d5d5      	bpl.n	800872c <ai_platform_network_process+0x474>
 8008780:	4661      	mov	r1, ip
 8008782:	68b2      	ldr	r2, [r6, #8]
 8008784:	f002 fdaa 	bl	800b2dc <memcpy>
 8008788:	e7d8      	b.n	800873c <ai_platform_network_process+0x484>
 800878a:	4620      	mov	r0, r4
 800878c:	f002 fc52 	bl	800b034 <ai_layers_forward_all>
 8008790:	2f00      	cmp	r7, #0
 8008792:	d04b      	beq.n	800882c <ai_platform_network_process+0x574>
 8008794:	883b      	ldrh	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d048      	beq.n	800882c <ai_platform_network_process+0x574>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d045      	beq.n	800882c <ai_platform_network_process+0x574>
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d042      	beq.n	800882c <ai_platform_network_process+0x574>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	e01c      	b.n	80087e6 <ai_platform_network_process+0x52e>
 80087ac:	f85a 2009 	ldr.w	r2, [sl, r9]
 80087b0:	4596      	cmp	lr, r2
 80087b2:	d302      	bcc.n	80087ba <ai_platform_network_process+0x502>
 80087b4:	68f3      	ldr	r3, [r6, #12]
 80087b6:	eba2 0e03 	sub.w	lr, r2, r3
 80087ba:	f8c6 e004 	str.w	lr, [r6, #4]
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	6981      	ldr	r1, [r0, #24]
 80087c4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	eb0e 0302 	add.w	r3, lr, r2
 80087ce:	608b      	str	r3, [r1, #8]
 80087d0:	6983      	ldr	r3, [r0, #24]
 80087d2:	6872      	ldr	r2, [r6, #4]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	883b      	ldrh	r3, [r7, #0]
 80087d8:	4598      	cmp	r8, r3
 80087da:	d227      	bcs.n	800882c <ai_platform_network_process+0x574>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	b32b      	cbz	r3, 800882c <ai_platform_network_process+0x574>
 80087e0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80087e4:	b310      	cbz	r0, 800882c <ai_platform_network_process+0x574>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80087ec:	6981      	ldr	r1, [r0, #24]
 80087ee:	f8d3 a000 	ldr.w	sl, [r3]
 80087f2:	680b      	ldr	r3, [r1, #0]
 80087f4:	eb0a 0609 	add.w	r6, sl, r9
 80087f8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80087fc:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8008800:	eb0c 0e02 	add.w	lr, ip, r2
 8008804:	d0d2      	beq.n	80087ac <ai_platform_network_process+0x4f4>
 8008806:	6889      	ldr	r1, [r1, #8]
 8008808:	4660      	mov	r0, ip
 800880a:	f002 fd67 	bl	800b2dc <memcpy>
 800880e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008812:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8008816:	440b      	add	r3, r1
 8008818:	4293      	cmp	r3, r2
 800881a:	d301      	bcc.n	8008820 <ai_platform_network_process+0x568>
 800881c:	68f3      	ldr	r3, [r6, #12]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	6073      	str	r3, [r6, #4]
 8008822:	f108 0801 	add.w	r8, r8, #1
 8008826:	883b      	ldrh	r3, [r7, #0]
 8008828:	4598      	cmp	r8, r3
 800882a:	d3d7      	bcc.n	80087dc <ai_platform_network_process+0x524>
 800882c:	8ae3      	ldrh	r3, [r4, #22]
 800882e:	8aa2      	ldrh	r2, [r4, #20]
 8008830:	3301      	adds	r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	429a      	cmp	r2, r3
 8008836:	82e3      	strh	r3, [r4, #22]
 8008838:	f63f af6a 	bhi.w	8008710 <ai_platform_network_process+0x458>
 800883c:	4618      	mov	r0, r3
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	461d      	mov	r5, r3
 8008846:	461f      	mov	r7, r3
 8008848:	e75d      	b.n	8008706 <ai_platform_network_process+0x44e>
 800884a:	2700      	movs	r7, #0
 800884c:	e75b      	b.n	8008706 <ai_platform_network_process+0x44e>
 800884e:	f104 0010 	add.w	r0, r4, #16
 8008852:	2218      	movs	r2, #24
 8008854:	2113      	movs	r1, #19
 8008856:	f000 f96d 	bl	8008b34 <core_set_error>
 800885a:	2300      	movs	r3, #0
 800885c:	e636      	b.n	80084cc <ai_platform_network_process+0x214>
 800885e:	f104 0010 	add.w	r0, r4, #16
 8008862:	2219      	movs	r2, #25
 8008864:	2112      	movs	r1, #18
 8008866:	f000 f965 	bl	8008b34 <core_set_error>
 800886a:	2300      	movs	r3, #0
 800886c:	e62e      	b.n	80084cc <ai_platform_network_process+0x214>
 800886e:	bf00      	nop

08008870 <ai_platform_observer_register_s>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	460e      	mov	r6, r1
 8008874:	4604      	mov	r4, r0
 8008876:	b120      	cbz	r0, 8008882 <ai_platform_observer_register_s+0x12>
 8008878:	4b53      	ldr	r3, [pc, #332]	; (80089c8 <ai_platform_observer_register_s+0x158>)
 800887a:	6802      	ldr	r2, [r0, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	bf18      	it	ne
 8008880:	2400      	movne	r4, #0
 8008882:	4a52      	ldr	r2, [pc, #328]	; (80089cc <ai_platform_observer_register_s+0x15c>)
 8008884:	6813      	ldr	r3, [r2, #0]
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	f7fd ff30 	bl	80066f0 <_ai_platform_acquire_crc>
 8008890:	4b4f      	ldr	r3, [pc, #316]	; (80089d0 <ai_platform_observer_register_s+0x160>)
 8008892:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800889c:	189a      	adds	r2, r3, r2
 800889e:	2a01      	cmp	r2, #1
 80088a0:	d942      	bls.n	8008928 <ai_platform_observer_register_s+0xb8>
 80088a2:	f240 4249 	movw	r2, #1097	; 0x449
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d03e      	beq.n	8008928 <ai_platform_observer_register_s+0xb8>
 80088aa:	4b4a      	ldr	r3, [pc, #296]	; (80089d4 <ai_platform_observer_register_s+0x164>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80088b2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80088b6:	d04f      	beq.n	8008958 <ai_platform_observer_register_s+0xe8>
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	f240 4183 	movw	r1, #1155	; 0x483
 80088be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80088c2:	428a      	cmp	r2, r1
 80088c4:	d070      	beq.n	80089a8 <ai_platform_observer_register_s+0x138>
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088cc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80088d0:	d05b      	beq.n	800898a <ai_platform_observer_register_s+0x11a>
 80088d2:	f7fd ff0f 	bl	80066f4 <_ai_platform_release_crc>
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d035      	beq.n	8008946 <ai_platform_observer_register_s+0xd6>
 80088da:	fab6 f586 	clz	r5, r6
 80088de:	096d      	lsrs	r5, r5, #5
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d130      	bne.n	8008946 <ai_platform_observer_register_s+0xd6>
 80088e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d147      	bne.n	800897a <ai_platform_observer_register_s+0x10a>
 80088ea:	81f3      	strh	r3, [r6, #14]
 80088ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ee:	b183      	cbz	r3, 8008912 <ai_platform_observer_register_s+0xa2>
 80088f0:	2201      	movs	r2, #1
 80088f2:	81f2      	strh	r2, [r6, #14]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	b162      	cbz	r2, 8008912 <ai_platform_observer_register_s+0xa2>
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00a      	beq.n	8008912 <ai_platform_observer_register_s+0xa2>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e001      	b.n	8008904 <ai_platform_observer_register_s+0x94>
 8008900:	b139      	cbz	r1, 8008912 <ai_platform_observer_register_s+0xa2>
 8008902:	b131      	cbz	r1, 8008912 <ai_platform_observer_register_s+0xa2>
 8008904:	81f3      	strh	r3, [r6, #14]
 8008906:	3301      	adds	r3, #1
 8008908:	6911      	ldr	r1, [r2, #16]
 800890a:	b29b      	uxth	r3, r3
 800890c:	4291      	cmp	r1, r2
 800890e:	460a      	mov	r2, r1
 8008910:	d1f6      	bne.n	8008900 <ai_platform_observer_register_s+0x90>
 8008912:	7a33      	ldrb	r3, [r6, #8]
 8008914:	2100      	movs	r1, #0
 8008916:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <ai_platform_observer_register_s+0x168>)
 8008918:	2001      	movs	r0, #1
 800891a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800891e:	81b1      	strh	r1, [r6, #12]
 8008920:	60b3      	str	r3, [r6, #8]
 8008922:	e9c4 260f 	strd	r2, r6, [r4, #60]	; 0x3c
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	4b2c      	ldr	r3, [pc, #176]	; (80089dc <ai_platform_observer_register_s+0x16c>)
 800892a:	2201      	movs	r2, #1
 800892c:	4619      	mov	r1, r3
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	680b      	ldr	r3, [r1, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1fc      	bne.n	8008930 <ai_platform_observer_register_s+0xc0>
 8008936:	4b2a      	ldr	r3, [pc, #168]	; (80089e0 <ai_platform_observer_register_s+0x170>)
 8008938:	492a      	ldr	r1, [pc, #168]	; (80089e4 <ai_platform_observer_register_s+0x174>)
 800893a:	4a2b      	ldr	r2, [pc, #172]	; (80089e8 <ai_platform_observer_register_s+0x178>)
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4293      	cmp	r3, r2
 8008942:	d0c6      	beq.n	80088d2 <ai_platform_observer_register_s+0x62>
 8008944:	e7fe      	b.n	8008944 <ai_platform_observer_register_s+0xd4>
 8008946:	b1b4      	cbz	r4, 8008976 <ai_platform_observer_register_s+0x106>
 8008948:	f104 0010 	add.w	r0, r4, #16
 800894c:	2211      	movs	r2, #17
 800894e:	2110      	movs	r1, #16
 8008950:	f000 f8f0 	bl	8008b34 <core_set_error>
 8008954:	2000      	movs	r0, #0
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	4b24      	ldr	r3, [pc, #144]	; (80089ec <ai_platform_observer_register_s+0x17c>)
 800895a:	2201      	movs	r2, #1
 800895c:	4619      	mov	r1, r3
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1fc      	bne.n	8008960 <ai_platform_observer_register_s+0xf0>
 8008966:	4b22      	ldr	r3, [pc, #136]	; (80089f0 <ai_platform_observer_register_s+0x180>)
 8008968:	491e      	ldr	r1, [pc, #120]	; (80089e4 <ai_platform_observer_register_s+0x174>)
 800896a:	4a1f      	ldr	r2, [pc, #124]	; (80089e8 <ai_platform_observer_register_s+0x178>)
 800896c:	6019      	str	r1, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4293      	cmp	r3, r2
 8008972:	d0ae      	beq.n	80088d2 <ai_platform_observer_register_s+0x62>
 8008974:	e7fe      	b.n	8008974 <ai_platform_observer_register_s+0x104>
 8008976:	4620      	mov	r0, r4
 8008978:	bd70      	pop	{r4, r5, r6, pc}
 800897a:	f104 0010 	add.w	r0, r4, #16
 800897e:	2240      	movs	r2, #64	; 0x40
 8008980:	2111      	movs	r1, #17
 8008982:	f000 f8d7 	bl	8008b34 <core_set_error>
 8008986:	4628      	mov	r0, r5
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <ai_platform_observer_register_s+0x16c>)
 800898c:	2201      	movs	r2, #1
 800898e:	4619      	mov	r1, r3
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	680b      	ldr	r3, [r1, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1fc      	bne.n	8008992 <ai_platform_observer_register_s+0x122>
 8008998:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <ai_platform_observer_register_s+0x170>)
 800899a:	4912      	ldr	r1, [pc, #72]	; (80089e4 <ai_platform_observer_register_s+0x174>)
 800899c:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <ai_platform_observer_register_s+0x178>)
 800899e:	6019      	str	r1, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d095      	beq.n	80088d2 <ai_platform_observer_register_s+0x62>
 80089a6:	e7fe      	b.n	80089a6 <ai_platform_observer_register_s+0x136>
 80089a8:	4b10      	ldr	r3, [pc, #64]	; (80089ec <ai_platform_observer_register_s+0x17c>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	4619      	mov	r1, r3
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1fc      	bne.n	80089b0 <ai_platform_observer_register_s+0x140>
 80089b6:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <ai_platform_observer_register_s+0x180>)
 80089b8:	490a      	ldr	r1, [pc, #40]	; (80089e4 <ai_platform_observer_register_s+0x174>)
 80089ba:	4a0b      	ldr	r2, [pc, #44]	; (80089e8 <ai_platform_observer_register_s+0x178>)
 80089bc:	6019      	str	r1, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d086      	beq.n	80088d2 <ai_platform_observer_register_s+0x62>
 80089c4:	e7fe      	b.n	80089c4 <ai_platform_observer_register_s+0x154>
 80089c6:	bf00      	nop
 80089c8:	a1c00100 	.word	0xa1c00100
 80089cc:	e0002000 	.word	0xe0002000
 80089d0:	e0042000 	.word	0xe0042000
 80089d4:	5c001000 	.word	0x5c001000
 80089d8:	080065dd 	.word	0x080065dd
 80089dc:	40023008 	.word	0x40023008
 80089e0:	40023000 	.word	0x40023000
 80089e4:	f407a5c2 	.word	0xf407a5c2
 80089e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80089ec:	58024c08 	.word	0x58024c08
 80089f0:	58024c00 	.word	0x58024c00

080089f4 <ai_platform_observer_unregister_s>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	460d      	mov	r5, r1
 80089f8:	4604      	mov	r4, r0
 80089fa:	b120      	cbz	r0, 8008a06 <ai_platform_observer_unregister_s+0x12>
 80089fc:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <ai_platform_observer_unregister_s+0x108>)
 80089fe:	6802      	ldr	r2, [r0, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	bf18      	it	ne
 8008a04:	2400      	movne	r4, #0
 8008a06:	4a3e      	ldr	r2, [pc, #248]	; (8008b00 <ai_platform_observer_unregister_s+0x10c>)
 8008a08:	6813      	ldr	r3, [r2, #0]
 8008a0a:	f023 0301 	bic.w	r3, r3, #1
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	f7fd fe6e 	bl	80066f0 <_ai_platform_acquire_crc>
 8008a14:	4b3b      	ldr	r3, [pc, #236]	; (8008b04 <ai_platform_observer_unregister_s+0x110>)
 8008a16:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a20:	189a      	adds	r2, r3, r2
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	d92b      	bls.n	8008a7e <ai_platform_observer_unregister_s+0x8a>
 8008a26:	f240 4249 	movw	r2, #1097	; 0x449
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d027      	beq.n	8008a7e <ai_platform_observer_unregister_s+0x8a>
 8008a2e:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <ai_platform_observer_unregister_s+0x114>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008a36:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8008a3a:	d02f      	beq.n	8008a9c <ai_platform_observer_unregister_s+0xa8>
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f240 4183 	movw	r1, #1155	; 0x483
 8008a42:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008a46:	428a      	cmp	r2, r1
 8008a48:	d048      	beq.n	8008adc <ai_platform_observer_unregister_s+0xe8>
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a50:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008a54:	d033      	beq.n	8008abe <ai_platform_observer_unregister_s+0xca>
 8008a56:	f7fd fe4d 	bl	80066f4 <_ai_platform_release_crc>
 8008a5a:	b13c      	cbz	r4, 8008a6c <ai_platform_observer_unregister_s+0x78>
 8008a5c:	fab5 f585 	clz	r5, r5
 8008a60:	096d      	lsrs	r5, r5, #5
 8008a62:	b91d      	cbnz	r5, 8008a6c <ai_platform_observer_unregister_s+0x78>
 8008a64:	6425      	str	r5, [r4, #64]	; 0x40
 8008a66:	2001      	movs	r0, #1
 8008a68:	63e5      	str	r5, [r4, #60]	; 0x3c
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	b32c      	cbz	r4, 8008aba <ai_platform_observer_unregister_s+0xc6>
 8008a6e:	f104 0010 	add.w	r0, r4, #16
 8008a72:	2211      	movs	r2, #17
 8008a74:	2110      	movs	r1, #16
 8008a76:	f000 f85d 	bl	8008b34 <core_set_error>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	bd38      	pop	{r3, r4, r5, pc}
 8008a7e:	4b23      	ldr	r3, [pc, #140]	; (8008b0c <ai_platform_observer_unregister_s+0x118>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	4619      	mov	r1, r3
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	680b      	ldr	r3, [r1, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1fc      	bne.n	8008a86 <ai_platform_observer_unregister_s+0x92>
 8008a8c:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <ai_platform_observer_unregister_s+0x11c>)
 8008a8e:	4921      	ldr	r1, [pc, #132]	; (8008b14 <ai_platform_observer_unregister_s+0x120>)
 8008a90:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <ai_platform_observer_unregister_s+0x124>)
 8008a92:	6019      	str	r1, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d0dd      	beq.n	8008a56 <ai_platform_observer_unregister_s+0x62>
 8008a9a:	e7fe      	b.n	8008a9a <ai_platform_observer_unregister_s+0xa6>
 8008a9c:	4b1f      	ldr	r3, [pc, #124]	; (8008b1c <ai_platform_observer_unregister_s+0x128>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1fc      	bne.n	8008aa4 <ai_platform_observer_unregister_s+0xb0>
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <ai_platform_observer_unregister_s+0x12c>)
 8008aac:	4919      	ldr	r1, [pc, #100]	; (8008b14 <ai_platform_observer_unregister_s+0x120>)
 8008aae:	4a1a      	ldr	r2, [pc, #104]	; (8008b18 <ai_platform_observer_unregister_s+0x124>)
 8008ab0:	6019      	str	r1, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d0ce      	beq.n	8008a56 <ai_platform_observer_unregister_s+0x62>
 8008ab8:	e7fe      	b.n	8008ab8 <ai_platform_observer_unregister_s+0xc4>
 8008aba:	4620      	mov	r0, r4
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <ai_platform_observer_unregister_s+0x118>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	680b      	ldr	r3, [r1, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1fc      	bne.n	8008ac6 <ai_platform_observer_unregister_s+0xd2>
 8008acc:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <ai_platform_observer_unregister_s+0x11c>)
 8008ace:	4911      	ldr	r1, [pc, #68]	; (8008b14 <ai_platform_observer_unregister_s+0x120>)
 8008ad0:	4a11      	ldr	r2, [pc, #68]	; (8008b18 <ai_platform_observer_unregister_s+0x124>)
 8008ad2:	6019      	str	r1, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d0bd      	beq.n	8008a56 <ai_platform_observer_unregister_s+0x62>
 8008ada:	e7fe      	b.n	8008ada <ai_platform_observer_unregister_s+0xe6>
 8008adc:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <ai_platform_observer_unregister_s+0x128>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	680b      	ldr	r3, [r1, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1fc      	bne.n	8008ae4 <ai_platform_observer_unregister_s+0xf0>
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <ai_platform_observer_unregister_s+0x12c>)
 8008aec:	4909      	ldr	r1, [pc, #36]	; (8008b14 <ai_platform_observer_unregister_s+0x120>)
 8008aee:	4a0a      	ldr	r2, [pc, #40]	; (8008b18 <ai_platform_observer_unregister_s+0x124>)
 8008af0:	6019      	str	r1, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d0ae      	beq.n	8008a56 <ai_platform_observer_unregister_s+0x62>
 8008af8:	e7fe      	b.n	8008af8 <ai_platform_observer_unregister_s+0x104>
 8008afa:	bf00      	nop
 8008afc:	a1c00100 	.word	0xa1c00100
 8008b00:	e0002000 	.word	0xe0002000
 8008b04:	e0042000 	.word	0xe0042000
 8008b08:	5c001000 	.word	0x5c001000
 8008b0c:	40023008 	.word	0x40023008
 8008b10:	40023000 	.word	0x40023000
 8008b14:	f407a5c2 	.word	0xf407a5c2
 8008b18:	b5e8b5cd 	.word	0xb5e8b5cd
 8008b1c:	58024c08 	.word	0x58024c08
 8008b20:	58024c00 	.word	0x58024c00

08008b24 <core_init>:
 8008b24:	2001      	movs	r0, #1
 8008b26:	4770      	bx	lr

08008b28 <core_get_error>:
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6800      	ldr	r0, [r0, #0]
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop

08008b34 <core_set_error>:
 8008b34:	4603      	mov	r3, r0
 8008b36:	7800      	ldrb	r0, [r0, #0]
 8008b38:	b930      	cbnz	r0, 8008b48 <core_set_error+0x14>
 8008b3a:	7019      	strb	r1, [r3, #0]
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	f362 211f 	bfi	r1, r2, #8, #24
 8008b44:	6019      	str	r1, [r3, #0]
 8008b46:	4770      	bx	lr
 8008b48:	2000      	movs	r0, #0
 8008b4a:	4770      	bx	lr

08008b4c <func_dummy>:
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop

08008b50 <ai_dict_decompress_f32>:
 8008b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b54:	9f08      	ldr	r7, [sp, #32]
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008b5c:	d00e      	beq.n	8008b7c <ai_dict_decompress_f32+0x2c>
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d10a      	bne.n	8008b78 <ai_dict_decompress_f32+0x28>
 8008b62:	42b8      	cmp	r0, r7
 8008b64:	d208      	bcs.n	8008b78 <ai_dict_decompress_f32+0x28>
 8008b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f840 3b04 	str.w	r3, [r0], #4
 8008b74:	4287      	cmp	r7, r0
 8008b76:	d8f6      	bhi.n	8008b66 <ai_dict_decompress_f32+0x16>
 8008b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8008b82:	f003 0e01 	and.w	lr, r3, #1
 8008b86:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8008b8a:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8008b8e:	42b8      	cmp	r0, r7
 8008b90:	d2f2      	bcs.n	8008b78 <ai_dict_decompress_f32+0x28>
 8008b92:	f1bc 0f00 	cmp.w	ip, #0
 8008b96:	d019      	beq.n	8008bcc <ai_dict_decompress_f32+0x7c>
 8008b98:	f100 0508 	add.w	r5, r0, #8
 8008b9c:	1e4c      	subs	r4, r1, #1
 8008b9e:	eb01 0608 	add.w	r6, r1, r8
 8008ba2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	091b      	lsrs	r3, r3, #4
 8008baa:	42a6      	cmp	r6, r4
 8008bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f845 3c10 	str.w	r3, [r5, #-16]
 8008bb6:	7823      	ldrb	r3, [r4, #0]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f845 3c0c 	str.w	r3, [r5, #-12]
 8008bc6:	d1ec      	bne.n	8008ba2 <ai_dict_decompress_f32+0x52>
 8008bc8:	4461      	add	r1, ip
 8008bca:	4448      	add	r0, r9
 8008bcc:	f1be 0f00 	cmp.w	lr, #0
 8008bd0:	d103      	bne.n	8008bda <ai_dict_decompress_f32+0x8a>
 8008bd2:	4287      	cmp	r7, r0
 8008bd4:	d8dd      	bhi.n	8008b92 <ai_dict_decompress_f32+0x42>
 8008bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bda:	780b      	ldrb	r3, [r1, #0]
 8008bdc:	3004      	adds	r0, #4
 8008bde:	3101      	adds	r1, #1
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f840 3c04 	str.w	r3, [r0, #-4]
 8008bec:	e7cf      	b.n	8008b8e <ai_dict_decompress_f32+0x3e>
 8008bee:	bf00      	nop

08008bf0 <forward_conv2d_nl_pool>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b08 	vpush	{d8-d11}
 8008bf8:	b0e1      	sub	sp, #388	; 0x184
 8008bfa:	6983      	ldr	r3, [r0, #24]
 8008bfc:	af0a      	add	r7, sp, #40	; 0x28
 8008bfe:	881a      	ldrh	r2, [r3, #0]
 8008c00:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	f001 8105 	beq.w	8009e14 <forward_conv2d_nl_pool+0x1224>
 8008c0a:	6859      	ldr	r1, [r3, #4]
 8008c0c:	684d      	ldr	r5, [r1, #4]
 8008c0e:	b105      	cbz	r5, 8008c12 <forward_conv2d_nl_pool+0x22>
 8008c10:	682d      	ldr	r5, [r5, #0]
 8008c12:	2a01      	cmp	r2, #1
 8008c14:	f241 8104 	bls.w	8009e20 <forward_conv2d_nl_pool+0x1230>
 8008c18:	690a      	ldr	r2, [r1, #16]
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	f001 80f7 	beq.w	8009e0e <forward_conv2d_nl_pool+0x121e>
 8008c20:	f8d2 9000 	ldr.w	r9, [r2]
 8008c24:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008c28:	2a02      	cmp	r2, #2
 8008c2a:	f001 80f9 	beq.w	8009e20 <forward_conv2d_nl_pool+0x1230>
 8008c2e:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 8008c32:	f1bc 0f00 	cmp.w	ip, #0
 8008c36:	f001 80e3 	beq.w	8009e00 <forward_conv2d_nl_pool+0x1210>
 8008c3a:	f111 0218 	adds.w	r2, r1, #24
 8008c3e:	f8dc 4000 	ldr.w	r4, [ip]
 8008c42:	d005      	beq.n	8008c50 <forward_conv2d_nl_pool+0x60>
 8008c44:	8b0a      	ldrh	r2, [r1, #24]
 8008c46:	2a01      	cmp	r2, #1
 8008c48:	f241 80e7 	bls.w	8009e1a <forward_conv2d_nl_pool+0x122a>
 8008c4c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008c50:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008c54:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8008c58:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008c5c:	f8db 6008 	ldr.w	r6, [fp, #8]
 8008c60:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008c64:	f8c7 60bc 	str.w	r6, [r7, #188]	; 0xbc
 8008c68:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8008c6c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008c6e:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 8008c72:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008c76:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008c7a:	f8c7 6094 	str.w	r6, [r7, #148]	; 0x94
 8008c7e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8008c82:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008c86:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8008c8a:	f8de 6004 	ldr.w	r6, [lr, #4]
 8008c8e:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 8008c92:	f8de 600c 	ldr.w	r6, [lr, #12]
 8008c96:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
 8008c9a:	f8de 6008 	ldr.w	r6, [lr, #8]
 8008c9e:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
 8008ca2:	682e      	ldr	r6, [r5, #0]
 8008ca4:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8008ca8:	686e      	ldr	r6, [r5, #4]
 8008caa:	68ad      	ldr	r5, [r5, #8]
 8008cac:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8008cb0:	f8da 6004 	ldr.w	r6, [sl, #4]
 8008cb4:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8008cb8:	f8da 6008 	ldr.w	r6, [sl, #8]
 8008cbc:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8008cc0:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8008cc2:	6836      	ldr	r6, [r6, #0]
 8008cc4:	f8c7 6134 	str.w	r6, [r7, #308]	; 0x134
 8008cc8:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8008cca:	6876      	ldr	r6, [r6, #4]
 8008ccc:	647e      	str	r6, [r7, #68]	; 0x44
 8008cce:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8008cd2:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
 8008cd6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008cd8:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8008cdc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8008cde:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8008ce2:	69c6      	ldr	r6, [r0, #28]
 8008ce4:	f8c7 6124 	str.w	r6, [r7, #292]	; 0x124
 8008ce8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8008cea:	64fe      	str	r6, [r7, #76]	; 0x4c
 8008cec:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8008cee:	64be      	str	r6, [r7, #72]	; 0x48
 8008cf0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8008cf2:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008cf6:	f8c7 60c0 	str.w	r6, [r7, #192]	; 0xc0
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	f001 807c 	beq.w	8009df8 <forward_conv2d_nl_pool+0x1208>
 8008d00:	6992      	ldr	r2, [r2, #24]
 8008d02:	6892      	ldr	r2, [r2, #8]
 8008d04:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008d08:	4680      	mov	r8, r0
 8008d0a:	6a00      	ldr	r0, [r0, #32]
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	f001 8056 	beq.w	8009dbe <forward_conv2d_nl_pool+0x11ce>
 8008d12:	698a      	ldr	r2, [r1, #24]
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	f001 8047 	beq.w	8009da8 <forward_conv2d_nl_pool+0x11b8>
 8008d1a:	694b      	ldr	r3, [r1, #20]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008d22:	6893      	ldr	r3, [r2, #8]
 8008d24:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008d28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d2c:	f002 fa6a 	bl	800b204 <ai_array_get_byte_size>
 8008d30:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008d34:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008d3e:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008d42:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8008d46:	fa1f f28a 	uxth.w	r2, sl
 8008d4a:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8008d4e:	fa11 f085 	uxtah	r0, r1, r5
 8008d52:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008d56:	f8b7 1150 	ldrh.w	r1, [r7, #336]	; 0x150
 8008d5a:	1e74      	subs	r4, r6, #1
 8008d5c:	f8dc e000 	ldr.w	lr, [ip]
 8008d60:	3a01      	subs	r2, #1
 8008d62:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8008d66:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008d6a:	fb04 6402 	mla	r4, r4, r2, r6
 8008d6e:	f3ce 15c6 	ubfx	r5, lr, #7, #7
 8008d72:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8008d76:	4408      	add	r0, r1
 8008d78:	f3ce 5141 	ubfx	r1, lr, #21, #2
 8008d7c:	fa1f f28b 	uxth.w	r2, fp
 8008d80:	63fc      	str	r4, [r7, #60]	; 0x3c
 8008d82:	fa45 f101 	asr.w	r1, r5, r1
 8008d86:	f3ce 4543 	ubfx	r5, lr, #17, #4
 8008d8a:	eba0 0e04 	sub.w	lr, r0, r4
 8008d8e:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 8008d92:	3a01      	subs	r2, #1
 8008d94:	1e70      	subs	r0, r6, #1
 8008d96:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8008d9a:	b289      	uxth	r1, r1
 8008d9c:	fb00 6602 	mla	r6, r0, r2, r6
 8008da0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8008da4:	4a85      	ldr	r2, [pc, #532]	; (8008fbc <forward_conv2d_nl_pool+0x3cc>)
 8008da6:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8008daa:	4606      	mov	r6, r0
 8008dac:	f8b7 4140 	ldrh.w	r4, [r7, #320]	; 0x140
 8008db0:	2800      	cmp	r0, #0
 8008db2:	bf08      	it	eq
 8008db4:	4616      	moveq	r6, r2
 8008db6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8008dba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008dbe:	2d04      	cmp	r5, #4
 8008dc0:	6438      	str	r0, [r7, #64]	; 0x40
 8008dc2:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8008dc6:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 8008dca:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8008dce:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 8008dd2:	fbbe f0f2 	udiv	r0, lr, r2
 8008dd6:	f100 0201 	add.w	r2, r0, #1
 8008dda:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008dde:	f000 837b 	beq.w	80094d8 <forward_conv2d_nl_pool+0x8e8>
 8008de2:	2d08      	cmp	r5, #8
 8008de4:	f000 8378 	beq.w	80094d8 <forward_conv2d_nl_pool+0x8e8>
 8008de8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008dec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008df0:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8008df4:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008df8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008dfc:	2a03      	cmp	r2, #3
 8008dfe:	f241 800f 	bls.w	8009e20 <forward_conv2d_nl_pool+0x1230>
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 8364 	beq.w	80094d4 <forward_conv2d_nl_pool+0x8e4>
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008e18:	4249      	negs	r1, r1
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	6896      	ldr	r6, [r2, #8]
 8008e1e:	6898      	ldr	r0, [r3, #8]
 8008e20:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8008e24:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8008e28:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8008e2c:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f000 82da 	beq.w	80093ea <forward_conv2d_nl_pool+0x7fa>
 8008e36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e3a:	fa0f fc8b 	sxth.w	ip, fp
 8008e3e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8008e42:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 8008e46:	fb03 f200 	mul.w	r2, r3, r0
 8008e4a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008e4e:	00ab      	lsls	r3, r5, #2
 8008e50:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 8008e54:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 8008e58:	008c      	lsls	r4, r1, #2
 8008e5a:	426d      	negs	r5, r5
 8008e5c:	fb01 fc02 	mul.w	ip, r1, r2
 8008e60:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008e64:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8008e68:	f8d7 5138 	ldr.w	r5, [r7, #312]	; 0x138
 8008e6c:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 8008e70:	fa0f fc8a 	sxth.w	ip, sl
 8008e74:	fb05 f803 	mul.w	r8, r5, r3
 8008e78:	462b      	mov	r3, r5
 8008e7a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8008e7e:	00ad      	lsls	r5, r5, #2
 8008e80:	fb02 f203 	mul.w	r2, r2, r3
 8008e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e88:	fb04 f000 	mul.w	r0, r4, r0
 8008e8c:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8008fc0 <forward_conv2d_nl_pool+0x3d0>
 8008e90:	f8c7 c0cc 	str.w	ip, [r7, #204]	; 0xcc
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	f8b7 c130 	ldrh.w	ip, [r7, #304]	; 0x130
 8008e9a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8008e9e:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 8008ea2:	f04f 0c00 	mov.w	ip, #0
 8008ea6:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008eb2:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8008ebc:	469c      	mov	ip, r3
 8008ebe:	fb00 f101 	mul.w	r1, r0, r1
 8008ec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ec6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008eca:	fb0c fc03 	mul.w	ip, ip, r3
 8008ece:	008b      	lsls	r3, r1, #2
 8008ed0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008ed4:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eda:	468e      	mov	lr, r1
 8008edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ee0:	fb06 fc08 	mul.w	ip, r6, r8
 8008ee4:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8008ee8:	469c      	mov	ip, r3
 8008eea:	0093      	lsls	r3, r2, #2
 8008eec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008ef0:	fb0c fc01 	mul.w	ip, ip, r1
 8008ef4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8008efc:	fb00 fc02 	mul.w	ip, r0, r2
 8008f00:	2000      	movs	r0, #0
 8008f02:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 8008f06:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8008f0a:	fb01 f005 	mul.w	r0, r1, r5
 8008f0e:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008f12:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008f16:	6238      	str	r0, [r7, #32]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008f20:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f2a:	469c      	mov	ip, r3
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	fb05 f303 	mul.w	r3, r5, r3
 8008f32:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 8008f36:	fb0c f404 	mul.w	r4, ip, r4
 8008f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f40:	66bc      	str	r4, [r7, #104]	; 0x68
 8008f42:	0114      	lsls	r4, r2, #4
 8008f44:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008f48:	46a2      	mov	sl, r4
 8008f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f4c:	fb05 f306 	mul.w	r3, r5, r6
 8008f50:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8008f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f56:	4603      	mov	r3, r0
 8008f58:	fb00 f005 	mul.w	r0, r0, r5
 8008f5c:	fb03 f301 	mul.w	r3, r3, r1
 8008f60:	6778      	str	r0, [r7, #116]	; 0x74
 8008f62:	00d0      	lsls	r0, r2, #3
 8008f64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008f68:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f70:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8008f74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f340 81ca 	ble.w	800931a <forward_conv2d_nl_pool+0x72a>
 8008f86:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f92:	2900      	cmp	r1, #0
 8008f94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f96:	441a      	add	r2, r3
 8008f98:	bfb4      	ite	lt
 8008f9a:	2100      	movlt	r1, #0
 8008f9c:	2300      	movge	r3, #0
 8008f9e:	4282      	cmp	r2, r0
 8008fa0:	bf28      	it	cs
 8008fa2:	4602      	movcs	r2, r0
 8008fa4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008fa8:	2801      	cmp	r0, #1
 8008faa:	f000 8403 	beq.w	80097b4 <forward_conv2d_nl_pool+0xbc4>
 8008fae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008fb2:	4281      	cmp	r1, r0
 8008fb4:	f000 82be 	beq.w	8009534 <forward_conv2d_nl_pool+0x944>
 8008fb8:	e004      	b.n	8008fc4 <forward_conv2d_nl_pool+0x3d4>
 8008fba:	bf00      	nop
 8008fbc:	08008b4d 	.word	0x08008b4d
 8008fc0:	00000000 	.word	0x00000000
 8008fc4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	f000 8199 	beq.w	8009300 <forward_conv2d_nl_pool+0x710>
 8008fce:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008fd8:	181d      	adds	r5, r3, r0
 8008fda:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8008fde:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8008fe2:	3d01      	subs	r5, #1
 8008fe4:	fb93 f1f0 	sdiv	r1, r3, r0
 8008fe8:	fb00 3111 	mls	r1, r0, r1, r3
 8008fec:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008ff0:	2400      	movs	r4, #0
 8008ff2:	1a41      	subs	r1, r0, r1
 8008ff4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	fb91 f0f0 	sdiv	r0, r1, r0
 8008ffe:	fb04 1110 	mls	r1, r4, r0, r1
 8009002:	4620      	mov	r0, r4
 8009004:	1a52      	subs	r2, r2, r1
 8009006:	4419      	add	r1, r3
 8009008:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800900c:	4422      	add	r2, r4
 800900e:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8009012:	fb03 f301 	mul.w	r3, r3, r1
 8009016:	3a01      	subs	r2, #1
 8009018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800901a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800901e:	fb92 f8f0 	sdiv	r8, r2, r0
 8009022:	4619      	mov	r1, r3
 8009024:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009028:	fbb1 f3f4 	udiv	r3, r1, r4
 800902c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009030:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8009034:	fb95 f5f0 	sdiv	r5, r5, r0
 8009038:	eba1 0008 	sub.w	r0, r1, r8
 800903c:	6a39      	ldr	r1, [r7, #32]
 800903e:	eba1 0c03 	sub.w	ip, r1, r3
 8009042:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009046:	fbb2 f2f4 	udiv	r2, r2, r4
 800904a:	fb0e f403 	mul.w	r4, lr, r3
 800904e:	0096      	lsls	r6, r2, #2
 8009050:	fb03 f305 	mul.w	r3, r3, r5
 8009054:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8009058:	667a      	str	r2, [r7, #100]	; 0x64
 800905a:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800905e:	663b      	str	r3, [r7, #96]	; 0x60
 8009060:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8009064:	fb04 f300 	mul.w	r3, r4, r0
 8009068:	673e      	str	r6, [r7, #112]	; 0x70
 800906a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800906e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009072:	1b9b      	subs	r3, r3, r6
 8009074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009078:	008b      	lsls	r3, r1, #2
 800907a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009080:	46c2      	mov	sl, r8
 8009082:	00d3      	lsls	r3, r2, #3
 8009084:	61fb      	str	r3, [r7, #28]
 8009086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009088:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800908c:	189e      	adds	r6, r3, r2
 800908e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009092:	2b00      	cmp	r3, #0
 8009094:	f2c0 811f 	blt.w	80092d6 <forward_conv2d_nl_pool+0x6e6>
 8009098:	2100      	movs	r1, #0
 800909a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800909c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090a0:	4688      	mov	r8, r1
 80090a2:	460d      	mov	r5, r1
 80090a4:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 80090a8:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80090ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80090b0:	0080      	lsls	r0, r0, #2
 80090b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80090ba:	4422      	add	r2, r4
 80090bc:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80090c0:	4423      	add	r3, r4
 80090c2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80090c6:	42a2      	cmp	r2, r4
 80090c8:	bf94      	ite	ls
 80090ca:	ebc5 0202 	rsbls	r2, r5, r2
 80090ce:	ebc5 0204 	rsbhi	r2, r5, r4
 80090d2:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80090d6:	eb08 0403 	add.w	r4, r8, r3
 80090da:	1a52      	subs	r2, r2, r1
 80090dc:	462b      	mov	r3, r5
 80090de:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80090e2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	bf08      	it	eq
 80090ea:	4633      	moveq	r3, r6
 80090ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80090f0:	440a      	add	r2, r1
 80090f2:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 80090f6:	42b3      	cmp	r3, r6
 80090f8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80090fc:	fb00 5004 	mla	r0, r0, r4, r5
 8009100:	460a      	mov	r2, r1
 8009102:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8009106:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 800910a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800910c:	fb96 f6f1 	sdiv	r6, r6, r1
 8009110:	fb9c f5f1 	sdiv	r5, ip, r1
 8009114:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009116:	440d      	add	r5, r1
 8009118:	fb06 0112 	mls	r1, r6, r2, r0
 800911c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009120:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009124:	fb0e 0505 	mla	r5, lr, r5, r0
 8009128:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800912c:	1b92      	subs	r2, r2, r6
 800912e:	2800      	cmp	r0, #0
 8009130:	d06f      	beq.n	8009212 <forward_conv2d_nl_pool+0x622>
 8009132:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009136:	fb0e f802 	mul.w	r8, lr, r2
 800913a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800913c:	fb00 fb01 	mul.w	fp, r0, r1
 8009140:	2a00      	cmp	r2, #0
 8009142:	d066      	beq.n	8009212 <forward_conv2d_nl_pool+0x622>
 8009144:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009146:	189a      	adds	r2, r3, r2
 8009148:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800914c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	62bb      	str	r3, [r7, #40]	; 0x28
 8009154:	2300      	movs	r3, #0
 8009156:	67bb      	str	r3, [r7, #120]	; 0x78
 8009158:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009160:	4413      	add	r3, r2
 8009162:	188a      	adds	r2, r1, r2
 8009164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009166:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800916a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800916e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009172:	f1ba 0f00 	cmp.w	sl, #0
 8009176:	ecf3 7a01 	vldmia	r3!, {s15}
 800917a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800917e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009182:	f340 80a6 	ble.w	80092d2 <forward_conv2d_nl_pool+0x6e2>
 8009186:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800918a:	f04f 0c00 	mov.w	ip, #0
 800918e:	2e00      	cmp	r6, #0
 8009190:	dd19      	ble.n	80091c6 <forward_conv2d_nl_pool+0x5d6>
 8009192:	2100      	movs	r1, #0
 8009194:	eb00 040e 	add.w	r4, r0, lr
 8009198:	4284      	cmp	r4, r0
 800919a:	d910      	bls.n	80091be <forward_conv2d_nl_pool+0x5ce>
 800919c:	4603      	mov	r3, r0
 800919e:	462a      	mov	r2, r5
 80091a0:	ecb3 7a01 	vldmia	r3!, {s14}
 80091a4:	ecf2 6a01 	vldmia	r2!, {s13}
 80091a8:	429c      	cmp	r4, r3
 80091aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80091ae:	d8f7      	bhi.n	80091a0 <forward_conv2d_nl_pool+0x5b0>
 80091b0:	43c3      	mvns	r3, r0
 80091b2:	441c      	add	r4, r3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	3404      	adds	r4, #4
 80091ba:	4425      	add	r5, r4
 80091bc:	4420      	add	r0, r4
 80091be:	3101      	adds	r1, #1
 80091c0:	4448      	add	r0, r9
 80091c2:	428e      	cmp	r6, r1
 80091c4:	d1e6      	bne.n	8009194 <forward_conv2d_nl_pool+0x5a4>
 80091c6:	f10c 0c01 	add.w	ip, ip, #1
 80091ca:	4458      	add	r0, fp
 80091cc:	4445      	add	r5, r8
 80091ce:	45e2      	cmp	sl, ip
 80091d0:	d1dd      	bne.n	800918e <forward_conv2d_nl_pool+0x59e>
 80091d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80091d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091da:	441d      	add	r5, r3
 80091dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091e0:	ece3 7a01 	vstmia	r3!, {s15}
 80091e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80091e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d1be      	bne.n	800916e <forward_conv2d_nl_pool+0x57e>
 80091f0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80091f4:	69f9      	ldr	r1, [r7, #28]
 80091f6:	4472      	add	r2, lr
 80091f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091fa:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80091fe:	3301      	adds	r3, #1
 8009200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009202:	67bb      	str	r3, [r7, #120]	; 0x78
 8009204:	1a52      	subs	r2, r2, r1
 8009206:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800920a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800920e:	429a      	cmp	r2, r3
 8009210:	d1a2      	bne.n	8009158 <forward_conv2d_nl_pool+0x568>
 8009212:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009216:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800921a:	4608      	mov	r0, r1
 800921c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8009220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009224:	4410      	add	r0, r2
 8009226:	3301      	adds	r3, #1
 8009228:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800922c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8009230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009234:	4401      	add	r1, r0
 8009236:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800923a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800923e:	1a8a      	subs	r2, r1, r2
 8009240:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009244:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009248:	429a      	cmp	r2, r3
 800924a:	f47f af1c 	bne.w	8009086 <forward_conv2d_nl_pool+0x496>
 800924e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009256:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2a00      	cmp	r2, #0
 800925e:	f000 8167 	beq.w	8009530 <forward_conv2d_nl_pool+0x940>
 8009262:	2400      	movs	r4, #0
 8009264:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8009268:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800926c:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8009270:	f8d7 910c 	ldr.w	r9, [r7, #268]	; 0x10c
 8009274:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8009278:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800927c:	4641      	mov	r1, r8
 800927e:	609e      	str	r6, [r3, #8]
 8009280:	4640      	mov	r0, r8
 8009282:	462b      	mov	r3, r5
 8009284:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009288:	4425      	add	r5, r4
 800928a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800928e:	47a0      	blx	r4
 8009290:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009294:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009298:	eba5 0009 	sub.w	r0, r5, r9
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	4416      	add	r6, r2
 80092a0:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80092a4:	0089      	lsls	r1, r1, #2
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	bfa8      	it	ge
 80092ac:	464d      	movge	r5, r9
 80092ae:	1850      	adds	r0, r2, r1
 80092b0:	4286      	cmp	r6, r0
 80092b2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80092b6:	bf28      	it	cs
 80092b8:	1a76      	subcs	r6, r6, r1
 80092ba:	3001      	adds	r0, #1
 80092bc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80092c0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 80092c4:	4281      	cmp	r1, r0
 80092c6:	d1d7      	bne.n	8009278 <forward_conv2d_nl_pool+0x688>
 80092c8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 80092cc:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 80092d0:	e01a      	b.n	8009308 <forward_conv2d_nl_pool+0x718>
 80092d2:	461a      	mov	r2, r3
 80092d4:	e77f      	b.n	80091d6 <forward_conv2d_nl_pool+0x5e6>
 80092d6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80092da:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80092de:	460d      	mov	r5, r1
 80092e0:	4688      	mov	r8, r1
 80092e2:	1853      	adds	r3, r2, r1
 80092e4:	4611      	mov	r1, r2
 80092e6:	fb95 f2f2 	sdiv	r2, r5, r2
 80092ea:	fb01 5212 	mls	r2, r1, r2, r5
 80092ee:	460c      	mov	r4, r1
 80092f0:	1a8a      	subs	r2, r1, r2
 80092f2:	fb92 f1f1 	sdiv	r1, r2, r1
 80092f6:	fb04 2111 	mls	r1, r4, r1, r2
 80092fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092fc:	1888      	adds	r0, r1, r2
 80092fe:	e6d1      	b.n	80090a4 <forward_conv2d_nl_pool+0x4b4>
 8009300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	68da      	ldr	r2, [r3, #12]
 8009308:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800930c:	609a      	str	r2, [r3, #8]
 800930e:	3101      	adds	r1, #1
 8009310:	b20b      	sxth	r3, r1
 8009312:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009316:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800931a:	3b01      	subs	r3, #1
 800931c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009320:	f100 808b 	bmi.w	800943a <forward_conv2d_nl_pool+0x84a>
 8009324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009328:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 800932c:	42ab      	cmp	r3, r5
 800932e:	d869      	bhi.n	8009404 <forward_conv2d_nl_pool+0x814>
 8009330:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 8009334:	b29c      	uxth	r4, r3
 8009336:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800933a:	2101      	movs	r1, #1
 800933c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009340:	6998      	ldr	r0, [r3, #24]
 8009342:	fa1f f389 	uxth.w	r3, r9
 8009346:	9401      	str	r4, [sp, #4]
 8009348:	1aa2      	subs	r2, r4, r2
 800934a:	1aee      	subs	r6, r5, r3
 800934c:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8009350:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 8009354:	b292      	uxth	r2, r2
 8009356:	9508      	str	r5, [sp, #32]
 8009358:	b236      	sxth	r6, r6
 800935a:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 8009364:	9107      	str	r1, [sp, #28]
 8009366:	fa1f f388 	uxth.w	r3, r8
 800936a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800936e:	9406      	str	r4, [sp, #24]
 8009370:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 8009374:	9504      	str	r5, [sp, #16]
 8009376:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8009380:	9102      	str	r1, [sp, #8]
 8009382:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8009386:	9400      	str	r4, [sp, #0]
 8009388:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800938c:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800938e:	3401      	adds	r4, #1
 8009390:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8009394:	47b0      	blx	r6
 8009396:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800939a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800939e:	fa0f f389 	sxth.w	r3, r9
 80093a2:	462e      	mov	r6, r5
 80093a4:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80093a6:	688a      	ldr	r2, [r1, #8]
 80093a8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80093ac:	442a      	add	r2, r5
 80093ae:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 80093b2:	4406      	add	r6, r0
 80093b4:	1a28      	subs	r0, r5, r0
 80093b6:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 80093b8:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 80093bc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 80093c0:	4640      	mov	r0, r8
 80093c2:	608a      	str	r2, [r1, #8]
 80093c4:	1ac3      	subs	r3, r0, r3
 80093c6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80093ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093ce:	4428      	add	r0, r5
 80093d0:	b21b      	sxth	r3, r3
 80093d2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80093d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093de:	42a3      	cmp	r3, r4
 80093e0:	f63f adcc 	bhi.w	8008f7c <forward_conv2d_nl_pool+0x38c>
 80093e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	609a      	str	r2, [r3, #8]
 80093ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093f2:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80093f6:	68d3      	ldr	r3, [r2, #12]
 80093f8:	6093      	str	r3, [r2, #8]
 80093fa:	46bd      	mov	sp, r7
 80093fc:	ecbd 8b08 	vpop	{d8-d11}
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	4611      	mov	r1, r2
 800940e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009412:	4419      	add	r1, r3
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009418:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800941c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009420:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8009424:	4413      	add	r3, r2
 8009426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800942a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800942e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009432:	4293      	cmp	r3, r2
 8009434:	f63f ada2 	bhi.w	8008f7c <forward_conv2d_nl_pool+0x38c>
 8009438:	e7d4      	b.n	80093e4 <forward_conv2d_nl_pool+0x7f4>
 800943a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800943e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009442:	6999      	ldr	r1, [r3, #24]
 8009444:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800944a:	fb02 0213 	mls	r2, r2, r3, r0
 800944e:	68c8      	ldr	r0, [r1, #12]
 8009450:	684b      	ldr	r3, [r1, #4]
 8009452:	4290      	cmp	r0, r2
 8009454:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009458:	bf88      	it	hi
 800945a:	18d2      	addhi	r2, r2, r3
 800945c:	18c1      	adds	r1, r0, r3
 800945e:	4290      	cmp	r0, r2
 8009460:	d216      	bcs.n	8009490 <forward_conv2d_nl_pool+0x8a0>
 8009462:	f9b7 00b8 	ldrsh.w	r0, [r7, #184]	; 0xb8
 8009466:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800946a:	42a0      	cmp	r0, r4
 800946c:	d010      	beq.n	8009490 <forward_conv2d_nl_pool+0x8a0>
 800946e:	428a      	cmp	r2, r1
 8009470:	d20e      	bcs.n	8009490 <forward_conv2d_nl_pool+0x8a0>
 8009472:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009476:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800947a:	f852 3b04 	ldr.w	r3, [r2], #4
 800947e:	f840 3b04 	str.w	r3, [r0], #4
 8009482:	69a1      	ldr	r1, [r4, #24]
 8009484:	684b      	ldr	r3, [r1, #4]
 8009486:	68c9      	ldr	r1, [r1, #12]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4419      	add	r1, r3
 800948c:	4291      	cmp	r1, r2
 800948e:	d8f4      	bhi.n	800947a <forward_conv2d_nl_pool+0x88a>
 8009490:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8009494:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009498:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800949a:	4420      	add	r0, r4
 800949c:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 80094a0:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80094a4:	442c      	add	r4, r5
 80094a6:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 80094aa:	1a80      	subs	r0, r0, r2
 80094ac:	442a      	add	r2, r5
 80094ae:	428c      	cmp	r4, r1
 80094b0:	b200      	sxth	r0, r0
 80094b2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80094b6:	b212      	sxth	r2, r2
 80094b8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80094bc:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80094c0:	4622      	mov	r2, r4
 80094c2:	f4ff af2f 	bcc.w	8009324 <forward_conv2d_nl_pool+0x734>
 80094c6:	425b      	negs	r3, r3
 80094c8:	441a      	add	r2, r3
 80094ca:	428a      	cmp	r2, r1
 80094cc:	d2fc      	bcs.n	80094c8 <forward_conv2d_nl_pool+0x8d8>
 80094ce:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80094d2:	e727      	b.n	8009324 <forward_conv2d_nl_pool+0x734>
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	deff      	udf	#255	; 0xff
 80094d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80094dc:	2a00      	cmp	r2, #0
 80094de:	f43f ac83 	beq.w	8008de8 <forward_conv2d_nl_pool+0x1f8>
 80094e2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80094e6:	2803      	cmp	r0, #3
 80094e8:	f240 849a 	bls.w	8009e20 <forward_conv2d_nl_pool+0x1230>
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	b1db      	cbz	r3, 800952a <forward_conv2d_nl_pool+0x93a>
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	b1cb      	cbz	r3, 800952a <forward_conv2d_nl_pool+0x93a>
 80094f6:	6998      	ldr	r0, [r3, #24]
 80094f8:	460b      	mov	r3, r1
 80094fa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80094fe:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 8009502:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8009506:	9501      	str	r5, [sp, #4]
 8009508:	9000      	str	r0, [sp, #0]
 800950a:	4620      	mov	r0, r4
 800950c:	f7ff fb20 	bl	8008b50 <ai_dict_decompress_f32>
 8009510:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009514:	b12c      	cbz	r4, 8009522 <forward_conv2d_nl_pool+0x932>
 8009516:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009520:	e462      	b.n	8008de8 <forward_conv2d_nl_pool+0x1f8>
 8009522:	881a      	ldrh	r2, [r3, #0]
 8009524:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009528:	e45e      	b.n	8008de8 <forward_conv2d_nl_pool+0x1f8>
 800952a:	2300      	movs	r3, #0
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	deff      	udf	#255	; 0xff
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	e6e9      	b.n	8009308 <forward_conv2d_nl_pool+0x718>
 8009534:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009538:	2901      	cmp	r1, #1
 800953a:	f47f ad43 	bne.w	8008fc4 <forward_conv2d_nl_pool+0x3d4>
 800953e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009542:	2900      	cmp	r1, #0
 8009544:	f43f aedc 	beq.w	8009300 <forward_conv2d_nl_pool+0x710>
 8009548:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800954c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8009550:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8009554:	fbb1 f1f0 	udiv	r1, r1, r0
 8009558:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 800955c:	fb03 f506 	mul.w	r5, r3, r6
 8009560:	1ad0      	subs	r0, r2, r3
 8009562:	00b2      	lsls	r2, r6, #2
 8009564:	00a4      	lsls	r4, r4, #2
 8009566:	67fd      	str	r5, [r7, #124]	; 0x7c
 8009568:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800956c:	65fc      	str	r4, [r7, #92]	; 0x5c
 800956e:	69bc      	ldr	r4, [r7, #24]
 8009570:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8009574:	1a28      	subs	r0, r5, r0
 8009576:	fb04 f303 	mul.w	r3, r4, r3
 800957a:	460d      	mov	r5, r1
 800957c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800957e:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	fb02 f300 	mul.w	r3, r2, r0
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
 800958a:	00cb      	lsls	r3, r1, #3
 800958c:	607b      	str	r3, [r7, #4]
 800958e:	00ab      	lsls	r3, r5, #2
 8009590:	60bb      	str	r3, [r7, #8]
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009596:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800959a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800959e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80095a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f2c0 826a 	blt.w	8009a8e <forward_conv2d_nl_pool+0xe9e>
 80095ba:	2400      	movs	r4, #0
 80095bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095be:	4621      	mov	r1, r4
 80095c0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80095c4:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80095c8:	1818      	adds	r0, r3, r0
 80095ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095ce:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80095d2:	18f3      	adds	r3, r6, r3
 80095d4:	4420      	add	r0, r4
 80095d6:	461c      	mov	r4, r3
 80095d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095dc:	0080      	lsls	r0, r0, #2
 80095de:	429c      	cmp	r4, r3
 80095e0:	bf28      	it	cs
 80095e2:	461c      	movcs	r4, r3
 80095e4:	1a64      	subs	r4, r4, r1
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	f000 8242 	beq.w	8009a70 <forward_conv2d_nl_pool+0xe80>
 80095ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80095f4:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80095f8:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80095fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009600:	428d      	cmp	r5, r1
 8009602:	462a      	mov	r2, r5
 8009604:	eba6 0104 	sub.w	r1, r6, r4
 8009608:	eba3 0304 	sub.w	r3, r3, r4
 800960c:	fe48 3a23 	vseleq.f32	s7, s16, s7
 8009610:	697d      	ldr	r5, [r7, #20]
 8009612:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 8009616:	4428      	add	r0, r5
 8009618:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800961c:	fb05 6e00 	mla	lr, r5, r0, r6
 8009620:	eb0e 000b 	add.w	r0, lr, fp
 8009624:	4586      	cmp	lr, r0
 8009626:	61f8      	str	r0, [r7, #28]
 8009628:	f080 80a5 	bcs.w	8009776 <forward_conv2d_nl_pool+0xb86>
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	fb01 f10b 	mul.w	r1, r1, fp
 8009632:	f024 0803 	bic.w	r8, r4, #3
 8009636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 8098 	beq.w	8009776 <forward_conv2d_nl_pool+0xb86>
 8009646:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009648:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800964c:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8009650:	089b      	lsrs	r3, r3, #2
 8009652:	4401      	add	r1, r0
 8009654:	68b8      	ldr	r0, [r7, #8]
 8009656:	3301      	adds	r3, #1
 8009658:	1810      	adds	r0, r2, r0
 800965a:	1a8a      	subs	r2, r1, r2
 800965c:	613a      	str	r2, [r7, #16]
 800965e:	fb03 f20a 	mul.w	r2, r3, sl
 8009662:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009666:	667a      	str	r2, [r7, #100]	; 0x64
 8009668:	011a      	lsls	r2, r3, #4
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	673a      	str	r2, [r7, #112]	; 0x70
 800966e:	663b      	str	r3, [r7, #96]	; 0x60
 8009670:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009676:	6939      	ldr	r1, [r7, #16]
 8009678:	4413      	add	r3, r2
 800967a:	188a      	adds	r2, r1, r2
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	67ba      	str	r2, [r7, #120]	; 0x78
 8009680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009688:	ecf3 6a01 	vldmia	r3!, {s13}
 800968c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009690:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009698:	2b00      	cmp	r3, #0
 800969a:	dd57      	ble.n	800974c <forward_conv2d_nl_pool+0xb5c>
 800969c:	4676      	mov	r6, lr
 800969e:	f04f 0c00 	mov.w	ip, #0
 80096a2:	f1b8 0f00 	cmp.w	r8, #0
 80096a6:	f340 81e1 	ble.w	8009a6c <forward_conv2d_nl_pool+0xe7c>
 80096aa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80096ae:	f109 0310 	add.w	r3, r9, #16
 80096b2:	2000      	movs	r0, #0
 80096b4:	18b1      	adds	r1, r6, r2
 80096b6:	4632      	mov	r2, r6
 80096b8:	eb02 050b 	add.w	r5, r2, fp
 80096bc:	ed53 7a03 	vldr	s15, [r3, #-12]
 80096c0:	ed92 4a00 	vldr	s8, [r2]
 80096c4:	3004      	adds	r0, #4
 80096c6:	ed95 7a00 	vldr	s14, [r5]
 80096ca:	eb01 050b 	add.w	r5, r1, fp
 80096ce:	ed53 4a04 	vldr	s9, [r3, #-16]
 80096d2:	4540      	cmp	r0, r8
 80096d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d8:	ed91 5a00 	vldr	s10, [r1]
 80096dc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80096e0:	4452      	add	r2, sl
 80096e2:	ed13 7a01 	vldr	s14, [r3, #-4]
 80096e6:	4451      	add	r1, sl
 80096e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80096ec:	ed95 6a00 	vldr	s12, [r5]
 80096f0:	f103 0310 	add.w	r3, r3, #16
 80096f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80096f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80096fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009700:	dbda      	blt.n	80096b8 <forward_conv2d_nl_pool+0xac8>
 8009702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009704:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009706:	441e      	add	r6, r3
 8009708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800970a:	4499      	add	r9, r3
 800970c:	42a0      	cmp	r0, r4
 800970e:	da11      	bge.n	8009734 <forward_conv2d_nl_pool+0xb44>
 8009710:	4602      	mov	r2, r0
 8009712:	4633      	mov	r3, r6
 8009714:	4649      	mov	r1, r9
 8009716:	3201      	adds	r2, #1
 8009718:	edd3 7a00 	vldr	s15, [r3]
 800971c:	ecb1 7a01 	vldmia	r1!, {s14}
 8009720:	445b      	add	r3, fp
 8009722:	42a2      	cmp	r2, r4
 8009724:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009728:	d1f5      	bne.n	8009716 <forward_conv2d_nl_pool+0xb26>
 800972a:	1a20      	subs	r0, r4, r0
 800972c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8009730:	fb00 660b 	mla	r6, r0, fp, r6
 8009734:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009738:	f10c 0c01 	add.w	ip, ip, #1
 800973c:	441e      	add	r6, r3
 800973e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009742:	4499      	add	r9, r3
 8009744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009748:	4563      	cmp	r3, ip
 800974a:	d1aa      	bne.n	80096a2 <forward_conv2d_nl_pool+0xab2>
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	4499      	add	r9, r3
 8009750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009752:	ece3 6a01 	vstmia	r3!, {s13}
 8009756:	67bb      	str	r3, [r7, #120]	; 0x78
 8009758:	e9d7 2335 	ldrd	r2, r3, [r7, #212]	; 0xd4
 800975c:	4293      	cmp	r3, r2
 800975e:	d191      	bne.n	8009684 <forward_conv2d_nl_pool+0xa94>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f10e 0e04 	add.w	lr, lr, #4
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	459e      	cmp	lr, r3
 8009772:	f4ff af7d 	bcc.w	8009670 <forward_conv2d_nl_pool+0xa80>
 8009776:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800977a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800977e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009782:	440a      	add	r2, r1
 8009784:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009788:	3301      	adds	r3, #1
 800978a:	4608      	mov	r0, r1
 800978c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009790:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8009794:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800979c:	4410      	add	r0, r2
 800979e:	1a8a      	subs	r2, r1, r2
 80097a0:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80097a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80097a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80097ac:	429a      	cmp	r2, r3
 80097ae:	f47f aeff 	bne.w	80095b0 <forward_conv2d_nl_pool+0x9c0>
 80097b2:	e54e      	b.n	8009252 <forward_conv2d_nl_pool+0x662>
 80097b4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80097b8:	2801      	cmp	r0, #1
 80097ba:	f47f ac03 	bne.w	8008fc4 <forward_conv2d_nl_pool+0x3d4>
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c2:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80097c6:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80097ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097cc:	fb00 4101 	mla	r1, r0, r1, r4
 80097d0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80097d4:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80097d8:	f080 8172 	bcs.w	8009ac0 <forward_conv2d_nl_pool+0xed0>
 80097dc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	f43f ad36 	beq.w	8009252 <forward_conv2d_nl_pool+0x662>
 80097e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80097f2:	4411      	add	r1, r2
 80097f4:	1a9b      	subs	r3, r3, r2
 80097f6:	6639      	str	r1, [r7, #96]	; 0x60
 80097f8:	667b      	str	r3, [r7, #100]	; 0x64
 80097fa:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80097fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009802:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8009806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800980a:	2300      	movs	r3, #0
 800980c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009814:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009818:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800981c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 814a 	beq.w	8009aba <forward_conv2d_nl_pool+0xeca>
 8009826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800982a:	ed93 6a00 	vldr	s12, [r3]
 800982e:	3304      	adds	r3, #4
 8009830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009834:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80fe 	beq.w	8009a3a <forward_conv2d_nl_pool+0xe4a>
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009842:	f04f 0b00 	mov.w	fp, #0
 8009846:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800984a:	eb03 0802 	add.w	r8, r3, r2
 800984e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800985a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800985e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009864:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800986c:	2b00      	cmp	r3, #0
 800986e:	f2c0 811b 	blt.w	8009aa8 <forward_conv2d_nl_pool+0xeb8>
 8009872:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009876:	2300      	movs	r3, #0
 8009878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800987a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800987e:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8009882:	4540      	cmp	r0, r8
 8009884:	bf94      	ite	ls
 8009886:	ebc3 0300 	rsbls	r3, r3, r0
 800988a:	ebc3 0308 	rsbhi	r3, r3, r8
 800988e:	4422      	add	r2, r4
 8009890:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009894:	1ac0      	subs	r0, r0, r3
 8009896:	eba4 0903 	sub.w	r9, r4, r3
 800989a:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 800989e:	fb03 f304 	mul.w	r3, r3, r4
 80098a2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80098a6:	2c00      	cmp	r4, #0
 80098a8:	f340 80fb 	ble.w	8009aa2 <forward_conv2d_nl_pool+0xeb2>
 80098ac:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80098b0:	f023 050f 	bic.w	r5, r3, #15
 80098b4:	eef0 6a46 	vmov.f32	s13, s12
 80098b8:	f04f 0e00 	mov.w	lr, #0
 80098bc:	fb04 f000 	mul.w	r0, r4, r0
 80098c0:	fb04 f909 	mul.w	r9, r4, r9
 80098c4:	6738      	str	r0, [r7, #112]	; 0x70
 80098c6:	1e68      	subs	r0, r5, #1
 80098c8:	0900      	lsrs	r0, r0, #4
 80098ca:	3001      	adds	r0, #1
 80098cc:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80098d0:	0100      	lsls	r0, r0, #4
 80098d2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80098d4:	2d00      	cmp	r5, #0
 80098d6:	f340 80e2 	ble.w	8009a9e <forward_conv2d_nl_pool+0xeae>
 80098da:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80098de:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80098e2:	2600      	movs	r6, #0
 80098e4:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80098e8:	3610      	adds	r6, #16
 80098ea:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80098ee:	3040      	adds	r0, #64	; 0x40
 80098f0:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 80098f4:	42ae      	cmp	r6, r5
 80098f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098fa:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 80098fe:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 8009902:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009906:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 800990a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800990e:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 8009912:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 8009916:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 800991a:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 800991e:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8009922:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8009926:	eee2 7a83 	vfma.f32	s15, s5, s6
 800992a:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 800992e:	ed14 ba1a 	vldr	s22, [r4, #-104]	; 0xffffff98
 8009932:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 8009936:	ed14 aa19 	vldr	s20, [r4, #-100]	; 0xffffff9c
 800993a:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 800993e:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 8009942:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009946:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 800994a:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800994e:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8009952:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009956:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 800995a:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800995e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009962:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8009966:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 800996a:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800996e:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 8009972:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8009976:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 800997a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800997e:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8009982:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8009986:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800998a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800998e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009992:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009996:	eee0 7a81 	vfma.f32	s15, s1, s2
 800999a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800999e:	eee2 7a83 	vfma.f32	s15, s5, s6
 80099a2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80099a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80099aa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80099ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099b2:	db97      	blt.n	80098e4 <forward_conv2d_nl_pool+0xcf4>
 80099b4:	4451      	add	r1, sl
 80099b6:	4452      	add	r2, sl
 80099b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80099ba:	4283      	cmp	r3, r0
 80099bc:	dd0f      	ble.n	80099de <forward_conv2d_nl_pool+0xdee>
 80099be:	4604      	mov	r4, r0
 80099c0:	468c      	mov	ip, r1
 80099c2:	4616      	mov	r6, r2
 80099c4:	3401      	adds	r4, #1
 80099c6:	ecb6 7a01 	vldmia	r6!, {s14}
 80099ca:	ecfc 7a01 	vldmia	ip!, {s15}
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80099d4:	d1f6      	bne.n	80099c4 <forward_conv2d_nl_pool+0xdd4>
 80099d6:	1a18      	subs	r0, r3, r0
 80099d8:	0080      	lsls	r0, r0, #2
 80099da:	4402      	add	r2, r0
 80099dc:	4401      	add	r1, r0
 80099de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80099e0:	f10e 0e01 	add.w	lr, lr, #1
 80099e4:	4449      	add	r1, r9
 80099e6:	4402      	add	r2, r0
 80099e8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80099ec:	4570      	cmp	r0, lr
 80099ee:	f47f af71 	bne.w	80098d4 <forward_conv2d_nl_pool+0xce4>
 80099f2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80099f6:	f10b 0b01 	add.w	fp, fp, #1
 80099fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099fc:	4608      	mov	r0, r1
 80099fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009a02:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009a06:	4410      	add	r0, r2
 8009a08:	edc3 6a00 	vstr	s13, [r3]
 8009a0c:	440b      	add	r3, r1
 8009a0e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009a12:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009a16:	eba8 0802 	sub.w	r8, r8, r2
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a1e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a24:	4418      	add	r0, r3
 8009a26:	1acb      	subs	r3, r1, r3
 8009a28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009a30:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009a34:	455b      	cmp	r3, fp
 8009a36:	f47f af17 	bne.w	8009868 <forward_conv2d_nl_pool+0xc78>
 8009a3a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009a3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a44:	440a      	add	r2, r1
 8009a46:	3301      	adds	r3, #1
 8009a48:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009a4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a54:	3204      	adds	r2, #4
 8009a56:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009a5a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	f47f aedc 	bne.w	800981c <forward_conv2d_nl_pool+0xc2c>
 8009a64:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009a68:	f7ff bbf3 	b.w	8009252 <forward_conv2d_nl_pool+0x662>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e64d      	b.n	800970c <forward_conv2d_nl_pool+0xb1c>
 8009a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a74:	eef0 3a48 	vmov.f32	s7, s16
 8009a78:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8009a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a80:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009a84:	1b19      	subs	r1, r3, r4
 8009a86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009a8a:	1b1b      	subs	r3, r3, r4
 8009a8c:	e5c0      	b.n	8009610 <forward_conv2d_nl_pool+0xa20>
 8009a8e:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8009a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a94:	4621      	mov	r1, r4
 8009a96:	191a      	adds	r2, r3, r4
 8009a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a9c:	e590      	b.n	80095c0 <forward_conv2d_nl_pool+0x9d0>
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	e78b      	b.n	80099ba <forward_conv2d_nl_pool+0xdca>
 8009aa2:	eef0 6a46 	vmov.f32	s13, s12
 8009aa6:	e7a4      	b.n	80099f2 <forward_conv2d_nl_pool+0xe02>
 8009aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ab0:	eba8 0303 	sub.w	r3, r8, r3
 8009ab4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009ab8:	e6df      	b.n	800987a <forward_conv2d_nl_pool+0xc8a>
 8009aba:	eeb0 6a48 	vmov.f32	s12, s16
 8009abe:	e6b9      	b.n	8009834 <forward_conv2d_nl_pool+0xc44>
 8009ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ac4:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009ac8:	320a      	adds	r2, #10
 8009aca:	f022 0207 	bic.w	r2, r2, #7
 8009ace:	ebad 0d02 	sub.w	sp, sp, r2
 8009ad2:	aa0a      	add	r2, sp, #40	; 0x28
 8009ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ad8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009adc:	2a00      	cmp	r2, #0
 8009ade:	f000 814e 	beq.w	8009d7e <forward_conv2d_nl_pool+0x118e>
 8009ae2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ae6:	f8c7 b01c 	str.w	fp, [r7, #28]
 8009aea:	fb02 f303 	mul.w	r3, r2, r3
 8009aee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009af0:	f8c7 a014 	str.w	sl, [r7, #20]
 8009af4:	4411      	add	r1, r2
 8009af6:	667b      	str	r3, [r7, #100]	; 0x64
 8009af8:	1a9b      	subs	r3, r3, r2
 8009afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009afe:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b06:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009b0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8009b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b18:	67f9      	str	r1, [r7, #124]	; 0x7c
 8009b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b1e:	b13b      	cbz	r3, 8009b30 <forward_conv2d_nl_pool+0xf40>
 8009b20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b24:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009b28:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8009b2c:	f001 fbd6 	bl	800b2dc <memcpy>
 8009b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8134 	beq.w	8009da2 <forward_conv2d_nl_pool+0x11b2>
 8009b3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b3c:	ed93 6a00 	vldr	s12, [r3]
 8009b40:	3304      	adds	r3, #4
 8009b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b44:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 80fe 	beq.w	8009d4a <forward_conv2d_nl_pool+0x115a>
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b52:	f04f 0b00 	mov.w	fp, #0
 8009b56:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009b5a:	eb03 0802 	add.w	r8, r3, r2
 8009b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f2c0 8107 	blt.w	8009d90 <forward_conv2d_nl_pool+0x11a0>
 8009b82:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009b86:	2300      	movs	r3, #0
 8009b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b8a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8009b8e:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8009b92:	4540      	cmp	r0, r8
 8009b94:	bf94      	ite	ls
 8009b96:	ebc3 0300 	rsbls	r3, r3, r0
 8009b9a:	ebc3 0308 	rsbhi	r3, r3, r8
 8009b9e:	4422      	add	r2, r4
 8009ba0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009ba4:	1ac0      	subs	r0, r0, r3
 8009ba6:	eba4 0903 	sub.w	r9, r4, r3
 8009baa:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 8009bae:	fb03 f304 	mul.w	r3, r3, r4
 8009bb2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	f340 80e7 	ble.w	8009d8a <forward_conv2d_nl_pool+0x119a>
 8009bbc:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8009bc0:	f023 050f 	bic.w	r5, r3, #15
 8009bc4:	eef0 6a46 	vmov.f32	s13, s12
 8009bc8:	f04f 0e00 	mov.w	lr, #0
 8009bcc:	fb04 f000 	mul.w	r0, r4, r0
 8009bd0:	fb04 f909 	mul.w	r9, r4, r9
 8009bd4:	6638      	str	r0, [r7, #96]	; 0x60
 8009bd6:	1e68      	subs	r0, r5, #1
 8009bd8:	0900      	lsrs	r0, r0, #4
 8009bda:	3001      	adds	r0, #1
 8009bdc:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009be0:	0100      	lsls	r0, r0, #4
 8009be2:	62b8      	str	r0, [r7, #40]	; 0x28
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	f340 80ce 	ble.w	8009d86 <forward_conv2d_nl_pool+0x1196>
 8009bea:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009bee:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 8009bf8:	3610      	adds	r6, #16
 8009bfa:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8009bfe:	3040      	adds	r0, #64	; 0x40
 8009c00:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 8009c04:	42ae      	cmp	r6, r5
 8009c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c0a:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 8009c0e:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 8009c12:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009c16:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 8009c1a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009c1e:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 8009c22:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 8009c26:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8009c2a:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 8009c2e:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 8009c32:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8009c36:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009c3a:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 8009c3e:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 8009c42:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8009c46:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8009c4a:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8009c4e:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 8009c52:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009c56:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8009c5a:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 8009c5e:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8009c62:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8009c66:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 8009c6a:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 8009c6e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009c72:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8009c76:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8009c7a:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 8009c7e:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8009c82:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8009c86:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8009c8a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009c8e:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 8009c92:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8009c96:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009c9a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009c9e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009ca2:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009ca6:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009caa:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009cae:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009cb2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009cb6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009cba:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009cbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009cc2:	db97      	blt.n	8009bf4 <forward_conv2d_nl_pool+0x1004>
 8009cc4:	4451      	add	r1, sl
 8009cc6:	4452      	add	r2, sl
 8009cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	dd0f      	ble.n	8009cee <forward_conv2d_nl_pool+0x10fe>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	468c      	mov	ip, r1
 8009cd2:	4616      	mov	r6, r2
 8009cd4:	3401      	adds	r4, #1
 8009cd6:	ecb6 7a01 	vldmia	r6!, {s14}
 8009cda:	ecfc 7a01 	vldmia	ip!, {s15}
 8009cde:	42a3      	cmp	r3, r4
 8009ce0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ce4:	d1f6      	bne.n	8009cd4 <forward_conv2d_nl_pool+0x10e4>
 8009ce6:	1a18      	subs	r0, r3, r0
 8009ce8:	0080      	lsls	r0, r0, #2
 8009cea:	4402      	add	r2, r0
 8009cec:	4401      	add	r1, r0
 8009cee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009cf0:	f10e 0e01 	add.w	lr, lr, #1
 8009cf4:	4449      	add	r1, r9
 8009cf6:	4402      	add	r2, r0
 8009cf8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009cfc:	4570      	cmp	r0, lr
 8009cfe:	f47f af71 	bne.w	8009be4 <forward_conv2d_nl_pool+0xff4>
 8009d02:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009d06:	f10b 0b01 	add.w	fp, fp, #1
 8009d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009d12:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009d16:	4410      	add	r0, r2
 8009d18:	edc3 6a00 	vstr	s13, [r3]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009d22:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009d26:	eba8 0802 	sub.w	r8, r8, r2
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d2e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d34:	4418      	add	r0, r3
 8009d36:	1acb      	subs	r3, r1, r3
 8009d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d40:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009d44:	455b      	cmp	r3, fp
 8009d46:	f47f af17 	bne.w	8009b78 <forward_conv2d_nl_pool+0xf88>
 8009d4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009d4e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d56:	440a      	add	r2, r1
 8009d58:	3301      	adds	r3, #1
 8009d5a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8009d5e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d66:	3204      	adds	r2, #4
 8009d68:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8009d6c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009d70:	429a      	cmp	r2, r3
 8009d72:	f47f aed2 	bne.w	8009b1a <forward_conv2d_nl_pool+0xf2a>
 8009d76:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8009d7a:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009d7e:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009d82:	f7ff ba66 	b.w	8009252 <forward_conv2d_nl_pool+0x662>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e79f      	b.n	8009cca <forward_conv2d_nl_pool+0x10da>
 8009d8a:	eef0 6a46 	vmov.f32	s13, s12
 8009d8e:	e7b8      	b.n	8009d02 <forward_conv2d_nl_pool+0x1112>
 8009d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d98:	eba8 0303 	sub.w	r3, r8, r3
 8009d9c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009da0:	e6f3      	b.n	8009b8a <forward_conv2d_nl_pool+0xf9a>
 8009da2:	eeb0 6a48 	vmov.f32	s12, s16
 8009da6:	e6cd      	b.n	8009b44 <forward_conv2d_nl_pool+0xf54>
 8009da8:	b1a0      	cbz	r0, 8009dd4 <forward_conv2d_nl_pool+0x11e4>
 8009daa:	6881      	ldr	r1, [r0, #8]
 8009dac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009db0:	2201      	movs	r2, #1
 8009db2:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009db6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009dba:	f7fe bfc2 	b.w	8008d42 <forward_conv2d_nl_pool+0x152>
 8009dbe:	b190      	cbz	r0, 8009de6 <forward_conv2d_nl_pool+0x11f6>
 8009dc0:	6882      	ldr	r2, [r0, #8]
 8009dc2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8009dc6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009dd0:	f7fe bfb7 	b.w	8008d42 <forward_conv2d_nl_pool+0x152>
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8009dda:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8009dde:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009de2:	f7fe bfae 	b.w	8008d42 <forward_conv2d_nl_pool+0x152>
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009dec:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8009df0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8009df4:	f7fe bfa5 	b.w	8008d42 <forward_conv2d_nl_pool+0x152>
 8009df8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8009dfc:	f7fe bf84 	b.w	8008d08 <forward_conv2d_nl_pool+0x118>
 8009e00:	3118      	adds	r1, #24
 8009e02:	d010      	beq.n	8009e26 <forward_conv2d_nl_pool+0x1236>
 8009e04:	4662      	mov	r2, ip
 8009e06:	4664      	mov	r4, ip
 8009e08:	4661      	mov	r1, ip
 8009e0a:	f7fe bf23 	b.w	8008c54 <forward_conv2d_nl_pool+0x64>
 8009e0e:	4691      	mov	r9, r2
 8009e10:	f7fe bf08 	b.w	8008c24 <forward_conv2d_nl_pool+0x34>
 8009e14:	4613      	mov	r3, r2
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	deff      	udf	#255	; 0xff
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7fe bf18 	b.w	8008c50 <forward_conv2d_nl_pool+0x60>
 8009e20:	2300      	movs	r3, #0
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	deff      	udf	#255	; 0xff
 8009e26:	68cb      	ldr	r3, [r1, #12]
 8009e28:	deff      	udf	#255	; 0xff
 8009e2a:	bf00      	nop

08009e2c <forward_dense>:
 8009e2c:	6983      	ldr	r3, [r0, #24]
 8009e2e:	8819      	ldrh	r1, [r3, #0]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	f000 810c 	beq.w	800a04e <forward_dense+0x222>
 8009e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	ed2d 8b08 	vpush	{d8-d11}
 8009e3e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009e42:	b09b      	sub	sp, #108	; 0x6c
 8009e44:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009e48:	b107      	cbz	r7, 8009e4c <forward_dense+0x20>
 8009e4a:	683f      	ldr	r7, [r7, #0]
 8009e4c:	2901      	cmp	r1, #1
 8009e4e:	f240 80fb 	bls.w	800a048 <forward_dense+0x21c>
 8009e52:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8009e56:	b104      	cbz	r4, 8009e5a <forward_dense+0x2e>
 8009e58:	6824      	ldr	r4, [r4, #0]
 8009e5a:	2902      	cmp	r1, #2
 8009e5c:	f000 80f9 	beq.w	800a052 <forward_dense+0x226>
 8009e60:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 8516 	beq.w	800a896 <forward_dense+0xa6a>
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	920d      	str	r2, [sp, #52]	; 0x34
 8009e6e:	f11c 0218 	adds.w	r2, ip, #24
 8009e72:	f000 80f1 	beq.w	800a058 <forward_dense+0x22c>
 8009e76:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8009e7a:	2a01      	cmp	r2, #1
 8009e7c:	f240 8507 	bls.w	800a88e <forward_dense+0xa62>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80eb 	beq.w	800a05c <forward_dense+0x230>
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	930e      	str	r3, [sp, #56]	; 0x38
 8009e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e8c:	2903      	cmp	r1, #3
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	6998      	ldr	r0, [r3, #24]
 8009e92:	9200      	str	r2, [sp, #0]
 8009e94:	6803      	ldr	r3, [r0, #0]
 8009e96:	68e5      	ldr	r5, [r4, #12]
 8009e98:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8009e9c:	f3c3 5e41 	ubfx	lr, r3, #21, #2
 8009ea0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009ea4:	fa49 f20e 	asr.w	r2, r9, lr
 8009ea8:	68ae      	ldr	r6, [r5, #8]
 8009eaa:	68ed      	ldr	r5, [r5, #12]
 8009eac:	9212      	str	r2, [sp, #72]	; 0x48
 8009eae:	9a00      	ldr	r2, [sp, #0]
 8009eb0:	fb06 f608 	mul.w	r6, r6, r8
 8009eb4:	6852      	ldr	r2, [r2, #4]
 8009eb6:	9204      	str	r2, [sp, #16]
 8009eb8:	f000 84c7 	beq.w	800a84a <forward_dense+0xa1e>
 8009ebc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	f000 84c5 	beq.w	800a850 <forward_dense+0xa24>
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	f000 84c1 	beq.w	800a850 <forward_dense+0xa24>
 8009ece:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009ed2:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	f000 84c0 	beq.w	800a85c <forward_dense+0xa30>
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	f000 84bd 	beq.w	800a85c <forward_dense+0xa30>
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	69a3      	ldr	r3, [r4, #24]
 8009ee8:	00b6      	lsls	r6, r6, #2
 8009eea:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	6899      	ldr	r1, [r3, #8]
 8009ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ef4:	fb05 1506 	mla	r5, r5, r6, r1
 8009ef8:	6890      	ldr	r0, [r2, #8]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	eb01 0804 	add.w	r8, r1, r4
 8009f00:	42a9      	cmp	r1, r5
 8009f02:	940f      	str	r4, [sp, #60]	; 0x3c
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	9103      	str	r1, [sp, #12]
 8009f08:	9510      	str	r5, [sp, #64]	; 0x40
 8009f0a:	9302      	str	r3, [sp, #8]
 8009f0c:	f080 8097 	bcs.w	800a03e <forward_dense+0x212>
 8009f10:	9f04      	ldr	r7, [sp, #16]
 8009f12:	4ac4      	ldr	r2, [pc, #784]	; (800a224 <forward_dense+0x3f8>)
 8009f14:	f1a7 0310 	sub.w	r3, r7, #16
 8009f18:	08fe      	lsrs	r6, r7, #3
 8009f1a:	443a      	add	r2, r7
 8009f1c:	f007 0501 	and.w	r5, r7, #1
 8009f20:	091b      	lsrs	r3, r3, #4
 8009f22:	9607      	str	r6, [sp, #28]
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	9509      	str	r5, [sp, #36]	; 0x24
 8009f28:	3301      	adds	r3, #1
 8009f2a:	0174      	lsls	r4, r6, #5
 8009f2c:	ebc6 65c6 	rsb	r5, r6, r6, lsl #27
 8009f30:	1c56      	adds	r6, r2, #1
 8009f32:	019b      	lsls	r3, r3, #6
 8009f34:	f027 0101 	bic.w	r1, r7, #1
 8009f38:	1907      	adds	r7, r0, r4
 8009f3a:	3220      	adds	r2, #32
 8009f3c:	9318      	str	r3, [sp, #96]	; 0x60
 8009f3e:	1983      	adds	r3, r0, r6
 8009f40:	9700      	str	r7, [sp, #0]
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	ebc4 0381 	rsb	r3, r4, r1, lsl #2
 8009f48:	9f07      	ldr	r7, [sp, #28]
 8009f4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f4c:	016b      	lsls	r3, r5, #5
 8009f4e:	00bf      	lsls	r7, r7, #2
 8009f50:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800a228 <forward_dense+0x3fc>
 8009f54:	9306      	str	r3, [sp, #24]
 8009f56:	970b      	str	r7, [sp, #44]	; 0x2c
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	9f04      	ldr	r7, [sp, #16]
 8009f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f5e:	f007 030f 	and.w	r3, r7, #15
 8009f62:	9211      	str	r2, [sp, #68]	; 0x44
 8009f64:	9319      	str	r3, [sp, #100]	; 0x64
 8009f66:	465b      	mov	r3, fp
 8009f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f6a:	9906      	ldr	r1, [sp, #24]
 8009f6c:	6992      	ldr	r2, [r2, #24]
 8009f6e:	9800      	ldr	r0, [sp, #0]
 8009f70:	6894      	ldr	r4, [r2, #8]
 8009f72:	4401      	add	r1, r0
 8009f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f76:	9101      	str	r1, [sp, #4]
 8009f78:	2a00      	cmp	r2, #0
 8009f7a:	f000 8261 	beq.w	800a440 <forward_dense+0x614>
 8009f7e:	6992      	ldr	r2, [r2, #24]
 8009f80:	6896      	ldr	r6, [r2, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8260 	beq.w	800a448 <forward_dense+0x61c>
 8009f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f8a:	2a04      	cmp	r2, #4
 8009f8c:	f000 837c 	beq.w	800a688 <forward_dense+0x85c>
 8009f90:	9a03      	ldr	r2, [sp, #12]
 8009f92:	4542      	cmp	r2, r8
 8009f94:	d245      	bcs.n	800a022 <forward_dense+0x1f6>
 8009f96:	9805      	ldr	r0, [sp, #20]
 8009f98:	4696      	mov	lr, r2
 8009f9a:	9a06      	ldr	r2, [sp, #24]
 8009f9c:	f100 071f 	add.w	r7, r0, #31
 8009fa0:	3801      	subs	r0, #1
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	3204      	adds	r2, #4
 8009fa6:	9008      	str	r0, [sp, #32]
 8009fa8:	3120      	adds	r1, #32
 8009faa:	9800      	ldr	r0, [sp, #0]
 8009fac:	4401      	add	r1, r0
 8009fae:	4402      	add	r2, r0
 8009fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8009fb2:	1a7a      	subs	r2, r7, r1
 8009fb4:	9113      	str	r1, [sp, #76]	; 0x4c
 8009fb6:	0952      	lsrs	r2, r2, #5
 8009fb8:	00d1      	lsls	r1, r2, #3
 8009fba:	3201      	adds	r2, #1
 8009fbc:	3110      	adds	r1, #16
 8009fbe:	9116      	str	r1, [sp, #88]	; 0x58
 8009fc0:	00d1      	lsls	r1, r2, #3
 8009fc2:	9114      	str	r1, [sp, #80]	; 0x50
 8009fc4:	9901      	ldr	r1, [sp, #4]
 8009fc6:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8009fca:	9215      	str	r2, [sp, #84]	; 0x54
 8009fcc:	2e00      	cmp	r6, #0
 8009fce:	f000 8222 	beq.w	800a416 <forward_dense+0x5ea>
 8009fd2:	edd6 5a00 	vldr	s11, [r6]
 8009fd6:	3604      	adds	r6, #4
 8009fd8:	9a04      	ldr	r2, [sp, #16]
 8009fda:	2a07      	cmp	r2, #7
 8009fdc:	d840      	bhi.n	800a060 <forward_dense+0x234>
 8009fde:	9901      	ldr	r1, [sp, #4]
 8009fe0:	428f      	cmp	r7, r1
 8009fe2:	d910      	bls.n	800a006 <forward_dense+0x1da>
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	eddf 7a90 	vldr	s15, [pc, #576]	; 800a228 <forward_dense+0x3fc>
 8009fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fee:	ecb1 7a01 	vldmia	r1!, {s14}
 8009ff2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009ff6:	42b9      	cmp	r1, r7
 8009ff8:	ed92 6a00 	vldr	s12, [r2]
 8009ffc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a000:	d3f3      	bcc.n	8009fea <forward_dense+0x1be>
 800a002:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a006:	9a02      	ldr	r2, [sp, #8]
 800a008:	ecee 5a01 	vstmia	lr!, {s11}
 800a00c:	45c6      	cmp	lr, r8
 800a00e:	4414      	add	r4, r2
 800a010:	d3dc      	bcc.n	8009fcc <forward_dense+0x1a0>
 800a012:	9903      	ldr	r1, [sp, #12]
 800a014:	43ca      	mvns	r2, r1
 800a016:	4442      	add	r2, r8
 800a018:	f022 0203 	bic.w	r2, r2, #3
 800a01c:	3204      	adds	r2, #4
 800a01e:	188a      	adds	r2, r1, r2
 800a020:	9203      	str	r2, [sp, #12]
 800a022:	9900      	ldr	r1, [sp, #0]
 800a024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a026:	4608      	mov	r0, r1
 800a028:	9905      	ldr	r1, [sp, #20]
 800a02a:	4490      	add	r8, r2
 800a02c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a02e:	4411      	add	r1, r2
 800a030:	4410      	add	r0, r2
 800a032:	9a03      	ldr	r2, [sp, #12]
 800a034:	9105      	str	r1, [sp, #20]
 800a036:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a038:	9000      	str	r0, [sp, #0]
 800a03a:	428a      	cmp	r2, r1
 800a03c:	d394      	bcc.n	8009f68 <forward_dense+0x13c>
 800a03e:	b01b      	add	sp, #108	; 0x6c
 800a040:	ecbd 8b08 	vpop	{d8-d11}
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	2300      	movs	r3, #0
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	deff      	udf	#255	; 0xff
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	deff      	udf	#255	; 0xff
 800a052:	2300      	movs	r3, #0
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	deff      	udf	#255	; 0xff
 800a058:	920e      	str	r2, [sp, #56]	; 0x38
 800a05a:	e716      	b.n	8009e8a <forward_dense+0x5e>
 800a05c:	930e      	str	r3, [sp, #56]	; 0x38
 800a05e:	e714      	b.n	8009e8a <forward_dense+0x5e>
 800a060:	f004 0203 	and.w	r2, r4, #3
 800a064:	2a02      	cmp	r2, #2
 800a066:	f000 80e1 	beq.w	800a22c <forward_dense+0x400>
 800a06a:	2a03      	cmp	r2, #3
 800a06c:	f000 81e3 	beq.w	800a436 <forward_dense+0x60a>
 800a070:	2a01      	cmp	r2, #1
 800a072:	f000 81d3 	beq.w	800a41c <forward_dense+0x5f0>
 800a076:	9a08      	ldr	r2, [sp, #32]
 800a078:	9901      	ldr	r1, [sp, #4]
 800a07a:	428a      	cmp	r2, r1
 800a07c:	f0c0 8402 	bcc.w	800a884 <forward_dense+0xa58>
 800a080:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a082:	f104 0208 	add.w	r2, r4, #8
 800a086:	ed9f 6a68 	vldr	s12, [pc, #416]	; 800a228 <forward_dense+0x3fc>
 800a08a:	eb01 0c04 	add.w	ip, r1, r4
 800a08e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a090:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800a094:	3208      	adds	r2, #8
 800a096:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a09a:	3120      	adds	r1, #32
 800a09c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a0a0:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800a0a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0a8:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800a0ac:	ed95 7a00 	vldr	s14, [r5]
 800a0b0:	edd0 4a00 	vldr	s9, [r0]
 800a0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b8:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a0bc:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 800a0c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0c4:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 800a0c8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a0cc:	f812 5c0c 	ldrb.w	r5, [r2, #-12]
 800a0d0:	edd0 3a00 	vldr	s7, [r0]
 800a0d4:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a0d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a0dc:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800a0e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0e4:	ed11 3a0b 	vldr	s6, [r1, #-44]	; 0xffffffd4
 800a0e8:	ed11 4a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
 800a0ec:	eee3 7a85 	vfma.f32	s15, s7, s10
 800a0f0:	edd0 3a00 	vldr	s7, [r0]
 800a0f4:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a0f8:	ed11 5a09 	vldr	s10, [r1, #-36]	; 0xffffffdc
 800a0fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a100:	eee3 7a87 	vfma.f32	s15, s7, s14
 800a104:	ed95 7a00 	vldr	s14, [r5]
 800a108:	edd0 3a00 	vldr	s7, [r0]
 800a10c:	f812 5c0a 	ldrb.w	r5, [r2, #-10]
 800a110:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a114:	4594      	cmp	ip, r2
 800a116:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a11a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a11e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a122:	edd5 4a00 	vldr	s9, [r5]
 800a126:	ed90 7a00 	vldr	s14, [r0]
 800a12a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a12e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a132:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a136:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a13a:	d1a9      	bne.n	800a090 <forward_dense+0x264>
 800a13c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a13e:	18a1      	adds	r1, r4, r2
 800a140:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a142:	42ba      	cmp	r2, r7
 800a144:	f080 8164 	bcs.w	800a410 <forward_dense+0x5e4>
 800a148:	4610      	mov	r0, r2
 800a14a:	780d      	ldrb	r5, [r1, #0]
 800a14c:	ecf0 7a01 	vldmia	r0!, {s15}
 800a150:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a154:	4287      	cmp	r7, r0
 800a156:	ed95 7a00 	vldr	s14, [r5]
 800a15a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a15e:	f240 8157 	bls.w	800a410 <forward_dense+0x5e4>
 800a162:	784d      	ldrb	r5, [r1, #1]
 800a164:	f102 0008 	add.w	r0, r2, #8
 800a168:	edd2 7a01 	vldr	s15, [r2, #4]
 800a16c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a170:	4287      	cmp	r7, r0
 800a172:	ed95 7a00 	vldr	s14, [r5]
 800a176:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a17a:	f240 8149 	bls.w	800a410 <forward_dense+0x5e4>
 800a17e:	788d      	ldrb	r5, [r1, #2]
 800a180:	f102 000c 	add.w	r0, r2, #12
 800a184:	edd2 7a02 	vldr	s15, [r2, #8]
 800a188:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a18c:	4287      	cmp	r7, r0
 800a18e:	ed95 7a00 	vldr	s14, [r5]
 800a192:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a196:	f240 813b 	bls.w	800a410 <forward_dense+0x5e4>
 800a19a:	78cd      	ldrb	r5, [r1, #3]
 800a19c:	f102 0010 	add.w	r0, r2, #16
 800a1a0:	edd2 7a03 	vldr	s15, [r2, #12]
 800a1a4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a1a8:	4287      	cmp	r7, r0
 800a1aa:	ed95 7a00 	vldr	s14, [r5]
 800a1ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1b2:	f240 812d 	bls.w	800a410 <forward_dense+0x5e4>
 800a1b6:	790d      	ldrb	r5, [r1, #4]
 800a1b8:	f102 0014 	add.w	r0, r2, #20
 800a1bc:	edd2 7a04 	vldr	s15, [r2, #16]
 800a1c0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a1c4:	4287      	cmp	r7, r0
 800a1c6:	ed95 7a00 	vldr	s14, [r5]
 800a1ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1ce:	f240 811f 	bls.w	800a410 <forward_dense+0x5e4>
 800a1d2:	794d      	ldrb	r5, [r1, #5]
 800a1d4:	f102 0018 	add.w	r0, r2, #24
 800a1d8:	edd2 7a05 	vldr	s15, [r2, #20]
 800a1dc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a1e0:	4287      	cmp	r7, r0
 800a1e2:	ed95 7a00 	vldr	s14, [r5]
 800a1e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1ea:	f240 8111 	bls.w	800a410 <forward_dense+0x5e4>
 800a1ee:	798d      	ldrb	r5, [r1, #6]
 800a1f0:	f102 001c 	add.w	r0, r2, #28
 800a1f4:	edd2 7a06 	vldr	s15, [r2, #24]
 800a1f8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a1fc:	4287      	cmp	r7, r0
 800a1fe:	ed95 7a00 	vldr	s14, [r5]
 800a202:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a206:	f240 8103 	bls.w	800a410 <forward_dense+0x5e4>
 800a20a:	79c9      	ldrb	r1, [r1, #7]
 800a20c:	edd2 7a07 	vldr	s15, [r2, #28]
 800a210:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800a214:	ed92 7a00 	vldr	s14, [r2]
 800a218:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a21c:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a220:	e6f1      	b.n	800a006 <forward_dense+0x1da>
 800a222:	bf00      	nop
 800a224:	3ffffff8 	.word	0x3ffffff8
 800a228:	00000000 	.word	0x00000000
 800a22c:	eeb0 6a66 	vmov.f32	s12, s13
 800a230:	9901      	ldr	r1, [sp, #4]
 800a232:	4622      	mov	r2, r4
 800a234:	7810      	ldrb	r0, [r2, #0]
 800a236:	3104      	adds	r1, #4
 800a238:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a23c:	3201      	adds	r2, #1
 800a23e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a242:	ed90 7a00 	vldr	s14, [r0]
 800a246:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a24a:	7810      	ldrb	r0, [r2, #0]
 800a24c:	f101 0c04 	add.w	ip, r1, #4
 800a250:	edd1 7a00 	vldr	s15, [r1]
 800a254:	f102 0a01 	add.w	sl, r2, #1
 800a258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a25c:	ed90 7a00 	vldr	s14, [r0]
 800a260:	9808      	ldr	r0, [sp, #32]
 800a262:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a266:	4584      	cmp	ip, r0
 800a268:	d865      	bhi.n	800a336 <forward_dense+0x50a>
 800a26a:	3124      	adds	r1, #36	; 0x24
 800a26c:	f102 0911 	add.w	r9, r2, #17
 800a270:	3209      	adds	r2, #9
 800a272:	eba7 0b01 	sub.w	fp, r7, r1
 800a276:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800a27a:	eb09 09cb 	add.w	r9, r9, fp, lsl #3
 800a27e:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800a282:	3208      	adds	r2, #8
 800a284:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a288:	3120      	adds	r1, #32
 800a28a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a28e:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800a292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a296:	ed51 4a10 	vldr	s9, [r1, #-64]	; 0xffffffc0
 800a29a:	ed95 7a00 	vldr	s14, [r5]
 800a29e:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 800a2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a6:	ed90 7a00 	vldr	s14, [r0]
 800a2aa:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a2ae:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 800a2b2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a2b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2ba:	f812 5c0c 	ldrb.w	r5, [r2, #-12]
 800a2be:	ed90 7a00 	vldr	s14, [r0]
 800a2c2:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a2c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a2ca:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800a2ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2d2:	ed11 3a0b 	vldr	s6, [r1, #-44]	; 0xffffffd4
 800a2d6:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a2da:	ed11 4a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
 800a2de:	ed90 7a00 	vldr	s14, [r0]
 800a2e2:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a2e6:	ed11 5a09 	vldr	s10, [r1, #-36]	; 0xffffffdc
 800a2ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2ee:	eee3 7a87 	vfma.f32	s15, s7, s14
 800a2f2:	ed95 7a00 	vldr	s14, [r5]
 800a2f6:	edd0 3a00 	vldr	s7, [r0]
 800a2fa:	f812 5c0a 	ldrb.w	r5, [r2, #-10]
 800a2fe:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a302:	4591      	cmp	r9, r2
 800a304:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a308:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a30c:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a310:	edd5 4a00 	vldr	s9, [r5]
 800a314:	ed90 7a00 	vldr	s14, [r0]
 800a318:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a31c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a320:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a324:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a328:	d1a9      	bne.n	800a27e <forward_dense+0x452>
 800a32a:	f10b 0b01 	add.w	fp, fp, #1
 800a32e:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 800a332:	eb0c 1c4b 	add.w	ip, ip, fp, lsl #5
 800a336:	45bc      	cmp	ip, r7
 800a338:	d26a      	bcs.n	800a410 <forward_dense+0x5e4>
 800a33a:	4662      	mov	r2, ip
 800a33c:	f89a 1000 	ldrb.w	r1, [sl]
 800a340:	ecf2 7a01 	vldmia	r2!, {s15}
 800a344:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a348:	4297      	cmp	r7, r2
 800a34a:	ed91 7a00 	vldr	s14, [r1]
 800a34e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a352:	d95d      	bls.n	800a410 <forward_dense+0x5e4>
 800a354:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800a358:	f10c 0208 	add.w	r2, ip, #8
 800a35c:	eddc 7a01 	vldr	s15, [ip, #4]
 800a360:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a364:	4297      	cmp	r7, r2
 800a366:	ed91 7a00 	vldr	s14, [r1]
 800a36a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a36e:	d94f      	bls.n	800a410 <forward_dense+0x5e4>
 800a370:	f89a 1002 	ldrb.w	r1, [sl, #2]
 800a374:	f10c 020c 	add.w	r2, ip, #12
 800a378:	eddc 7a02 	vldr	s15, [ip, #8]
 800a37c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a380:	4297      	cmp	r7, r2
 800a382:	ed91 7a00 	vldr	s14, [r1]
 800a386:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a38a:	d941      	bls.n	800a410 <forward_dense+0x5e4>
 800a38c:	f89a 1003 	ldrb.w	r1, [sl, #3]
 800a390:	f10c 0210 	add.w	r2, ip, #16
 800a394:	eddc 7a03 	vldr	s15, [ip, #12]
 800a398:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a39c:	4297      	cmp	r7, r2
 800a39e:	ed91 7a00 	vldr	s14, [r1]
 800a3a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3a6:	d933      	bls.n	800a410 <forward_dense+0x5e4>
 800a3a8:	f89a 1004 	ldrb.w	r1, [sl, #4]
 800a3ac:	f10c 0214 	add.w	r2, ip, #20
 800a3b0:	eddc 7a04 	vldr	s15, [ip, #16]
 800a3b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a3b8:	4297      	cmp	r7, r2
 800a3ba:	ed91 7a00 	vldr	s14, [r1]
 800a3be:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3c2:	d925      	bls.n	800a410 <forward_dense+0x5e4>
 800a3c4:	f89a 1005 	ldrb.w	r1, [sl, #5]
 800a3c8:	f10c 0218 	add.w	r2, ip, #24
 800a3cc:	eddc 7a05 	vldr	s15, [ip, #20]
 800a3d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a3d4:	4297      	cmp	r7, r2
 800a3d6:	ed91 7a00 	vldr	s14, [r1]
 800a3da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3de:	d917      	bls.n	800a410 <forward_dense+0x5e4>
 800a3e0:	f89a 1006 	ldrb.w	r1, [sl, #6]
 800a3e4:	f10c 021c 	add.w	r2, ip, #28
 800a3e8:	eddc 7a06 	vldr	s15, [ip, #24]
 800a3ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a3f0:	4297      	cmp	r7, r2
 800a3f2:	ed91 7a00 	vldr	s14, [r1]
 800a3f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a3fa:	d909      	bls.n	800a410 <forward_dense+0x5e4>
 800a3fc:	f89a 2007 	ldrb.w	r2, [sl, #7]
 800a400:	eddc 7a07 	vldr	s15, [ip, #28]
 800a404:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a408:	ed92 7a00 	vldr	s14, [r2]
 800a40c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a410:	ee75 5a86 	vadd.f32	s11, s11, s12
 800a414:	e5f7      	b.n	800a006 <forward_dense+0x1da>
 800a416:	ed5f 5a7c 	vldr	s11, [pc, #-496]	; 800a228 <forward_dense+0x3fc>
 800a41a:	e5dd      	b.n	8009fd8 <forward_dense+0x1ac>
 800a41c:	7820      	ldrb	r0, [r4, #0]
 800a41e:	1c62      	adds	r2, r4, #1
 800a420:	9901      	ldr	r1, [sp, #4]
 800a422:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a426:	edd1 7a00 	vldr	s15, [r1]
 800a42a:	ed90 6a00 	vldr	s12, [r0]
 800a42e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a430:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a434:	e6fe      	b.n	800a234 <forward_dense+0x408>
 800a436:	9901      	ldr	r1, [sp, #4]
 800a438:	4622      	mov	r2, r4
 800a43a:	eeb0 6a66 	vmov.f32	s12, s13
 800a43e:	e704      	b.n	800a24a <forward_dense+0x41e>
 800a440:	4616      	mov	r6, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	f47f ada0 	bne.w	8009f88 <forward_dense+0x15c>
 800a448:	9a03      	ldr	r2, [sp, #12]
 800a44a:	4542      	cmp	r2, r8
 800a44c:	f4bf ade9 	bcs.w	800a022 <forward_dense+0x1f6>
 800a450:	4615      	mov	r5, r2
 800a452:	9a06      	ldr	r2, [sp, #24]
 800a454:	9901      	ldr	r1, [sp, #4]
 800a456:	f102 0c40 	add.w	ip, r2, #64	; 0x40
 800a45a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a45c:	f8dd e010 	ldr.w	lr, [sp, #16]
 800a460:	188f      	adds	r7, r1, r2
 800a462:	9900      	ldr	r1, [sp, #0]
 800a464:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a468:	4692      	mov	sl, r2
 800a46a:	448c      	add	ip, r1
 800a46c:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800a470:	2e00      	cmp	r6, #0
 800a472:	f000 80fd 	beq.w	800a670 <forward_dense+0x844>
 800a476:	f1be 0f0f 	cmp.w	lr, #15
 800a47a:	edd6 5a00 	vldr	s11, [r6]
 800a47e:	f106 0604 	add.w	r6, r6, #4
 800a482:	f240 80fb 	bls.w	800a67c <forward_dense+0x850>
 800a486:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a48a:	4662      	mov	r2, ip
 800a48c:	4670      	mov	r0, lr
 800a48e:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 800a228 <forward_dense+0x3fc>
 800a492:	ed11 7a0f 	vldr	s14, [r1, #-60]	; 0xffffffc4
 800a496:	3810      	subs	r0, #16
 800a498:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a49c:	3140      	adds	r1, #64	; 0x40
 800a49e:	ed11 5a20 	vldr	s10, [r1, #-128]	; 0xffffff80
 800a4a2:	280f      	cmp	r0, #15
 800a4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a8:	ed12 7a10 	vldr	s14, [r2, #-64]	; 0xffffffc0
 800a4ac:	ed11 2a1e 	vldr	s4, [r1, #-120]	; 0xffffff88
 800a4b0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a4b4:	ed52 2a1e 	vldr	s5, [r2, #-120]	; 0xffffff88
 800a4b8:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a4bc:	ed11 3a1d 	vldr	s6, [r1, #-116]	; 0xffffff8c
 800a4c0:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800a4c4:	ed12 4a1c 	vldr	s8, [r2, #-112]	; 0xffffff90
 800a4c8:	ed51 4a1c 	vldr	s9, [r1, #-112]	; 0xffffff90
 800a4cc:	ed12 5a1b 	vldr	s10, [r2, #-108]	; 0xffffff94
 800a4d0:	ed11 7a1b 	vldr	s14, [r1, #-108]	; 0xffffff94
 800a4d4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a4d8:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a4dc:	ed11 ba1a 	vldr	s22, [r1, #-104]	; 0xffffff98
 800a4e0:	ed51 aa19 	vldr	s21, [r1, #-100]	; 0xffffff9c
 800a4e4:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 800a4e8:	ed51 9a18 	vldr	s19, [r1, #-96]	; 0xffffffa0
 800a4ec:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800a4f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a4f4:	ed51 8a17 	vldr	s17, [r1, #-92]	; 0xffffffa4
 800a4f8:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800a4fc:	ed11 0a16 	vldr	s0, [r1, #-88]	; 0xffffffa8
 800a500:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a504:	ed11 1a15 	vldr	s2, [r1, #-84]	; 0xffffffac
 800a508:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800a50c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a510:	ed12 2a14 	vldr	s4, [r2, #-80]	; 0xffffffb0
 800a514:	ed51 2a14 	vldr	s5, [r1, #-80]	; 0xffffffb0
 800a518:	ed12 3a13 	vldr	s6, [r2, #-76]	; 0xffffffb4
 800a51c:	ed51 3a13 	vldr	s7, [r1, #-76]	; 0xffffffb4
 800a520:	ed12 4a12 	vldr	s8, [r2, #-72]	; 0xffffffb8
 800a524:	ed51 4a12 	vldr	s9, [r1, #-72]	; 0xffffffb8
 800a528:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a52c:	ed12 5a11 	vldr	s10, [r2, #-68]	; 0xffffffbc
 800a530:	ed11 7a11 	vldr	s14, [r1, #-68]	; 0xffffffbc
 800a534:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a538:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a53c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a540:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a544:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a548:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a54c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a550:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a554:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a558:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a55c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a560:	d897      	bhi.n	800a492 <forward_dense+0x666>
 800a562:	eb04 000a 	add.w	r0, r4, sl
 800a566:	465a      	mov	r2, fp
 800a568:	4639      	mov	r1, r7
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	d075      	beq.n	800a65a <forward_dense+0x82e>
 800a56e:	ed90 7a00 	vldr	s14, [r0]
 800a572:	2a01      	cmp	r2, #1
 800a574:	edd1 7a00 	vldr	s15, [r1]
 800a578:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a57c:	d06d      	beq.n	800a65a <forward_dense+0x82e>
 800a57e:	ed90 7a01 	vldr	s14, [r0, #4]
 800a582:	2a02      	cmp	r2, #2
 800a584:	edd1 7a01 	vldr	s15, [r1, #4]
 800a588:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a58c:	d065      	beq.n	800a65a <forward_dense+0x82e>
 800a58e:	ed90 7a02 	vldr	s14, [r0, #8]
 800a592:	2a03      	cmp	r2, #3
 800a594:	edd1 7a02 	vldr	s15, [r1, #8]
 800a598:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a59c:	d05d      	beq.n	800a65a <forward_dense+0x82e>
 800a59e:	ed90 7a03 	vldr	s14, [r0, #12]
 800a5a2:	2a04      	cmp	r2, #4
 800a5a4:	edd1 7a03 	vldr	s15, [r1, #12]
 800a5a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5ac:	d055      	beq.n	800a65a <forward_dense+0x82e>
 800a5ae:	ed90 7a04 	vldr	s14, [r0, #16]
 800a5b2:	2a05      	cmp	r2, #5
 800a5b4:	edd1 7a04 	vldr	s15, [r1, #16]
 800a5b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5bc:	d04d      	beq.n	800a65a <forward_dense+0x82e>
 800a5be:	ed90 7a05 	vldr	s14, [r0, #20]
 800a5c2:	2a06      	cmp	r2, #6
 800a5c4:	edd1 7a05 	vldr	s15, [r1, #20]
 800a5c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5cc:	d045      	beq.n	800a65a <forward_dense+0x82e>
 800a5ce:	ed90 7a06 	vldr	s14, [r0, #24]
 800a5d2:	2a07      	cmp	r2, #7
 800a5d4:	edd1 7a06 	vldr	s15, [r1, #24]
 800a5d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5dc:	d03d      	beq.n	800a65a <forward_dense+0x82e>
 800a5de:	ed90 7a07 	vldr	s14, [r0, #28]
 800a5e2:	2a08      	cmp	r2, #8
 800a5e4:	edd1 7a07 	vldr	s15, [r1, #28]
 800a5e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5ec:	d035      	beq.n	800a65a <forward_dense+0x82e>
 800a5ee:	ed90 7a08 	vldr	s14, [r0, #32]
 800a5f2:	2a09      	cmp	r2, #9
 800a5f4:	edd1 7a08 	vldr	s15, [r1, #32]
 800a5f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5fc:	d02d      	beq.n	800a65a <forward_dense+0x82e>
 800a5fe:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a602:	2a0a      	cmp	r2, #10
 800a604:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a608:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a60c:	d025      	beq.n	800a65a <forward_dense+0x82e>
 800a60e:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800a612:	2a0b      	cmp	r2, #11
 800a614:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a618:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a61c:	d01d      	beq.n	800a65a <forward_dense+0x82e>
 800a61e:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a622:	2a0c      	cmp	r2, #12
 800a624:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a628:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a62c:	d015      	beq.n	800a65a <forward_dense+0x82e>
 800a62e:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a632:	2a0d      	cmp	r2, #13
 800a634:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a638:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a63c:	d00d      	beq.n	800a65a <forward_dense+0x82e>
 800a63e:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800a642:	2a0e      	cmp	r2, #14
 800a644:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a648:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a64c:	d005      	beq.n	800a65a <forward_dense+0x82e>
 800a64e:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a652:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800a656:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a65a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a65e:	444c      	add	r4, r9
 800a660:	eca5 6a01 	vstmia	r5!, {s12}
 800a664:	4545      	cmp	r5, r8
 800a666:	f4bf acd4 	bcs.w	800a012 <forward_dense+0x1e6>
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	f47f af03 	bne.w	800a476 <forward_dense+0x64a>
 800a670:	f1be 0f0f 	cmp.w	lr, #15
 800a674:	eef0 5a66 	vmov.f32	s11, s13
 800a678:	f63f af05 	bhi.w	800a486 <forward_dense+0x65a>
 800a67c:	4672      	mov	r2, lr
 800a67e:	4620      	mov	r0, r4
 800a680:	9901      	ldr	r1, [sp, #4]
 800a682:	ed9f 6a86 	vldr	s12, [pc, #536]	; 800a89c <forward_dense+0xa70>
 800a686:	e770      	b.n	800a56a <forward_dense+0x73e>
 800a688:	9903      	ldr	r1, [sp, #12]
 800a68a:	4541      	cmp	r1, r8
 800a68c:	f4bf acc9 	bcs.w	800a022 <forward_dense+0x1f6>
 800a690:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a692:	468a      	mov	sl, r1
 800a694:	9800      	ldr	r0, [sp, #0]
 800a696:	4615      	mov	r5, r2
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	eb05 0b00 	add.w	fp, r5, r0
 800a69e:	3220      	adds	r2, #32
 800a6a0:	f10b 0107 	add.w	r1, fp, #7
 800a6a4:	4402      	add	r2, r0
 800a6a6:	910a      	str	r1, [sp, #40]	; 0x28
 800a6a8:	9208      	str	r2, [sp, #32]
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	f000 80b6 	beq.w	800a81c <forward_dense+0x9f0>
 800a6b0:	9a07      	ldr	r2, [sp, #28]
 800a6b2:	3604      	adds	r6, #4
 800a6b4:	ed56 5a01 	vldr	s11, [r6, #-4]
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	f000 80b5 	beq.w	800a828 <forward_dense+0x9fc>
 800a6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c0:	1d21      	adds	r1, r4, #4
 800a6c2:	ed9f 6a76 	vldr	s12, [pc, #472]	; 800a89c <forward_dense+0xa70>
 800a6c6:	1917      	adds	r7, r2, r4
 800a6c8:	9a08      	ldr	r2, [sp, #32]
 800a6ca:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 800a6ce:	3104      	adds	r1, #4
 800a6d0:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800a6d4:	3220      	adds	r2, #32
 800a6d6:	f000 050f 	and.w	r5, r0, #15
 800a6da:	0900      	lsrs	r0, r0, #4
 800a6dc:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800a6e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a6e4:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 800a6e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6ec:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 800a6f0:	ed95 7a00 	vldr	s14, [r5]
 800a6f4:	ed90 4a00 	vldr	s8, [r0]
 800a6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fc:	f811 0c07 	ldrb.w	r0, [r1, #-7]
 800a700:	ed52 2a0c 	vldr	s5, [r2, #-48]	; 0xffffffd0
 800a704:	0905      	lsrs	r5, r0, #4
 800a706:	f000 000f 	and.w	r0, r0, #15
 800a70a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a70e:	ed52 3a0b 	vldr	s7, [r2, #-44]	; 0xffffffd4
 800a712:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a716:	ed52 4a0a 	vldr	s9, [r2, #-40]	; 0xffffffd8
 800a71a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a71e:	ed12 7a09 	vldr	s14, [r2, #-36]	; 0xffffffdc
 800a722:	ed95 2a00 	vldr	s4, [r5]
 800a726:	ed90 4a00 	vldr	s8, [r0]
 800a72a:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800a72e:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a732:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 800a736:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a73a:	f005 050f 	and.w	r5, r5, #15
 800a73e:	428f      	cmp	r7, r1
 800a740:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a744:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a748:	ed9c 2a00 	vldr	s4, [ip]
 800a74c:	ea4f 1c10 	mov.w	ip, r0, lsr #4
 800a750:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a754:	ed95 3a00 	vldr	s6, [r5]
 800a758:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800a75c:	f000 000f 	and.w	r0, r0, #15
 800a760:	ed95 4a00 	vldr	s8, [r5]
 800a764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a768:	ed90 5a00 	vldr	s10, [r0]
 800a76c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a770:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a774:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a778:	eee5 7a07 	vfma.f32	s15, s10, s14
 800a77c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a780:	d1a3      	bne.n	800a6ca <forward_dense+0x89e>
 800a782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a784:	f8dd e000 	ldr.w	lr, [sp]
 800a788:	eb04 0902 	add.w	r9, r4, r2
 800a78c:	45de      	cmp	lr, fp
 800a78e:	d22c      	bcs.n	800a7ea <forward_dense+0x9be>
 800a790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a792:	f10e 0108 	add.w	r1, lr, #8
 800a796:	f10e 0710 	add.w	r7, lr, #16
 800a79a:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800a79e:	eba2 0c01 	sub.w	ip, r2, r1
 800a7a2:	f02c 0207 	bic.w	r2, ip, #7
 800a7a6:	4417      	add	r7, r2
 800a7a8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a7ac:	3108      	adds	r1, #8
 800a7ae:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a7b2:	f002 000f 	and.w	r0, r2, #15
 800a7b6:	0912      	lsrs	r2, r2, #4
 800a7b8:	ed11 5a04 	vldr	s10, [r1, #-16]
 800a7bc:	428f      	cmp	r7, r1
 800a7be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a7c6:	ed90 7a00 	vldr	s14, [r0]
 800a7ca:	edd2 4a00 	vldr	s9, [r2]
 800a7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a7d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a7da:	d1e5      	bne.n	800a7a8 <forward_dense+0x97c>
 800a7dc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a7e0:	f10c 0c01 	add.w	ip, ip, #1
 800a7e4:	44e1      	add	r9, ip
 800a7e6:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800a7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ec:	b312      	cbz	r2, 800a834 <forward_dense+0xa08>
 800a7ee:	f899 2000 	ldrb.w	r2, [r9]
 800a7f2:	edde 7a00 	vldr	s15, [lr]
 800a7f6:	0912      	lsrs	r2, r2, #4
 800a7f8:	9902      	ldr	r1, [sp, #8]
 800a7fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a7fe:	440c      	add	r4, r1
 800a800:	ed92 7a00 	vldr	s14, [r2]
 800a804:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a808:	ee76 5a25 	vadd.f32	s11, s12, s11
 800a80c:	ecea 5a01 	vstmia	sl!, {s11}
 800a810:	45d0      	cmp	r8, sl
 800a812:	f67f abfe 	bls.w	800a012 <forward_dense+0x1e6>
 800a816:	2e00      	cmp	r6, #0
 800a818:	f47f af4a 	bne.w	800a6b0 <forward_dense+0x884>
 800a81c:	9a07      	ldr	r2, [sp, #28]
 800a81e:	eef0 5a66 	vmov.f32	s11, s13
 800a822:	2a00      	cmp	r2, #0
 800a824:	f47f af4b 	bne.w	800a6be <forward_dense+0x892>
 800a828:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a82c:	46a1      	mov	r9, r4
 800a82e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800a89c <forward_dense+0xa70>
 800a832:	e7ab      	b.n	800a78c <forward_dense+0x960>
 800a834:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a838:	9a02      	ldr	r2, [sp, #8]
 800a83a:	4414      	add	r4, r2
 800a83c:	ecaa 6a01 	vstmia	sl!, {s12}
 800a840:	45c2      	cmp	sl, r8
 800a842:	f4ff af32 	bcc.w	800a6aa <forward_dense+0x87e>
 800a846:	f7ff bbe4 	b.w	800a012 <forward_dense+0x1e6>
 800a84a:	2300      	movs	r3, #0
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	deff      	udf	#255	; 0xff
 800a850:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a854:	4691      	mov	r9, r2
 800a856:	2b04      	cmp	r3, #4
 800a858:	f47f ab40 	bne.w	8009edc <forward_dense+0xb0>
 800a85c:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	f43f ab3f 	beq.w	8009ee6 <forward_dense+0xba>
 800a868:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a86c:	f000 fcca 	bl	800b204 <ai_array_get_byte_size>
 800a870:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a874:	4602      	mov	r2, r0
 800a876:	4659      	mov	r1, fp
 800a878:	4618      	mov	r0, r3
 800a87a:	469b      	mov	fp, r3
 800a87c:	f000 fd2e 	bl	800b2dc <memcpy>
 800a880:	f7ff bb31 	b.w	8009ee6 <forward_dense+0xba>
 800a884:	460a      	mov	r2, r1
 800a886:	ed9f 6a05 	vldr	s12, [pc, #20]	; 800a89c <forward_dense+0xa70>
 800a88a:	4621      	mov	r1, r4
 800a88c:	e459      	b.n	800a142 <forward_dense+0x316>
 800a88e:	2300      	movs	r3, #0
 800a890:	930e      	str	r3, [sp, #56]	; 0x38
 800a892:	f7ff bafa 	b.w	8009e8a <forward_dense+0x5e>
 800a896:	930d      	str	r3, [sp, #52]	; 0x34
 800a898:	f7ff bae9 	b.w	8009e6e <forward_dense+0x42>
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <pool_func_ap_array_f32>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	b09b      	sub	sp, #108	; 0x6c
 800a8a6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	6883      	ldr	r3, [r0, #8]
 800a8ac:	9102      	str	r1, [sp, #8]
 800a8ae:	9308      	str	r3, [sp, #32]
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800a8bc:	9210      	str	r2, [sp, #64]	; 0x40
 800a8be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c0:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800a8c4:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 800a8c8:	9304      	str	r3, [sp, #16]
 800a8ca:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800a8ce:	ea52 0401 	orrs.w	r4, r2, r1
 800a8d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8d4:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800a8d8:	9316      	str	r3, [sp, #88]	; 0x58
 800a8da:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800a8de:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e0:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800a8e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8e6:	f040 80b8 	bne.w	800aa5a <pool_func_ap_array_f32+0x1ba>
 800a8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ec:	9d02      	ldr	r5, [sp, #8]
 800a8ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a8f0:	1b58      	subs	r0, r3, r5
 800a8f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a8f4:	1e73      	subs	r3, r6, #1
 800a8f6:	3801      	subs	r0, #1
 800a8f8:	fb13 0307 	smlabb	r3, r3, r7, r0
 800a8fc:	0418      	lsls	r0, r3, #16
 800a8fe:	f140 80ac 	bpl.w	800aa5a <pool_func_ap_array_f32+0x1ba>
 800a902:	9b04      	ldr	r3, [sp, #16]
 800a904:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a906:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a908:	1a18      	subs	r0, r3, r0
 800a90a:	1e7b      	subs	r3, r7, #1
 800a90c:	3801      	subs	r0, #1
 800a90e:	469c      	mov	ip, r3
 800a910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a912:	fb1c 0303 	smlabb	r3, ip, r3, r0
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	f140 809f 	bpl.w	800aa5a <pool_func_ap_array_f32+0x1ba>
 800a91c:	2f00      	cmp	r7, #0
 800a91e:	f000 8096 	beq.w	800aa4e <pool_func_ap_array_f32+0x1ae>
 800a922:	2e00      	cmp	r6, #0
 800a924:	f000 8093 	beq.w	800aa4e <pool_func_ap_array_f32+0x1ae>
 800a928:	9b05      	ldr	r3, [sp, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 808f 	beq.w	800aa4e <pool_func_ap_array_f32+0x1ae>
 800a930:	fb05 f203 	mul.w	r2, r5, r3
 800a934:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a938:	ed9f 6aab 	vldr	s12, [pc, #684]	; 800abe8 <pool_func_ap_array_f32+0x348>
 800a93c:	4623      	mov	r3, r4
 800a93e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800a942:	9407      	str	r4, [sp, #28]
 800a944:	940e      	str	r4, [sp, #56]	; 0x38
 800a946:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a948:	2200      	movs	r2, #0
 800a94a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 800a94e:	fb01 f303 	mul.w	r3, r1, r3
 800a952:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
 800a956:	9209      	str	r2, [sp, #36]	; 0x24
 800a958:	9310      	str	r3, [sp, #64]	; 0x40
 800a95a:	9b02      	ldr	r3, [sp, #8]
 800a95c:	920c      	str	r2, [sp, #48]	; 0x30
 800a95e:	fb03 f309 	mul.w	r3, r3, r9
 800a962:	9311      	str	r3, [sp, #68]	; 0x44
 800a964:	4613      	mov	r3, r2
 800a966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a968:	920a      	str	r2, [sp, #40]	; 0x28
 800a96a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a96c:	f04f 0e00 	mov.w	lr, #0
 800a970:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a974:	b206      	sxth	r6, r0
 800a976:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800a97a:	46f4      	mov	ip, lr
 800a97c:	189a      	adds	r2, r3, r2
 800a97e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a980:	eba8 0800 	sub.w	r8, r8, r0
 800a984:	9805      	ldr	r0, [sp, #20]
 800a986:	18f3      	adds	r3, r6, r3
 800a988:	b209      	sxth	r1, r1
 800a98a:	fb00 f202 	mul.w	r2, r0, r2
 800a98e:	fa1f f888 	uxth.w	r8, r8
 800a992:	fb00 f303 	mul.w	r3, r0, r3
 800a996:	9201      	str	r2, [sp, #4]
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	454f      	cmp	r7, r9
 800a99c:	dd5a      	ble.n	800aa54 <pool_func_ap_array_f32+0x1b4>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	2400      	movs	r4, #0
 800a9a4:	eddf 7a91 	vldr	s15, [pc, #580]	; 800abec <pool_func_ap_array_f32+0x34c>
 800a9a8:	eb0c 0503 	add.w	r5, ip, r3
 800a9ac:	9b08      	ldr	r3, [sp, #32]
 800a9ae:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a9b2:	42b1      	cmp	r1, r6
 800a9b4:	dd0c      	ble.n	800a9d0 <pool_func_ap_array_f32+0x130>
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4633      	mov	r3, r6
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	ed92 7a00 	vldr	s14, [r2]
 800a9c0:	4452      	add	r2, sl
 800a9c2:	b21b      	sxth	r3, r3
 800a9c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	d1f6      	bne.n	800a9ba <pool_func_ap_array_f32+0x11a>
 800a9cc:	3401      	adds	r4, #1
 800a9ce:	4444      	add	r4, r8
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	445d      	add	r5, fp
 800a9d4:	b200      	sxth	r0, r0
 800a9d6:	4287      	cmp	r7, r0
 800a9d8:	d1eb      	bne.n	800a9b2 <pool_func_ap_array_f32+0x112>
 800a9da:	ee07 4a10 	vmov	s14, r4
 800a9de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	f10e 0e01 	add.w	lr, lr, #1
 800a9ec:	9a06      	ldr	r2, [sp, #24]
 800a9ee:	4463      	add	r3, ip
 800a9f0:	fa0f fe8e 	sxth.w	lr, lr
 800a9f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9f8:	46f4      	mov	ip, lr
 800a9fa:	edc3 6a00 	vstr	s13, [r3]
 800a9fe:	9b05      	ldr	r3, [sp, #20]
 800aa00:	459e      	cmp	lr, r3
 800aa02:	dbca      	blt.n	800a99a <pool_func_ap_array_f32+0xfa>
 800aa04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aa08:	461a      	mov	r2, r3
 800aa0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	4402      	add	r2, r0
 800aa10:	3101      	adds	r1, #1
 800aa12:	4403      	add	r3, r0
 800aa14:	b292      	uxth	r2, r2
 800aa16:	b209      	sxth	r1, r1
 800aa18:	920a      	str	r2, [sp, #40]	; 0x28
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa1e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa20:	460b      	mov	r3, r1
 800aa22:	428a      	cmp	r2, r1
 800aa24:	910c      	str	r1, [sp, #48]	; 0x30
 800aa26:	dca0      	bgt.n	800a96a <pool_func_ap_array_f32+0xca>
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa30:	9b07      	ldr	r3, [sp, #28]
 800aa32:	4402      	add	r2, r0
 800aa34:	3101      	adds	r1, #1
 800aa36:	4403      	add	r3, r0
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	b209      	sxth	r1, r1
 800aa3c:	9204      	str	r2, [sp, #16]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	460b      	mov	r3, r1
 800aa46:	428a      	cmp	r2, r1
 800aa48:	910e      	str	r1, [sp, #56]	; 0x38
 800aa4a:	f73f af7c 	bgt.w	800a946 <pool_func_ap_array_f32+0xa6>
 800aa4e:	b01b      	add	sp, #108	; 0x6c
 800aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa54:	eef0 6a46 	vmov.f32	s13, s12
 800aa58:	e7c5      	b.n	800a9e6 <pool_func_ap_array_f32+0x146>
 800aa5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0f6      	beq.n	800aa4e <pool_func_ap_array_f32+0x1ae>
 800aa60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0f3      	beq.n	800aa4e <pool_func_ap_array_f32+0x1ae>
 800aa66:	9d05      	ldr	r5, [sp, #20]
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	d0f0      	beq.n	800aa4e <pool_func_ap_array_f32+0x1ae>
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 800aa72:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 800abe8 <pool_func_ap_array_f32+0x348>
 800aa76:	1a9c      	subs	r4, r3, r2
 800aa78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa7a:	4252      	negs	r2, r2
 800aa7c:	1a58      	subs	r0, r3, r1
 800aa7e:	9b02      	ldr	r3, [sp, #8]
 800aa80:	b292      	uxth	r2, r2
 800aa82:	4249      	negs	r1, r1
 800aa84:	461e      	mov	r6, r3
 800aa86:	462b      	mov	r3, r5
 800aa88:	b2a4      	uxth	r4, r4
 800aa8a:	9214      	str	r2, [sp, #80]	; 0x50
 800aa8c:	fb06 f303 	mul.w	r3, r6, r3
 800aa90:	2600      	movs	r6, #0
 800aa92:	b280      	uxth	r0, r0
 800aa94:	9415      	str	r4, [sp, #84]	; 0x54
 800aa96:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	b289      	uxth	r1, r1
 800aa9e:	9617      	str	r6, [sp, #92]	; 0x5c
 800aaa0:	46e1      	mov	r9, ip
 800aaa2:	9018      	str	r0, [sp, #96]	; 0x60
 800aaa4:	9119      	str	r1, [sp, #100]	; 0x64
 800aaa6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aaac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800aaae:	1e4b      	subs	r3, r1, #1
 800aab0:	fb05 f202 	mul.w	r2, r5, r2
 800aab4:	b209      	sxth	r1, r1
 800aab6:	fa0f fa84 	sxth.w	sl, r4
 800aaba:	1b1b      	subs	r3, r3, r4
 800aabc:	9211      	str	r2, [sp, #68]	; 0x44
 800aabe:	46a6      	mov	lr, r4
 800aac0:	9a02      	ldr	r2, [sp, #8]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	9109      	str	r1, [sp, #36]	; 0x24
 800aac6:	fb02 f20a 	mul.w	r2, r2, sl
 800aaca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aacc:	f103 0c01 	add.w	ip, r3, #1
 800aad0:	900e      	str	r0, [sp, #56]	; 0x38
 800aad2:	9212      	str	r2, [sp, #72]	; 0x48
 800aad4:	4602      	mov	r2, r0
 800aad6:	910c      	str	r1, [sp, #48]	; 0x30
 800aad8:	9919      	ldr	r1, [sp, #100]	; 0x64
 800aada:	910b      	str	r1, [sp, #44]	; 0x2c
 800aadc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aade:	2100      	movs	r1, #0
 800aae0:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 800aae4:	441a      	add	r2, r3
 800aae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aae8:	9805      	ldr	r0, [sp, #20]
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 800aaf0:	fb00 f202 	mul.w	r2, r0, r2
 800aaf4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800aaf8:	fb00 f303 	mul.w	r3, r0, r3
 800aafc:	9104      	str	r1, [sp, #16]
 800aafe:	9207      	str	r2, [sp, #28]
 800ab00:	9103      	str	r1, [sp, #12]
 800ab02:	930a      	str	r3, [sp, #40]	; 0x28
 800ab04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab06:	4553      	cmp	r3, sl
 800ab08:	dd6b      	ble.n	800abe2 <pool_func_ap_array_f32+0x342>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800abec <pool_func_ap_array_f32+0x34c>
 800ab14:	189e      	adds	r6, r3, r2
 800ab16:	9b08      	ldr	r3, [sp, #32]
 800ab18:	9401      	str	r4, [sp, #4]
 800ab1a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800ab1e:	42bd      	cmp	r5, r7
 800ab20:	dd1c      	ble.n	800ab5c <pool_func_ap_array_f32+0x2bc>
 800ab22:	eb0e 0204 	add.w	r2, lr, r4
 800ab26:	eb0a 0304 	add.w	r3, sl, r4
 800ab2a:	43d2      	mvns	r2, r2
 800ab2c:	4598      	cmp	r8, r3
 800ab2e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800ab32:	dd13      	ble.n	800ab5c <pool_func_ap_array_f32+0x2bc>
 800ab34:	4631      	mov	r1, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	0418      	lsls	r0, r3, #16
 800ab3a:	d40a      	bmi.n	800ab52 <pool_func_ap_array_f32+0x2b2>
 800ab3c:	b14a      	cbz	r2, 800ab52 <pool_func_ap_array_f32+0x2b2>
 800ab3e:	9802      	ldr	r0, [sp, #8]
 800ab40:	4298      	cmp	r0, r3
 800ab42:	dd06      	ble.n	800ab52 <pool_func_ap_array_f32+0x2b2>
 800ab44:	edd1 7a00 	vldr	s15, [r1]
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab4e:	3001      	adds	r0, #1
 800ab50:	9001      	str	r0, [sp, #4]
 800ab52:	3301      	adds	r3, #1
 800ab54:	4459      	add	r1, fp
 800ab56:	b218      	sxth	r0, r3
 800ab58:	4285      	cmp	r5, r0
 800ab5a:	dced      	bgt.n	800ab38 <pool_func_ap_array_f32+0x298>
 800ab5c:	3401      	adds	r4, #1
 800ab5e:	444e      	add	r6, r9
 800ab60:	45a4      	cmp	ip, r4
 800ab62:	d1dc      	bne.n	800ab1e <pool_func_ap_array_f32+0x27e>
 800ab64:	eddd 7a01 	vldr	s15, [sp, #4]
 800ab68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	9a07      	ldr	r2, [sp, #28]
 800ab74:	9906      	ldr	r1, [sp, #24]
 800ab76:	4413      	add	r3, r2
 800ab78:	9a04      	ldr	r2, [sp, #16]
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ab80:	b212      	sxth	r2, r2
 800ab82:	edc3 6a00 	vstr	s13, [r3]
 800ab86:	9204      	str	r2, [sp, #16]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	9203      	str	r2, [sp, #12]
 800ab8c:	9a05      	ldr	r2, [sp, #20]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	dbb8      	blt.n	800ab04 <pool_func_ap_array_f32+0x264>
 800ab92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ab96:	461a      	mov	r2, r3
 800ab98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ab9c:	4403      	add	r3, r0
 800ab9e:	4402      	add	r2, r0
 800aba0:	3101      	adds	r1, #1
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	b209      	sxth	r1, r1
 800aba6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba8:	b292      	uxth	r2, r2
 800abaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abac:	920c      	str	r2, [sp, #48]	; 0x30
 800abae:	460a      	mov	r2, r1
 800abb0:	428b      	cmp	r3, r1
 800abb2:	910e      	str	r1, [sp, #56]	; 0x38
 800abb4:	dc92      	bgt.n	800aadc <pool_func_ap_array_f32+0x23c>
 800abb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800abba:	461a      	mov	r2, r3
 800abbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abbe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800abc0:	4403      	add	r3, r0
 800abc2:	4402      	add	r2, r0
 800abc4:	3101      	adds	r1, #1
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	b209      	sxth	r1, r1
 800abca:	9314      	str	r3, [sp, #80]	; 0x50
 800abcc:	b292      	uxth	r2, r2
 800abce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abd0:	9215      	str	r2, [sp, #84]	; 0x54
 800abd2:	460a      	mov	r2, r1
 800abd4:	428b      	cmp	r3, r1
 800abd6:	9117      	str	r1, [sp, #92]	; 0x5c
 800abd8:	f73f af65 	bgt.w	800aaa6 <pool_func_ap_array_f32+0x206>
 800abdc:	b01b      	add	sp, #108	; 0x6c
 800abde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe2:	eef0 6a46 	vmov.f32	s13, s12
 800abe6:	e7c3      	b.n	800ab70 <pool_func_ap_array_f32+0x2d0>
 800abe8:	7fc00000 	.word	0x7fc00000
 800abec:	00000000 	.word	0x00000000

0800abf0 <nl_func_relu_array_f32>:
 800abf0:	b430      	push	{r4, r5}
 800abf2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800abf6:	698d      	ldr	r5, [r1, #24]
 800abf8:	6981      	ldr	r1, [r0, #24]
 800abfa:	4414      	add	r4, r2
 800abfc:	68ab      	ldr	r3, [r5, #8]
 800abfe:	6889      	ldr	r1, [r1, #8]
 800ac00:	00a4      	lsls	r4, r4, #2
 800ac02:	191b      	adds	r3, r3, r4
 800ac04:	d210      	bcs.n	800ac28 <nl_func_relu_array_f32+0x38>
 800ac06:	3404      	adds	r4, #4
 800ac08:	3304      	adds	r3, #4
 800ac0a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ac2c <nl_func_relu_array_f32+0x3c>
 800ac0e:	4421      	add	r1, r4
 800ac10:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ac14:	f1a3 0208 	sub.w	r2, r3, #8
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800ac1e:	ed61 7a01 	vstmdb	r1!, {s15}
 800ac22:	68a8      	ldr	r0, [r5, #8]
 800ac24:	4290      	cmp	r0, r2
 800ac26:	d9f3      	bls.n	800ac10 <nl_func_relu_array_f32+0x20>
 800ac28:	bc30      	pop	{r4, r5}
 800ac2a:	4770      	bx	lr
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <nl_func_sm_array_f32>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	ed2d 8b04 	vpush	{d8-d9}
 800ac38:	b089      	sub	sp, #36	; 0x24
 800ac3a:	698f      	ldr	r7, [r1, #24]
 800ac3c:	6986      	ldr	r6, [r0, #24]
 800ac3e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 800ac42:	68bd      	ldr	r5, [r7, #8]
 800ac44:	eba2 040e 	sub.w	r4, r2, lr
 800ac48:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800ac4c:	9602      	str	r6, [sp, #8]
 800ac4e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800ac52:	68fc      	ldr	r4, [r7, #12]
 800ac54:	68b6      	ldr	r6, [r6, #8]
 800ac56:	eba2 020c 	sub.w	r2, r2, ip
 800ac5a:	42a5      	cmp	r5, r4
 800ac5c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800ac60:	d351      	bcc.n	800ad06 <nl_func_sm_array_f32+0xd6>
 800ac62:	9303      	str	r3, [sp, #12]
 800ac64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800ac6e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800ac72:	f1ce 0200 	rsb	r2, lr, #0
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	f1cc 0300 	rsb	r3, ip, #0
 800ac7c:	9204      	str	r2, [sp, #16]
 800ac7e:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	9b02      	ldr	r3, [sp, #8]
 800ac86:	9a07      	ldr	r2, [sp, #28]
 800ac88:	60bd      	str	r5, [r7, #8]
 800ac8a:	609e      	str	r6, [r3, #8]
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	6992      	ldr	r2, [r2, #24]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	6894      	ldr	r4, [r2, #8]
 800ac94:	9a03      	ldr	r2, [sp, #12]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	2a01      	cmp	r2, #1
 800ac9a:	ed93 8a00 	vldr	s16, [r3]
 800ac9e:	d93b      	bls.n	800ad18 <nl_func_sm_array_f32+0xe8>
 800aca0:	9901      	ldr	r1, [sp, #4]
 800aca2:	1d1a      	adds	r2, r3, #4
 800aca4:	eb03 0b01 	add.w	fp, r3, r1
 800aca8:	ecf2 7a01 	vldmia	r2!, {s15}
 800acac:	4593      	cmp	fp, r2
 800acae:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800acb2:	d1f9      	bne.n	800aca8 <nl_func_sm_array_f32+0x78>
 800acb4:	469a      	mov	sl, r3
 800acb6:	46a1      	mov	r9, r4
 800acb8:	46a0      	mov	r8, r4
 800acba:	eddf 8a1a 	vldr	s17, [pc, #104]	; 800ad24 <nl_func_sm_array_f32+0xf4>
 800acbe:	ecba 0a01 	vldmia	sl!, {s0}
 800acc2:	ee30 0a48 	vsub.f32	s0, s0, s16
 800acc6:	f002 ffb3 	bl	800dc30 <expf>
 800acca:	45d3      	cmp	fp, sl
 800accc:	eca8 0a01 	vstmia	r8!, {s0}
 800acd0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800acd4:	d1f3      	bne.n	800acbe <nl_func_sm_array_f32+0x8e>
 800acd6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acde:	d00b      	beq.n	800acf8 <nl_func_sm_array_f32+0xc8>
 800ace0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	441c      	add	r4, r3
 800ace8:	edd9 7a00 	vldr	s15, [r9]
 800acec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acf0:	ece9 7a01 	vstmia	r9!, {s15}
 800acf4:	454c      	cmp	r4, r9
 800acf6:	d1f7      	bne.n	800ace8 <nl_func_sm_array_f32+0xb8>
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	68fc      	ldr	r4, [r7, #12]
 800acfc:	441d      	add	r5, r3
 800acfe:	9b05      	ldr	r3, [sp, #20]
 800ad00:	42ac      	cmp	r4, r5
 800ad02:	441e      	add	r6, r3
 800ad04:	d9be      	bls.n	800ac84 <nl_func_sm_array_f32+0x54>
 800ad06:	9a02      	ldr	r2, [sp, #8]
 800ad08:	60bc      	str	r4, [r7, #8]
 800ad0a:	68d3      	ldr	r3, [r2, #12]
 800ad0c:	6093      	str	r3, [r2, #8]
 800ad0e:	b009      	add	sp, #36	; 0x24
 800ad10:	ecbd 8b04 	vpop	{d8-d9}
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d0ed      	beq.n	800acf8 <nl_func_sm_array_f32+0xc8>
 800ad1c:	9a01      	ldr	r2, [sp, #4]
 800ad1e:	eb03 0b02 	add.w	fp, r3, r2
 800ad22:	e7c7      	b.n	800acb4 <nl_func_sm_array_f32+0x84>
 800ad24:	00000000 	.word	0x00000000

0800ad28 <nl_func_relu_generic_array_f32>:
 800ad28:	b470      	push	{r4, r5, r6}
 800ad2a:	edd3 6a02 	vldr	s13, [r3, #8]
 800ad2e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800ad32:	6985      	ldr	r5, [r0, #24]
 800ad34:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ad38:	4414      	add	r4, r2
 800ad3a:	6989      	ldr	r1, [r1, #24]
 800ad3c:	00a4      	lsls	r4, r4, #2
 800ad3e:	68aa      	ldr	r2, [r5, #8]
 800ad40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad44:	6888      	ldr	r0, [r1, #8]
 800ad46:	4422      	add	r2, r4
 800ad48:	ed93 7a00 	vldr	s14, [r3]
 800ad4c:	4404      	add	r4, r0
 800ad4e:	ed93 6a01 	vldr	s12, [r3, #4]
 800ad52:	d420      	bmi.n	800ad96 <nl_func_relu_generic_array_f32+0x6e>
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d83b      	bhi.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800ad58:	1d23      	adds	r3, r4, #4
 800ad5a:	3204      	adds	r2, #4
 800ad5c:	e010      	b.n	800ad80 <nl_func_relu_generic_array_f32+0x58>
 800ad5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad62:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	d501      	bpl.n	800ad70 <nl_func_relu_generic_array_f32+0x48>
 800ad6c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800ad70:	f1a3 0408 	sub.w	r4, r3, #8
 800ad74:	ed62 7a01 	vstmdb	r2!, {s15}
 800ad78:	4603      	mov	r3, r0
 800ad7a:	6888      	ldr	r0, [r1, #8]
 800ad7c:	4284      	cmp	r4, r0
 800ad7e:	d327      	bcc.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800ad80:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ad84:	1f18      	subs	r0, r3, #4
 800ad86:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ad8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8e:	d4e6      	bmi.n	800ad5e <nl_func_relu_generic_array_f32+0x36>
 800ad90:	eef0 7a66 	vmov.f32	s15, s13
 800ad94:	e7ec      	b.n	800ad70 <nl_func_relu_generic_array_f32+0x48>
 800ad96:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9e:	d019      	beq.n	800add4 <nl_func_relu_generic_array_f32+0xac>
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d815      	bhi.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800ada4:	1d23      	adds	r3, r4, #4
 800ada6:	3204      	adds	r2, #4
 800ada8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800adac:	1f18      	subs	r0, r3, #4
 800adae:	f1a3 0508 	sub.w	r5, r3, #8
 800adb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adb6:	4603      	mov	r3, r0
 800adb8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800adc4:	d51c      	bpl.n	800ae00 <nl_func_relu_generic_array_f32+0xd8>
 800adc6:	ed62 6a01 	vstmdb	r2!, {s13}
 800adca:	6888      	ldr	r0, [r1, #8]
 800adcc:	42a8      	cmp	r0, r5
 800adce:	d9eb      	bls.n	800ada8 <nl_func_relu_generic_array_f32+0x80>
 800add0:	bc70      	pop	{r4, r5, r6}
 800add2:	4770      	bx	lr
 800add4:	42a0      	cmp	r0, r4
 800add6:	d8fb      	bhi.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800add8:	1d23      	adds	r3, r4, #4
 800adda:	3204      	adds	r2, #4
 800addc:	2600      	movs	r6, #0
 800adde:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ade2:	1f18      	subs	r0, r3, #4
 800ade4:	f1a3 0508 	sub.w	r5, r3, #8
 800ade8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adec:	4603      	mov	r3, r0
 800adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf2:	db0b      	blt.n	800ae0c <nl_func_relu_generic_array_f32+0xe4>
 800adf4:	ed62 7a01 	vstmdb	r2!, {s15}
 800adf8:	6888      	ldr	r0, [r1, #8]
 800adfa:	42a8      	cmp	r0, r5
 800adfc:	d9ef      	bls.n	800adde <nl_func_relu_generic_array_f32+0xb6>
 800adfe:	e7e7      	b.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800ae00:	ed62 7a01 	vstmdb	r2!, {s15}
 800ae04:	6888      	ldr	r0, [r1, #8]
 800ae06:	42a8      	cmp	r0, r5
 800ae08:	d9ce      	bls.n	800ada8 <nl_func_relu_generic_array_f32+0x80>
 800ae0a:	e7e1      	b.n	800add0 <nl_func_relu_generic_array_f32+0xa8>
 800ae0c:	f842 6d04 	str.w	r6, [r2, #-4]!
 800ae10:	6888      	ldr	r0, [r1, #8]
 800ae12:	42a8      	cmp	r0, r5
 800ae14:	d9e3      	bls.n	800adde <nl_func_relu_generic_array_f32+0xb6>
 800ae16:	e7db      	b.n	800add0 <nl_func_relu_generic_array_f32+0xa8>

0800ae18 <forward_relu>:
 800ae18:	6982      	ldr	r2, [r0, #24]
 800ae1a:	8813      	ldrh	r3, [r2, #0]
 800ae1c:	b333      	cbz	r3, 800ae6c <forward_relu+0x54>
 800ae1e:	6852      	ldr	r2, [r2, #4]
 800ae20:	6851      	ldr	r1, [r2, #4]
 800ae22:	b101      	cbz	r1, 800ae26 <forward_relu+0xe>
 800ae24:	6809      	ldr	r1, [r1, #0]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d91d      	bls.n	800ae66 <forward_relu+0x4e>
 800ae2a:	b4f0      	push	{r4, r5, r6, r7}
 800ae2c:	6917      	ldr	r7, [r2, #16]
 800ae2e:	b107      	cbz	r7, 800ae32 <forward_relu+0x1a>
 800ae30:	683f      	ldr	r7, [r7, #0]
 800ae32:	688c      	ldr	r4, [r1, #8]
 800ae34:	69c3      	ldr	r3, [r0, #28]
 800ae36:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d043      	beq.n	800aec6 <forward_relu+0xae>
 800ae3e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800ae42:	2d01      	cmp	r5, #1
 800ae44:	d014      	beq.n	800ae70 <forward_relu+0x58>
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	d06d      	beq.n	800af26 <forward_relu+0x10e>
 800ae4a:	68ce      	ldr	r6, [r1, #12]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ae52:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae56:	42a6      	cmp	r6, r4
 800ae58:	fb05 f202 	mul.w	r2, r5, r2
 800ae5c:	d1f9      	bne.n	800ae52 <forward_relu+0x3a>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	bcf0      	pop	{r4, r5, r6, r7}
 800ae62:	f7ff bf61 	b.w	800ad28 <nl_func_relu_generic_array_f32>
 800ae66:	2300      	movs	r3, #0
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	deff      	udf	#255	; 0xff
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	deff      	udf	#255	; 0xff
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	698e      	ldr	r6, [r1, #24]
 800ae74:	6890      	ldr	r0, [r2, #8]
 800ae76:	ed93 7a00 	vldr	s14, [r3]
 800ae7a:	68b2      	ldr	r2, [r6, #8]
 800ae7c:	b184      	cbz	r4, 800aea0 <forward_relu+0x88>
 800ae7e:	68cf      	ldr	r7, [r1, #12]
 800ae80:	4629      	mov	r1, r5
 800ae82:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800ae86:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800ae8a:	42a7      	cmp	r7, r4
 800ae8c:	fb03 f101 	mul.w	r1, r3, r1
 800ae90:	d1f9      	bne.n	800ae86 <forward_relu+0x6e>
 800ae92:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ae96:	440b      	add	r3, r1
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	18d2      	adds	r2, r2, r3
 800ae9c:	4418      	add	r0, r3
 800ae9e:	d238      	bcs.n	800af12 <forward_relu+0xfa>
 800aea0:	1d13      	adds	r3, r2, #4
 800aea2:	2400      	movs	r4, #0
 800aea4:	1d02      	adds	r2, r0, #4
 800aea6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aeaa:	1f19      	subs	r1, r3, #4
 800aeac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb4:	d82f      	bhi.n	800af16 <forward_relu+0xfe>
 800aeb6:	ed62 7a01 	vstmdb	r2!, {s15}
 800aeba:	3b08      	subs	r3, #8
 800aebc:	68b0      	ldr	r0, [r6, #8]
 800aebe:	4298      	cmp	r0, r3
 800aec0:	d827      	bhi.n	800af12 <forward_relu+0xfa>
 800aec2:	460b      	mov	r3, r1
 800aec4:	e7ef      	b.n	800aea6 <forward_relu+0x8e>
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	698d      	ldr	r5, [r1, #24]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	68ab      	ldr	r3, [r5, #8]
 800aece:	b184      	cbz	r4, 800aef2 <forward_relu+0xda>
 800aed0:	68ce      	ldr	r6, [r1, #12]
 800aed2:	2101      	movs	r1, #1
 800aed4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800aed8:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800aedc:	42a6      	cmp	r6, r4
 800aede:	fb00 f101 	mul.w	r1, r0, r1
 800aee2:	d1f9      	bne.n	800aed8 <forward_relu+0xc0>
 800aee4:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800aee8:	4408      	add	r0, r1
 800aeea:	0081      	lsls	r1, r0, #2
 800aeec:	185b      	adds	r3, r3, r1
 800aeee:	440a      	add	r2, r1
 800aef0:	d20f      	bcs.n	800af12 <forward_relu+0xfa>
 800aef2:	3304      	adds	r3, #4
 800aef4:	1d11      	adds	r1, r2, #4
 800aef6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800af2c <forward_relu+0x114>
 800aefa:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aefe:	f1a3 0208 	sub.w	r2, r3, #8
 800af02:	3b04      	subs	r3, #4
 800af04:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800af08:	ed61 7a01 	vstmdb	r1!, {s15}
 800af0c:	68a8      	ldr	r0, [r5, #8]
 800af0e:	4290      	cmp	r0, r2
 800af10:	d9f3      	bls.n	800aefa <forward_relu+0xe2>
 800af12:	bcf0      	pop	{r4, r5, r6, r7}
 800af14:	4770      	bx	lr
 800af16:	f842 4d04 	str.w	r4, [r2, #-4]!
 800af1a:	3b08      	subs	r3, #8
 800af1c:	68b0      	ldr	r0, [r6, #8]
 800af1e:	4298      	cmp	r0, r3
 800af20:	d8f7      	bhi.n	800af12 <forward_relu+0xfa>
 800af22:	460b      	mov	r3, r1
 800af24:	e7bf      	b.n	800aea6 <forward_relu+0x8e>
 800af26:	2201      	movs	r2, #1
 800af28:	e799      	b.n	800ae5e <forward_relu+0x46>
 800af2a:	bf00      	nop
 800af2c:	00000000 	.word	0x00000000

0800af30 <forward_sm>:
 800af30:	6982      	ldr	r2, [r0, #24]
 800af32:	8813      	ldrh	r3, [r2, #0]
 800af34:	b333      	cbz	r3, 800af84 <forward_sm+0x54>
 800af36:	6852      	ldr	r2, [r2, #4]
 800af38:	6851      	ldr	r1, [r2, #4]
 800af3a:	b101      	cbz	r1, 800af3e <forward_sm+0xe>
 800af3c:	6809      	ldr	r1, [r1, #0]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d91d      	bls.n	800af7e <forward_sm+0x4e>
 800af42:	6913      	ldr	r3, [r2, #16]
 800af44:	b1cb      	cbz	r3, 800af7a <forward_sm+0x4a>
 800af46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	b083      	sub	sp, #12
 800af4c:	688b      	ldr	r3, [r1, #8]
 800af4e:	68cd      	ldr	r5, [r1, #12]
 800af50:	68c2      	ldr	r2, [r0, #12]
 800af52:	0a1b      	lsrs	r3, r3, #8
 800af54:	686e      	ldr	r6, [r5, #4]
 800af56:	6857      	ldr	r7, [r2, #4]
 800af58:	d016      	beq.n	800af88 <forward_sm+0x58>
 800af5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800af5e:	2201      	movs	r2, #1
 800af60:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800af64:	429d      	cmp	r5, r3
 800af66:	fb04 f202 	mul.w	r2, r4, r2
 800af6a:	d1f9      	bne.n	800af60 <forward_sm+0x30>
 800af6c:	4633      	mov	r3, r6
 800af6e:	9701      	str	r7, [sp, #4]
 800af70:	9600      	str	r6, [sp, #0]
 800af72:	f7ff fe5d 	bl	800ac30 <nl_func_sm_array_f32>
 800af76:	b003      	add	sp, #12
 800af78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	deff      	udf	#255	; 0xff
 800af7e:	2300      	movs	r3, #0
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	deff      	udf	#255	; 0xff
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	deff      	udf	#255	; 0xff
 800af88:	2201      	movs	r2, #1
 800af8a:	e7ef      	b.n	800af6c <forward_sm+0x3c>

0800af8c <ai_check_custom_types>:
 800af8c:	4b13      	ldr	r3, [pc, #76]	; (800afdc <ai_check_custom_types+0x50>)
 800af8e:	b082      	sub	sp, #8
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	b118      	cbz	r0, 800af9e <ai_check_custom_types+0x12>
 800af96:	7803      	ldrb	r3, [r0, #0]
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d002      	beq.n	800afa2 <ai_check_custom_types+0x16>
 800af9c:	2000      	movs	r0, #0
 800af9e:	b002      	add	sp, #8
 800afa0:	4770      	bx	lr
 800afa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <ai_check_custom_types+0x28>
 800afaa:	2001      	movs	r0, #1
 800afac:	f080 0001 	eor.w	r0, r0, #1
 800afb0:	b002      	add	sp, #8
 800afb2:	4770      	bx	lr
 800afb4:	7842      	ldrb	r2, [r0, #1]
 800afb6:	3001      	adds	r0, #1
 800afb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d1f4      	bne.n	800afaa <ai_check_custom_types+0x1e>
 800afc0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800afc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d1ee      	bne.n	800afaa <ai_check_custom_types+0x1e>
 800afcc:	7842      	ldrb	r2, [r0, #1]
 800afce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d1e9      	bne.n	800afaa <ai_check_custom_types+0x1e>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e7e8      	b.n	800afac <ai_check_custom_types+0x20>
 800afda:	bf00      	nop
 800afdc:	0800e470 	.word	0x0800e470

0800afe0 <ai_layers_init_all>:
 800afe0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800afe2:	b16a      	cbz	r2, 800b000 <ai_layers_init_all+0x20>
 800afe4:	6913      	ldr	r3, [r2, #16]
 800afe6:	60d0      	str	r0, [r2, #12]
 800afe8:	429a      	cmp	r2, r3
 800afea:	f04f 0201 	mov.w	r2, #1
 800afee:	d007      	beq.n	800b000 <ai_layers_init_all+0x20>
 800aff0:	b133      	cbz	r3, 800b000 <ai_layers_init_all+0x20>
 800aff2:	6919      	ldr	r1, [r3, #16]
 800aff4:	3201      	adds	r2, #1
 800aff6:	60d8      	str	r0, [r3, #12]
 800aff8:	4299      	cmp	r1, r3
 800affa:	bf18      	it	ne
 800affc:	2900      	cmpne	r1, #0
 800affe:	d101      	bne.n	800b004 <ai_layers_init_all+0x24>
 800b000:	4610      	mov	r0, r2
 800b002:	4770      	bx	lr
 800b004:	460b      	mov	r3, r1
 800b006:	e7f4      	b.n	800aff2 <ai_layers_init_all+0x12>

0800b008 <ai_layers_post_init_all>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b00c:	b184      	cbz	r4, 800b030 <ai_layers_post_init_all+0x28>
 800b00e:	2500      	movs	r5, #0
 800b010:	6863      	ldr	r3, [r4, #4]
 800b012:	4620      	mov	r0, r4
 800b014:	07db      	lsls	r3, r3, #31
 800b016:	d503      	bpl.n	800b020 <ai_layers_post_init_all+0x18>
 800b018:	6a23      	ldr	r3, [r4, #32]
 800b01a:	b10b      	cbz	r3, 800b020 <ai_layers_post_init_all+0x18>
 800b01c:	3501      	adds	r5, #1
 800b01e:	4798      	blx	r3
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	429c      	cmp	r4, r3
 800b024:	bf18      	it	ne
 800b026:	2b00      	cmpne	r3, #0
 800b028:	461c      	mov	r4, r3
 800b02a:	d1f1      	bne.n	800b010 <ai_layers_post_init_all+0x8>
 800b02c:	4628      	mov	r0, r5
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	4625      	mov	r5, r4
 800b032:	e7fb      	b.n	800b02c <ai_layers_post_init_all+0x24>

0800b034 <ai_layers_forward_all>:
 800b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b038:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b03a:	4604      	mov	r4, r0
 800b03c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b03e:	2f00      	cmp	r7, #0
 800b040:	d02b      	beq.n	800b09a <ai_layers_forward_all+0x66>
 800b042:	2d00      	cmp	r5, #0
 800b044:	d03d      	beq.n	800b0c2 <ai_layers_forward_all+0x8e>
 800b046:	2600      	movs	r6, #0
 800b048:	6385      	str	r5, [r0, #56]	; 0x38
 800b04a:	4629      	mov	r1, r5
 800b04c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b04e:	2001      	movs	r0, #1
 800b050:	46b0      	mov	r8, r6
 800b052:	47b8      	blx	r7
 800b054:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b056:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b058:	2002      	movs	r0, #2
 800b05a:	47b8      	blx	r7
 800b05c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800b05e:	696b      	ldr	r3, [r5, #20]
 800b060:	4628      	mov	r0, r5
 800b062:	4798      	blx	r3
 800b064:	692b      	ldr	r3, [r5, #16]
 800b066:	2003      	movs	r0, #3
 800b068:	429d      	cmp	r5, r3
 800b06a:	4619      	mov	r1, r3
 800b06c:	d009      	beq.n	800b082 <ai_layers_forward_all+0x4e>
 800b06e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b070:	3601      	adds	r6, #1
 800b072:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b074:	47b8      	blx	r7
 800b076:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b078:	2900      	cmp	r1, #0
 800b07a:	d1ec      	bne.n	800b056 <ai_layers_forward_all+0x22>
 800b07c:	4630      	mov	r0, r6
 800b07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b082:	2100      	movs	r1, #0
 800b084:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800b088:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b08a:	3601      	adds	r6, #1
 800b08c:	47b8      	blx	r7
 800b08e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b090:	2900      	cmp	r1, #0
 800b092:	d1e0      	bne.n	800b056 <ai_layers_forward_all+0x22>
 800b094:	4630      	mov	r0, r6
 800b096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09a:	b195      	cbz	r5, 800b0c2 <ai_layers_forward_all+0x8e>
 800b09c:	463e      	mov	r6, r7
 800b09e:	6385      	str	r5, [r0, #56]	; 0x38
 800b0a0:	696b      	ldr	r3, [r5, #20]
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4798      	blx	r3
 800b0a6:	692b      	ldr	r3, [r5, #16]
 800b0a8:	3601      	adds	r6, #1
 800b0aa:	42ab      	cmp	r3, r5
 800b0ac:	461d      	mov	r5, r3
 800b0ae:	d003      	beq.n	800b0b8 <ai_layers_forward_all+0x84>
 800b0b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1f4      	bne.n	800b0a0 <ai_layers_forward_all+0x6c>
 800b0b6:	e7e1      	b.n	800b07c <ai_layers_forward_all+0x48>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c2:	462e      	mov	r6, r5
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ca:	bf00      	nop

0800b0cc <ai_layers_destroy_all>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b0d0:	b184      	cbz	r4, 800b0f4 <ai_layers_destroy_all+0x28>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	6863      	ldr	r3, [r4, #4]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	075b      	lsls	r3, r3, #29
 800b0da:	d503      	bpl.n	800b0e4 <ai_layers_destroy_all+0x18>
 800b0dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0de:	b10b      	cbz	r3, 800b0e4 <ai_layers_destroy_all+0x18>
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	4798      	blx	r3
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	bf18      	it	ne
 800b0ea:	2b00      	cmpne	r3, #0
 800b0ec:	461c      	mov	r4, r3
 800b0ee:	d1f1      	bne.n	800b0d4 <ai_layers_destroy_all+0x8>
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	4625      	mov	r5, r4
 800b0f6:	e7fb      	b.n	800b0f0 <ai_layers_destroy_all+0x24>

0800b0f8 <ai_version_get>:
 800b0f8:	0212      	lsls	r2, r2, #8
 800b0fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b0fe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b102:	4770      	bx	lr

0800b104 <ai_platform_version_get>:
 800b104:	0e01      	lsrs	r1, r0, #24
 800b106:	2300      	movs	r3, #0
 800b108:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800b10c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b110:	f361 0307 	bfi	r3, r1, #0, #8
 800b114:	b082      	sub	sp, #8
 800b116:	f362 230f 	bfi	r3, r2, #8, #8
 800b11a:	f360 4317 	bfi	r3, r0, #16, #8
 800b11e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800b122:	b002      	add	sp, #8
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop

0800b128 <get_tensor_byte_size>:
 800b128:	b410      	push	{r4}
 800b12a:	6984      	ldr	r4, [r0, #24]
 800b12c:	4b08      	ldr	r3, [pc, #32]	; (800b150 <get_tensor_byte_size+0x28>)
 800b12e:	6824      	ldr	r4, [r4, #0]
 800b130:	68c1      	ldr	r1, [r0, #12]
 800b132:	4a08      	ldr	r2, [pc, #32]	; (800b154 <get_tensor_byte_size+0x2c>)
 800b134:	4023      	ands	r3, r4
 800b136:	6940      	ldr	r0, [r0, #20]
 800b138:	68c9      	ldr	r1, [r1, #12]
 800b13a:	4293      	cmp	r3, r2
 800b13c:	68c0      	ldr	r0, [r0, #12]
 800b13e:	fb00 f001 	mul.w	r0, r0, r1
 800b142:	d101      	bne.n	800b148 <get_tensor_byte_size+0x20>
 800b144:	3007      	adds	r0, #7
 800b146:	08c0      	lsrs	r0, r0, #3
 800b148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	017fffff 	.word	0x017fffff
 800b154:	000400c0 	.word	0x000400c0

0800b158 <ai_array_to_buffer_fmt>:
 800b158:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d036      	beq.n	800b1ce <ai_array_to_buffer_fmt+0x76>
 800b160:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800b164:	4a20      	ldr	r2, [pc, #128]	; (800b1e8 <ai_array_to_buffer_fmt+0x90>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d00f      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b16a:	dd12      	ble.n	800b192 <ai_array_to_buffer_fmt+0x3a>
 800b16c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ec <ai_array_to_buffer_fmt+0x94>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00b      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b172:	dd1e      	ble.n	800b1b2 <ai_array_to_buffer_fmt+0x5a>
 800b174:	4a1e      	ldr	r2, [pc, #120]	; (800b1f0 <ai_array_to_buffer_fmt+0x98>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d007      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b17a:	dd30      	ble.n	800b1de <ai_array_to_buffer_fmt+0x86>
 800b17c:	4a1d      	ldr	r2, [pc, #116]	; (800b1f4 <ai_array_to_buffer_fmt+0x9c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d003      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b182:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800b186:	4293      	cmp	r3, r2
 800b188:	d11f      	bne.n	800b1ca <ai_array_to_buffer_fmt+0x72>
 800b18a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b18e:	4318      	orrs	r0, r3
 800b190:	4770      	bx	lr
 800b192:	4a19      	ldr	r2, [pc, #100]	; (800b1f8 <ai_array_to_buffer_fmt+0xa0>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d0f8      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b198:	dd0b      	ble.n	800b1b2 <ai_array_to_buffer_fmt+0x5a>
 800b19a:	4a18      	ldr	r2, [pc, #96]	; (800b1fc <ai_array_to_buffer_fmt+0xa4>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d0f4      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1a0:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d0f0      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1a8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d10c      	bne.n	800b1ca <ai_array_to_buffer_fmt+0x72>
 800b1b0:	e7eb      	b.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1b2:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d0e7      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1ba:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d0e3      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1c2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d0df      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1ca:	2340      	movs	r3, #64	; 0x40
 800b1cc:	e7dd      	b.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1ce:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <ai_array_to_buffer_fmt+0xa8>)
 800b1d0:	4003      	ands	r3, r0
 800b1d2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b1d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1da:	4318      	orrs	r0, r3
 800b1dc:	4770      	bx	lr
 800b1de:	3a0f      	subs	r2, #15
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d0d2      	beq.n	800b18a <ai_array_to_buffer_fmt+0x32>
 800b1e4:	e7f1      	b.n	800b1ca <ai_array_to_buffer_fmt+0x72>
 800b1e6:	bf00      	nop
 800b1e8:	00060440 	.word	0x00060440
 800b1ec:	00840447 	.word	0x00840447
 800b1f0:	0084084f 	.word	0x0084084f
 800b1f4:	00841040 	.word	0x00841040
 800b1f8:	00040447 	.word	0x00040447
 800b1fc:	0004084f 	.word	0x0004084f
 800b200:	00803fff 	.word	0x00803fff

0800b204 <ai_array_get_byte_size>:
 800b204:	b1e1      	cbz	r1, 800b240 <ai_array_get_byte_size+0x3c>
 800b206:	11c3      	asrs	r3, r0, #7
 800b208:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b20c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b210:	b410      	push	{r4}
 800b212:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800b216:	2804      	cmp	r0, #4
 800b218:	fb01 f104 	mul.w	r1, r1, r4
 800b21c:	f101 0107 	add.w	r1, r1, #7
 800b220:	f021 0107 	bic.w	r1, r1, #7
 800b224:	fa21 f102 	lsr.w	r1, r1, r2
 800b228:	d00c      	beq.n	800b244 <ai_array_get_byte_size+0x40>
 800b22a:	2808      	cmp	r0, #8
 800b22c:	d103      	bne.n	800b236 <ai_array_get_byte_size+0x32>
 800b22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b232:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b236:	3107      	adds	r1, #7
 800b238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23c:	08c8      	lsrs	r0, r1, #3
 800b23e:	4770      	bx	lr
 800b240:	4608      	mov	r0, r1
 800b242:	4770      	bx	lr
 800b244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b250:	3107      	adds	r1, #7
 800b252:	08c8      	lsrs	r0, r1, #3
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop

0800b258 <ai_array_get_data_byte_size>:
 800b258:	b161      	cbz	r1, 800b274 <ai_array_get_data_byte_size+0x1c>
 800b25a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b25e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b262:	fb01 f103 	mul.w	r1, r1, r3
 800b266:	3107      	adds	r1, #7
 800b268:	f021 0107 	bic.w	r1, r1, #7
 800b26c:	40c1      	lsrs	r1, r0
 800b26e:	3107      	adds	r1, #7
 800b270:	08c8      	lsrs	r0, r1, #3
 800b272:	4770      	bx	lr
 800b274:	4608      	mov	r0, r1
 800b276:	4770      	bx	lr

0800b278 <__errno>:
 800b278:	4b01      	ldr	r3, [pc, #4]	; (800b280 <__errno+0x8>)
 800b27a:	6818      	ldr	r0, [r3, #0]
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	24000a78 	.word	0x24000a78

0800b284 <__libc_init_array>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	4d0d      	ldr	r5, [pc, #52]	; (800b2bc <__libc_init_array+0x38>)
 800b288:	4c0d      	ldr	r4, [pc, #52]	; (800b2c0 <__libc_init_array+0x3c>)
 800b28a:	1b64      	subs	r4, r4, r5
 800b28c:	10a4      	asrs	r4, r4, #2
 800b28e:	2600      	movs	r6, #0
 800b290:	42a6      	cmp	r6, r4
 800b292:	d109      	bne.n	800b2a8 <__libc_init_array+0x24>
 800b294:	4d0b      	ldr	r5, [pc, #44]	; (800b2c4 <__libc_init_array+0x40>)
 800b296:	4c0c      	ldr	r4, [pc, #48]	; (800b2c8 <__libc_init_array+0x44>)
 800b298:	f002 fd3e 	bl	800dd18 <_init>
 800b29c:	1b64      	subs	r4, r4, r5
 800b29e:	10a4      	asrs	r4, r4, #2
 800b2a0:	2600      	movs	r6, #0
 800b2a2:	42a6      	cmp	r6, r4
 800b2a4:	d105      	bne.n	800b2b2 <__libc_init_array+0x2e>
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ac:	4798      	blx	r3
 800b2ae:	3601      	adds	r6, #1
 800b2b0:	e7ee      	b.n	800b290 <__libc_init_array+0xc>
 800b2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b6:	4798      	blx	r3
 800b2b8:	3601      	adds	r6, #1
 800b2ba:	e7f2      	b.n	800b2a2 <__libc_init_array+0x1e>
 800b2bc:	0804aa80 	.word	0x0804aa80
 800b2c0:	0804aa80 	.word	0x0804aa80
 800b2c4:	0804aa80 	.word	0x0804aa80
 800b2c8:	0804aa84 	.word	0x0804aa84

0800b2cc <malloc>:
 800b2cc:	4b02      	ldr	r3, [pc, #8]	; (800b2d8 <malloc+0xc>)
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	f000 b885 	b.w	800b3e0 <_malloc_r>
 800b2d6:	bf00      	nop
 800b2d8:	24000a78 	.word	0x24000a78

0800b2dc <memcpy>:
 800b2dc:	440a      	add	r2, r1
 800b2de:	4291      	cmp	r1, r2
 800b2e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2e4:	d100      	bne.n	800b2e8 <memcpy+0xc>
 800b2e6:	4770      	bx	lr
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2f2:	4291      	cmp	r1, r2
 800b2f4:	d1f9      	bne.n	800b2ea <memcpy+0xe>
 800b2f6:	bd10      	pop	{r4, pc}

0800b2f8 <memset>:
 800b2f8:	4402      	add	r2, r0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d100      	bne.n	800b302 <memset+0xa>
 800b300:	4770      	bx	lr
 800b302:	f803 1b01 	strb.w	r1, [r3], #1
 800b306:	e7f9      	b.n	800b2fc <memset+0x4>

0800b308 <_free_r>:
 800b308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b30a:	2900      	cmp	r1, #0
 800b30c:	d044      	beq.n	800b398 <_free_r+0x90>
 800b30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b312:	9001      	str	r0, [sp, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f1a1 0404 	sub.w	r4, r1, #4
 800b31a:	bfb8      	it	lt
 800b31c:	18e4      	addlt	r4, r4, r3
 800b31e:	f001 fb39 	bl	800c994 <__malloc_lock>
 800b322:	4a1e      	ldr	r2, [pc, #120]	; (800b39c <_free_r+0x94>)
 800b324:	9801      	ldr	r0, [sp, #4]
 800b326:	6813      	ldr	r3, [r2, #0]
 800b328:	b933      	cbnz	r3, 800b338 <_free_r+0x30>
 800b32a:	6063      	str	r3, [r4, #4]
 800b32c:	6014      	str	r4, [r2, #0]
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b334:	f001 bb34 	b.w	800c9a0 <__malloc_unlock>
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d908      	bls.n	800b34e <_free_r+0x46>
 800b33c:	6825      	ldr	r5, [r4, #0]
 800b33e:	1961      	adds	r1, r4, r5
 800b340:	428b      	cmp	r3, r1
 800b342:	bf01      	itttt	eq
 800b344:	6819      	ldreq	r1, [r3, #0]
 800b346:	685b      	ldreq	r3, [r3, #4]
 800b348:	1949      	addeq	r1, r1, r5
 800b34a:	6021      	streq	r1, [r4, #0]
 800b34c:	e7ed      	b.n	800b32a <_free_r+0x22>
 800b34e:	461a      	mov	r2, r3
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	b10b      	cbz	r3, 800b358 <_free_r+0x50>
 800b354:	42a3      	cmp	r3, r4
 800b356:	d9fa      	bls.n	800b34e <_free_r+0x46>
 800b358:	6811      	ldr	r1, [r2, #0]
 800b35a:	1855      	adds	r5, r2, r1
 800b35c:	42a5      	cmp	r5, r4
 800b35e:	d10b      	bne.n	800b378 <_free_r+0x70>
 800b360:	6824      	ldr	r4, [r4, #0]
 800b362:	4421      	add	r1, r4
 800b364:	1854      	adds	r4, r2, r1
 800b366:	42a3      	cmp	r3, r4
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	d1e0      	bne.n	800b32e <_free_r+0x26>
 800b36c:	681c      	ldr	r4, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	6053      	str	r3, [r2, #4]
 800b372:	4421      	add	r1, r4
 800b374:	6011      	str	r1, [r2, #0]
 800b376:	e7da      	b.n	800b32e <_free_r+0x26>
 800b378:	d902      	bls.n	800b380 <_free_r+0x78>
 800b37a:	230c      	movs	r3, #12
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	e7d6      	b.n	800b32e <_free_r+0x26>
 800b380:	6825      	ldr	r5, [r4, #0]
 800b382:	1961      	adds	r1, r4, r5
 800b384:	428b      	cmp	r3, r1
 800b386:	bf04      	itt	eq
 800b388:	6819      	ldreq	r1, [r3, #0]
 800b38a:	685b      	ldreq	r3, [r3, #4]
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	bf04      	itt	eq
 800b390:	1949      	addeq	r1, r1, r5
 800b392:	6021      	streq	r1, [r4, #0]
 800b394:	6054      	str	r4, [r2, #4]
 800b396:	e7ca      	b.n	800b32e <_free_r+0x26>
 800b398:	b003      	add	sp, #12
 800b39a:	bd30      	pop	{r4, r5, pc}
 800b39c:	24003b4c 	.word	0x24003b4c

0800b3a0 <sbrk_aligned>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	4e0e      	ldr	r6, [pc, #56]	; (800b3dc <sbrk_aligned+0x3c>)
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	6831      	ldr	r1, [r6, #0]
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	b911      	cbnz	r1, 800b3b2 <sbrk_aligned+0x12>
 800b3ac:	f000 fcce 	bl	800bd4c <_sbrk_r>
 800b3b0:	6030      	str	r0, [r6, #0]
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 fcc9 	bl	800bd4c <_sbrk_r>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	d00a      	beq.n	800b3d4 <sbrk_aligned+0x34>
 800b3be:	1cc4      	adds	r4, r0, #3
 800b3c0:	f024 0403 	bic.w	r4, r4, #3
 800b3c4:	42a0      	cmp	r0, r4
 800b3c6:	d007      	beq.n	800b3d8 <sbrk_aligned+0x38>
 800b3c8:	1a21      	subs	r1, r4, r0
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f000 fcbe 	bl	800bd4c <_sbrk_r>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d101      	bne.n	800b3d8 <sbrk_aligned+0x38>
 800b3d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3d8:	4620      	mov	r0, r4
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	24003b50 	.word	0x24003b50

0800b3e0 <_malloc_r>:
 800b3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e4:	1ccd      	adds	r5, r1, #3
 800b3e6:	f025 0503 	bic.w	r5, r5, #3
 800b3ea:	3508      	adds	r5, #8
 800b3ec:	2d0c      	cmp	r5, #12
 800b3ee:	bf38      	it	cc
 800b3f0:	250c      	movcc	r5, #12
 800b3f2:	2d00      	cmp	r5, #0
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	db01      	blt.n	800b3fc <_malloc_r+0x1c>
 800b3f8:	42a9      	cmp	r1, r5
 800b3fa:	d905      	bls.n	800b408 <_malloc_r+0x28>
 800b3fc:	230c      	movs	r3, #12
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	2600      	movs	r6, #0
 800b402:	4630      	mov	r0, r6
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	4e2e      	ldr	r6, [pc, #184]	; (800b4c4 <_malloc_r+0xe4>)
 800b40a:	f001 fac3 	bl	800c994 <__malloc_lock>
 800b40e:	6833      	ldr	r3, [r6, #0]
 800b410:	461c      	mov	r4, r3
 800b412:	bb34      	cbnz	r4, 800b462 <_malloc_r+0x82>
 800b414:	4629      	mov	r1, r5
 800b416:	4638      	mov	r0, r7
 800b418:	f7ff ffc2 	bl	800b3a0 <sbrk_aligned>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	4604      	mov	r4, r0
 800b420:	d14d      	bne.n	800b4be <_malloc_r+0xde>
 800b422:	6834      	ldr	r4, [r6, #0]
 800b424:	4626      	mov	r6, r4
 800b426:	2e00      	cmp	r6, #0
 800b428:	d140      	bne.n	800b4ac <_malloc_r+0xcc>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	4631      	mov	r1, r6
 800b42e:	4638      	mov	r0, r7
 800b430:	eb04 0803 	add.w	r8, r4, r3
 800b434:	f000 fc8a 	bl	800bd4c <_sbrk_r>
 800b438:	4580      	cmp	r8, r0
 800b43a:	d13a      	bne.n	800b4b2 <_malloc_r+0xd2>
 800b43c:	6821      	ldr	r1, [r4, #0]
 800b43e:	3503      	adds	r5, #3
 800b440:	1a6d      	subs	r5, r5, r1
 800b442:	f025 0503 	bic.w	r5, r5, #3
 800b446:	3508      	adds	r5, #8
 800b448:	2d0c      	cmp	r5, #12
 800b44a:	bf38      	it	cc
 800b44c:	250c      	movcc	r5, #12
 800b44e:	4629      	mov	r1, r5
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff ffa5 	bl	800b3a0 <sbrk_aligned>
 800b456:	3001      	adds	r0, #1
 800b458:	d02b      	beq.n	800b4b2 <_malloc_r+0xd2>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	442b      	add	r3, r5
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	e00e      	b.n	800b480 <_malloc_r+0xa0>
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	1b52      	subs	r2, r2, r5
 800b466:	d41e      	bmi.n	800b4a6 <_malloc_r+0xc6>
 800b468:	2a0b      	cmp	r2, #11
 800b46a:	d916      	bls.n	800b49a <_malloc_r+0xba>
 800b46c:	1961      	adds	r1, r4, r5
 800b46e:	42a3      	cmp	r3, r4
 800b470:	6025      	str	r5, [r4, #0]
 800b472:	bf18      	it	ne
 800b474:	6059      	strne	r1, [r3, #4]
 800b476:	6863      	ldr	r3, [r4, #4]
 800b478:	bf08      	it	eq
 800b47a:	6031      	streq	r1, [r6, #0]
 800b47c:	5162      	str	r2, [r4, r5]
 800b47e:	604b      	str	r3, [r1, #4]
 800b480:	4638      	mov	r0, r7
 800b482:	f104 060b 	add.w	r6, r4, #11
 800b486:	f001 fa8b 	bl	800c9a0 <__malloc_unlock>
 800b48a:	f026 0607 	bic.w	r6, r6, #7
 800b48e:	1d23      	adds	r3, r4, #4
 800b490:	1af2      	subs	r2, r6, r3
 800b492:	d0b6      	beq.n	800b402 <_malloc_r+0x22>
 800b494:	1b9b      	subs	r3, r3, r6
 800b496:	50a3      	str	r3, [r4, r2]
 800b498:	e7b3      	b.n	800b402 <_malloc_r+0x22>
 800b49a:	6862      	ldr	r2, [r4, #4]
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	bf0c      	ite	eq
 800b4a0:	6032      	streq	r2, [r6, #0]
 800b4a2:	605a      	strne	r2, [r3, #4]
 800b4a4:	e7ec      	b.n	800b480 <_malloc_r+0xa0>
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	6864      	ldr	r4, [r4, #4]
 800b4aa:	e7b2      	b.n	800b412 <_malloc_r+0x32>
 800b4ac:	4634      	mov	r4, r6
 800b4ae:	6876      	ldr	r6, [r6, #4]
 800b4b0:	e7b9      	b.n	800b426 <_malloc_r+0x46>
 800b4b2:	230c      	movs	r3, #12
 800b4b4:	603b      	str	r3, [r7, #0]
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	f001 fa72 	bl	800c9a0 <__malloc_unlock>
 800b4bc:	e7a1      	b.n	800b402 <_malloc_r+0x22>
 800b4be:	6025      	str	r5, [r4, #0]
 800b4c0:	e7de      	b.n	800b480 <_malloc_r+0xa0>
 800b4c2:	bf00      	nop
 800b4c4:	24003b4c 	.word	0x24003b4c

0800b4c8 <__cvt>:
 800b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ca:	ed2d 8b02 	vpush	{d8}
 800b4ce:	eeb0 8b40 	vmov.f64	d8, d0
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	4617      	mov	r7, r2
 800b4d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b4d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b4da:	ee18 2a90 	vmov	r2, s17
 800b4de:	f025 0520 	bic.w	r5, r5, #32
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	bfb6      	itet	lt
 800b4e6:	222d      	movlt	r2, #45	; 0x2d
 800b4e8:	2200      	movge	r2, #0
 800b4ea:	eeb1 8b40 	vneglt.f64	d8, d0
 800b4ee:	2d46      	cmp	r5, #70	; 0x46
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	d004      	beq.n	800b500 <__cvt+0x38>
 800b4f6:	2d45      	cmp	r5, #69	; 0x45
 800b4f8:	d100      	bne.n	800b4fc <__cvt+0x34>
 800b4fa:	3401      	adds	r4, #1
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	e000      	b.n	800b502 <__cvt+0x3a>
 800b500:	2103      	movs	r1, #3
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	ab02      	add	r3, sp, #8
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4622      	mov	r2, r4
 800b50c:	4633      	mov	r3, r6
 800b50e:	eeb0 0b48 	vmov.f64	d0, d8
 800b512:	f000 fccd 	bl	800beb0 <_dtoa_r>
 800b516:	2d47      	cmp	r5, #71	; 0x47
 800b518:	d101      	bne.n	800b51e <__cvt+0x56>
 800b51a:	07fb      	lsls	r3, r7, #31
 800b51c:	d51a      	bpl.n	800b554 <__cvt+0x8c>
 800b51e:	2d46      	cmp	r5, #70	; 0x46
 800b520:	eb00 0204 	add.w	r2, r0, r4
 800b524:	d10c      	bne.n	800b540 <__cvt+0x78>
 800b526:	7803      	ldrb	r3, [r0, #0]
 800b528:	2b30      	cmp	r3, #48	; 0x30
 800b52a:	d107      	bne.n	800b53c <__cvt+0x74>
 800b52c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b534:	bf1c      	itt	ne
 800b536:	f1c4 0401 	rsbne	r4, r4, #1
 800b53a:	6034      	strne	r4, [r6, #0]
 800b53c:	6833      	ldr	r3, [r6, #0]
 800b53e:	441a      	add	r2, r3
 800b540:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b548:	bf08      	it	eq
 800b54a:	9203      	streq	r2, [sp, #12]
 800b54c:	2130      	movs	r1, #48	; 0x30
 800b54e:	9b03      	ldr	r3, [sp, #12]
 800b550:	4293      	cmp	r3, r2
 800b552:	d307      	bcc.n	800b564 <__cvt+0x9c>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b558:	1a1b      	subs	r3, r3, r0
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	b005      	add	sp, #20
 800b55e:	ecbd 8b02 	vpop	{d8}
 800b562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b564:	1c5c      	adds	r4, r3, #1
 800b566:	9403      	str	r4, [sp, #12]
 800b568:	7019      	strb	r1, [r3, #0]
 800b56a:	e7f0      	b.n	800b54e <__cvt+0x86>

0800b56c <__exponent>:
 800b56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b56e:	4603      	mov	r3, r0
 800b570:	2900      	cmp	r1, #0
 800b572:	bfb8      	it	lt
 800b574:	4249      	neglt	r1, r1
 800b576:	f803 2b02 	strb.w	r2, [r3], #2
 800b57a:	bfb4      	ite	lt
 800b57c:	222d      	movlt	r2, #45	; 0x2d
 800b57e:	222b      	movge	r2, #43	; 0x2b
 800b580:	2909      	cmp	r1, #9
 800b582:	7042      	strb	r2, [r0, #1]
 800b584:	dd2a      	ble.n	800b5dc <__exponent+0x70>
 800b586:	f10d 0407 	add.w	r4, sp, #7
 800b58a:	46a4      	mov	ip, r4
 800b58c:	270a      	movs	r7, #10
 800b58e:	46a6      	mov	lr, r4
 800b590:	460a      	mov	r2, r1
 800b592:	fb91 f6f7 	sdiv	r6, r1, r7
 800b596:	fb07 1516 	mls	r5, r7, r6, r1
 800b59a:	3530      	adds	r5, #48	; 0x30
 800b59c:	2a63      	cmp	r2, #99	; 0x63
 800b59e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b5a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	dcf1      	bgt.n	800b58e <__exponent+0x22>
 800b5aa:	3130      	adds	r1, #48	; 0x30
 800b5ac:	f1ae 0502 	sub.w	r5, lr, #2
 800b5b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5b4:	1c44      	adds	r4, r0, #1
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4561      	cmp	r1, ip
 800b5ba:	d30a      	bcc.n	800b5d2 <__exponent+0x66>
 800b5bc:	f10d 0209 	add.w	r2, sp, #9
 800b5c0:	eba2 020e 	sub.w	r2, r2, lr
 800b5c4:	4565      	cmp	r5, ip
 800b5c6:	bf88      	it	hi
 800b5c8:	2200      	movhi	r2, #0
 800b5ca:	4413      	add	r3, r2
 800b5cc:	1a18      	subs	r0, r3, r0
 800b5ce:	b003      	add	sp, #12
 800b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5da:	e7ed      	b.n	800b5b8 <__exponent+0x4c>
 800b5dc:	2330      	movs	r3, #48	; 0x30
 800b5de:	3130      	adds	r1, #48	; 0x30
 800b5e0:	7083      	strb	r3, [r0, #2]
 800b5e2:	70c1      	strb	r1, [r0, #3]
 800b5e4:	1d03      	adds	r3, r0, #4
 800b5e6:	e7f1      	b.n	800b5cc <__exponent+0x60>

0800b5e8 <_printf_float>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	b08b      	sub	sp, #44	; 0x2c
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	461f      	mov	r7, r3
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	f001 f9c7 	bl	800c98c <_localeconv_r>
 800b5fe:	f8d0 b000 	ldr.w	fp, [r0]
 800b602:	4658      	mov	r0, fp
 800b604:	f7f4 fe84 	bl	8000310 <strlen>
 800b608:	2300      	movs	r3, #0
 800b60a:	9308      	str	r3, [sp, #32]
 800b60c:	f8d8 3000 	ldr.w	r3, [r8]
 800b610:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b614:	6822      	ldr	r2, [r4, #0]
 800b616:	3307      	adds	r3, #7
 800b618:	f023 0307 	bic.w	r3, r3, #7
 800b61c:	f103 0108 	add.w	r1, r3, #8
 800b620:	f8c8 1000 	str.w	r1, [r8]
 800b624:	4682      	mov	sl, r0
 800b626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b62a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b62e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b890 <_printf_float+0x2a8>
 800b632:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b636:	eeb0 6bc0 	vabs.f64	d6, d0
 800b63a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b642:	dd24      	ble.n	800b68e <_printf_float+0xa6>
 800b644:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64c:	d502      	bpl.n	800b654 <_printf_float+0x6c>
 800b64e:	232d      	movs	r3, #45	; 0x2d
 800b650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b654:	4b90      	ldr	r3, [pc, #576]	; (800b898 <_printf_float+0x2b0>)
 800b656:	4891      	ldr	r0, [pc, #580]	; (800b89c <_printf_float+0x2b4>)
 800b658:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b65c:	bf94      	ite	ls
 800b65e:	4698      	movls	r8, r3
 800b660:	4680      	movhi	r8, r0
 800b662:	2303      	movs	r3, #3
 800b664:	6123      	str	r3, [r4, #16]
 800b666:	f022 0204 	bic.w	r2, r2, #4
 800b66a:	2300      	movs	r3, #0
 800b66c:	6022      	str	r2, [r4, #0]
 800b66e:	9304      	str	r3, [sp, #16]
 800b670:	9700      	str	r7, [sp, #0]
 800b672:	4633      	mov	r3, r6
 800b674:	aa09      	add	r2, sp, #36	; 0x24
 800b676:	4621      	mov	r1, r4
 800b678:	4628      	mov	r0, r5
 800b67a:	f000 f9d3 	bl	800ba24 <_printf_common>
 800b67e:	3001      	adds	r0, #1
 800b680:	f040 808a 	bne.w	800b798 <_printf_float+0x1b0>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b688:	b00b      	add	sp, #44	; 0x2c
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b696:	d709      	bvc.n	800b6ac <_printf_float+0xc4>
 800b698:	ee10 3a90 	vmov	r3, s1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfbc      	itt	lt
 800b6a0:	232d      	movlt	r3, #45	; 0x2d
 800b6a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6a6:	487e      	ldr	r0, [pc, #504]	; (800b8a0 <_printf_float+0x2b8>)
 800b6a8:	4b7e      	ldr	r3, [pc, #504]	; (800b8a4 <_printf_float+0x2bc>)
 800b6aa:	e7d5      	b.n	800b658 <_printf_float+0x70>
 800b6ac:	6863      	ldr	r3, [r4, #4]
 800b6ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b6b2:	9104      	str	r1, [sp, #16]
 800b6b4:	1c59      	adds	r1, r3, #1
 800b6b6:	d13c      	bne.n	800b732 <_printf_float+0x14a>
 800b6b8:	2306      	movs	r3, #6
 800b6ba:	6063      	str	r3, [r4, #4]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9303      	str	r3, [sp, #12]
 800b6c0:	ab08      	add	r3, sp, #32
 800b6c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b6c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6ca:	ab07      	add	r3, sp, #28
 800b6cc:	6861      	ldr	r1, [r4, #4]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	6022      	str	r2, [r4, #0]
 800b6d2:	f10d 031b 	add.w	r3, sp, #27
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff fef6 	bl	800b4c8 <__cvt>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	9907      	ldr	r1, [sp, #28]
 800b6e0:	2b47      	cmp	r3, #71	; 0x47
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	d108      	bne.n	800b6f8 <_printf_float+0x110>
 800b6e6:	1cc8      	adds	r0, r1, #3
 800b6e8:	db02      	blt.n	800b6f0 <_printf_float+0x108>
 800b6ea:	6863      	ldr	r3, [r4, #4]
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	dd41      	ble.n	800b774 <_printf_float+0x18c>
 800b6f0:	f1a9 0902 	sub.w	r9, r9, #2
 800b6f4:	fa5f f989 	uxtb.w	r9, r9
 800b6f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b6fc:	d820      	bhi.n	800b740 <_printf_float+0x158>
 800b6fe:	3901      	subs	r1, #1
 800b700:	464a      	mov	r2, r9
 800b702:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b706:	9107      	str	r1, [sp, #28]
 800b708:	f7ff ff30 	bl	800b56c <__exponent>
 800b70c:	9a08      	ldr	r2, [sp, #32]
 800b70e:	9004      	str	r0, [sp, #16]
 800b710:	1813      	adds	r3, r2, r0
 800b712:	2a01      	cmp	r2, #1
 800b714:	6123      	str	r3, [r4, #16]
 800b716:	dc02      	bgt.n	800b71e <_printf_float+0x136>
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	07d2      	lsls	r2, r2, #31
 800b71c:	d501      	bpl.n	800b722 <_printf_float+0x13a>
 800b71e:	3301      	adds	r3, #1
 800b720:	6123      	str	r3, [r4, #16]
 800b722:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0a2      	beq.n	800b670 <_printf_float+0x88>
 800b72a:	232d      	movs	r3, #45	; 0x2d
 800b72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b730:	e79e      	b.n	800b670 <_printf_float+0x88>
 800b732:	9904      	ldr	r1, [sp, #16]
 800b734:	2947      	cmp	r1, #71	; 0x47
 800b736:	d1c1      	bne.n	800b6bc <_printf_float+0xd4>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1bf      	bne.n	800b6bc <_printf_float+0xd4>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e7bc      	b.n	800b6ba <_printf_float+0xd2>
 800b740:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b744:	d118      	bne.n	800b778 <_printf_float+0x190>
 800b746:	2900      	cmp	r1, #0
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	dd0b      	ble.n	800b764 <_printf_float+0x17c>
 800b74c:	6121      	str	r1, [r4, #16]
 800b74e:	b913      	cbnz	r3, 800b756 <_printf_float+0x16e>
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	07d0      	lsls	r0, r2, #31
 800b754:	d502      	bpl.n	800b75c <_printf_float+0x174>
 800b756:	3301      	adds	r3, #1
 800b758:	440b      	add	r3, r1
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2300      	movs	r3, #0
 800b75e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b760:	9304      	str	r3, [sp, #16]
 800b762:	e7de      	b.n	800b722 <_printf_float+0x13a>
 800b764:	b913      	cbnz	r3, 800b76c <_printf_float+0x184>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	07d2      	lsls	r2, r2, #31
 800b76a:	d501      	bpl.n	800b770 <_printf_float+0x188>
 800b76c:	3302      	adds	r3, #2
 800b76e:	e7f4      	b.n	800b75a <_printf_float+0x172>
 800b770:	2301      	movs	r3, #1
 800b772:	e7f2      	b.n	800b75a <_printf_float+0x172>
 800b774:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b778:	9b08      	ldr	r3, [sp, #32]
 800b77a:	4299      	cmp	r1, r3
 800b77c:	db05      	blt.n	800b78a <_printf_float+0x1a2>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	6121      	str	r1, [r4, #16]
 800b782:	07d8      	lsls	r0, r3, #31
 800b784:	d5ea      	bpl.n	800b75c <_printf_float+0x174>
 800b786:	1c4b      	adds	r3, r1, #1
 800b788:	e7e7      	b.n	800b75a <_printf_float+0x172>
 800b78a:	2900      	cmp	r1, #0
 800b78c:	bfd4      	ite	le
 800b78e:	f1c1 0202 	rsble	r2, r1, #2
 800b792:	2201      	movgt	r2, #1
 800b794:	4413      	add	r3, r2
 800b796:	e7e0      	b.n	800b75a <_printf_float+0x172>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	055a      	lsls	r2, r3, #21
 800b79c:	d407      	bmi.n	800b7ae <_printf_float+0x1c6>
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d12a      	bne.n	800b802 <_printf_float+0x21a>
 800b7ac:	e76a      	b.n	800b684 <_printf_float+0x9c>
 800b7ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7b2:	f240 80e2 	bls.w	800b97a <_printf_float+0x392>
 800b7b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b7ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	d133      	bne.n	800b82c <_printf_float+0x244>
 800b7c4:	4a38      	ldr	r2, [pc, #224]	; (800b8a8 <_printf_float+0x2c0>)
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b8      	blx	r7
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	f43f af58 	beq.w	800b684 <_printf_float+0x9c>
 800b7d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	db02      	blt.n	800b7e2 <_printf_float+0x1fa>
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	07d8      	lsls	r0, r3, #31
 800b7e0:	d50f      	bpl.n	800b802 <_printf_float+0x21a>
 800b7e2:	4653      	mov	r3, sl
 800b7e4:	465a      	mov	r2, fp
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	f43f af49 	beq.w	800b684 <_printf_float+0x9c>
 800b7f2:	f04f 0800 	mov.w	r8, #0
 800b7f6:	f104 091a 	add.w	r9, r4, #26
 800b7fa:	9b08      	ldr	r3, [sp, #32]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	4543      	cmp	r3, r8
 800b800:	dc09      	bgt.n	800b816 <_printf_float+0x22e>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	079b      	lsls	r3, r3, #30
 800b806:	f100 8108 	bmi.w	800ba1a <_printf_float+0x432>
 800b80a:	68e0      	ldr	r0, [r4, #12]
 800b80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80e:	4298      	cmp	r0, r3
 800b810:	bfb8      	it	lt
 800b812:	4618      	movlt	r0, r3
 800b814:	e738      	b.n	800b688 <_printf_float+0xa0>
 800b816:	2301      	movs	r3, #1
 800b818:	464a      	mov	r2, r9
 800b81a:	4631      	mov	r1, r6
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b8      	blx	r7
 800b820:	3001      	adds	r0, #1
 800b822:	f43f af2f 	beq.w	800b684 <_printf_float+0x9c>
 800b826:	f108 0801 	add.w	r8, r8, #1
 800b82a:	e7e6      	b.n	800b7fa <_printf_float+0x212>
 800b82c:	9b07      	ldr	r3, [sp, #28]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	dc3c      	bgt.n	800b8ac <_printf_float+0x2c4>
 800b832:	4a1d      	ldr	r2, [pc, #116]	; (800b8a8 <_printf_float+0x2c0>)
 800b834:	2301      	movs	r3, #1
 800b836:	4631      	mov	r1, r6
 800b838:	4628      	mov	r0, r5
 800b83a:	47b8      	blx	r7
 800b83c:	3001      	adds	r0, #1
 800b83e:	f43f af21 	beq.w	800b684 <_printf_float+0x9c>
 800b842:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b846:	4313      	orrs	r3, r2
 800b848:	d102      	bne.n	800b850 <_printf_float+0x268>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	07d9      	lsls	r1, r3, #31
 800b84e:	d5d8      	bpl.n	800b802 <_printf_float+0x21a>
 800b850:	4653      	mov	r3, sl
 800b852:	465a      	mov	r2, fp
 800b854:	4631      	mov	r1, r6
 800b856:	4628      	mov	r0, r5
 800b858:	47b8      	blx	r7
 800b85a:	3001      	adds	r0, #1
 800b85c:	f43f af12 	beq.w	800b684 <_printf_float+0x9c>
 800b860:	f04f 0900 	mov.w	r9, #0
 800b864:	f104 0a1a 	add.w	sl, r4, #26
 800b868:	9b07      	ldr	r3, [sp, #28]
 800b86a:	425b      	negs	r3, r3
 800b86c:	454b      	cmp	r3, r9
 800b86e:	dc01      	bgt.n	800b874 <_printf_float+0x28c>
 800b870:	9b08      	ldr	r3, [sp, #32]
 800b872:	e795      	b.n	800b7a0 <_printf_float+0x1b8>
 800b874:	2301      	movs	r3, #1
 800b876:	4652      	mov	r2, sl
 800b878:	4631      	mov	r1, r6
 800b87a:	4628      	mov	r0, r5
 800b87c:	47b8      	blx	r7
 800b87e:	3001      	adds	r0, #1
 800b880:	f43f af00 	beq.w	800b684 <_printf_float+0x9c>
 800b884:	f109 0901 	add.w	r9, r9, #1
 800b888:	e7ee      	b.n	800b868 <_printf_float+0x280>
 800b88a:	bf00      	nop
 800b88c:	f3af 8000 	nop.w
 800b890:	ffffffff 	.word	0xffffffff
 800b894:	7fefffff 	.word	0x7fefffff
 800b898:	0804a558 	.word	0x0804a558
 800b89c:	0804a55c 	.word	0x0804a55c
 800b8a0:	0804a564 	.word	0x0804a564
 800b8a4:	0804a560 	.word	0x0804a560
 800b8a8:	0804a568 	.word	0x0804a568
 800b8ac:	9a08      	ldr	r2, [sp, #32]
 800b8ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bfa8      	it	ge
 800b8b4:	461a      	movge	r2, r3
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	4691      	mov	r9, r2
 800b8ba:	dc38      	bgt.n	800b92e <_printf_float+0x346>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8c4:	f104 021a 	add.w	r2, r4, #26
 800b8c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8ca:	9905      	ldr	r1, [sp, #20]
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	eba3 0309 	sub.w	r3, r3, r9
 800b8d2:	428b      	cmp	r3, r1
 800b8d4:	dc33      	bgt.n	800b93e <_printf_float+0x356>
 800b8d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	db3c      	blt.n	800b958 <_printf_float+0x370>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	07da      	lsls	r2, r3, #31
 800b8e2:	d439      	bmi.n	800b958 <_printf_float+0x370>
 800b8e4:	9b08      	ldr	r3, [sp, #32]
 800b8e6:	9a04      	ldr	r2, [sp, #16]
 800b8e8:	9907      	ldr	r1, [sp, #28]
 800b8ea:	1a9a      	subs	r2, r3, r2
 800b8ec:	eba3 0901 	sub.w	r9, r3, r1
 800b8f0:	4591      	cmp	r9, r2
 800b8f2:	bfa8      	it	ge
 800b8f4:	4691      	movge	r9, r2
 800b8f6:	f1b9 0f00 	cmp.w	r9, #0
 800b8fa:	dc35      	bgt.n	800b968 <_printf_float+0x380>
 800b8fc:	f04f 0800 	mov.w	r8, #0
 800b900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b904:	f104 0a1a 	add.w	sl, r4, #26
 800b908:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	eba3 0309 	sub.w	r3, r3, r9
 800b912:	4543      	cmp	r3, r8
 800b914:	f77f af75 	ble.w	800b802 <_printf_float+0x21a>
 800b918:	2301      	movs	r3, #1
 800b91a:	4652      	mov	r2, sl
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	47b8      	blx	r7
 800b922:	3001      	adds	r0, #1
 800b924:	f43f aeae 	beq.w	800b684 <_printf_float+0x9c>
 800b928:	f108 0801 	add.w	r8, r8, #1
 800b92c:	e7ec      	b.n	800b908 <_printf_float+0x320>
 800b92e:	4613      	mov	r3, r2
 800b930:	4631      	mov	r1, r6
 800b932:	4642      	mov	r2, r8
 800b934:	4628      	mov	r0, r5
 800b936:	47b8      	blx	r7
 800b938:	3001      	adds	r0, #1
 800b93a:	d1bf      	bne.n	800b8bc <_printf_float+0x2d4>
 800b93c:	e6a2      	b.n	800b684 <_printf_float+0x9c>
 800b93e:	2301      	movs	r3, #1
 800b940:	4631      	mov	r1, r6
 800b942:	4628      	mov	r0, r5
 800b944:	9204      	str	r2, [sp, #16]
 800b946:	47b8      	blx	r7
 800b948:	3001      	adds	r0, #1
 800b94a:	f43f ae9b 	beq.w	800b684 <_printf_float+0x9c>
 800b94e:	9b05      	ldr	r3, [sp, #20]
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	3301      	adds	r3, #1
 800b954:	9305      	str	r3, [sp, #20]
 800b956:	e7b7      	b.n	800b8c8 <_printf_float+0x2e0>
 800b958:	4653      	mov	r3, sl
 800b95a:	465a      	mov	r2, fp
 800b95c:	4631      	mov	r1, r6
 800b95e:	4628      	mov	r0, r5
 800b960:	47b8      	blx	r7
 800b962:	3001      	adds	r0, #1
 800b964:	d1be      	bne.n	800b8e4 <_printf_float+0x2fc>
 800b966:	e68d      	b.n	800b684 <_printf_float+0x9c>
 800b968:	9a04      	ldr	r2, [sp, #16]
 800b96a:	464b      	mov	r3, r9
 800b96c:	4442      	add	r2, r8
 800b96e:	4631      	mov	r1, r6
 800b970:	4628      	mov	r0, r5
 800b972:	47b8      	blx	r7
 800b974:	3001      	adds	r0, #1
 800b976:	d1c1      	bne.n	800b8fc <_printf_float+0x314>
 800b978:	e684      	b.n	800b684 <_printf_float+0x9c>
 800b97a:	9a08      	ldr	r2, [sp, #32]
 800b97c:	2a01      	cmp	r2, #1
 800b97e:	dc01      	bgt.n	800b984 <_printf_float+0x39c>
 800b980:	07db      	lsls	r3, r3, #31
 800b982:	d537      	bpl.n	800b9f4 <_printf_float+0x40c>
 800b984:	2301      	movs	r3, #1
 800b986:	4642      	mov	r2, r8
 800b988:	4631      	mov	r1, r6
 800b98a:	4628      	mov	r0, r5
 800b98c:	47b8      	blx	r7
 800b98e:	3001      	adds	r0, #1
 800b990:	f43f ae78 	beq.w	800b684 <_printf_float+0x9c>
 800b994:	4653      	mov	r3, sl
 800b996:	465a      	mov	r2, fp
 800b998:	4631      	mov	r1, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f ae70 	beq.w	800b684 <_printf_float+0x9c>
 800b9a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b9a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b0:	d01b      	beq.n	800b9ea <_printf_float+0x402>
 800b9b2:	9b08      	ldr	r3, [sp, #32]
 800b9b4:	f108 0201 	add.w	r2, r8, #1
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b8      	blx	r7
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d10e      	bne.n	800b9e2 <_printf_float+0x3fa>
 800b9c4:	e65e      	b.n	800b684 <_printf_float+0x9c>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	464a      	mov	r2, r9
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b8      	blx	r7
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	f43f ae57 	beq.w	800b684 <_printf_float+0x9c>
 800b9d6:	f108 0801 	add.w	r8, r8, #1
 800b9da:	9b08      	ldr	r3, [sp, #32]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4543      	cmp	r3, r8
 800b9e0:	dcf1      	bgt.n	800b9c6 <_printf_float+0x3de>
 800b9e2:	9b04      	ldr	r3, [sp, #16]
 800b9e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9e8:	e6db      	b.n	800b7a2 <_printf_float+0x1ba>
 800b9ea:	f04f 0800 	mov.w	r8, #0
 800b9ee:	f104 091a 	add.w	r9, r4, #26
 800b9f2:	e7f2      	b.n	800b9da <_printf_float+0x3f2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	e7df      	b.n	800b9ba <_printf_float+0x3d2>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	464a      	mov	r2, r9
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4628      	mov	r0, r5
 800ba02:	47b8      	blx	r7
 800ba04:	3001      	adds	r0, #1
 800ba06:	f43f ae3d 	beq.w	800b684 <_printf_float+0x9c>
 800ba0a:	f108 0801 	add.w	r8, r8, #1
 800ba0e:	68e3      	ldr	r3, [r4, #12]
 800ba10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba12:	1a5b      	subs	r3, r3, r1
 800ba14:	4543      	cmp	r3, r8
 800ba16:	dcf0      	bgt.n	800b9fa <_printf_float+0x412>
 800ba18:	e6f7      	b.n	800b80a <_printf_float+0x222>
 800ba1a:	f04f 0800 	mov.w	r8, #0
 800ba1e:	f104 0919 	add.w	r9, r4, #25
 800ba22:	e7f4      	b.n	800ba0e <_printf_float+0x426>

0800ba24 <_printf_common>:
 800ba24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba28:	4616      	mov	r6, r2
 800ba2a:	4699      	mov	r9, r3
 800ba2c:	688a      	ldr	r2, [r1, #8]
 800ba2e:	690b      	ldr	r3, [r1, #16]
 800ba30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	bfb8      	it	lt
 800ba38:	4613      	movlt	r3, r2
 800ba3a:	6033      	str	r3, [r6, #0]
 800ba3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba40:	4607      	mov	r7, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	b10a      	cbz	r2, 800ba4a <_printf_common+0x26>
 800ba46:	3301      	adds	r3, #1
 800ba48:	6033      	str	r3, [r6, #0]
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	0699      	lsls	r1, r3, #26
 800ba4e:	bf42      	ittt	mi
 800ba50:	6833      	ldrmi	r3, [r6, #0]
 800ba52:	3302      	addmi	r3, #2
 800ba54:	6033      	strmi	r3, [r6, #0]
 800ba56:	6825      	ldr	r5, [r4, #0]
 800ba58:	f015 0506 	ands.w	r5, r5, #6
 800ba5c:	d106      	bne.n	800ba6c <_printf_common+0x48>
 800ba5e:	f104 0a19 	add.w	sl, r4, #25
 800ba62:	68e3      	ldr	r3, [r4, #12]
 800ba64:	6832      	ldr	r2, [r6, #0]
 800ba66:	1a9b      	subs	r3, r3, r2
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	dc26      	bgt.n	800baba <_printf_common+0x96>
 800ba6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba70:	1e13      	subs	r3, r2, #0
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	bf18      	it	ne
 800ba76:	2301      	movne	r3, #1
 800ba78:	0692      	lsls	r2, r2, #26
 800ba7a:	d42b      	bmi.n	800bad4 <_printf_common+0xb0>
 800ba7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba80:	4649      	mov	r1, r9
 800ba82:	4638      	mov	r0, r7
 800ba84:	47c0      	blx	r8
 800ba86:	3001      	adds	r0, #1
 800ba88:	d01e      	beq.n	800bac8 <_printf_common+0xa4>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	68e5      	ldr	r5, [r4, #12]
 800ba8e:	6832      	ldr	r2, [r6, #0]
 800ba90:	f003 0306 	and.w	r3, r3, #6
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	bf08      	it	eq
 800ba98:	1aad      	subeq	r5, r5, r2
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	6922      	ldr	r2, [r4, #16]
 800ba9e:	bf0c      	ite	eq
 800baa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baa4:	2500      	movne	r5, #0
 800baa6:	4293      	cmp	r3, r2
 800baa8:	bfc4      	itt	gt
 800baaa:	1a9b      	subgt	r3, r3, r2
 800baac:	18ed      	addgt	r5, r5, r3
 800baae:	2600      	movs	r6, #0
 800bab0:	341a      	adds	r4, #26
 800bab2:	42b5      	cmp	r5, r6
 800bab4:	d11a      	bne.n	800baec <_printf_common+0xc8>
 800bab6:	2000      	movs	r0, #0
 800bab8:	e008      	b.n	800bacc <_printf_common+0xa8>
 800baba:	2301      	movs	r3, #1
 800babc:	4652      	mov	r2, sl
 800babe:	4649      	mov	r1, r9
 800bac0:	4638      	mov	r0, r7
 800bac2:	47c0      	blx	r8
 800bac4:	3001      	adds	r0, #1
 800bac6:	d103      	bne.n	800bad0 <_printf_common+0xac>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad0:	3501      	adds	r5, #1
 800bad2:	e7c6      	b.n	800ba62 <_printf_common+0x3e>
 800bad4:	18e1      	adds	r1, r4, r3
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	2030      	movs	r0, #48	; 0x30
 800bada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bade:	4422      	add	r2, r4
 800bae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bae8:	3302      	adds	r3, #2
 800baea:	e7c7      	b.n	800ba7c <_printf_common+0x58>
 800baec:	2301      	movs	r3, #1
 800baee:	4622      	mov	r2, r4
 800baf0:	4649      	mov	r1, r9
 800baf2:	4638      	mov	r0, r7
 800baf4:	47c0      	blx	r8
 800baf6:	3001      	adds	r0, #1
 800baf8:	d0e6      	beq.n	800bac8 <_printf_common+0xa4>
 800bafa:	3601      	adds	r6, #1
 800bafc:	e7d9      	b.n	800bab2 <_printf_common+0x8e>
	...

0800bb00 <_printf_i>:
 800bb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb04:	7e0f      	ldrb	r7, [r1, #24]
 800bb06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb08:	2f78      	cmp	r7, #120	; 0x78
 800bb0a:	4691      	mov	r9, r2
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	460c      	mov	r4, r1
 800bb10:	469a      	mov	sl, r3
 800bb12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb16:	d807      	bhi.n	800bb28 <_printf_i+0x28>
 800bb18:	2f62      	cmp	r7, #98	; 0x62
 800bb1a:	d80a      	bhi.n	800bb32 <_printf_i+0x32>
 800bb1c:	2f00      	cmp	r7, #0
 800bb1e:	f000 80d8 	beq.w	800bcd2 <_printf_i+0x1d2>
 800bb22:	2f58      	cmp	r7, #88	; 0x58
 800bb24:	f000 80a3 	beq.w	800bc6e <_printf_i+0x16e>
 800bb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb30:	e03a      	b.n	800bba8 <_printf_i+0xa8>
 800bb32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb36:	2b15      	cmp	r3, #21
 800bb38:	d8f6      	bhi.n	800bb28 <_printf_i+0x28>
 800bb3a:	a101      	add	r1, pc, #4	; (adr r1, 800bb40 <_printf_i+0x40>)
 800bb3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb40:	0800bb99 	.word	0x0800bb99
 800bb44:	0800bbad 	.word	0x0800bbad
 800bb48:	0800bb29 	.word	0x0800bb29
 800bb4c:	0800bb29 	.word	0x0800bb29
 800bb50:	0800bb29 	.word	0x0800bb29
 800bb54:	0800bb29 	.word	0x0800bb29
 800bb58:	0800bbad 	.word	0x0800bbad
 800bb5c:	0800bb29 	.word	0x0800bb29
 800bb60:	0800bb29 	.word	0x0800bb29
 800bb64:	0800bb29 	.word	0x0800bb29
 800bb68:	0800bb29 	.word	0x0800bb29
 800bb6c:	0800bcb9 	.word	0x0800bcb9
 800bb70:	0800bbdd 	.word	0x0800bbdd
 800bb74:	0800bc9b 	.word	0x0800bc9b
 800bb78:	0800bb29 	.word	0x0800bb29
 800bb7c:	0800bb29 	.word	0x0800bb29
 800bb80:	0800bcdb 	.word	0x0800bcdb
 800bb84:	0800bb29 	.word	0x0800bb29
 800bb88:	0800bbdd 	.word	0x0800bbdd
 800bb8c:	0800bb29 	.word	0x0800bb29
 800bb90:	0800bb29 	.word	0x0800bb29
 800bb94:	0800bca3 	.word	0x0800bca3
 800bb98:	682b      	ldr	r3, [r5, #0]
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	602a      	str	r2, [r5, #0]
 800bba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e0a3      	b.n	800bcf4 <_printf_i+0x1f4>
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	6829      	ldr	r1, [r5, #0]
 800bbb0:	0606      	lsls	r6, r0, #24
 800bbb2:	f101 0304 	add.w	r3, r1, #4
 800bbb6:	d50a      	bpl.n	800bbce <_printf_i+0xce>
 800bbb8:	680e      	ldr	r6, [r1, #0]
 800bbba:	602b      	str	r3, [r5, #0]
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	da03      	bge.n	800bbc8 <_printf_i+0xc8>
 800bbc0:	232d      	movs	r3, #45	; 0x2d
 800bbc2:	4276      	negs	r6, r6
 800bbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc8:	485e      	ldr	r0, [pc, #376]	; (800bd44 <_printf_i+0x244>)
 800bbca:	230a      	movs	r3, #10
 800bbcc:	e019      	b.n	800bc02 <_printf_i+0x102>
 800bbce:	680e      	ldr	r6, [r1, #0]
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbd6:	bf18      	it	ne
 800bbd8:	b236      	sxthne	r6, r6
 800bbda:	e7ef      	b.n	800bbbc <_printf_i+0xbc>
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	6820      	ldr	r0, [r4, #0]
 800bbe0:	1d19      	adds	r1, r3, #4
 800bbe2:	6029      	str	r1, [r5, #0]
 800bbe4:	0601      	lsls	r1, r0, #24
 800bbe6:	d501      	bpl.n	800bbec <_printf_i+0xec>
 800bbe8:	681e      	ldr	r6, [r3, #0]
 800bbea:	e002      	b.n	800bbf2 <_printf_i+0xf2>
 800bbec:	0646      	lsls	r6, r0, #25
 800bbee:	d5fb      	bpl.n	800bbe8 <_printf_i+0xe8>
 800bbf0:	881e      	ldrh	r6, [r3, #0]
 800bbf2:	4854      	ldr	r0, [pc, #336]	; (800bd44 <_printf_i+0x244>)
 800bbf4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbf6:	bf0c      	ite	eq
 800bbf8:	2308      	moveq	r3, #8
 800bbfa:	230a      	movne	r3, #10
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc02:	6865      	ldr	r5, [r4, #4]
 800bc04:	60a5      	str	r5, [r4, #8]
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	bfa2      	ittt	ge
 800bc0a:	6821      	ldrge	r1, [r4, #0]
 800bc0c:	f021 0104 	bicge.w	r1, r1, #4
 800bc10:	6021      	strge	r1, [r4, #0]
 800bc12:	b90e      	cbnz	r6, 800bc18 <_printf_i+0x118>
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	d04d      	beq.n	800bcb4 <_printf_i+0x1b4>
 800bc18:	4615      	mov	r5, r2
 800bc1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc1e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc22:	5dc7      	ldrb	r7, [r0, r7]
 800bc24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc28:	4637      	mov	r7, r6
 800bc2a:	42bb      	cmp	r3, r7
 800bc2c:	460e      	mov	r6, r1
 800bc2e:	d9f4      	bls.n	800bc1a <_printf_i+0x11a>
 800bc30:	2b08      	cmp	r3, #8
 800bc32:	d10b      	bne.n	800bc4c <_printf_i+0x14c>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	07de      	lsls	r6, r3, #31
 800bc38:	d508      	bpl.n	800bc4c <_printf_i+0x14c>
 800bc3a:	6923      	ldr	r3, [r4, #16]
 800bc3c:	6861      	ldr	r1, [r4, #4]
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	bfde      	ittt	le
 800bc42:	2330      	movle	r3, #48	; 0x30
 800bc44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc4c:	1b52      	subs	r2, r2, r5
 800bc4e:	6122      	str	r2, [r4, #16]
 800bc50:	f8cd a000 	str.w	sl, [sp]
 800bc54:	464b      	mov	r3, r9
 800bc56:	aa03      	add	r2, sp, #12
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	f7ff fee2 	bl	800ba24 <_printf_common>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d14c      	bne.n	800bcfe <_printf_i+0x1fe>
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc68:	b004      	add	sp, #16
 800bc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6e:	4835      	ldr	r0, [pc, #212]	; (800bd44 <_printf_i+0x244>)
 800bc70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc74:	6829      	ldr	r1, [r5, #0]
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc7c:	6029      	str	r1, [r5, #0]
 800bc7e:	061d      	lsls	r5, r3, #24
 800bc80:	d514      	bpl.n	800bcac <_printf_i+0x1ac>
 800bc82:	07df      	lsls	r7, r3, #31
 800bc84:	bf44      	itt	mi
 800bc86:	f043 0320 	orrmi.w	r3, r3, #32
 800bc8a:	6023      	strmi	r3, [r4, #0]
 800bc8c:	b91e      	cbnz	r6, 800bc96 <_printf_i+0x196>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f023 0320 	bic.w	r3, r3, #32
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2310      	movs	r3, #16
 800bc98:	e7b0      	b.n	800bbfc <_printf_i+0xfc>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	f043 0320 	orr.w	r3, r3, #32
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	2378      	movs	r3, #120	; 0x78
 800bca4:	4828      	ldr	r0, [pc, #160]	; (800bd48 <_printf_i+0x248>)
 800bca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcaa:	e7e3      	b.n	800bc74 <_printf_i+0x174>
 800bcac:	0659      	lsls	r1, r3, #25
 800bcae:	bf48      	it	mi
 800bcb0:	b2b6      	uxthmi	r6, r6
 800bcb2:	e7e6      	b.n	800bc82 <_printf_i+0x182>
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	e7bb      	b.n	800bc30 <_printf_i+0x130>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	6826      	ldr	r6, [r4, #0]
 800bcbc:	6961      	ldr	r1, [r4, #20]
 800bcbe:	1d18      	adds	r0, r3, #4
 800bcc0:	6028      	str	r0, [r5, #0]
 800bcc2:	0635      	lsls	r5, r6, #24
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0x1cc>
 800bcc8:	6019      	str	r1, [r3, #0]
 800bcca:	e002      	b.n	800bcd2 <_printf_i+0x1d2>
 800bccc:	0670      	lsls	r0, r6, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0x1c8>
 800bcd0:	8019      	strh	r1, [r3, #0]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	4615      	mov	r5, r2
 800bcd8:	e7ba      	b.n	800bc50 <_printf_i+0x150>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	602a      	str	r2, [r5, #0]
 800bce0:	681d      	ldr	r5, [r3, #0]
 800bce2:	6862      	ldr	r2, [r4, #4]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f7f4 fb1a 	bl	8000320 <memchr>
 800bcec:	b108      	cbz	r0, 800bcf2 <_printf_i+0x1f2>
 800bcee:	1b40      	subs	r0, r0, r5
 800bcf0:	6060      	str	r0, [r4, #4]
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcfc:	e7a8      	b.n	800bc50 <_printf_i+0x150>
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4649      	mov	r1, r9
 800bd04:	4640      	mov	r0, r8
 800bd06:	47d0      	blx	sl
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d0ab      	beq.n	800bc64 <_printf_i+0x164>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	079b      	lsls	r3, r3, #30
 800bd10:	d413      	bmi.n	800bd3a <_printf_i+0x23a>
 800bd12:	68e0      	ldr	r0, [r4, #12]
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	4298      	cmp	r0, r3
 800bd18:	bfb8      	it	lt
 800bd1a:	4618      	movlt	r0, r3
 800bd1c:	e7a4      	b.n	800bc68 <_printf_i+0x168>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4632      	mov	r2, r6
 800bd22:	4649      	mov	r1, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	47d0      	blx	sl
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d09b      	beq.n	800bc64 <_printf_i+0x164>
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	9903      	ldr	r1, [sp, #12]
 800bd32:	1a5b      	subs	r3, r3, r1
 800bd34:	42ab      	cmp	r3, r5
 800bd36:	dcf2      	bgt.n	800bd1e <_printf_i+0x21e>
 800bd38:	e7eb      	b.n	800bd12 <_printf_i+0x212>
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	f104 0619 	add.w	r6, r4, #25
 800bd40:	e7f5      	b.n	800bd2e <_printf_i+0x22e>
 800bd42:	bf00      	nop
 800bd44:	0804a56a 	.word	0x0804a56a
 800bd48:	0804a57b 	.word	0x0804a57b

0800bd4c <_sbrk_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d06      	ldr	r5, [pc, #24]	; (800bd68 <_sbrk_r+0x1c>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	602b      	str	r3, [r5, #0]
 800bd58:	f7f5 f858 	bl	8000e0c <_sbrk>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_sbrk_r+0x1a>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_sbrk_r+0x1a>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	24003b54 	.word	0x24003b54

0800bd6c <strncmp>:
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	b17a      	cbz	r2, 800bd90 <strncmp+0x24>
 800bd70:	4603      	mov	r3, r0
 800bd72:	3901      	subs	r1, #1
 800bd74:	1884      	adds	r4, r0, r2
 800bd76:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd7e:	4290      	cmp	r0, r2
 800bd80:	d101      	bne.n	800bd86 <strncmp+0x1a>
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	d101      	bne.n	800bd8a <strncmp+0x1e>
 800bd86:	1a80      	subs	r0, r0, r2
 800bd88:	bd10      	pop	{r4, pc}
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d1f3      	bne.n	800bd76 <strncmp+0xa>
 800bd8e:	e7fa      	b.n	800bd86 <strncmp+0x1a>
 800bd90:	4610      	mov	r0, r2
 800bd92:	e7f9      	b.n	800bd88 <strncmp+0x1c>

0800bd94 <quorem>:
 800bd94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	6903      	ldr	r3, [r0, #16]
 800bd9a:	690c      	ldr	r4, [r1, #16]
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	4607      	mov	r7, r0
 800bda0:	f2c0 8081 	blt.w	800bea6 <quorem+0x112>
 800bda4:	3c01      	subs	r4, #1
 800bda6:	f101 0814 	add.w	r8, r1, #20
 800bdaa:	f100 0514 	add.w	r5, r0, #20
 800bdae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bdc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdc8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdcc:	d331      	bcc.n	800be32 <quorem+0x9e>
 800bdce:	f04f 0e00 	mov.w	lr, #0
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	46ac      	mov	ip, r5
 800bdd6:	46f2      	mov	sl, lr
 800bdd8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bddc:	b293      	uxth	r3, r2
 800bdde:	fb06 e303 	mla	r3, r6, r3, lr
 800bde2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	ebaa 0303 	sub.w	r3, sl, r3
 800bdec:	f8dc a000 	ldr.w	sl, [ip]
 800bdf0:	0c12      	lsrs	r2, r2, #16
 800bdf2:	fa13 f38a 	uxtah	r3, r3, sl
 800bdf6:	fb06 e202 	mla	r2, r6, r2, lr
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be02:	b292      	uxth	r2, r2
 800be04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be0c:	f8bd 3000 	ldrh.w	r3, [sp]
 800be10:	4581      	cmp	r9, r0
 800be12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be16:	f84c 3b04 	str.w	r3, [ip], #4
 800be1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be1e:	d2db      	bcs.n	800bdd8 <quorem+0x44>
 800be20:	f855 300b 	ldr.w	r3, [r5, fp]
 800be24:	b92b      	cbnz	r3, 800be32 <quorem+0x9e>
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	3b04      	subs	r3, #4
 800be2a:	429d      	cmp	r5, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	d32e      	bcc.n	800be8e <quorem+0xfa>
 800be30:	613c      	str	r4, [r7, #16]
 800be32:	4638      	mov	r0, r7
 800be34:	f001 f83c 	bl	800ceb0 <__mcmp>
 800be38:	2800      	cmp	r0, #0
 800be3a:	db24      	blt.n	800be86 <quorem+0xf2>
 800be3c:	3601      	adds	r6, #1
 800be3e:	4628      	mov	r0, r5
 800be40:	f04f 0c00 	mov.w	ip, #0
 800be44:	f858 2b04 	ldr.w	r2, [r8], #4
 800be48:	f8d0 e000 	ldr.w	lr, [r0]
 800be4c:	b293      	uxth	r3, r2
 800be4e:	ebac 0303 	sub.w	r3, ip, r3
 800be52:	0c12      	lsrs	r2, r2, #16
 800be54:	fa13 f38e 	uxtah	r3, r3, lr
 800be58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be60:	b29b      	uxth	r3, r3
 800be62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be66:	45c1      	cmp	r9, r8
 800be68:	f840 3b04 	str.w	r3, [r0], #4
 800be6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be70:	d2e8      	bcs.n	800be44 <quorem+0xb0>
 800be72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be7a:	b922      	cbnz	r2, 800be86 <quorem+0xf2>
 800be7c:	3b04      	subs	r3, #4
 800be7e:	429d      	cmp	r5, r3
 800be80:	461a      	mov	r2, r3
 800be82:	d30a      	bcc.n	800be9a <quorem+0x106>
 800be84:	613c      	str	r4, [r7, #16]
 800be86:	4630      	mov	r0, r6
 800be88:	b003      	add	sp, #12
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	6812      	ldr	r2, [r2, #0]
 800be90:	3b04      	subs	r3, #4
 800be92:	2a00      	cmp	r2, #0
 800be94:	d1cc      	bne.n	800be30 <quorem+0x9c>
 800be96:	3c01      	subs	r4, #1
 800be98:	e7c7      	b.n	800be2a <quorem+0x96>
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d1f0      	bne.n	800be84 <quorem+0xf0>
 800bea2:	3c01      	subs	r4, #1
 800bea4:	e7eb      	b.n	800be7e <quorem+0xea>
 800bea6:	2000      	movs	r0, #0
 800bea8:	e7ee      	b.n	800be88 <quorem+0xf4>
 800beaa:	0000      	movs	r0, r0
 800beac:	0000      	movs	r0, r0
	...

0800beb0 <_dtoa_r>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	ed2d 8b02 	vpush	{d8}
 800beb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800beba:	b091      	sub	sp, #68	; 0x44
 800bebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bec0:	ec59 8b10 	vmov	r8, r9, d0
 800bec4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bec6:	9106      	str	r1, [sp, #24]
 800bec8:	4606      	mov	r6, r0
 800beca:	9208      	str	r2, [sp, #32]
 800becc:	930c      	str	r3, [sp, #48]	; 0x30
 800bece:	b975      	cbnz	r5, 800beee <_dtoa_r+0x3e>
 800bed0:	2010      	movs	r0, #16
 800bed2:	f7f8 f837 	bl	8003f44 <__wrap_malloc>
 800bed6:	4602      	mov	r2, r0
 800bed8:	6270      	str	r0, [r6, #36]	; 0x24
 800beda:	b920      	cbnz	r0, 800bee6 <_dtoa_r+0x36>
 800bedc:	4baa      	ldr	r3, [pc, #680]	; (800c188 <_dtoa_r+0x2d8>)
 800bede:	21ea      	movs	r1, #234	; 0xea
 800bee0:	48aa      	ldr	r0, [pc, #680]	; (800c18c <_dtoa_r+0x2dc>)
 800bee2:	f001 f8fd 	bl	800d0e0 <__assert_func>
 800bee6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800beea:	6005      	str	r5, [r0, #0]
 800beec:	60c5      	str	r5, [r0, #12]
 800beee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bef0:	6819      	ldr	r1, [r3, #0]
 800bef2:	b151      	cbz	r1, 800bf0a <_dtoa_r+0x5a>
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	604a      	str	r2, [r1, #4]
 800bef8:	2301      	movs	r3, #1
 800befa:	4093      	lsls	r3, r2
 800befc:	608b      	str	r3, [r1, #8]
 800befe:	4630      	mov	r0, r6
 800bf00:	f000 fd94 	bl	800ca2c <_Bfree>
 800bf04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	f1b9 0300 	subs.w	r3, r9, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf14:	9303      	strlt	r3, [sp, #12]
 800bf16:	2300      	movge	r3, #0
 800bf18:	2201      	movlt	r2, #1
 800bf1a:	bfac      	ite	ge
 800bf1c:	6023      	strge	r3, [r4, #0]
 800bf1e:	6022      	strlt	r2, [r4, #0]
 800bf20:	4b9b      	ldr	r3, [pc, #620]	; (800c190 <_dtoa_r+0x2e0>)
 800bf22:	9c03      	ldr	r4, [sp, #12]
 800bf24:	43a3      	bics	r3, r4
 800bf26:	d11c      	bne.n	800bf62 <_dtoa_r+0xb2>
 800bf28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bf34:	ea53 0308 	orrs.w	r3, r3, r8
 800bf38:	f000 84fd 	beq.w	800c936 <_dtoa_r+0xa86>
 800bf3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf3e:	b963      	cbnz	r3, 800bf5a <_dtoa_r+0xaa>
 800bf40:	4b94      	ldr	r3, [pc, #592]	; (800c194 <_dtoa_r+0x2e4>)
 800bf42:	e01f      	b.n	800bf84 <_dtoa_r+0xd4>
 800bf44:	4b94      	ldr	r3, [pc, #592]	; (800c198 <_dtoa_r+0x2e8>)
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	9801      	ldr	r0, [sp, #4]
 800bf50:	b011      	add	sp, #68	; 0x44
 800bf52:	ecbd 8b02 	vpop	{d8}
 800bf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5a:	4b8e      	ldr	r3, [pc, #568]	; (800c194 <_dtoa_r+0x2e4>)
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	3303      	adds	r3, #3
 800bf60:	e7f3      	b.n	800bf4a <_dtoa_r+0x9a>
 800bf62:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bf66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6e:	d10b      	bne.n	800bf88 <_dtoa_r+0xd8>
 800bf70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf72:	2301      	movs	r3, #1
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 84d9 	beq.w	800c930 <_dtoa_r+0xa80>
 800bf7e:	4887      	ldr	r0, [pc, #540]	; (800c19c <_dtoa_r+0x2ec>)
 800bf80:	6018      	str	r0, [r3, #0]
 800bf82:	1e43      	subs	r3, r0, #1
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	e7e2      	b.n	800bf4e <_dtoa_r+0x9e>
 800bf88:	a90f      	add	r1, sp, #60	; 0x3c
 800bf8a:	aa0e      	add	r2, sp, #56	; 0x38
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	eeb0 0b48 	vmov.f64	d0, d8
 800bf92:	f001 f833 	bl	800cffc <__d2b>
 800bf96:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bf9e:	2900      	cmp	r1, #0
 800bfa0:	d046      	beq.n	800c030 <_dtoa_r+0x180>
 800bfa2:	ee18 4a90 	vmov	r4, s17
 800bfa6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bfaa:	ec53 2b18 	vmov	r2, r3, d8
 800bfae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bfb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfb6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bfba:	2400      	movs	r4, #0
 800bfbc:	ec43 2b16 	vmov	d6, r2, r3
 800bfc0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bfc4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c170 <_dtoa_r+0x2c0>
 800bfc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bfcc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c178 <_dtoa_r+0x2c8>
 800bfd0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bfd4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c180 <_dtoa_r+0x2d0>
 800bfd8:	ee07 1a90 	vmov	s15, r1
 800bfdc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bfe0:	eeb0 7b46 	vmov.f64	d7, d6
 800bfe4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bfe8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bfec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff4:	ee16 ba90 	vmov	fp, s13
 800bff8:	940a      	str	r4, [sp, #40]	; 0x28
 800bffa:	d508      	bpl.n	800c00e <_dtoa_r+0x15e>
 800bffc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c000:	eeb4 6b47 	vcmp.f64	d6, d7
 800c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c008:	bf18      	it	ne
 800c00a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800c00e:	f1bb 0f16 	cmp.w	fp, #22
 800c012:	d82f      	bhi.n	800c074 <_dtoa_r+0x1c4>
 800c014:	4b62      	ldr	r3, [pc, #392]	; (800c1a0 <_dtoa_r+0x2f0>)
 800c016:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c01a:	ed93 7b00 	vldr	d7, [r3]
 800c01e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c026:	d501      	bpl.n	800c02c <_dtoa_r+0x17c>
 800c028:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c02c:	2300      	movs	r3, #0
 800c02e:	e022      	b.n	800c076 <_dtoa_r+0x1c6>
 800c030:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c032:	4401      	add	r1, r0
 800c034:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c038:	2b20      	cmp	r3, #32
 800c03a:	bfc1      	itttt	gt
 800c03c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c040:	fa04 f303 	lslgt.w	r3, r4, r3
 800c044:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c048:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c04c:	bfd6      	itet	le
 800c04e:	f1c3 0320 	rsble	r3, r3, #32
 800c052:	ea43 0808 	orrgt.w	r8, r3, r8
 800c056:	fa08 f803 	lslle.w	r8, r8, r3
 800c05a:	ee07 8a90 	vmov	s15, r8
 800c05e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c062:	3901      	subs	r1, #1
 800c064:	ee17 4a90 	vmov	r4, s15
 800c068:	ec53 2b17 	vmov	r2, r3, d7
 800c06c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c070:	2401      	movs	r4, #1
 800c072:	e7a3      	b.n	800bfbc <_dtoa_r+0x10c>
 800c074:	2301      	movs	r3, #1
 800c076:	930b      	str	r3, [sp, #44]	; 0x2c
 800c078:	1a43      	subs	r3, r0, r1
 800c07a:	1e5a      	subs	r2, r3, #1
 800c07c:	bf45      	ittet	mi
 800c07e:	f1c3 0301 	rsbmi	r3, r3, #1
 800c082:	9304      	strmi	r3, [sp, #16]
 800c084:	2300      	movpl	r3, #0
 800c086:	2300      	movmi	r3, #0
 800c088:	9205      	str	r2, [sp, #20]
 800c08a:	bf54      	ite	pl
 800c08c:	9304      	strpl	r3, [sp, #16]
 800c08e:	9305      	strmi	r3, [sp, #20]
 800c090:	f1bb 0f00 	cmp.w	fp, #0
 800c094:	db18      	blt.n	800c0c8 <_dtoa_r+0x218>
 800c096:	9b05      	ldr	r3, [sp, #20]
 800c098:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c09c:	445b      	add	r3, fp
 800c09e:	9305      	str	r3, [sp, #20]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	9a06      	ldr	r2, [sp, #24]
 800c0a4:	2a09      	cmp	r2, #9
 800c0a6:	d849      	bhi.n	800c13c <_dtoa_r+0x28c>
 800c0a8:	2a05      	cmp	r2, #5
 800c0aa:	bfc4      	itt	gt
 800c0ac:	3a04      	subgt	r2, #4
 800c0ae:	9206      	strgt	r2, [sp, #24]
 800c0b0:	9a06      	ldr	r2, [sp, #24]
 800c0b2:	f1a2 0202 	sub.w	r2, r2, #2
 800c0b6:	bfcc      	ite	gt
 800c0b8:	2400      	movgt	r4, #0
 800c0ba:	2401      	movle	r4, #1
 800c0bc:	2a03      	cmp	r2, #3
 800c0be:	d848      	bhi.n	800c152 <_dtoa_r+0x2a2>
 800c0c0:	e8df f002 	tbb	[pc, r2]
 800c0c4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c0c8:	9b04      	ldr	r3, [sp, #16]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	eba3 030b 	sub.w	r3, r3, fp
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0d4:	f1cb 0300 	rsb	r3, fp, #0
 800c0d8:	e7e3      	b.n	800c0a2 <_dtoa_r+0x1f2>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	9207      	str	r2, [sp, #28]
 800c0de:	9a08      	ldr	r2, [sp, #32]
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	dc39      	bgt.n	800c158 <_dtoa_r+0x2a8>
 800c0e4:	f04f 0a01 	mov.w	sl, #1
 800c0e8:	46d1      	mov	r9, sl
 800c0ea:	4652      	mov	r2, sl
 800c0ec:	f8cd a020 	str.w	sl, [sp, #32]
 800c0f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	6079      	str	r1, [r7, #4]
 800c0f6:	2004      	movs	r0, #4
 800c0f8:	f100 0c14 	add.w	ip, r0, #20
 800c0fc:	4594      	cmp	ip, r2
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	d92f      	bls.n	800c162 <_dtoa_r+0x2b2>
 800c102:	4630      	mov	r0, r6
 800c104:	930d      	str	r3, [sp, #52]	; 0x34
 800c106:	f000 fc51 	bl	800c9ac <_Balloc>
 800c10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c10c:	9001      	str	r0, [sp, #4]
 800c10e:	4602      	mov	r2, r0
 800c110:	2800      	cmp	r0, #0
 800c112:	d149      	bne.n	800c1a8 <_dtoa_r+0x2f8>
 800c114:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <_dtoa_r+0x2f4>)
 800c116:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c11a:	e6e1      	b.n	800bee0 <_dtoa_r+0x30>
 800c11c:	2201      	movs	r2, #1
 800c11e:	e7dd      	b.n	800c0dc <_dtoa_r+0x22c>
 800c120:	2200      	movs	r2, #0
 800c122:	9207      	str	r2, [sp, #28]
 800c124:	9a08      	ldr	r2, [sp, #32]
 800c126:	eb0b 0a02 	add.w	sl, fp, r2
 800c12a:	f10a 0901 	add.w	r9, sl, #1
 800c12e:	464a      	mov	r2, r9
 800c130:	2a01      	cmp	r2, #1
 800c132:	bfb8      	it	lt
 800c134:	2201      	movlt	r2, #1
 800c136:	e7db      	b.n	800c0f0 <_dtoa_r+0x240>
 800c138:	2201      	movs	r2, #1
 800c13a:	e7f2      	b.n	800c122 <_dtoa_r+0x272>
 800c13c:	2401      	movs	r4, #1
 800c13e:	2200      	movs	r2, #0
 800c140:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c144:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c148:	2100      	movs	r1, #0
 800c14a:	46d1      	mov	r9, sl
 800c14c:	2212      	movs	r2, #18
 800c14e:	9108      	str	r1, [sp, #32]
 800c150:	e7ce      	b.n	800c0f0 <_dtoa_r+0x240>
 800c152:	2201      	movs	r2, #1
 800c154:	9207      	str	r2, [sp, #28]
 800c156:	e7f5      	b.n	800c144 <_dtoa_r+0x294>
 800c158:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c15c:	46d1      	mov	r9, sl
 800c15e:	4652      	mov	r2, sl
 800c160:	e7c6      	b.n	800c0f0 <_dtoa_r+0x240>
 800c162:	3101      	adds	r1, #1
 800c164:	6079      	str	r1, [r7, #4]
 800c166:	0040      	lsls	r0, r0, #1
 800c168:	e7c6      	b.n	800c0f8 <_dtoa_r+0x248>
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w
 800c170:	636f4361 	.word	0x636f4361
 800c174:	3fd287a7 	.word	0x3fd287a7
 800c178:	8b60c8b3 	.word	0x8b60c8b3
 800c17c:	3fc68a28 	.word	0x3fc68a28
 800c180:	509f79fb 	.word	0x509f79fb
 800c184:	3fd34413 	.word	0x3fd34413
 800c188:	0804a599 	.word	0x0804a599
 800c18c:	0804a5b0 	.word	0x0804a5b0
 800c190:	7ff00000 	.word	0x7ff00000
 800c194:	0804a595 	.word	0x0804a595
 800c198:	0804a58c 	.word	0x0804a58c
 800c19c:	0804a569 	.word	0x0804a569
 800c1a0:	0804a6a0 	.word	0x0804a6a0
 800c1a4:	0804a60b 	.word	0x0804a60b
 800c1a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c1aa:	9901      	ldr	r1, [sp, #4]
 800c1ac:	6011      	str	r1, [r2, #0]
 800c1ae:	f1b9 0f0e 	cmp.w	r9, #14
 800c1b2:	d86c      	bhi.n	800c28e <_dtoa_r+0x3de>
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	d06a      	beq.n	800c28e <_dtoa_r+0x3de>
 800c1b8:	f1bb 0f00 	cmp.w	fp, #0
 800c1bc:	f340 80a0 	ble.w	800c300 <_dtoa_r+0x450>
 800c1c0:	49c1      	ldr	r1, [pc, #772]	; (800c4c8 <_dtoa_r+0x618>)
 800c1c2:	f00b 020f 	and.w	r2, fp, #15
 800c1c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c1ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c1ce:	ed92 7b00 	vldr	d7, [r2]
 800c1d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c1d6:	f000 8087 	beq.w	800c2e8 <_dtoa_r+0x438>
 800c1da:	4abc      	ldr	r2, [pc, #752]	; (800c4cc <_dtoa_r+0x61c>)
 800c1dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800c1e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c1e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c1e8:	f001 010f 	and.w	r1, r1, #15
 800c1ec:	2203      	movs	r2, #3
 800c1ee:	48b7      	ldr	r0, [pc, #732]	; (800c4cc <_dtoa_r+0x61c>)
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	d17b      	bne.n	800c2ec <_dtoa_r+0x43c>
 800c1f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c1f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c202:	2900      	cmp	r1, #0
 800c204:	f000 80a2 	beq.w	800c34c <_dtoa_r+0x49c>
 800c208:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c20c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c210:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c218:	f140 8098 	bpl.w	800c34c <_dtoa_r+0x49c>
 800c21c:	f1b9 0f00 	cmp.w	r9, #0
 800c220:	f000 8094 	beq.w	800c34c <_dtoa_r+0x49c>
 800c224:	f1ba 0f00 	cmp.w	sl, #0
 800c228:	dd2f      	ble.n	800c28a <_dtoa_r+0x3da>
 800c22a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c22e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c232:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c236:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c23a:	3201      	adds	r2, #1
 800c23c:	4650      	mov	r0, sl
 800c23e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c242:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c246:	ee07 2a90 	vmov	s15, r2
 800c24a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c24e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c252:	ee15 4a90 	vmov	r4, s11
 800c256:	ec52 1b15 	vmov	r1, r2, d5
 800c25a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c25e:	2800      	cmp	r0, #0
 800c260:	d177      	bne.n	800c352 <_dtoa_r+0x4a2>
 800c262:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c266:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c26a:	ec42 1b17 	vmov	d7, r1, r2
 800c26e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c276:	f300 8263 	bgt.w	800c740 <_dtoa_r+0x890>
 800c27a:	eeb1 7b47 	vneg.f64	d7, d7
 800c27e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	f100 8258 	bmi.w	800c73a <_dtoa_r+0x88a>
 800c28a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c28e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c290:	2a00      	cmp	r2, #0
 800c292:	f2c0 811d 	blt.w	800c4d0 <_dtoa_r+0x620>
 800c296:	f1bb 0f0e 	cmp.w	fp, #14
 800c29a:	f300 8119 	bgt.w	800c4d0 <_dtoa_r+0x620>
 800c29e:	4b8a      	ldr	r3, [pc, #552]	; (800c4c8 <_dtoa_r+0x618>)
 800c2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2a4:	ed93 6b00 	vldr	d6, [r3]
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f280 80b7 	bge.w	800c41e <_dtoa_r+0x56e>
 800c2b0:	f1b9 0f00 	cmp.w	r9, #0
 800c2b4:	f300 80b3 	bgt.w	800c41e <_dtoa_r+0x56e>
 800c2b8:	f040 823f 	bne.w	800c73a <_dtoa_r+0x88a>
 800c2bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c2c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c2c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d0:	464c      	mov	r4, r9
 800c2d2:	464f      	mov	r7, r9
 800c2d4:	f280 8215 	bge.w	800c702 <_dtoa_r+0x852>
 800c2d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2dc:	2331      	movs	r3, #49	; 0x31
 800c2de:	f808 3b01 	strb.w	r3, [r8], #1
 800c2e2:	f10b 0b01 	add.w	fp, fp, #1
 800c2e6:	e211      	b.n	800c70c <_dtoa_r+0x85c>
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	e780      	b.n	800c1ee <_dtoa_r+0x33e>
 800c2ec:	07cc      	lsls	r4, r1, #31
 800c2ee:	d504      	bpl.n	800c2fa <_dtoa_r+0x44a>
 800c2f0:	ed90 6b00 	vldr	d6, [r0]
 800c2f4:	3201      	adds	r2, #1
 800c2f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2fa:	1049      	asrs	r1, r1, #1
 800c2fc:	3008      	adds	r0, #8
 800c2fe:	e777      	b.n	800c1f0 <_dtoa_r+0x340>
 800c300:	d022      	beq.n	800c348 <_dtoa_r+0x498>
 800c302:	f1cb 0100 	rsb	r1, fp, #0
 800c306:	4a70      	ldr	r2, [pc, #448]	; (800c4c8 <_dtoa_r+0x618>)
 800c308:	f001 000f 	and.w	r0, r1, #15
 800c30c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c310:	ed92 7b00 	vldr	d7, [r2]
 800c314:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c318:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c31c:	486b      	ldr	r0, [pc, #428]	; (800c4cc <_dtoa_r+0x61c>)
 800c31e:	1109      	asrs	r1, r1, #4
 800c320:	2400      	movs	r4, #0
 800c322:	2202      	movs	r2, #2
 800c324:	b929      	cbnz	r1, 800c332 <_dtoa_r+0x482>
 800c326:	2c00      	cmp	r4, #0
 800c328:	f43f af6a 	beq.w	800c200 <_dtoa_r+0x350>
 800c32c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c330:	e766      	b.n	800c200 <_dtoa_r+0x350>
 800c332:	07cf      	lsls	r7, r1, #31
 800c334:	d505      	bpl.n	800c342 <_dtoa_r+0x492>
 800c336:	ed90 6b00 	vldr	d6, [r0]
 800c33a:	3201      	adds	r2, #1
 800c33c:	2401      	movs	r4, #1
 800c33e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c342:	1049      	asrs	r1, r1, #1
 800c344:	3008      	adds	r0, #8
 800c346:	e7ed      	b.n	800c324 <_dtoa_r+0x474>
 800c348:	2202      	movs	r2, #2
 800c34a:	e759      	b.n	800c200 <_dtoa_r+0x350>
 800c34c:	465f      	mov	r7, fp
 800c34e:	4648      	mov	r0, r9
 800c350:	e775      	b.n	800c23e <_dtoa_r+0x38e>
 800c352:	ec42 1b17 	vmov	d7, r1, r2
 800c356:	4a5c      	ldr	r2, [pc, #368]	; (800c4c8 <_dtoa_r+0x618>)
 800c358:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c35c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c360:	9a01      	ldr	r2, [sp, #4]
 800c362:	1814      	adds	r4, r2, r0
 800c364:	9a07      	ldr	r2, [sp, #28]
 800c366:	b352      	cbz	r2, 800c3be <_dtoa_r+0x50e>
 800c368:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c36c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c370:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c374:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c378:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c37c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c380:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c384:	ee14 2a90 	vmov	r2, s9
 800c388:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c38c:	3230      	adds	r2, #48	; 0x30
 800c38e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c392:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39a:	f808 2b01 	strb.w	r2, [r8], #1
 800c39e:	d439      	bmi.n	800c414 <_dtoa_r+0x564>
 800c3a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c3a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ac:	d472      	bmi.n	800c494 <_dtoa_r+0x5e4>
 800c3ae:	45a0      	cmp	r8, r4
 800c3b0:	f43f af6b 	beq.w	800c28a <_dtoa_r+0x3da>
 800c3b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c3b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c3bc:	e7e0      	b.n	800c380 <_dtoa_r+0x4d0>
 800c3be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c3c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c3cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c3d0:	ee14 2a90 	vmov	r2, s9
 800c3d4:	3230      	adds	r2, #48	; 0x30
 800c3d6:	f808 2b01 	strb.w	r2, [r8], #1
 800c3da:	45a0      	cmp	r8, r4
 800c3dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c3e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3e4:	d118      	bne.n	800c418 <_dtoa_r+0x568>
 800c3e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c3ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c3ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f6:	dc4d      	bgt.n	800c494 <_dtoa_r+0x5e4>
 800c3f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c3fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c404:	f57f af41 	bpl.w	800c28a <_dtoa_r+0x3da>
 800c408:	4688      	mov	r8, r1
 800c40a:	3901      	subs	r1, #1
 800c40c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c410:	2b30      	cmp	r3, #48	; 0x30
 800c412:	d0f9      	beq.n	800c408 <_dtoa_r+0x558>
 800c414:	46bb      	mov	fp, r7
 800c416:	e02a      	b.n	800c46e <_dtoa_r+0x5be>
 800c418:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c41c:	e7d6      	b.n	800c3cc <_dtoa_r+0x51c>
 800c41e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c422:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c426:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c42a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c42e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c432:	ee15 3a10 	vmov	r3, s10
 800c436:	3330      	adds	r3, #48	; 0x30
 800c438:	f808 3b01 	strb.w	r3, [r8], #1
 800c43c:	9b01      	ldr	r3, [sp, #4]
 800c43e:	eba8 0303 	sub.w	r3, r8, r3
 800c442:	4599      	cmp	r9, r3
 800c444:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c448:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c44c:	d133      	bne.n	800c4b6 <_dtoa_r+0x606>
 800c44e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c452:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	dc1a      	bgt.n	800c492 <_dtoa_r+0x5e2>
 800c45c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c464:	d103      	bne.n	800c46e <_dtoa_r+0x5be>
 800c466:	ee15 3a10 	vmov	r3, s10
 800c46a:	07d9      	lsls	r1, r3, #31
 800c46c:	d411      	bmi.n	800c492 <_dtoa_r+0x5e2>
 800c46e:	4629      	mov	r1, r5
 800c470:	4630      	mov	r0, r6
 800c472:	f000 fadb 	bl	800ca2c <_Bfree>
 800c476:	2300      	movs	r3, #0
 800c478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c47a:	f888 3000 	strb.w	r3, [r8]
 800c47e:	f10b 0301 	add.w	r3, fp, #1
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c486:	2b00      	cmp	r3, #0
 800c488:	f43f ad61 	beq.w	800bf4e <_dtoa_r+0x9e>
 800c48c:	f8c3 8000 	str.w	r8, [r3]
 800c490:	e55d      	b.n	800bf4e <_dtoa_r+0x9e>
 800c492:	465f      	mov	r7, fp
 800c494:	4643      	mov	r3, r8
 800c496:	4698      	mov	r8, r3
 800c498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49c:	2a39      	cmp	r2, #57	; 0x39
 800c49e:	d106      	bne.n	800c4ae <_dtoa_r+0x5fe>
 800c4a0:	9a01      	ldr	r2, [sp, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d1f7      	bne.n	800c496 <_dtoa_r+0x5e6>
 800c4a6:	9901      	ldr	r1, [sp, #4]
 800c4a8:	2230      	movs	r2, #48	; 0x30
 800c4aa:	3701      	adds	r7, #1
 800c4ac:	700a      	strb	r2, [r1, #0]
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	3201      	adds	r2, #1
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	e7ae      	b.n	800c414 <_dtoa_r+0x564>
 800c4b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c2:	d1b2      	bne.n	800c42a <_dtoa_r+0x57a>
 800c4c4:	e7d3      	b.n	800c46e <_dtoa_r+0x5be>
 800c4c6:	bf00      	nop
 800c4c8:	0804a6a0 	.word	0x0804a6a0
 800c4cc:	0804a678 	.word	0x0804a678
 800c4d0:	9907      	ldr	r1, [sp, #28]
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	f000 80d0 	beq.w	800c678 <_dtoa_r+0x7c8>
 800c4d8:	9906      	ldr	r1, [sp, #24]
 800c4da:	2901      	cmp	r1, #1
 800c4dc:	f300 80b4 	bgt.w	800c648 <_dtoa_r+0x798>
 800c4e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c4e2:	2900      	cmp	r1, #0
 800c4e4:	f000 80ac 	beq.w	800c640 <_dtoa_r+0x790>
 800c4e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c4f0:	461c      	mov	r4, r3
 800c4f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4f4:	9b04      	ldr	r3, [sp, #16]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	9304      	str	r3, [sp, #16]
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	4413      	add	r3, r2
 800c500:	4630      	mov	r0, r6
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	f000 fb4a 	bl	800cb9c <__i2b>
 800c508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c50a:	4607      	mov	r7, r0
 800c50c:	f1b8 0f00 	cmp.w	r8, #0
 800c510:	dd0d      	ble.n	800c52e <_dtoa_r+0x67e>
 800c512:	9a05      	ldr	r2, [sp, #20]
 800c514:	2a00      	cmp	r2, #0
 800c516:	dd0a      	ble.n	800c52e <_dtoa_r+0x67e>
 800c518:	4542      	cmp	r2, r8
 800c51a:	9904      	ldr	r1, [sp, #16]
 800c51c:	bfa8      	it	ge
 800c51e:	4642      	movge	r2, r8
 800c520:	1a89      	subs	r1, r1, r2
 800c522:	9104      	str	r1, [sp, #16]
 800c524:	9905      	ldr	r1, [sp, #20]
 800c526:	eba8 0802 	sub.w	r8, r8, r2
 800c52a:	1a8a      	subs	r2, r1, r2
 800c52c:	9205      	str	r2, [sp, #20]
 800c52e:	b303      	cbz	r3, 800c572 <_dtoa_r+0x6c2>
 800c530:	9a07      	ldr	r2, [sp, #28]
 800c532:	2a00      	cmp	r2, #0
 800c534:	f000 80a5 	beq.w	800c682 <_dtoa_r+0x7d2>
 800c538:	2c00      	cmp	r4, #0
 800c53a:	dd13      	ble.n	800c564 <_dtoa_r+0x6b4>
 800c53c:	4639      	mov	r1, r7
 800c53e:	4622      	mov	r2, r4
 800c540:	4630      	mov	r0, r6
 800c542:	930d      	str	r3, [sp, #52]	; 0x34
 800c544:	f000 fbea 	bl	800cd1c <__pow5mult>
 800c548:	462a      	mov	r2, r5
 800c54a:	4601      	mov	r1, r0
 800c54c:	4607      	mov	r7, r0
 800c54e:	4630      	mov	r0, r6
 800c550:	f000 fb3a 	bl	800cbc8 <__multiply>
 800c554:	4629      	mov	r1, r5
 800c556:	900a      	str	r0, [sp, #40]	; 0x28
 800c558:	4630      	mov	r0, r6
 800c55a:	f000 fa67 	bl	800ca2c <_Bfree>
 800c55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c562:	4615      	mov	r5, r2
 800c564:	1b1a      	subs	r2, r3, r4
 800c566:	d004      	beq.n	800c572 <_dtoa_r+0x6c2>
 800c568:	4629      	mov	r1, r5
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 fbd6 	bl	800cd1c <__pow5mult>
 800c570:	4605      	mov	r5, r0
 800c572:	2101      	movs	r1, #1
 800c574:	4630      	mov	r0, r6
 800c576:	f000 fb11 	bl	800cb9c <__i2b>
 800c57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	4604      	mov	r4, r0
 800c580:	f340 8081 	ble.w	800c686 <_dtoa_r+0x7d6>
 800c584:	461a      	mov	r2, r3
 800c586:	4601      	mov	r1, r0
 800c588:	4630      	mov	r0, r6
 800c58a:	f000 fbc7 	bl	800cd1c <__pow5mult>
 800c58e:	9b06      	ldr	r3, [sp, #24]
 800c590:	2b01      	cmp	r3, #1
 800c592:	4604      	mov	r4, r0
 800c594:	dd7a      	ble.n	800c68c <_dtoa_r+0x7dc>
 800c596:	2300      	movs	r3, #0
 800c598:	930a      	str	r3, [sp, #40]	; 0x28
 800c59a:	6922      	ldr	r2, [r4, #16]
 800c59c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c5a0:	6910      	ldr	r0, [r2, #16]
 800c5a2:	f000 faab 	bl	800cafc <__hi0bits>
 800c5a6:	f1c0 0020 	rsb	r0, r0, #32
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	4418      	add	r0, r3
 800c5ae:	f010 001f 	ands.w	r0, r0, #31
 800c5b2:	f000 808c 	beq.w	800c6ce <_dtoa_r+0x81e>
 800c5b6:	f1c0 0220 	rsb	r2, r0, #32
 800c5ba:	2a04      	cmp	r2, #4
 800c5bc:	f340 8085 	ble.w	800c6ca <_dtoa_r+0x81a>
 800c5c0:	f1c0 001c 	rsb	r0, r0, #28
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4403      	add	r3, r0
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	9b05      	ldr	r3, [sp, #20]
 800c5cc:	4403      	add	r3, r0
 800c5ce:	4480      	add	r8, r0
 800c5d0:	9305      	str	r3, [sp, #20]
 800c5d2:	9b04      	ldr	r3, [sp, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dd05      	ble.n	800c5e4 <_dtoa_r+0x734>
 800c5d8:	4629      	mov	r1, r5
 800c5da:	461a      	mov	r2, r3
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 fbf7 	bl	800cdd0 <__lshift>
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dd05      	ble.n	800c5f6 <_dtoa_r+0x746>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 fbee 	bl	800cdd0 <__lshift>
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d06a      	beq.n	800c6d2 <_dtoa_r+0x822>
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 fc56 	bl	800ceb0 <__mcmp>
 800c604:	2800      	cmp	r0, #0
 800c606:	da64      	bge.n	800c6d2 <_dtoa_r+0x822>
 800c608:	2300      	movs	r3, #0
 800c60a:	4629      	mov	r1, r5
 800c60c:	220a      	movs	r2, #10
 800c60e:	4630      	mov	r0, r6
 800c610:	f000 fa2e 	bl	800ca70 <__multadd>
 800c614:	9b07      	ldr	r3, [sp, #28]
 800c616:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c61a:	4605      	mov	r5, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8191 	beq.w	800c944 <_dtoa_r+0xa94>
 800c622:	4639      	mov	r1, r7
 800c624:	2300      	movs	r3, #0
 800c626:	220a      	movs	r2, #10
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 fa21 	bl	800ca70 <__multadd>
 800c62e:	f1ba 0f00 	cmp.w	sl, #0
 800c632:	4607      	mov	r7, r0
 800c634:	f300 808d 	bgt.w	800c752 <_dtoa_r+0x8a2>
 800c638:	9b06      	ldr	r3, [sp, #24]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	dc50      	bgt.n	800c6e0 <_dtoa_r+0x830>
 800c63e:	e088      	b.n	800c752 <_dtoa_r+0x8a2>
 800c640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c642:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c646:	e751      	b.n	800c4ec <_dtoa_r+0x63c>
 800c648:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	bfbf      	itttt	lt
 800c650:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c652:	1ae3      	sublt	r3, r4, r3
 800c654:	18d2      	addlt	r2, r2, r3
 800c656:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c658:	bfb6      	itet	lt
 800c65a:	4623      	movlt	r3, r4
 800c65c:	1b1c      	subge	r4, r3, r4
 800c65e:	2400      	movlt	r4, #0
 800c660:	f1b9 0f00 	cmp.w	r9, #0
 800c664:	bfb5      	itete	lt
 800c666:	9a04      	ldrlt	r2, [sp, #16]
 800c668:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c66c:	eba2 0809 	sublt.w	r8, r2, r9
 800c670:	464a      	movge	r2, r9
 800c672:	bfb8      	it	lt
 800c674:	2200      	movlt	r2, #0
 800c676:	e73c      	b.n	800c4f2 <_dtoa_r+0x642>
 800c678:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c67c:	9f07      	ldr	r7, [sp, #28]
 800c67e:	461c      	mov	r4, r3
 800c680:	e744      	b.n	800c50c <_dtoa_r+0x65c>
 800c682:	461a      	mov	r2, r3
 800c684:	e770      	b.n	800c568 <_dtoa_r+0x6b8>
 800c686:	9b06      	ldr	r3, [sp, #24]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	dc18      	bgt.n	800c6be <_dtoa_r+0x80e>
 800c68c:	9b02      	ldr	r3, [sp, #8]
 800c68e:	b9b3      	cbnz	r3, 800c6be <_dtoa_r+0x80e>
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c696:	b9a2      	cbnz	r2, 800c6c2 <_dtoa_r+0x812>
 800c698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c69c:	0d12      	lsrs	r2, r2, #20
 800c69e:	0512      	lsls	r2, r2, #20
 800c6a0:	b18a      	cbz	r2, 800c6c6 <_dtoa_r+0x816>
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	9b05      	ldr	r3, [sp, #20]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f47f af70 	bne.w	800c59a <_dtoa_r+0x6ea>
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	e775      	b.n	800c5aa <_dtoa_r+0x6fa>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e7f6      	b.n	800c6b0 <_dtoa_r+0x800>
 800c6c2:	9b02      	ldr	r3, [sp, #8]
 800c6c4:	e7f4      	b.n	800c6b0 <_dtoa_r+0x800>
 800c6c6:	920a      	str	r2, [sp, #40]	; 0x28
 800c6c8:	e7f3      	b.n	800c6b2 <_dtoa_r+0x802>
 800c6ca:	d082      	beq.n	800c5d2 <_dtoa_r+0x722>
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	301c      	adds	r0, #28
 800c6d0:	e778      	b.n	800c5c4 <_dtoa_r+0x714>
 800c6d2:	f1b9 0f00 	cmp.w	r9, #0
 800c6d6:	dc37      	bgt.n	800c748 <_dtoa_r+0x898>
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	dd34      	ble.n	800c748 <_dtoa_r+0x898>
 800c6de:	46ca      	mov	sl, r9
 800c6e0:	f1ba 0f00 	cmp.w	sl, #0
 800c6e4:	d10d      	bne.n	800c702 <_dtoa_r+0x852>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4653      	mov	r3, sl
 800c6ea:	2205      	movs	r2, #5
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f000 f9bf 	bl	800ca70 <__multadd>
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 fbda 	bl	800ceb0 <__mcmp>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f73f adeb 	bgt.w	800c2d8 <_dtoa_r+0x428>
 800c702:	9b08      	ldr	r3, [sp, #32]
 800c704:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c708:	ea6f 0b03 	mvn.w	fp, r3
 800c70c:	f04f 0900 	mov.w	r9, #0
 800c710:	4621      	mov	r1, r4
 800c712:	4630      	mov	r0, r6
 800c714:	f000 f98a 	bl	800ca2c <_Bfree>
 800c718:	2f00      	cmp	r7, #0
 800c71a:	f43f aea8 	beq.w	800c46e <_dtoa_r+0x5be>
 800c71e:	f1b9 0f00 	cmp.w	r9, #0
 800c722:	d005      	beq.n	800c730 <_dtoa_r+0x880>
 800c724:	45b9      	cmp	r9, r7
 800c726:	d003      	beq.n	800c730 <_dtoa_r+0x880>
 800c728:	4649      	mov	r1, r9
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 f97e 	bl	800ca2c <_Bfree>
 800c730:	4639      	mov	r1, r7
 800c732:	4630      	mov	r0, r6
 800c734:	f000 f97a 	bl	800ca2c <_Bfree>
 800c738:	e699      	b.n	800c46e <_dtoa_r+0x5be>
 800c73a:	2400      	movs	r4, #0
 800c73c:	4627      	mov	r7, r4
 800c73e:	e7e0      	b.n	800c702 <_dtoa_r+0x852>
 800c740:	46bb      	mov	fp, r7
 800c742:	4604      	mov	r4, r0
 800c744:	4607      	mov	r7, r0
 800c746:	e5c7      	b.n	800c2d8 <_dtoa_r+0x428>
 800c748:	9b07      	ldr	r3, [sp, #28]
 800c74a:	46ca      	mov	sl, r9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 8100 	beq.w	800c952 <_dtoa_r+0xaa2>
 800c752:	f1b8 0f00 	cmp.w	r8, #0
 800c756:	dd05      	ble.n	800c764 <_dtoa_r+0x8b4>
 800c758:	4639      	mov	r1, r7
 800c75a:	4642      	mov	r2, r8
 800c75c:	4630      	mov	r0, r6
 800c75e:	f000 fb37 	bl	800cdd0 <__lshift>
 800c762:	4607      	mov	r7, r0
 800c764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d05d      	beq.n	800c826 <_dtoa_r+0x976>
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	4630      	mov	r0, r6
 800c76e:	f000 f91d 	bl	800c9ac <_Balloc>
 800c772:	4680      	mov	r8, r0
 800c774:	b928      	cbnz	r0, 800c782 <_dtoa_r+0x8d2>
 800c776:	4b82      	ldr	r3, [pc, #520]	; (800c980 <_dtoa_r+0xad0>)
 800c778:	4602      	mov	r2, r0
 800c77a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c77e:	f7ff bbaf 	b.w	800bee0 <_dtoa_r+0x30>
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	3202      	adds	r2, #2
 800c786:	0092      	lsls	r2, r2, #2
 800c788:	f107 010c 	add.w	r1, r7, #12
 800c78c:	300c      	adds	r0, #12
 800c78e:	f7fe fda5 	bl	800b2dc <memcpy>
 800c792:	2201      	movs	r2, #1
 800c794:	4641      	mov	r1, r8
 800c796:	4630      	mov	r0, r6
 800c798:	f000 fb1a 	bl	800cdd0 <__lshift>
 800c79c:	9b01      	ldr	r3, [sp, #4]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	4453      	add	r3, sl
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	9b02      	ldr	r3, [sp, #8]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	46b9      	mov	r9, r7
 800c7b0:	9307      	str	r3, [sp, #28]
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	9302      	str	r3, [sp, #8]
 800c7be:	f7ff fae9 	bl	800bd94 <quorem>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	3330      	adds	r3, #48	; 0x30
 800c7c6:	9005      	str	r0, [sp, #20]
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ce:	f000 fb6f 	bl	800ceb0 <__mcmp>
 800c7d2:	463a      	mov	r2, r7
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f000 fb85 	bl	800cee8 <__mdiff>
 800c7de:	68c2      	ldr	r2, [r0, #12]
 800c7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e2:	4680      	mov	r8, r0
 800c7e4:	bb0a      	cbnz	r2, 800c82a <_dtoa_r+0x97a>
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f000 fb61 	bl	800ceb0 <__mcmp>
 800c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	4641      	mov	r1, r8
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c7fa:	f000 f917 	bl	800ca2c <_Bfree>
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c802:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c806:	ea43 0102 	orr.w	r1, r3, r2
 800c80a:	9b07      	ldr	r3, [sp, #28]
 800c80c:	430b      	orrs	r3, r1
 800c80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c810:	d10d      	bne.n	800c82e <_dtoa_r+0x97e>
 800c812:	2b39      	cmp	r3, #57	; 0x39
 800c814:	d029      	beq.n	800c86a <_dtoa_r+0x9ba>
 800c816:	f1ba 0f00 	cmp.w	sl, #0
 800c81a:	dd01      	ble.n	800c820 <_dtoa_r+0x970>
 800c81c:	9b05      	ldr	r3, [sp, #20]
 800c81e:	3331      	adds	r3, #49	; 0x31
 800c820:	9a02      	ldr	r2, [sp, #8]
 800c822:	7013      	strb	r3, [r2, #0]
 800c824:	e774      	b.n	800c710 <_dtoa_r+0x860>
 800c826:	4638      	mov	r0, r7
 800c828:	e7b8      	b.n	800c79c <_dtoa_r+0x8ec>
 800c82a:	2201      	movs	r2, #1
 800c82c:	e7e1      	b.n	800c7f2 <_dtoa_r+0x942>
 800c82e:	f1ba 0f00 	cmp.w	sl, #0
 800c832:	db06      	blt.n	800c842 <_dtoa_r+0x992>
 800c834:	9906      	ldr	r1, [sp, #24]
 800c836:	ea41 0a0a 	orr.w	sl, r1, sl
 800c83a:	9907      	ldr	r1, [sp, #28]
 800c83c:	ea5a 0101 	orrs.w	r1, sl, r1
 800c840:	d120      	bne.n	800c884 <_dtoa_r+0x9d4>
 800c842:	2a00      	cmp	r2, #0
 800c844:	ddec      	ble.n	800c820 <_dtoa_r+0x970>
 800c846:	4629      	mov	r1, r5
 800c848:	2201      	movs	r2, #1
 800c84a:	4630      	mov	r0, r6
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	f000 fabf 	bl	800cdd0 <__lshift>
 800c852:	4621      	mov	r1, r4
 800c854:	4605      	mov	r5, r0
 800c856:	f000 fb2b 	bl	800ceb0 <__mcmp>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	9b04      	ldr	r3, [sp, #16]
 800c85e:	dc02      	bgt.n	800c866 <_dtoa_r+0x9b6>
 800c860:	d1de      	bne.n	800c820 <_dtoa_r+0x970>
 800c862:	07da      	lsls	r2, r3, #31
 800c864:	d5dc      	bpl.n	800c820 <_dtoa_r+0x970>
 800c866:	2b39      	cmp	r3, #57	; 0x39
 800c868:	d1d8      	bne.n	800c81c <_dtoa_r+0x96c>
 800c86a:	9a02      	ldr	r2, [sp, #8]
 800c86c:	2339      	movs	r3, #57	; 0x39
 800c86e:	7013      	strb	r3, [r2, #0]
 800c870:	4643      	mov	r3, r8
 800c872:	4698      	mov	r8, r3
 800c874:	3b01      	subs	r3, #1
 800c876:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c87a:	2a39      	cmp	r2, #57	; 0x39
 800c87c:	d051      	beq.n	800c922 <_dtoa_r+0xa72>
 800c87e:	3201      	adds	r2, #1
 800c880:	701a      	strb	r2, [r3, #0]
 800c882:	e745      	b.n	800c710 <_dtoa_r+0x860>
 800c884:	2a00      	cmp	r2, #0
 800c886:	dd03      	ble.n	800c890 <_dtoa_r+0x9e0>
 800c888:	2b39      	cmp	r3, #57	; 0x39
 800c88a:	d0ee      	beq.n	800c86a <_dtoa_r+0x9ba>
 800c88c:	3301      	adds	r3, #1
 800c88e:	e7c7      	b.n	800c820 <_dtoa_r+0x970>
 800c890:	9a04      	ldr	r2, [sp, #16]
 800c892:	9908      	ldr	r1, [sp, #32]
 800c894:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c898:	428a      	cmp	r2, r1
 800c89a:	d02b      	beq.n	800c8f4 <_dtoa_r+0xa44>
 800c89c:	4629      	mov	r1, r5
 800c89e:	2300      	movs	r3, #0
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f000 f8e4 	bl	800ca70 <__multadd>
 800c8a8:	45b9      	cmp	r9, r7
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	f04f 0300 	mov.w	r3, #0
 800c8b0:	f04f 020a 	mov.w	r2, #10
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	d107      	bne.n	800c8ca <_dtoa_r+0xa1a>
 800c8ba:	f000 f8d9 	bl	800ca70 <__multadd>
 800c8be:	4681      	mov	r9, r0
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	9b04      	ldr	r3, [sp, #16]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	e774      	b.n	800c7b4 <_dtoa_r+0x904>
 800c8ca:	f000 f8d1 	bl	800ca70 <__multadd>
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	4681      	mov	r9, r0
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f000 f8ca 	bl	800ca70 <__multadd>
 800c8dc:	4607      	mov	r7, r0
 800c8de:	e7f0      	b.n	800c8c2 <_dtoa_r+0xa12>
 800c8e0:	f1ba 0f00 	cmp.w	sl, #0
 800c8e4:	9a01      	ldr	r2, [sp, #4]
 800c8e6:	bfcc      	ite	gt
 800c8e8:	46d0      	movgt	r8, sl
 800c8ea:	f04f 0801 	movle.w	r8, #1
 800c8ee:	4490      	add	r8, r2
 800c8f0:	f04f 0900 	mov.w	r9, #0
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	9302      	str	r3, [sp, #8]
 800c8fc:	f000 fa68 	bl	800cdd0 <__lshift>
 800c900:	4621      	mov	r1, r4
 800c902:	4605      	mov	r5, r0
 800c904:	f000 fad4 	bl	800ceb0 <__mcmp>
 800c908:	2800      	cmp	r0, #0
 800c90a:	dcb1      	bgt.n	800c870 <_dtoa_r+0x9c0>
 800c90c:	d102      	bne.n	800c914 <_dtoa_r+0xa64>
 800c90e:	9b02      	ldr	r3, [sp, #8]
 800c910:	07db      	lsls	r3, r3, #31
 800c912:	d4ad      	bmi.n	800c870 <_dtoa_r+0x9c0>
 800c914:	4643      	mov	r3, r8
 800c916:	4698      	mov	r8, r3
 800c918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c91c:	2a30      	cmp	r2, #48	; 0x30
 800c91e:	d0fa      	beq.n	800c916 <_dtoa_r+0xa66>
 800c920:	e6f6      	b.n	800c710 <_dtoa_r+0x860>
 800c922:	9a01      	ldr	r2, [sp, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d1a4      	bne.n	800c872 <_dtoa_r+0x9c2>
 800c928:	f10b 0b01 	add.w	fp, fp, #1
 800c92c:	2331      	movs	r3, #49	; 0x31
 800c92e:	e778      	b.n	800c822 <_dtoa_r+0x972>
 800c930:	4b14      	ldr	r3, [pc, #80]	; (800c984 <_dtoa_r+0xad4>)
 800c932:	f7ff bb27 	b.w	800bf84 <_dtoa_r+0xd4>
 800c936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f47f ab03 	bne.w	800bf44 <_dtoa_r+0x94>
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <_dtoa_r+0xad8>)
 800c940:	f7ff bb20 	b.w	800bf84 <_dtoa_r+0xd4>
 800c944:	f1ba 0f00 	cmp.w	sl, #0
 800c948:	dc03      	bgt.n	800c952 <_dtoa_r+0xaa2>
 800c94a:	9b06      	ldr	r3, [sp, #24]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	f73f aec7 	bgt.w	800c6e0 <_dtoa_r+0x830>
 800c952:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c956:	4621      	mov	r1, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	f7ff fa1b 	bl	800bd94 <quorem>
 800c95e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c962:	f808 3b01 	strb.w	r3, [r8], #1
 800c966:	9a01      	ldr	r2, [sp, #4]
 800c968:	eba8 0202 	sub.w	r2, r8, r2
 800c96c:	4592      	cmp	sl, r2
 800c96e:	ddb7      	ble.n	800c8e0 <_dtoa_r+0xa30>
 800c970:	4629      	mov	r1, r5
 800c972:	2300      	movs	r3, #0
 800c974:	220a      	movs	r2, #10
 800c976:	4630      	mov	r0, r6
 800c978:	f000 f87a 	bl	800ca70 <__multadd>
 800c97c:	4605      	mov	r5, r0
 800c97e:	e7ea      	b.n	800c956 <_dtoa_r+0xaa6>
 800c980:	0804a60b 	.word	0x0804a60b
 800c984:	0804a568 	.word	0x0804a568
 800c988:	0804a58c 	.word	0x0804a58c

0800c98c <_localeconv_r>:
 800c98c:	4800      	ldr	r0, [pc, #0]	; (800c990 <_localeconv_r+0x4>)
 800c98e:	4770      	bx	lr
 800c990:	24000bcc 	.word	0x24000bcc

0800c994 <__malloc_lock>:
 800c994:	4801      	ldr	r0, [pc, #4]	; (800c99c <__malloc_lock+0x8>)
 800c996:	f000 bbd4 	b.w	800d142 <__retarget_lock_acquire_recursive>
 800c99a:	bf00      	nop
 800c99c:	24003b58 	.word	0x24003b58

0800c9a0 <__malloc_unlock>:
 800c9a0:	4801      	ldr	r0, [pc, #4]	; (800c9a8 <__malloc_unlock+0x8>)
 800c9a2:	f000 bbcf 	b.w	800d144 <__retarget_lock_release_recursive>
 800c9a6:	bf00      	nop
 800c9a8:	24003b58 	.word	0x24003b58

0800c9ac <_Balloc>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	b976      	cbnz	r6, 800c9d4 <_Balloc+0x28>
 800c9b6:	2010      	movs	r0, #16
 800c9b8:	f7f7 fac4 	bl	8003f44 <__wrap_malloc>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	6260      	str	r0, [r4, #36]	; 0x24
 800c9c0:	b920      	cbnz	r0, 800c9cc <_Balloc+0x20>
 800c9c2:	4b18      	ldr	r3, [pc, #96]	; (800ca24 <_Balloc+0x78>)
 800c9c4:	4818      	ldr	r0, [pc, #96]	; (800ca28 <_Balloc+0x7c>)
 800c9c6:	2166      	movs	r1, #102	; 0x66
 800c9c8:	f000 fb8a 	bl	800d0e0 <__assert_func>
 800c9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9d0:	6006      	str	r6, [r0, #0]
 800c9d2:	60c6      	str	r6, [r0, #12]
 800c9d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9d6:	68f3      	ldr	r3, [r6, #12]
 800c9d8:	b183      	cbz	r3, 800c9fc <_Balloc+0x50>
 800c9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9e2:	b9b8      	cbnz	r0, 800ca14 <_Balloc+0x68>
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	fa01 f605 	lsl.w	r6, r1, r5
 800c9ea:	1d72      	adds	r2, r6, #5
 800c9ec:	0092      	lsls	r2, r2, #2
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 fb60 	bl	800d0b4 <_calloc_r>
 800c9f4:	b160      	cbz	r0, 800ca10 <_Balloc+0x64>
 800c9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9fa:	e00e      	b.n	800ca1a <_Balloc+0x6e>
 800c9fc:	2221      	movs	r2, #33	; 0x21
 800c9fe:	2104      	movs	r1, #4
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 fb57 	bl	800d0b4 <_calloc_r>
 800ca06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca08:	60f0      	str	r0, [r6, #12]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e4      	bne.n	800c9da <_Balloc+0x2e>
 800ca10:	2000      	movs	r0, #0
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	6802      	ldr	r2, [r0, #0]
 800ca16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca20:	e7f7      	b.n	800ca12 <_Balloc+0x66>
 800ca22:	bf00      	nop
 800ca24:	0804a599 	.word	0x0804a599
 800ca28:	0804a61c 	.word	0x0804a61c

0800ca2c <_Bfree>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca30:	4605      	mov	r5, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	b976      	cbnz	r6, 800ca54 <_Bfree+0x28>
 800ca36:	2010      	movs	r0, #16
 800ca38:	f7f7 fa84 	bl	8003f44 <__wrap_malloc>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	6268      	str	r0, [r5, #36]	; 0x24
 800ca40:	b920      	cbnz	r0, 800ca4c <_Bfree+0x20>
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <_Bfree+0x3c>)
 800ca44:	4809      	ldr	r0, [pc, #36]	; (800ca6c <_Bfree+0x40>)
 800ca46:	218a      	movs	r1, #138	; 0x8a
 800ca48:	f000 fb4a 	bl	800d0e0 <__assert_func>
 800ca4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca50:	6006      	str	r6, [r0, #0]
 800ca52:	60c6      	str	r6, [r0, #12]
 800ca54:	b13c      	cbz	r4, 800ca66 <_Bfree+0x3a>
 800ca56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca58:	6862      	ldr	r2, [r4, #4]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca60:	6021      	str	r1, [r4, #0]
 800ca62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	0804a599 	.word	0x0804a599
 800ca6c:	0804a61c 	.word	0x0804a61c

0800ca70 <__multadd>:
 800ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca74:	690d      	ldr	r5, [r1, #16]
 800ca76:	4607      	mov	r7, r0
 800ca78:	460c      	mov	r4, r1
 800ca7a:	461e      	mov	r6, r3
 800ca7c:	f101 0c14 	add.w	ip, r1, #20
 800ca80:	2000      	movs	r0, #0
 800ca82:	f8dc 3000 	ldr.w	r3, [ip]
 800ca86:	b299      	uxth	r1, r3
 800ca88:	fb02 6101 	mla	r1, r2, r1, r6
 800ca8c:	0c1e      	lsrs	r6, r3, #16
 800ca8e:	0c0b      	lsrs	r3, r1, #16
 800ca90:	fb02 3306 	mla	r3, r2, r6, r3
 800ca94:	b289      	uxth	r1, r1
 800ca96:	3001      	adds	r0, #1
 800ca98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca9c:	4285      	cmp	r5, r0
 800ca9e:	f84c 1b04 	str.w	r1, [ip], #4
 800caa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800caa6:	dcec      	bgt.n	800ca82 <__multadd+0x12>
 800caa8:	b30e      	cbz	r6, 800caee <__multadd+0x7e>
 800caaa:	68a3      	ldr	r3, [r4, #8]
 800caac:	42ab      	cmp	r3, r5
 800caae:	dc19      	bgt.n	800cae4 <__multadd+0x74>
 800cab0:	6861      	ldr	r1, [r4, #4]
 800cab2:	4638      	mov	r0, r7
 800cab4:	3101      	adds	r1, #1
 800cab6:	f7ff ff79 	bl	800c9ac <_Balloc>
 800caba:	4680      	mov	r8, r0
 800cabc:	b928      	cbnz	r0, 800caca <__multadd+0x5a>
 800cabe:	4602      	mov	r2, r0
 800cac0:	4b0c      	ldr	r3, [pc, #48]	; (800caf4 <__multadd+0x84>)
 800cac2:	480d      	ldr	r0, [pc, #52]	; (800caf8 <__multadd+0x88>)
 800cac4:	21b5      	movs	r1, #181	; 0xb5
 800cac6:	f000 fb0b 	bl	800d0e0 <__assert_func>
 800caca:	6922      	ldr	r2, [r4, #16]
 800cacc:	3202      	adds	r2, #2
 800cace:	f104 010c 	add.w	r1, r4, #12
 800cad2:	0092      	lsls	r2, r2, #2
 800cad4:	300c      	adds	r0, #12
 800cad6:	f7fe fc01 	bl	800b2dc <memcpy>
 800cada:	4621      	mov	r1, r4
 800cadc:	4638      	mov	r0, r7
 800cade:	f7ff ffa5 	bl	800ca2c <_Bfree>
 800cae2:	4644      	mov	r4, r8
 800cae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cae8:	3501      	adds	r5, #1
 800caea:	615e      	str	r6, [r3, #20]
 800caec:	6125      	str	r5, [r4, #16]
 800caee:	4620      	mov	r0, r4
 800caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf4:	0804a60b 	.word	0x0804a60b
 800caf8:	0804a61c 	.word	0x0804a61c

0800cafc <__hi0bits>:
 800cafc:	0c03      	lsrs	r3, r0, #16
 800cafe:	041b      	lsls	r3, r3, #16
 800cb00:	b9d3      	cbnz	r3, 800cb38 <__hi0bits+0x3c>
 800cb02:	0400      	lsls	r0, r0, #16
 800cb04:	2310      	movs	r3, #16
 800cb06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb0a:	bf04      	itt	eq
 800cb0c:	0200      	lsleq	r0, r0, #8
 800cb0e:	3308      	addeq	r3, #8
 800cb10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb14:	bf04      	itt	eq
 800cb16:	0100      	lsleq	r0, r0, #4
 800cb18:	3304      	addeq	r3, #4
 800cb1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb1e:	bf04      	itt	eq
 800cb20:	0080      	lsleq	r0, r0, #2
 800cb22:	3302      	addeq	r3, #2
 800cb24:	2800      	cmp	r0, #0
 800cb26:	db05      	blt.n	800cb34 <__hi0bits+0x38>
 800cb28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb2c:	f103 0301 	add.w	r3, r3, #1
 800cb30:	bf08      	it	eq
 800cb32:	2320      	moveq	r3, #32
 800cb34:	4618      	mov	r0, r3
 800cb36:	4770      	bx	lr
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e7e4      	b.n	800cb06 <__hi0bits+0xa>

0800cb3c <__lo0bits>:
 800cb3c:	6803      	ldr	r3, [r0, #0]
 800cb3e:	f013 0207 	ands.w	r2, r3, #7
 800cb42:	4601      	mov	r1, r0
 800cb44:	d00b      	beq.n	800cb5e <__lo0bits+0x22>
 800cb46:	07da      	lsls	r2, r3, #31
 800cb48:	d423      	bmi.n	800cb92 <__lo0bits+0x56>
 800cb4a:	0798      	lsls	r0, r3, #30
 800cb4c:	bf49      	itett	mi
 800cb4e:	085b      	lsrmi	r3, r3, #1
 800cb50:	089b      	lsrpl	r3, r3, #2
 800cb52:	2001      	movmi	r0, #1
 800cb54:	600b      	strmi	r3, [r1, #0]
 800cb56:	bf5c      	itt	pl
 800cb58:	600b      	strpl	r3, [r1, #0]
 800cb5a:	2002      	movpl	r0, #2
 800cb5c:	4770      	bx	lr
 800cb5e:	b298      	uxth	r0, r3
 800cb60:	b9a8      	cbnz	r0, 800cb8e <__lo0bits+0x52>
 800cb62:	0c1b      	lsrs	r3, r3, #16
 800cb64:	2010      	movs	r0, #16
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	b90a      	cbnz	r2, 800cb6e <__lo0bits+0x32>
 800cb6a:	3008      	adds	r0, #8
 800cb6c:	0a1b      	lsrs	r3, r3, #8
 800cb6e:	071a      	lsls	r2, r3, #28
 800cb70:	bf04      	itt	eq
 800cb72:	091b      	lsreq	r3, r3, #4
 800cb74:	3004      	addeq	r0, #4
 800cb76:	079a      	lsls	r2, r3, #30
 800cb78:	bf04      	itt	eq
 800cb7a:	089b      	lsreq	r3, r3, #2
 800cb7c:	3002      	addeq	r0, #2
 800cb7e:	07da      	lsls	r2, r3, #31
 800cb80:	d403      	bmi.n	800cb8a <__lo0bits+0x4e>
 800cb82:	085b      	lsrs	r3, r3, #1
 800cb84:	f100 0001 	add.w	r0, r0, #1
 800cb88:	d005      	beq.n	800cb96 <__lo0bits+0x5a>
 800cb8a:	600b      	str	r3, [r1, #0]
 800cb8c:	4770      	bx	lr
 800cb8e:	4610      	mov	r0, r2
 800cb90:	e7e9      	b.n	800cb66 <__lo0bits+0x2a>
 800cb92:	2000      	movs	r0, #0
 800cb94:	4770      	bx	lr
 800cb96:	2020      	movs	r0, #32
 800cb98:	4770      	bx	lr
	...

0800cb9c <__i2b>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	460c      	mov	r4, r1
 800cba0:	2101      	movs	r1, #1
 800cba2:	f7ff ff03 	bl	800c9ac <_Balloc>
 800cba6:	4602      	mov	r2, r0
 800cba8:	b928      	cbnz	r0, 800cbb6 <__i2b+0x1a>
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <__i2b+0x24>)
 800cbac:	4805      	ldr	r0, [pc, #20]	; (800cbc4 <__i2b+0x28>)
 800cbae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbb2:	f000 fa95 	bl	800d0e0 <__assert_func>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	6144      	str	r4, [r0, #20]
 800cbba:	6103      	str	r3, [r0, #16]
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0804a60b 	.word	0x0804a60b
 800cbc4:	0804a61c 	.word	0x0804a61c

0800cbc8 <__multiply>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	4691      	mov	r9, r2
 800cbce:	690a      	ldr	r2, [r1, #16]
 800cbd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	bfb8      	it	lt
 800cbd8:	460b      	movlt	r3, r1
 800cbda:	460c      	mov	r4, r1
 800cbdc:	bfbc      	itt	lt
 800cbde:	464c      	movlt	r4, r9
 800cbe0:	4699      	movlt	r9, r3
 800cbe2:	6927      	ldr	r7, [r4, #16]
 800cbe4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbe8:	68a3      	ldr	r3, [r4, #8]
 800cbea:	6861      	ldr	r1, [r4, #4]
 800cbec:	eb07 060a 	add.w	r6, r7, sl
 800cbf0:	42b3      	cmp	r3, r6
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	bfb8      	it	lt
 800cbf6:	3101      	addlt	r1, #1
 800cbf8:	f7ff fed8 	bl	800c9ac <_Balloc>
 800cbfc:	b930      	cbnz	r0, 800cc0c <__multiply+0x44>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	4b44      	ldr	r3, [pc, #272]	; (800cd14 <__multiply+0x14c>)
 800cc02:	4845      	ldr	r0, [pc, #276]	; (800cd18 <__multiply+0x150>)
 800cc04:	f240 115d 	movw	r1, #349	; 0x15d
 800cc08:	f000 fa6a 	bl	800d0e0 <__assert_func>
 800cc0c:	f100 0514 	add.w	r5, r0, #20
 800cc10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc14:	462b      	mov	r3, r5
 800cc16:	2200      	movs	r2, #0
 800cc18:	4543      	cmp	r3, r8
 800cc1a:	d321      	bcc.n	800cc60 <__multiply+0x98>
 800cc1c:	f104 0314 	add.w	r3, r4, #20
 800cc20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc24:	f109 0314 	add.w	r3, r9, #20
 800cc28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc2c:	9202      	str	r2, [sp, #8]
 800cc2e:	1b3a      	subs	r2, r7, r4
 800cc30:	3a15      	subs	r2, #21
 800cc32:	f022 0203 	bic.w	r2, r2, #3
 800cc36:	3204      	adds	r2, #4
 800cc38:	f104 0115 	add.w	r1, r4, #21
 800cc3c:	428f      	cmp	r7, r1
 800cc3e:	bf38      	it	cc
 800cc40:	2204      	movcc	r2, #4
 800cc42:	9201      	str	r2, [sp, #4]
 800cc44:	9a02      	ldr	r2, [sp, #8]
 800cc46:	9303      	str	r3, [sp, #12]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d80c      	bhi.n	800cc66 <__multiply+0x9e>
 800cc4c:	2e00      	cmp	r6, #0
 800cc4e:	dd03      	ble.n	800cc58 <__multiply+0x90>
 800cc50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d05a      	beq.n	800cd0e <__multiply+0x146>
 800cc58:	6106      	str	r6, [r0, #16]
 800cc5a:	b005      	add	sp, #20
 800cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc60:	f843 2b04 	str.w	r2, [r3], #4
 800cc64:	e7d8      	b.n	800cc18 <__multiply+0x50>
 800cc66:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc6a:	f1ba 0f00 	cmp.w	sl, #0
 800cc6e:	d024      	beq.n	800ccba <__multiply+0xf2>
 800cc70:	f104 0e14 	add.w	lr, r4, #20
 800cc74:	46a9      	mov	r9, r5
 800cc76:	f04f 0c00 	mov.w	ip, #0
 800cc7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc7e:	f8d9 1000 	ldr.w	r1, [r9]
 800cc82:	fa1f fb82 	uxth.w	fp, r2
 800cc86:	b289      	uxth	r1, r1
 800cc88:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc90:	f8d9 2000 	ldr.w	r2, [r9]
 800cc94:	4461      	add	r1, ip
 800cc96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cca2:	b289      	uxth	r1, r1
 800cca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cca8:	4577      	cmp	r7, lr
 800ccaa:	f849 1b04 	str.w	r1, [r9], #4
 800ccae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccb2:	d8e2      	bhi.n	800cc7a <__multiply+0xb2>
 800ccb4:	9a01      	ldr	r2, [sp, #4]
 800ccb6:	f845 c002 	str.w	ip, [r5, r2]
 800ccba:	9a03      	ldr	r2, [sp, #12]
 800ccbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	f1b9 0f00 	cmp.w	r9, #0
 800ccc6:	d020      	beq.n	800cd0a <__multiply+0x142>
 800ccc8:	6829      	ldr	r1, [r5, #0]
 800ccca:	f104 0c14 	add.w	ip, r4, #20
 800ccce:	46ae      	mov	lr, r5
 800ccd0:	f04f 0a00 	mov.w	sl, #0
 800ccd4:	f8bc b000 	ldrh.w	fp, [ip]
 800ccd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ccdc:	fb09 220b 	mla	r2, r9, fp, r2
 800cce0:	4492      	add	sl, r2
 800cce2:	b289      	uxth	r1, r1
 800cce4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cce8:	f84e 1b04 	str.w	r1, [lr], #4
 800ccec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccf0:	f8be 1000 	ldrh.w	r1, [lr]
 800ccf4:	0c12      	lsrs	r2, r2, #16
 800ccf6:	fb09 1102 	mla	r1, r9, r2, r1
 800ccfa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ccfe:	4567      	cmp	r7, ip
 800cd00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd04:	d8e6      	bhi.n	800ccd4 <__multiply+0x10c>
 800cd06:	9a01      	ldr	r2, [sp, #4]
 800cd08:	50a9      	str	r1, [r5, r2]
 800cd0a:	3504      	adds	r5, #4
 800cd0c:	e79a      	b.n	800cc44 <__multiply+0x7c>
 800cd0e:	3e01      	subs	r6, #1
 800cd10:	e79c      	b.n	800cc4c <__multiply+0x84>
 800cd12:	bf00      	nop
 800cd14:	0804a60b 	.word	0x0804a60b
 800cd18:	0804a61c 	.word	0x0804a61c

0800cd1c <__pow5mult>:
 800cd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd20:	4615      	mov	r5, r2
 800cd22:	f012 0203 	ands.w	r2, r2, #3
 800cd26:	4606      	mov	r6, r0
 800cd28:	460f      	mov	r7, r1
 800cd2a:	d007      	beq.n	800cd3c <__pow5mult+0x20>
 800cd2c:	4c25      	ldr	r4, [pc, #148]	; (800cdc4 <__pow5mult+0xa8>)
 800cd2e:	3a01      	subs	r2, #1
 800cd30:	2300      	movs	r3, #0
 800cd32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd36:	f7ff fe9b 	bl	800ca70 <__multadd>
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	10ad      	asrs	r5, r5, #2
 800cd3e:	d03d      	beq.n	800cdbc <__pow5mult+0xa0>
 800cd40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd42:	b97c      	cbnz	r4, 800cd64 <__pow5mult+0x48>
 800cd44:	2010      	movs	r0, #16
 800cd46:	f7f7 f8fd 	bl	8003f44 <__wrap_malloc>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	6270      	str	r0, [r6, #36]	; 0x24
 800cd4e:	b928      	cbnz	r0, 800cd5c <__pow5mult+0x40>
 800cd50:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <__pow5mult+0xac>)
 800cd52:	481e      	ldr	r0, [pc, #120]	; (800cdcc <__pow5mult+0xb0>)
 800cd54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd58:	f000 f9c2 	bl	800d0e0 <__assert_func>
 800cd5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd60:	6004      	str	r4, [r0, #0]
 800cd62:	60c4      	str	r4, [r0, #12]
 800cd64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd6c:	b94c      	cbnz	r4, 800cd82 <__pow5mult+0x66>
 800cd6e:	f240 2171 	movw	r1, #625	; 0x271
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7ff ff12 	bl	800cb9c <__i2b>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd7e:	4604      	mov	r4, r0
 800cd80:	6003      	str	r3, [r0, #0]
 800cd82:	f04f 0900 	mov.w	r9, #0
 800cd86:	07eb      	lsls	r3, r5, #31
 800cd88:	d50a      	bpl.n	800cda0 <__pow5mult+0x84>
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	4622      	mov	r2, r4
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7ff ff1a 	bl	800cbc8 <__multiply>
 800cd94:	4639      	mov	r1, r7
 800cd96:	4680      	mov	r8, r0
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff fe47 	bl	800ca2c <_Bfree>
 800cd9e:	4647      	mov	r7, r8
 800cda0:	106d      	asrs	r5, r5, #1
 800cda2:	d00b      	beq.n	800cdbc <__pow5mult+0xa0>
 800cda4:	6820      	ldr	r0, [r4, #0]
 800cda6:	b938      	cbnz	r0, 800cdb8 <__pow5mult+0x9c>
 800cda8:	4622      	mov	r2, r4
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff ff0b 	bl	800cbc8 <__multiply>
 800cdb2:	6020      	str	r0, [r4, #0]
 800cdb4:	f8c0 9000 	str.w	r9, [r0]
 800cdb8:	4604      	mov	r4, r0
 800cdba:	e7e4      	b.n	800cd86 <__pow5mult+0x6a>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0804a768 	.word	0x0804a768
 800cdc8:	0804a599 	.word	0x0804a599
 800cdcc:	0804a61c 	.word	0x0804a61c

0800cdd0 <__lshift>:
 800cdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	6849      	ldr	r1, [r1, #4]
 800cdd8:	6923      	ldr	r3, [r4, #16]
 800cdda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdde:	68a3      	ldr	r3, [r4, #8]
 800cde0:	4607      	mov	r7, r0
 800cde2:	4691      	mov	r9, r2
 800cde4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cde8:	f108 0601 	add.w	r6, r8, #1
 800cdec:	42b3      	cmp	r3, r6
 800cdee:	db0b      	blt.n	800ce08 <__lshift+0x38>
 800cdf0:	4638      	mov	r0, r7
 800cdf2:	f7ff fddb 	bl	800c9ac <_Balloc>
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	b948      	cbnz	r0, 800ce0e <__lshift+0x3e>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	4b2a      	ldr	r3, [pc, #168]	; (800cea8 <__lshift+0xd8>)
 800cdfe:	482b      	ldr	r0, [pc, #172]	; (800ceac <__lshift+0xdc>)
 800ce00:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce04:	f000 f96c 	bl	800d0e0 <__assert_func>
 800ce08:	3101      	adds	r1, #1
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	e7ee      	b.n	800cdec <__lshift+0x1c>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f100 0114 	add.w	r1, r0, #20
 800ce14:	f100 0210 	add.w	r2, r0, #16
 800ce18:	4618      	mov	r0, r3
 800ce1a:	4553      	cmp	r3, sl
 800ce1c:	db37      	blt.n	800ce8e <__lshift+0xbe>
 800ce1e:	6920      	ldr	r0, [r4, #16]
 800ce20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce24:	f104 0314 	add.w	r3, r4, #20
 800ce28:	f019 091f 	ands.w	r9, r9, #31
 800ce2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce34:	d02f      	beq.n	800ce96 <__lshift+0xc6>
 800ce36:	f1c9 0e20 	rsb	lr, r9, #32
 800ce3a:	468a      	mov	sl, r1
 800ce3c:	f04f 0c00 	mov.w	ip, #0
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	fa02 f209 	lsl.w	r2, r2, r9
 800ce46:	ea42 020c 	orr.w	r2, r2, ip
 800ce4a:	f84a 2b04 	str.w	r2, [sl], #4
 800ce4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce52:	4298      	cmp	r0, r3
 800ce54:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce58:	d8f2      	bhi.n	800ce40 <__lshift+0x70>
 800ce5a:	1b03      	subs	r3, r0, r4
 800ce5c:	3b15      	subs	r3, #21
 800ce5e:	f023 0303 	bic.w	r3, r3, #3
 800ce62:	3304      	adds	r3, #4
 800ce64:	f104 0215 	add.w	r2, r4, #21
 800ce68:	4290      	cmp	r0, r2
 800ce6a:	bf38      	it	cc
 800ce6c:	2304      	movcc	r3, #4
 800ce6e:	f841 c003 	str.w	ip, [r1, r3]
 800ce72:	f1bc 0f00 	cmp.w	ip, #0
 800ce76:	d001      	beq.n	800ce7c <__lshift+0xac>
 800ce78:	f108 0602 	add.w	r6, r8, #2
 800ce7c:	3e01      	subs	r6, #1
 800ce7e:	4638      	mov	r0, r7
 800ce80:	612e      	str	r6, [r5, #16]
 800ce82:	4621      	mov	r1, r4
 800ce84:	f7ff fdd2 	bl	800ca2c <_Bfree>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce92:	3301      	adds	r3, #1
 800ce94:	e7c1      	b.n	800ce1a <__lshift+0x4a>
 800ce96:	3904      	subs	r1, #4
 800ce98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cea0:	4298      	cmp	r0, r3
 800cea2:	d8f9      	bhi.n	800ce98 <__lshift+0xc8>
 800cea4:	e7ea      	b.n	800ce7c <__lshift+0xac>
 800cea6:	bf00      	nop
 800cea8:	0804a60b 	.word	0x0804a60b
 800ceac:	0804a61c 	.word	0x0804a61c

0800ceb0 <__mcmp>:
 800ceb0:	b530      	push	{r4, r5, lr}
 800ceb2:	6902      	ldr	r2, [r0, #16]
 800ceb4:	690c      	ldr	r4, [r1, #16]
 800ceb6:	1b12      	subs	r2, r2, r4
 800ceb8:	d10e      	bne.n	800ced8 <__mcmp+0x28>
 800ceba:	f100 0314 	add.w	r3, r0, #20
 800cebe:	3114      	adds	r1, #20
 800cec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ced0:	42a5      	cmp	r5, r4
 800ced2:	d003      	beq.n	800cedc <__mcmp+0x2c>
 800ced4:	d305      	bcc.n	800cee2 <__mcmp+0x32>
 800ced6:	2201      	movs	r2, #1
 800ced8:	4610      	mov	r0, r2
 800ceda:	bd30      	pop	{r4, r5, pc}
 800cedc:	4283      	cmp	r3, r0
 800cede:	d3f3      	bcc.n	800cec8 <__mcmp+0x18>
 800cee0:	e7fa      	b.n	800ced8 <__mcmp+0x28>
 800cee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cee6:	e7f7      	b.n	800ced8 <__mcmp+0x28>

0800cee8 <__mdiff>:
 800cee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	460c      	mov	r4, r1
 800ceee:	4606      	mov	r6, r0
 800cef0:	4611      	mov	r1, r2
 800cef2:	4620      	mov	r0, r4
 800cef4:	4690      	mov	r8, r2
 800cef6:	f7ff ffdb 	bl	800ceb0 <__mcmp>
 800cefa:	1e05      	subs	r5, r0, #0
 800cefc:	d110      	bne.n	800cf20 <__mdiff+0x38>
 800cefe:	4629      	mov	r1, r5
 800cf00:	4630      	mov	r0, r6
 800cf02:	f7ff fd53 	bl	800c9ac <_Balloc>
 800cf06:	b930      	cbnz	r0, 800cf16 <__mdiff+0x2e>
 800cf08:	4b3a      	ldr	r3, [pc, #232]	; (800cff4 <__mdiff+0x10c>)
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	f240 2132 	movw	r1, #562	; 0x232
 800cf10:	4839      	ldr	r0, [pc, #228]	; (800cff8 <__mdiff+0x110>)
 800cf12:	f000 f8e5 	bl	800d0e0 <__assert_func>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	bfa4      	itt	ge
 800cf22:	4643      	movge	r3, r8
 800cf24:	46a0      	movge	r8, r4
 800cf26:	4630      	mov	r0, r6
 800cf28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf2c:	bfa6      	itte	ge
 800cf2e:	461c      	movge	r4, r3
 800cf30:	2500      	movge	r5, #0
 800cf32:	2501      	movlt	r5, #1
 800cf34:	f7ff fd3a 	bl	800c9ac <_Balloc>
 800cf38:	b920      	cbnz	r0, 800cf44 <__mdiff+0x5c>
 800cf3a:	4b2e      	ldr	r3, [pc, #184]	; (800cff4 <__mdiff+0x10c>)
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf42:	e7e5      	b.n	800cf10 <__mdiff+0x28>
 800cf44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf48:	6926      	ldr	r6, [r4, #16]
 800cf4a:	60c5      	str	r5, [r0, #12]
 800cf4c:	f104 0914 	add.w	r9, r4, #20
 800cf50:	f108 0514 	add.w	r5, r8, #20
 800cf54:	f100 0e14 	add.w	lr, r0, #20
 800cf58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf60:	f108 0210 	add.w	r2, r8, #16
 800cf64:	46f2      	mov	sl, lr
 800cf66:	2100      	movs	r1, #0
 800cf68:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf70:	fa1f f883 	uxth.w	r8, r3
 800cf74:	fa11 f18b 	uxtah	r1, r1, fp
 800cf78:	0c1b      	lsrs	r3, r3, #16
 800cf7a:	eba1 0808 	sub.w	r8, r1, r8
 800cf7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf86:	fa1f f888 	uxth.w	r8, r8
 800cf8a:	1419      	asrs	r1, r3, #16
 800cf8c:	454e      	cmp	r6, r9
 800cf8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf92:	f84a 3b04 	str.w	r3, [sl], #4
 800cf96:	d8e7      	bhi.n	800cf68 <__mdiff+0x80>
 800cf98:	1b33      	subs	r3, r6, r4
 800cf9a:	3b15      	subs	r3, #21
 800cf9c:	f023 0303 	bic.w	r3, r3, #3
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	3415      	adds	r4, #21
 800cfa4:	42a6      	cmp	r6, r4
 800cfa6:	bf38      	it	cc
 800cfa8:	2304      	movcc	r3, #4
 800cfaa:	441d      	add	r5, r3
 800cfac:	4473      	add	r3, lr
 800cfae:	469e      	mov	lr, r3
 800cfb0:	462e      	mov	r6, r5
 800cfb2:	4566      	cmp	r6, ip
 800cfb4:	d30e      	bcc.n	800cfd4 <__mdiff+0xec>
 800cfb6:	f10c 0203 	add.w	r2, ip, #3
 800cfba:	1b52      	subs	r2, r2, r5
 800cfbc:	f022 0203 	bic.w	r2, r2, #3
 800cfc0:	3d03      	subs	r5, #3
 800cfc2:	45ac      	cmp	ip, r5
 800cfc4:	bf38      	it	cc
 800cfc6:	2200      	movcc	r2, #0
 800cfc8:	441a      	add	r2, r3
 800cfca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cfce:	b17b      	cbz	r3, 800cff0 <__mdiff+0x108>
 800cfd0:	6107      	str	r7, [r0, #16]
 800cfd2:	e7a3      	b.n	800cf1c <__mdiff+0x34>
 800cfd4:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfd8:	fa11 f288 	uxtah	r2, r1, r8
 800cfdc:	1414      	asrs	r4, r2, #16
 800cfde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfe2:	b292      	uxth	r2, r2
 800cfe4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfe8:	f84e 2b04 	str.w	r2, [lr], #4
 800cfec:	1421      	asrs	r1, r4, #16
 800cfee:	e7e0      	b.n	800cfb2 <__mdiff+0xca>
 800cff0:	3f01      	subs	r7, #1
 800cff2:	e7ea      	b.n	800cfca <__mdiff+0xe2>
 800cff4:	0804a60b 	.word	0x0804a60b
 800cff8:	0804a61c 	.word	0x0804a61c

0800cffc <__d2b>:
 800cffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d000:	4689      	mov	r9, r1
 800d002:	2101      	movs	r1, #1
 800d004:	ec57 6b10 	vmov	r6, r7, d0
 800d008:	4690      	mov	r8, r2
 800d00a:	f7ff fccf 	bl	800c9ac <_Balloc>
 800d00e:	4604      	mov	r4, r0
 800d010:	b930      	cbnz	r0, 800d020 <__d2b+0x24>
 800d012:	4602      	mov	r2, r0
 800d014:	4b25      	ldr	r3, [pc, #148]	; (800d0ac <__d2b+0xb0>)
 800d016:	4826      	ldr	r0, [pc, #152]	; (800d0b0 <__d2b+0xb4>)
 800d018:	f240 310a 	movw	r1, #778	; 0x30a
 800d01c:	f000 f860 	bl	800d0e0 <__assert_func>
 800d020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d028:	bb35      	cbnz	r5, 800d078 <__d2b+0x7c>
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	d028      	beq.n	800d082 <__d2b+0x86>
 800d030:	4668      	mov	r0, sp
 800d032:	9600      	str	r6, [sp, #0]
 800d034:	f7ff fd82 	bl	800cb3c <__lo0bits>
 800d038:	9900      	ldr	r1, [sp, #0]
 800d03a:	b300      	cbz	r0, 800d07e <__d2b+0x82>
 800d03c:	9a01      	ldr	r2, [sp, #4]
 800d03e:	f1c0 0320 	rsb	r3, r0, #32
 800d042:	fa02 f303 	lsl.w	r3, r2, r3
 800d046:	430b      	orrs	r3, r1
 800d048:	40c2      	lsrs	r2, r0
 800d04a:	6163      	str	r3, [r4, #20]
 800d04c:	9201      	str	r2, [sp, #4]
 800d04e:	9b01      	ldr	r3, [sp, #4]
 800d050:	61a3      	str	r3, [r4, #24]
 800d052:	2b00      	cmp	r3, #0
 800d054:	bf14      	ite	ne
 800d056:	2202      	movne	r2, #2
 800d058:	2201      	moveq	r2, #1
 800d05a:	6122      	str	r2, [r4, #16]
 800d05c:	b1d5      	cbz	r5, 800d094 <__d2b+0x98>
 800d05e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d062:	4405      	add	r5, r0
 800d064:	f8c9 5000 	str.w	r5, [r9]
 800d068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d06c:	f8c8 0000 	str.w	r0, [r8]
 800d070:	4620      	mov	r0, r4
 800d072:	b003      	add	sp, #12
 800d074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d07c:	e7d5      	b.n	800d02a <__d2b+0x2e>
 800d07e:	6161      	str	r1, [r4, #20]
 800d080:	e7e5      	b.n	800d04e <__d2b+0x52>
 800d082:	a801      	add	r0, sp, #4
 800d084:	f7ff fd5a 	bl	800cb3c <__lo0bits>
 800d088:	9b01      	ldr	r3, [sp, #4]
 800d08a:	6163      	str	r3, [r4, #20]
 800d08c:	2201      	movs	r2, #1
 800d08e:	6122      	str	r2, [r4, #16]
 800d090:	3020      	adds	r0, #32
 800d092:	e7e3      	b.n	800d05c <__d2b+0x60>
 800d094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d09c:	f8c9 0000 	str.w	r0, [r9]
 800d0a0:	6918      	ldr	r0, [r3, #16]
 800d0a2:	f7ff fd2b 	bl	800cafc <__hi0bits>
 800d0a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0aa:	e7df      	b.n	800d06c <__d2b+0x70>
 800d0ac:	0804a60b 	.word	0x0804a60b
 800d0b0:	0804a61c 	.word	0x0804a61c

0800d0b4 <_calloc_r>:
 800d0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0b6:	fba1 2402 	umull	r2, r4, r1, r2
 800d0ba:	b94c      	cbnz	r4, 800d0d0 <_calloc_r+0x1c>
 800d0bc:	4611      	mov	r1, r2
 800d0be:	9201      	str	r2, [sp, #4]
 800d0c0:	f7fe f98e 	bl	800b3e0 <_malloc_r>
 800d0c4:	9a01      	ldr	r2, [sp, #4]
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	b930      	cbnz	r0, 800d0d8 <_calloc_r+0x24>
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	b003      	add	sp, #12
 800d0ce:	bd30      	pop	{r4, r5, pc}
 800d0d0:	220c      	movs	r2, #12
 800d0d2:	6002      	str	r2, [r0, #0]
 800d0d4:	2500      	movs	r5, #0
 800d0d6:	e7f8      	b.n	800d0ca <_calloc_r+0x16>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	f7fe f90d 	bl	800b2f8 <memset>
 800d0de:	e7f4      	b.n	800d0ca <_calloc_r+0x16>

0800d0e0 <__assert_func>:
 800d0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b09      	ldr	r3, [pc, #36]	; (800d10c <__assert_func+0x2c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	68d8      	ldr	r0, [r3, #12]
 800d0ee:	b14c      	cbz	r4, 800d104 <__assert_func+0x24>
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <__assert_func+0x30>)
 800d0f2:	9100      	str	r1, [sp, #0]
 800d0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0f8:	4906      	ldr	r1, [pc, #24]	; (800d114 <__assert_func+0x34>)
 800d0fa:	462b      	mov	r3, r5
 800d0fc:	f000 f80e 	bl	800d11c <fiprintf>
 800d100:	f000 fa5a 	bl	800d5b8 <abort>
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <__assert_func+0x38>)
 800d106:	461c      	mov	r4, r3
 800d108:	e7f3      	b.n	800d0f2 <__assert_func+0x12>
 800d10a:	bf00      	nop
 800d10c:	24000a78 	.word	0x24000a78
 800d110:	0804a774 	.word	0x0804a774
 800d114:	0804a781 	.word	0x0804a781
 800d118:	0804a7af 	.word	0x0804a7af

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f000 f845 	bl	800d1bc <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	24000a78 	.word	0x24000a78

0800d140 <__retarget_lock_init_recursive>:
 800d140:	4770      	bx	lr

0800d142 <__retarget_lock_acquire_recursive>:
 800d142:	4770      	bx	lr

0800d144 <__retarget_lock_release_recursive>:
 800d144:	4770      	bx	lr

0800d146 <__ascii_mbtowc>:
 800d146:	b082      	sub	sp, #8
 800d148:	b901      	cbnz	r1, 800d14c <__ascii_mbtowc+0x6>
 800d14a:	a901      	add	r1, sp, #4
 800d14c:	b142      	cbz	r2, 800d160 <__ascii_mbtowc+0x1a>
 800d14e:	b14b      	cbz	r3, 800d164 <__ascii_mbtowc+0x1e>
 800d150:	7813      	ldrb	r3, [r2, #0]
 800d152:	600b      	str	r3, [r1, #0]
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	1e10      	subs	r0, r2, #0
 800d158:	bf18      	it	ne
 800d15a:	2001      	movne	r0, #1
 800d15c:	b002      	add	sp, #8
 800d15e:	4770      	bx	lr
 800d160:	4610      	mov	r0, r2
 800d162:	e7fb      	b.n	800d15c <__ascii_mbtowc+0x16>
 800d164:	f06f 0001 	mvn.w	r0, #1
 800d168:	e7f8      	b.n	800d15c <__ascii_mbtowc+0x16>

0800d16a <__sfputc_r>:
 800d16a:	6893      	ldr	r3, [r2, #8]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	b410      	push	{r4}
 800d172:	6093      	str	r3, [r2, #8]
 800d174:	da08      	bge.n	800d188 <__sfputc_r+0x1e>
 800d176:	6994      	ldr	r4, [r2, #24]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	db01      	blt.n	800d180 <__sfputc_r+0x16>
 800d17c:	290a      	cmp	r1, #10
 800d17e:	d103      	bne.n	800d188 <__sfputc_r+0x1e>
 800d180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d184:	f000 b94a 	b.w	800d41c <__swbuf_r>
 800d188:	6813      	ldr	r3, [r2, #0]
 800d18a:	1c58      	adds	r0, r3, #1
 800d18c:	6010      	str	r0, [r2, #0]
 800d18e:	7019      	strb	r1, [r3, #0]
 800d190:	4608      	mov	r0, r1
 800d192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <__sfputs_r>:
 800d198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	4614      	mov	r4, r2
 800d1a0:	18d5      	adds	r5, r2, r3
 800d1a2:	42ac      	cmp	r4, r5
 800d1a4:	d101      	bne.n	800d1aa <__sfputs_r+0x12>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e007      	b.n	800d1ba <__sfputs_r+0x22>
 800d1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ae:	463a      	mov	r2, r7
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7ff ffda 	bl	800d16a <__sfputc_r>
 800d1b6:	1c43      	adds	r3, r0, #1
 800d1b8:	d1f3      	bne.n	800d1a2 <__sfputs_r+0xa>
 800d1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1bc <_vfiprintf_r>:
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	b09d      	sub	sp, #116	; 0x74
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	4698      	mov	r8, r3
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	b118      	cbz	r0, 800d1d4 <_vfiprintf_r+0x18>
 800d1cc:	6983      	ldr	r3, [r0, #24]
 800d1ce:	b90b      	cbnz	r3, 800d1d4 <_vfiprintf_r+0x18>
 800d1d0:	f000 fb14 	bl	800d7fc <__sinit>
 800d1d4:	4b89      	ldr	r3, [pc, #548]	; (800d3fc <_vfiprintf_r+0x240>)
 800d1d6:	429d      	cmp	r5, r3
 800d1d8:	d11b      	bne.n	800d212 <_vfiprintf_r+0x56>
 800d1da:	6875      	ldr	r5, [r6, #4]
 800d1dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1de:	07d9      	lsls	r1, r3, #31
 800d1e0:	d405      	bmi.n	800d1ee <_vfiprintf_r+0x32>
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	059a      	lsls	r2, r3, #22
 800d1e6:	d402      	bmi.n	800d1ee <_vfiprintf_r+0x32>
 800d1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ea:	f7ff ffaa 	bl	800d142 <__retarget_lock_acquire_recursive>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	071b      	lsls	r3, r3, #28
 800d1f2:	d501      	bpl.n	800d1f8 <_vfiprintf_r+0x3c>
 800d1f4:	692b      	ldr	r3, [r5, #16]
 800d1f6:	b9eb      	cbnz	r3, 800d234 <_vfiprintf_r+0x78>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 f96e 	bl	800d4dc <__swsetup_r>
 800d200:	b1c0      	cbz	r0, 800d234 <_vfiprintf_r+0x78>
 800d202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d204:	07dc      	lsls	r4, r3, #31
 800d206:	d50e      	bpl.n	800d226 <_vfiprintf_r+0x6a>
 800d208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d20c:	b01d      	add	sp, #116	; 0x74
 800d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d212:	4b7b      	ldr	r3, [pc, #492]	; (800d400 <_vfiprintf_r+0x244>)
 800d214:	429d      	cmp	r5, r3
 800d216:	d101      	bne.n	800d21c <_vfiprintf_r+0x60>
 800d218:	68b5      	ldr	r5, [r6, #8]
 800d21a:	e7df      	b.n	800d1dc <_vfiprintf_r+0x20>
 800d21c:	4b79      	ldr	r3, [pc, #484]	; (800d404 <_vfiprintf_r+0x248>)
 800d21e:	429d      	cmp	r5, r3
 800d220:	bf08      	it	eq
 800d222:	68f5      	ldreq	r5, [r6, #12]
 800d224:	e7da      	b.n	800d1dc <_vfiprintf_r+0x20>
 800d226:	89ab      	ldrh	r3, [r5, #12]
 800d228:	0598      	lsls	r0, r3, #22
 800d22a:	d4ed      	bmi.n	800d208 <_vfiprintf_r+0x4c>
 800d22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d22e:	f7ff ff89 	bl	800d144 <__retarget_lock_release_recursive>
 800d232:	e7e9      	b.n	800d208 <_vfiprintf_r+0x4c>
 800d234:	2300      	movs	r3, #0
 800d236:	9309      	str	r3, [sp, #36]	; 0x24
 800d238:	2320      	movs	r3, #32
 800d23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d242:	2330      	movs	r3, #48	; 0x30
 800d244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d408 <_vfiprintf_r+0x24c>
 800d248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d24c:	f04f 0901 	mov.w	r9, #1
 800d250:	4623      	mov	r3, r4
 800d252:	469a      	mov	sl, r3
 800d254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d258:	b10a      	cbz	r2, 800d25e <_vfiprintf_r+0xa2>
 800d25a:	2a25      	cmp	r2, #37	; 0x25
 800d25c:	d1f9      	bne.n	800d252 <_vfiprintf_r+0x96>
 800d25e:	ebba 0b04 	subs.w	fp, sl, r4
 800d262:	d00b      	beq.n	800d27c <_vfiprintf_r+0xc0>
 800d264:	465b      	mov	r3, fp
 800d266:	4622      	mov	r2, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7ff ff94 	bl	800d198 <__sfputs_r>
 800d270:	3001      	adds	r0, #1
 800d272:	f000 80aa 	beq.w	800d3ca <_vfiprintf_r+0x20e>
 800d276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d278:	445a      	add	r2, fp
 800d27a:	9209      	str	r2, [sp, #36]	; 0x24
 800d27c:	f89a 3000 	ldrb.w	r3, [sl]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 80a2 	beq.w	800d3ca <_vfiprintf_r+0x20e>
 800d286:	2300      	movs	r3, #0
 800d288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d290:	f10a 0a01 	add.w	sl, sl, #1
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d29c:	931a      	str	r3, [sp, #104]	; 0x68
 800d29e:	4654      	mov	r4, sl
 800d2a0:	2205      	movs	r2, #5
 800d2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a6:	4858      	ldr	r0, [pc, #352]	; (800d408 <_vfiprintf_r+0x24c>)
 800d2a8:	f7f3 f83a 	bl	8000320 <memchr>
 800d2ac:	9a04      	ldr	r2, [sp, #16]
 800d2ae:	b9d8      	cbnz	r0, 800d2e8 <_vfiprintf_r+0x12c>
 800d2b0:	06d1      	lsls	r1, r2, #27
 800d2b2:	bf44      	itt	mi
 800d2b4:	2320      	movmi	r3, #32
 800d2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ba:	0713      	lsls	r3, r2, #28
 800d2bc:	bf44      	itt	mi
 800d2be:	232b      	movmi	r3, #43	; 0x2b
 800d2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ca:	d015      	beq.n	800d2f8 <_vfiprintf_r+0x13c>
 800d2cc:	9a07      	ldr	r2, [sp, #28]
 800d2ce:	4654      	mov	r4, sl
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	f04f 0c0a 	mov.w	ip, #10
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2dc:	3b30      	subs	r3, #48	; 0x30
 800d2de:	2b09      	cmp	r3, #9
 800d2e0:	d94e      	bls.n	800d380 <_vfiprintf_r+0x1c4>
 800d2e2:	b1b0      	cbz	r0, 800d312 <_vfiprintf_r+0x156>
 800d2e4:	9207      	str	r2, [sp, #28]
 800d2e6:	e014      	b.n	800d312 <_vfiprintf_r+0x156>
 800d2e8:	eba0 0308 	sub.w	r3, r0, r8
 800d2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	46a2      	mov	sl, r4
 800d2f6:	e7d2      	b.n	800d29e <_vfiprintf_r+0xe2>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	1d19      	adds	r1, r3, #4
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	9103      	str	r1, [sp, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfbb      	ittet	lt
 800d304:	425b      	neglt	r3, r3
 800d306:	f042 0202 	orrlt.w	r2, r2, #2
 800d30a:	9307      	strge	r3, [sp, #28]
 800d30c:	9307      	strlt	r3, [sp, #28]
 800d30e:	bfb8      	it	lt
 800d310:	9204      	strlt	r2, [sp, #16]
 800d312:	7823      	ldrb	r3, [r4, #0]
 800d314:	2b2e      	cmp	r3, #46	; 0x2e
 800d316:	d10c      	bne.n	800d332 <_vfiprintf_r+0x176>
 800d318:	7863      	ldrb	r3, [r4, #1]
 800d31a:	2b2a      	cmp	r3, #42	; 0x2a
 800d31c:	d135      	bne.n	800d38a <_vfiprintf_r+0x1ce>
 800d31e:	9b03      	ldr	r3, [sp, #12]
 800d320:	1d1a      	adds	r2, r3, #4
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	9203      	str	r2, [sp, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	bfb8      	it	lt
 800d32a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d32e:	3402      	adds	r4, #2
 800d330:	9305      	str	r3, [sp, #20]
 800d332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d418 <_vfiprintf_r+0x25c>
 800d336:	7821      	ldrb	r1, [r4, #0]
 800d338:	2203      	movs	r2, #3
 800d33a:	4650      	mov	r0, sl
 800d33c:	f7f2 fff0 	bl	8000320 <memchr>
 800d340:	b140      	cbz	r0, 800d354 <_vfiprintf_r+0x198>
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	eba0 000a 	sub.w	r0, r0, sl
 800d348:	fa03 f000 	lsl.w	r0, r3, r0
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	4303      	orrs	r3, r0
 800d350:	3401      	adds	r4, #1
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d358:	482c      	ldr	r0, [pc, #176]	; (800d40c <_vfiprintf_r+0x250>)
 800d35a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d35e:	2206      	movs	r2, #6
 800d360:	f7f2 ffde 	bl	8000320 <memchr>
 800d364:	2800      	cmp	r0, #0
 800d366:	d03f      	beq.n	800d3e8 <_vfiprintf_r+0x22c>
 800d368:	4b29      	ldr	r3, [pc, #164]	; (800d410 <_vfiprintf_r+0x254>)
 800d36a:	bb1b      	cbnz	r3, 800d3b4 <_vfiprintf_r+0x1f8>
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	3307      	adds	r3, #7
 800d370:	f023 0307 	bic.w	r3, r3, #7
 800d374:	3308      	adds	r3, #8
 800d376:	9303      	str	r3, [sp, #12]
 800d378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d37a:	443b      	add	r3, r7
 800d37c:	9309      	str	r3, [sp, #36]	; 0x24
 800d37e:	e767      	b.n	800d250 <_vfiprintf_r+0x94>
 800d380:	fb0c 3202 	mla	r2, ip, r2, r3
 800d384:	460c      	mov	r4, r1
 800d386:	2001      	movs	r0, #1
 800d388:	e7a5      	b.n	800d2d6 <_vfiprintf_r+0x11a>
 800d38a:	2300      	movs	r3, #0
 800d38c:	3401      	adds	r4, #1
 800d38e:	9305      	str	r3, [sp, #20]
 800d390:	4619      	mov	r1, r3
 800d392:	f04f 0c0a 	mov.w	ip, #10
 800d396:	4620      	mov	r0, r4
 800d398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d39c:	3a30      	subs	r2, #48	; 0x30
 800d39e:	2a09      	cmp	r2, #9
 800d3a0:	d903      	bls.n	800d3aa <_vfiprintf_r+0x1ee>
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d0c5      	beq.n	800d332 <_vfiprintf_r+0x176>
 800d3a6:	9105      	str	r1, [sp, #20]
 800d3a8:	e7c3      	b.n	800d332 <_vfiprintf_r+0x176>
 800d3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e7f0      	b.n	800d396 <_vfiprintf_r+0x1da>
 800d3b4:	ab03      	add	r3, sp, #12
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	4b16      	ldr	r3, [pc, #88]	; (800d414 <_vfiprintf_r+0x258>)
 800d3bc:	a904      	add	r1, sp, #16
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7fe f912 	bl	800b5e8 <_printf_float>
 800d3c4:	4607      	mov	r7, r0
 800d3c6:	1c78      	adds	r0, r7, #1
 800d3c8:	d1d6      	bne.n	800d378 <_vfiprintf_r+0x1bc>
 800d3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3cc:	07d9      	lsls	r1, r3, #31
 800d3ce:	d405      	bmi.n	800d3dc <_vfiprintf_r+0x220>
 800d3d0:	89ab      	ldrh	r3, [r5, #12]
 800d3d2:	059a      	lsls	r2, r3, #22
 800d3d4:	d402      	bmi.n	800d3dc <_vfiprintf_r+0x220>
 800d3d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3d8:	f7ff feb4 	bl	800d144 <__retarget_lock_release_recursive>
 800d3dc:	89ab      	ldrh	r3, [r5, #12]
 800d3de:	065b      	lsls	r3, r3, #25
 800d3e0:	f53f af12 	bmi.w	800d208 <_vfiprintf_r+0x4c>
 800d3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e6:	e711      	b.n	800d20c <_vfiprintf_r+0x50>
 800d3e8:	ab03      	add	r3, sp, #12
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	4b09      	ldr	r3, [pc, #36]	; (800d414 <_vfiprintf_r+0x258>)
 800d3f0:	a904      	add	r1, sp, #16
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7fe fb84 	bl	800bb00 <_printf_i>
 800d3f8:	e7e4      	b.n	800d3c4 <_vfiprintf_r+0x208>
 800d3fa:	bf00      	nop
 800d3fc:	0804a8ec 	.word	0x0804a8ec
 800d400:	0804a90c 	.word	0x0804a90c
 800d404:	0804a8cc 	.word	0x0804a8cc
 800d408:	0804a7ba 	.word	0x0804a7ba
 800d40c:	0804a7c4 	.word	0x0804a7c4
 800d410:	0800b5e9 	.word	0x0800b5e9
 800d414:	0800d199 	.word	0x0800d199
 800d418:	0804a7c0 	.word	0x0804a7c0

0800d41c <__swbuf_r>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	460e      	mov	r6, r1
 800d420:	4614      	mov	r4, r2
 800d422:	4605      	mov	r5, r0
 800d424:	b118      	cbz	r0, 800d42e <__swbuf_r+0x12>
 800d426:	6983      	ldr	r3, [r0, #24]
 800d428:	b90b      	cbnz	r3, 800d42e <__swbuf_r+0x12>
 800d42a:	f000 f9e7 	bl	800d7fc <__sinit>
 800d42e:	4b21      	ldr	r3, [pc, #132]	; (800d4b4 <__swbuf_r+0x98>)
 800d430:	429c      	cmp	r4, r3
 800d432:	d12b      	bne.n	800d48c <__swbuf_r+0x70>
 800d434:	686c      	ldr	r4, [r5, #4]
 800d436:	69a3      	ldr	r3, [r4, #24]
 800d438:	60a3      	str	r3, [r4, #8]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	071a      	lsls	r2, r3, #28
 800d43e:	d52f      	bpl.n	800d4a0 <__swbuf_r+0x84>
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	b36b      	cbz	r3, 800d4a0 <__swbuf_r+0x84>
 800d444:	6923      	ldr	r3, [r4, #16]
 800d446:	6820      	ldr	r0, [r4, #0]
 800d448:	1ac0      	subs	r0, r0, r3
 800d44a:	6963      	ldr	r3, [r4, #20]
 800d44c:	b2f6      	uxtb	r6, r6
 800d44e:	4283      	cmp	r3, r0
 800d450:	4637      	mov	r7, r6
 800d452:	dc04      	bgt.n	800d45e <__swbuf_r+0x42>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f000 f93c 	bl	800d6d4 <_fflush_r>
 800d45c:	bb30      	cbnz	r0, 800d4ac <__swbuf_r+0x90>
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	3b01      	subs	r3, #1
 800d462:	60a3      	str	r3, [r4, #8]
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	1c5a      	adds	r2, r3, #1
 800d468:	6022      	str	r2, [r4, #0]
 800d46a:	701e      	strb	r6, [r3, #0]
 800d46c:	6963      	ldr	r3, [r4, #20]
 800d46e:	3001      	adds	r0, #1
 800d470:	4283      	cmp	r3, r0
 800d472:	d004      	beq.n	800d47e <__swbuf_r+0x62>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	07db      	lsls	r3, r3, #31
 800d478:	d506      	bpl.n	800d488 <__swbuf_r+0x6c>
 800d47a:	2e0a      	cmp	r6, #10
 800d47c:	d104      	bne.n	800d488 <__swbuf_r+0x6c>
 800d47e:	4621      	mov	r1, r4
 800d480:	4628      	mov	r0, r5
 800d482:	f000 f927 	bl	800d6d4 <_fflush_r>
 800d486:	b988      	cbnz	r0, 800d4ac <__swbuf_r+0x90>
 800d488:	4638      	mov	r0, r7
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <__swbuf_r+0x9c>)
 800d48e:	429c      	cmp	r4, r3
 800d490:	d101      	bne.n	800d496 <__swbuf_r+0x7a>
 800d492:	68ac      	ldr	r4, [r5, #8]
 800d494:	e7cf      	b.n	800d436 <__swbuf_r+0x1a>
 800d496:	4b09      	ldr	r3, [pc, #36]	; (800d4bc <__swbuf_r+0xa0>)
 800d498:	429c      	cmp	r4, r3
 800d49a:	bf08      	it	eq
 800d49c:	68ec      	ldreq	r4, [r5, #12]
 800d49e:	e7ca      	b.n	800d436 <__swbuf_r+0x1a>
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f000 f81a 	bl	800d4dc <__swsetup_r>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d0cb      	beq.n	800d444 <__swbuf_r+0x28>
 800d4ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d4b0:	e7ea      	b.n	800d488 <__swbuf_r+0x6c>
 800d4b2:	bf00      	nop
 800d4b4:	0804a8ec 	.word	0x0804a8ec
 800d4b8:	0804a90c 	.word	0x0804a90c
 800d4bc:	0804a8cc 	.word	0x0804a8cc

0800d4c0 <__ascii_wctomb>:
 800d4c0:	b149      	cbz	r1, 800d4d6 <__ascii_wctomb+0x16>
 800d4c2:	2aff      	cmp	r2, #255	; 0xff
 800d4c4:	bf85      	ittet	hi
 800d4c6:	238a      	movhi	r3, #138	; 0x8a
 800d4c8:	6003      	strhi	r3, [r0, #0]
 800d4ca:	700a      	strbls	r2, [r1, #0]
 800d4cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d4d0:	bf98      	it	ls
 800d4d2:	2001      	movls	r0, #1
 800d4d4:	4770      	bx	lr
 800d4d6:	4608      	mov	r0, r1
 800d4d8:	4770      	bx	lr
	...

0800d4dc <__swsetup_r>:
 800d4dc:	4b32      	ldr	r3, [pc, #200]	; (800d5a8 <__swsetup_r+0xcc>)
 800d4de:	b570      	push	{r4, r5, r6, lr}
 800d4e0:	681d      	ldr	r5, [r3, #0]
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	b125      	cbz	r5, 800d4f2 <__swsetup_r+0x16>
 800d4e8:	69ab      	ldr	r3, [r5, #24]
 800d4ea:	b913      	cbnz	r3, 800d4f2 <__swsetup_r+0x16>
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f000 f985 	bl	800d7fc <__sinit>
 800d4f2:	4b2e      	ldr	r3, [pc, #184]	; (800d5ac <__swsetup_r+0xd0>)
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	d10f      	bne.n	800d518 <__swsetup_r+0x3c>
 800d4f8:	686c      	ldr	r4, [r5, #4]
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d500:	0719      	lsls	r1, r3, #28
 800d502:	d42c      	bmi.n	800d55e <__swsetup_r+0x82>
 800d504:	06dd      	lsls	r5, r3, #27
 800d506:	d411      	bmi.n	800d52c <__swsetup_r+0x50>
 800d508:	2309      	movs	r3, #9
 800d50a:	6033      	str	r3, [r6, #0]
 800d50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d516:	e03e      	b.n	800d596 <__swsetup_r+0xba>
 800d518:	4b25      	ldr	r3, [pc, #148]	; (800d5b0 <__swsetup_r+0xd4>)
 800d51a:	429c      	cmp	r4, r3
 800d51c:	d101      	bne.n	800d522 <__swsetup_r+0x46>
 800d51e:	68ac      	ldr	r4, [r5, #8]
 800d520:	e7eb      	b.n	800d4fa <__swsetup_r+0x1e>
 800d522:	4b24      	ldr	r3, [pc, #144]	; (800d5b4 <__swsetup_r+0xd8>)
 800d524:	429c      	cmp	r4, r3
 800d526:	bf08      	it	eq
 800d528:	68ec      	ldreq	r4, [r5, #12]
 800d52a:	e7e6      	b.n	800d4fa <__swsetup_r+0x1e>
 800d52c:	0758      	lsls	r0, r3, #29
 800d52e:	d512      	bpl.n	800d556 <__swsetup_r+0x7a>
 800d530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d532:	b141      	cbz	r1, 800d546 <__swsetup_r+0x6a>
 800d534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d538:	4299      	cmp	r1, r3
 800d53a:	d002      	beq.n	800d542 <__swsetup_r+0x66>
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7fd fee3 	bl	800b308 <_free_r>
 800d542:	2300      	movs	r3, #0
 800d544:	6363      	str	r3, [r4, #52]	; 0x34
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d54c:	81a3      	strh	r3, [r4, #12]
 800d54e:	2300      	movs	r3, #0
 800d550:	6063      	str	r3, [r4, #4]
 800d552:	6923      	ldr	r3, [r4, #16]
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	f043 0308 	orr.w	r3, r3, #8
 800d55c:	81a3      	strh	r3, [r4, #12]
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	b94b      	cbnz	r3, 800d576 <__swsetup_r+0x9a>
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d56c:	d003      	beq.n	800d576 <__swsetup_r+0x9a>
 800d56e:	4621      	mov	r1, r4
 800d570:	4630      	mov	r0, r6
 800d572:	f000 fa05 	bl	800d980 <__smakebuf_r>
 800d576:	89a0      	ldrh	r0, [r4, #12]
 800d578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d57c:	f010 0301 	ands.w	r3, r0, #1
 800d580:	d00a      	beq.n	800d598 <__swsetup_r+0xbc>
 800d582:	2300      	movs	r3, #0
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	6963      	ldr	r3, [r4, #20]
 800d588:	425b      	negs	r3, r3
 800d58a:	61a3      	str	r3, [r4, #24]
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	b943      	cbnz	r3, 800d5a2 <__swsetup_r+0xc6>
 800d590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d594:	d1ba      	bne.n	800d50c <__swsetup_r+0x30>
 800d596:	bd70      	pop	{r4, r5, r6, pc}
 800d598:	0781      	lsls	r1, r0, #30
 800d59a:	bf58      	it	pl
 800d59c:	6963      	ldrpl	r3, [r4, #20]
 800d59e:	60a3      	str	r3, [r4, #8]
 800d5a0:	e7f4      	b.n	800d58c <__swsetup_r+0xb0>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	e7f7      	b.n	800d596 <__swsetup_r+0xba>
 800d5a6:	bf00      	nop
 800d5a8:	24000a78 	.word	0x24000a78
 800d5ac:	0804a8ec 	.word	0x0804a8ec
 800d5b0:	0804a90c 	.word	0x0804a90c
 800d5b4:	0804a8cc 	.word	0x0804a8cc

0800d5b8 <abort>:
 800d5b8:	b508      	push	{r3, lr}
 800d5ba:	2006      	movs	r0, #6
 800d5bc:	f000 fa48 	bl	800da50 <raise>
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	f7f3 fc03 	bl	8000dcc <_exit>
	...

0800d5c8 <__sflush_r>:
 800d5c8:	898a      	ldrh	r2, [r1, #12]
 800d5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	0710      	lsls	r0, r2, #28
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	d458      	bmi.n	800d688 <__sflush_r+0xc0>
 800d5d6:	684b      	ldr	r3, [r1, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dc05      	bgt.n	800d5e8 <__sflush_r+0x20>
 800d5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	dc02      	bgt.n	800d5e8 <__sflush_r+0x20>
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ea:	2e00      	cmp	r6, #0
 800d5ec:	d0f9      	beq.n	800d5e2 <__sflush_r+0x1a>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5f4:	682f      	ldr	r7, [r5, #0]
 800d5f6:	602b      	str	r3, [r5, #0]
 800d5f8:	d032      	beq.n	800d660 <__sflush_r+0x98>
 800d5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	075a      	lsls	r2, r3, #29
 800d600:	d505      	bpl.n	800d60e <__sflush_r+0x46>
 800d602:	6863      	ldr	r3, [r4, #4]
 800d604:	1ac0      	subs	r0, r0, r3
 800d606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d608:	b10b      	cbz	r3, 800d60e <__sflush_r+0x46>
 800d60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d60c:	1ac0      	subs	r0, r0, r3
 800d60e:	2300      	movs	r3, #0
 800d610:	4602      	mov	r2, r0
 800d612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d614:	6a21      	ldr	r1, [r4, #32]
 800d616:	4628      	mov	r0, r5
 800d618:	47b0      	blx	r6
 800d61a:	1c43      	adds	r3, r0, #1
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	d106      	bne.n	800d62e <__sflush_r+0x66>
 800d620:	6829      	ldr	r1, [r5, #0]
 800d622:	291d      	cmp	r1, #29
 800d624:	d82c      	bhi.n	800d680 <__sflush_r+0xb8>
 800d626:	4a2a      	ldr	r2, [pc, #168]	; (800d6d0 <__sflush_r+0x108>)
 800d628:	40ca      	lsrs	r2, r1
 800d62a:	07d6      	lsls	r6, r2, #31
 800d62c:	d528      	bpl.n	800d680 <__sflush_r+0xb8>
 800d62e:	2200      	movs	r2, #0
 800d630:	6062      	str	r2, [r4, #4]
 800d632:	04d9      	lsls	r1, r3, #19
 800d634:	6922      	ldr	r2, [r4, #16]
 800d636:	6022      	str	r2, [r4, #0]
 800d638:	d504      	bpl.n	800d644 <__sflush_r+0x7c>
 800d63a:	1c42      	adds	r2, r0, #1
 800d63c:	d101      	bne.n	800d642 <__sflush_r+0x7a>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	b903      	cbnz	r3, 800d644 <__sflush_r+0x7c>
 800d642:	6560      	str	r0, [r4, #84]	; 0x54
 800d644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d646:	602f      	str	r7, [r5, #0]
 800d648:	2900      	cmp	r1, #0
 800d64a:	d0ca      	beq.n	800d5e2 <__sflush_r+0x1a>
 800d64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d650:	4299      	cmp	r1, r3
 800d652:	d002      	beq.n	800d65a <__sflush_r+0x92>
 800d654:	4628      	mov	r0, r5
 800d656:	f7fd fe57 	bl	800b308 <_free_r>
 800d65a:	2000      	movs	r0, #0
 800d65c:	6360      	str	r0, [r4, #52]	; 0x34
 800d65e:	e7c1      	b.n	800d5e4 <__sflush_r+0x1c>
 800d660:	6a21      	ldr	r1, [r4, #32]
 800d662:	2301      	movs	r3, #1
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	1c41      	adds	r1, r0, #1
 800d66a:	d1c7      	bne.n	800d5fc <__sflush_r+0x34>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d0c4      	beq.n	800d5fc <__sflush_r+0x34>
 800d672:	2b1d      	cmp	r3, #29
 800d674:	d001      	beq.n	800d67a <__sflush_r+0xb2>
 800d676:	2b16      	cmp	r3, #22
 800d678:	d101      	bne.n	800d67e <__sflush_r+0xb6>
 800d67a:	602f      	str	r7, [r5, #0]
 800d67c:	e7b1      	b.n	800d5e2 <__sflush_r+0x1a>
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	e7ad      	b.n	800d5e4 <__sflush_r+0x1c>
 800d688:	690f      	ldr	r7, [r1, #16]
 800d68a:	2f00      	cmp	r7, #0
 800d68c:	d0a9      	beq.n	800d5e2 <__sflush_r+0x1a>
 800d68e:	0793      	lsls	r3, r2, #30
 800d690:	680e      	ldr	r6, [r1, #0]
 800d692:	bf08      	it	eq
 800d694:	694b      	ldreq	r3, [r1, #20]
 800d696:	600f      	str	r7, [r1, #0]
 800d698:	bf18      	it	ne
 800d69a:	2300      	movne	r3, #0
 800d69c:	eba6 0807 	sub.w	r8, r6, r7
 800d6a0:	608b      	str	r3, [r1, #8]
 800d6a2:	f1b8 0f00 	cmp.w	r8, #0
 800d6a6:	dd9c      	ble.n	800d5e2 <__sflush_r+0x1a>
 800d6a8:	6a21      	ldr	r1, [r4, #32]
 800d6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6ac:	4643      	mov	r3, r8
 800d6ae:	463a      	mov	r2, r7
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	47b0      	blx	r6
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	dc06      	bgt.n	800d6c6 <__sflush_r+0xfe>
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6be:	81a3      	strh	r3, [r4, #12]
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6c4:	e78e      	b.n	800d5e4 <__sflush_r+0x1c>
 800d6c6:	4407      	add	r7, r0
 800d6c8:	eba8 0800 	sub.w	r8, r8, r0
 800d6cc:	e7e9      	b.n	800d6a2 <__sflush_r+0xda>
 800d6ce:	bf00      	nop
 800d6d0:	20400001 	.word	0x20400001

0800d6d4 <_fflush_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	690b      	ldr	r3, [r1, #16]
 800d6d8:	4605      	mov	r5, r0
 800d6da:	460c      	mov	r4, r1
 800d6dc:	b913      	cbnz	r3, 800d6e4 <_fflush_r+0x10>
 800d6de:	2500      	movs	r5, #0
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	b118      	cbz	r0, 800d6ee <_fflush_r+0x1a>
 800d6e6:	6983      	ldr	r3, [r0, #24]
 800d6e8:	b90b      	cbnz	r3, 800d6ee <_fflush_r+0x1a>
 800d6ea:	f000 f887 	bl	800d7fc <__sinit>
 800d6ee:	4b14      	ldr	r3, [pc, #80]	; (800d740 <_fflush_r+0x6c>)
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	d11b      	bne.n	800d72c <_fflush_r+0x58>
 800d6f4:	686c      	ldr	r4, [r5, #4]
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0ef      	beq.n	800d6de <_fflush_r+0xa>
 800d6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d700:	07d0      	lsls	r0, r2, #31
 800d702:	d404      	bmi.n	800d70e <_fflush_r+0x3a>
 800d704:	0599      	lsls	r1, r3, #22
 800d706:	d402      	bmi.n	800d70e <_fflush_r+0x3a>
 800d708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d70a:	f7ff fd1a 	bl	800d142 <__retarget_lock_acquire_recursive>
 800d70e:	4628      	mov	r0, r5
 800d710:	4621      	mov	r1, r4
 800d712:	f7ff ff59 	bl	800d5c8 <__sflush_r>
 800d716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d718:	07da      	lsls	r2, r3, #31
 800d71a:	4605      	mov	r5, r0
 800d71c:	d4e0      	bmi.n	800d6e0 <_fflush_r+0xc>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	059b      	lsls	r3, r3, #22
 800d722:	d4dd      	bmi.n	800d6e0 <_fflush_r+0xc>
 800d724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d726:	f7ff fd0d 	bl	800d144 <__retarget_lock_release_recursive>
 800d72a:	e7d9      	b.n	800d6e0 <_fflush_r+0xc>
 800d72c:	4b05      	ldr	r3, [pc, #20]	; (800d744 <_fflush_r+0x70>)
 800d72e:	429c      	cmp	r4, r3
 800d730:	d101      	bne.n	800d736 <_fflush_r+0x62>
 800d732:	68ac      	ldr	r4, [r5, #8]
 800d734:	e7df      	b.n	800d6f6 <_fflush_r+0x22>
 800d736:	4b04      	ldr	r3, [pc, #16]	; (800d748 <_fflush_r+0x74>)
 800d738:	429c      	cmp	r4, r3
 800d73a:	bf08      	it	eq
 800d73c:	68ec      	ldreq	r4, [r5, #12]
 800d73e:	e7da      	b.n	800d6f6 <_fflush_r+0x22>
 800d740:	0804a8ec 	.word	0x0804a8ec
 800d744:	0804a90c 	.word	0x0804a90c
 800d748:	0804a8cc 	.word	0x0804a8cc

0800d74c <std>:
 800d74c:	2300      	movs	r3, #0
 800d74e:	b510      	push	{r4, lr}
 800d750:	4604      	mov	r4, r0
 800d752:	e9c0 3300 	strd	r3, r3, [r0]
 800d756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d75a:	6083      	str	r3, [r0, #8]
 800d75c:	8181      	strh	r1, [r0, #12]
 800d75e:	6643      	str	r3, [r0, #100]	; 0x64
 800d760:	81c2      	strh	r2, [r0, #14]
 800d762:	6183      	str	r3, [r0, #24]
 800d764:	4619      	mov	r1, r3
 800d766:	2208      	movs	r2, #8
 800d768:	305c      	adds	r0, #92	; 0x5c
 800d76a:	f7fd fdc5 	bl	800b2f8 <memset>
 800d76e:	4b05      	ldr	r3, [pc, #20]	; (800d784 <std+0x38>)
 800d770:	6263      	str	r3, [r4, #36]	; 0x24
 800d772:	4b05      	ldr	r3, [pc, #20]	; (800d788 <std+0x3c>)
 800d774:	62a3      	str	r3, [r4, #40]	; 0x28
 800d776:	4b05      	ldr	r3, [pc, #20]	; (800d78c <std+0x40>)
 800d778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d77a:	4b05      	ldr	r3, [pc, #20]	; (800d790 <std+0x44>)
 800d77c:	6224      	str	r4, [r4, #32]
 800d77e:	6323      	str	r3, [r4, #48]	; 0x30
 800d780:	bd10      	pop	{r4, pc}
 800d782:	bf00      	nop
 800d784:	0800da89 	.word	0x0800da89
 800d788:	0800daab 	.word	0x0800daab
 800d78c:	0800dae3 	.word	0x0800dae3
 800d790:	0800db07 	.word	0x0800db07

0800d794 <_cleanup_r>:
 800d794:	4901      	ldr	r1, [pc, #4]	; (800d79c <_cleanup_r+0x8>)
 800d796:	f000 b8af 	b.w	800d8f8 <_fwalk_reent>
 800d79a:	bf00      	nop
 800d79c:	0800d6d5 	.word	0x0800d6d5

0800d7a0 <__sfmoreglue>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	2268      	movs	r2, #104	; 0x68
 800d7a4:	1e4d      	subs	r5, r1, #1
 800d7a6:	4355      	muls	r5, r2
 800d7a8:	460e      	mov	r6, r1
 800d7aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7ae:	f7fd fe17 	bl	800b3e0 <_malloc_r>
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	b140      	cbz	r0, 800d7c8 <__sfmoreglue+0x28>
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d7bc:	300c      	adds	r0, #12
 800d7be:	60a0      	str	r0, [r4, #8]
 800d7c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7c4:	f7fd fd98 	bl	800b2f8 <memset>
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	bd70      	pop	{r4, r5, r6, pc}

0800d7cc <__sfp_lock_acquire>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__sfp_lock_acquire+0x8>)
 800d7ce:	f7ff bcb8 	b.w	800d142 <__retarget_lock_acquire_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	24003b59 	.word	0x24003b59

0800d7d8 <__sfp_lock_release>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	; (800d7e0 <__sfp_lock_release+0x8>)
 800d7da:	f7ff bcb3 	b.w	800d144 <__retarget_lock_release_recursive>
 800d7de:	bf00      	nop
 800d7e0:	24003b59 	.word	0x24003b59

0800d7e4 <__sinit_lock_acquire>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	; (800d7ec <__sinit_lock_acquire+0x8>)
 800d7e6:	f7ff bcac 	b.w	800d142 <__retarget_lock_acquire_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	24003b5a 	.word	0x24003b5a

0800d7f0 <__sinit_lock_release>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	; (800d7f8 <__sinit_lock_release+0x8>)
 800d7f2:	f7ff bca7 	b.w	800d144 <__retarget_lock_release_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	24003b5a 	.word	0x24003b5a

0800d7fc <__sinit>:
 800d7fc:	b510      	push	{r4, lr}
 800d7fe:	4604      	mov	r4, r0
 800d800:	f7ff fff0 	bl	800d7e4 <__sinit_lock_acquire>
 800d804:	69a3      	ldr	r3, [r4, #24]
 800d806:	b11b      	cbz	r3, 800d810 <__sinit+0x14>
 800d808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d80c:	f7ff bff0 	b.w	800d7f0 <__sinit_lock_release>
 800d810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d814:	6523      	str	r3, [r4, #80]	; 0x50
 800d816:	4b13      	ldr	r3, [pc, #76]	; (800d864 <__sinit+0x68>)
 800d818:	4a13      	ldr	r2, [pc, #76]	; (800d868 <__sinit+0x6c>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d81e:	42a3      	cmp	r3, r4
 800d820:	bf04      	itt	eq
 800d822:	2301      	moveq	r3, #1
 800d824:	61a3      	streq	r3, [r4, #24]
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f820 	bl	800d86c <__sfp>
 800d82c:	6060      	str	r0, [r4, #4]
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 f81c 	bl	800d86c <__sfp>
 800d834:	60a0      	str	r0, [r4, #8]
 800d836:	4620      	mov	r0, r4
 800d838:	f000 f818 	bl	800d86c <__sfp>
 800d83c:	2200      	movs	r2, #0
 800d83e:	60e0      	str	r0, [r4, #12]
 800d840:	2104      	movs	r1, #4
 800d842:	6860      	ldr	r0, [r4, #4]
 800d844:	f7ff ff82 	bl	800d74c <std>
 800d848:	68a0      	ldr	r0, [r4, #8]
 800d84a:	2201      	movs	r2, #1
 800d84c:	2109      	movs	r1, #9
 800d84e:	f7ff ff7d 	bl	800d74c <std>
 800d852:	68e0      	ldr	r0, [r4, #12]
 800d854:	2202      	movs	r2, #2
 800d856:	2112      	movs	r1, #18
 800d858:	f7ff ff78 	bl	800d74c <std>
 800d85c:	2301      	movs	r3, #1
 800d85e:	61a3      	str	r3, [r4, #24]
 800d860:	e7d2      	b.n	800d808 <__sinit+0xc>
 800d862:	bf00      	nop
 800d864:	0804a554 	.word	0x0804a554
 800d868:	0800d795 	.word	0x0800d795

0800d86c <__sfp>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	4607      	mov	r7, r0
 800d870:	f7ff ffac 	bl	800d7cc <__sfp_lock_acquire>
 800d874:	4b1e      	ldr	r3, [pc, #120]	; (800d8f0 <__sfp+0x84>)
 800d876:	681e      	ldr	r6, [r3, #0]
 800d878:	69b3      	ldr	r3, [r6, #24]
 800d87a:	b913      	cbnz	r3, 800d882 <__sfp+0x16>
 800d87c:	4630      	mov	r0, r6
 800d87e:	f7ff ffbd 	bl	800d7fc <__sinit>
 800d882:	3648      	adds	r6, #72	; 0x48
 800d884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d888:	3b01      	subs	r3, #1
 800d88a:	d503      	bpl.n	800d894 <__sfp+0x28>
 800d88c:	6833      	ldr	r3, [r6, #0]
 800d88e:	b30b      	cbz	r3, 800d8d4 <__sfp+0x68>
 800d890:	6836      	ldr	r6, [r6, #0]
 800d892:	e7f7      	b.n	800d884 <__sfp+0x18>
 800d894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d898:	b9d5      	cbnz	r5, 800d8d0 <__sfp+0x64>
 800d89a:	4b16      	ldr	r3, [pc, #88]	; (800d8f4 <__sfp+0x88>)
 800d89c:	60e3      	str	r3, [r4, #12]
 800d89e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d8a4:	f7ff fc4c 	bl	800d140 <__retarget_lock_init_recursive>
 800d8a8:	f7ff ff96 	bl	800d7d8 <__sfp_lock_release>
 800d8ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8b4:	6025      	str	r5, [r4, #0]
 800d8b6:	61a5      	str	r5, [r4, #24]
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8c0:	f7fd fd1a 	bl	800b2f8 <memset>
 800d8c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d0:	3468      	adds	r4, #104	; 0x68
 800d8d2:	e7d9      	b.n	800d888 <__sfp+0x1c>
 800d8d4:	2104      	movs	r1, #4
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	f7ff ff62 	bl	800d7a0 <__sfmoreglue>
 800d8dc:	4604      	mov	r4, r0
 800d8de:	6030      	str	r0, [r6, #0]
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d1d5      	bne.n	800d890 <__sfp+0x24>
 800d8e4:	f7ff ff78 	bl	800d7d8 <__sfp_lock_release>
 800d8e8:	230c      	movs	r3, #12
 800d8ea:	603b      	str	r3, [r7, #0]
 800d8ec:	e7ee      	b.n	800d8cc <__sfp+0x60>
 800d8ee:	bf00      	nop
 800d8f0:	0804a554 	.word	0x0804a554
 800d8f4:	ffff0001 	.word	0xffff0001

0800d8f8 <_fwalk_reent>:
 800d8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	4688      	mov	r8, r1
 800d900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d904:	2700      	movs	r7, #0
 800d906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d90a:	f1b9 0901 	subs.w	r9, r9, #1
 800d90e:	d505      	bpl.n	800d91c <_fwalk_reent+0x24>
 800d910:	6824      	ldr	r4, [r4, #0]
 800d912:	2c00      	cmp	r4, #0
 800d914:	d1f7      	bne.n	800d906 <_fwalk_reent+0xe>
 800d916:	4638      	mov	r0, r7
 800d918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91c:	89ab      	ldrh	r3, [r5, #12]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d907      	bls.n	800d932 <_fwalk_reent+0x3a>
 800d922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d926:	3301      	adds	r3, #1
 800d928:	d003      	beq.n	800d932 <_fwalk_reent+0x3a>
 800d92a:	4629      	mov	r1, r5
 800d92c:	4630      	mov	r0, r6
 800d92e:	47c0      	blx	r8
 800d930:	4307      	orrs	r7, r0
 800d932:	3568      	adds	r5, #104	; 0x68
 800d934:	e7e9      	b.n	800d90a <_fwalk_reent+0x12>

0800d936 <__swhatbuf_r>:
 800d936:	b570      	push	{r4, r5, r6, lr}
 800d938:	460e      	mov	r6, r1
 800d93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d93e:	2900      	cmp	r1, #0
 800d940:	b096      	sub	sp, #88	; 0x58
 800d942:	4614      	mov	r4, r2
 800d944:	461d      	mov	r5, r3
 800d946:	da08      	bge.n	800d95a <__swhatbuf_r+0x24>
 800d948:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	602a      	str	r2, [r5, #0]
 800d950:	061a      	lsls	r2, r3, #24
 800d952:	d410      	bmi.n	800d976 <__swhatbuf_r+0x40>
 800d954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d958:	e00e      	b.n	800d978 <__swhatbuf_r+0x42>
 800d95a:	466a      	mov	r2, sp
 800d95c:	f000 f8fa 	bl	800db54 <_fstat_r>
 800d960:	2800      	cmp	r0, #0
 800d962:	dbf1      	blt.n	800d948 <__swhatbuf_r+0x12>
 800d964:	9a01      	ldr	r2, [sp, #4]
 800d966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d96a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d96e:	425a      	negs	r2, r3
 800d970:	415a      	adcs	r2, r3
 800d972:	602a      	str	r2, [r5, #0]
 800d974:	e7ee      	b.n	800d954 <__swhatbuf_r+0x1e>
 800d976:	2340      	movs	r3, #64	; 0x40
 800d978:	2000      	movs	r0, #0
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	b016      	add	sp, #88	; 0x58
 800d97e:	bd70      	pop	{r4, r5, r6, pc}

0800d980 <__smakebuf_r>:
 800d980:	898b      	ldrh	r3, [r1, #12]
 800d982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d984:	079d      	lsls	r5, r3, #30
 800d986:	4606      	mov	r6, r0
 800d988:	460c      	mov	r4, r1
 800d98a:	d507      	bpl.n	800d99c <__smakebuf_r+0x1c>
 800d98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	6123      	str	r3, [r4, #16]
 800d994:	2301      	movs	r3, #1
 800d996:	6163      	str	r3, [r4, #20]
 800d998:	b002      	add	sp, #8
 800d99a:	bd70      	pop	{r4, r5, r6, pc}
 800d99c:	ab01      	add	r3, sp, #4
 800d99e:	466a      	mov	r2, sp
 800d9a0:	f7ff ffc9 	bl	800d936 <__swhatbuf_r>
 800d9a4:	9900      	ldr	r1, [sp, #0]
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7fd fd19 	bl	800b3e0 <_malloc_r>
 800d9ae:	b948      	cbnz	r0, 800d9c4 <__smakebuf_r+0x44>
 800d9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b4:	059a      	lsls	r2, r3, #22
 800d9b6:	d4ef      	bmi.n	800d998 <__smakebuf_r+0x18>
 800d9b8:	f023 0303 	bic.w	r3, r3, #3
 800d9bc:	f043 0302 	orr.w	r3, r3, #2
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	e7e3      	b.n	800d98c <__smakebuf_r+0xc>
 800d9c4:	4b0d      	ldr	r3, [pc, #52]	; (800d9fc <__smakebuf_r+0x7c>)
 800d9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	6020      	str	r0, [r4, #0]
 800d9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d0:	81a3      	strh	r3, [r4, #12]
 800d9d2:	9b00      	ldr	r3, [sp, #0]
 800d9d4:	6163      	str	r3, [r4, #20]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	6120      	str	r0, [r4, #16]
 800d9da:	b15b      	cbz	r3, 800d9f4 <__smakebuf_r+0x74>
 800d9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f000 f8c9 	bl	800db78 <_isatty_r>
 800d9e6:	b128      	cbz	r0, 800d9f4 <__smakebuf_r+0x74>
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	f023 0303 	bic.w	r3, r3, #3
 800d9ee:	f043 0301 	orr.w	r3, r3, #1
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	89a0      	ldrh	r0, [r4, #12]
 800d9f6:	4305      	orrs	r5, r0
 800d9f8:	81a5      	strh	r5, [r4, #12]
 800d9fa:	e7cd      	b.n	800d998 <__smakebuf_r+0x18>
 800d9fc:	0800d795 	.word	0x0800d795

0800da00 <_raise_r>:
 800da00:	291f      	cmp	r1, #31
 800da02:	b538      	push	{r3, r4, r5, lr}
 800da04:	4604      	mov	r4, r0
 800da06:	460d      	mov	r5, r1
 800da08:	d904      	bls.n	800da14 <_raise_r+0x14>
 800da0a:	2316      	movs	r3, #22
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da16:	b112      	cbz	r2, 800da1e <_raise_r+0x1e>
 800da18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da1c:	b94b      	cbnz	r3, 800da32 <_raise_r+0x32>
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 f830 	bl	800da84 <_getpid_r>
 800da24:	462a      	mov	r2, r5
 800da26:	4601      	mov	r1, r0
 800da28:	4620      	mov	r0, r4
 800da2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da2e:	f000 b817 	b.w	800da60 <_kill_r>
 800da32:	2b01      	cmp	r3, #1
 800da34:	d00a      	beq.n	800da4c <_raise_r+0x4c>
 800da36:	1c59      	adds	r1, r3, #1
 800da38:	d103      	bne.n	800da42 <_raise_r+0x42>
 800da3a:	2316      	movs	r3, #22
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	2001      	movs	r0, #1
 800da40:	e7e7      	b.n	800da12 <_raise_r+0x12>
 800da42:	2400      	movs	r4, #0
 800da44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da48:	4628      	mov	r0, r5
 800da4a:	4798      	blx	r3
 800da4c:	2000      	movs	r0, #0
 800da4e:	e7e0      	b.n	800da12 <_raise_r+0x12>

0800da50 <raise>:
 800da50:	4b02      	ldr	r3, [pc, #8]	; (800da5c <raise+0xc>)
 800da52:	4601      	mov	r1, r0
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f7ff bfd3 	b.w	800da00 <_raise_r>
 800da5a:	bf00      	nop
 800da5c:	24000a78 	.word	0x24000a78

0800da60 <_kill_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4d07      	ldr	r5, [pc, #28]	; (800da80 <_kill_r+0x20>)
 800da64:	2300      	movs	r3, #0
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	4611      	mov	r1, r2
 800da6c:	602b      	str	r3, [r5, #0]
 800da6e:	f7f3 f9a5 	bl	8000dbc <_kill>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	d102      	bne.n	800da7c <_kill_r+0x1c>
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	b103      	cbz	r3, 800da7c <_kill_r+0x1c>
 800da7a:	6023      	str	r3, [r4, #0]
 800da7c:	bd38      	pop	{r3, r4, r5, pc}
 800da7e:	bf00      	nop
 800da80:	24003b54 	.word	0x24003b54

0800da84 <_getpid_r>:
 800da84:	f7f3 b998 	b.w	8000db8 <_getpid>

0800da88 <__sread>:
 800da88:	b510      	push	{r4, lr}
 800da8a:	460c      	mov	r4, r1
 800da8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da90:	f000 f894 	bl	800dbbc <_read_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	bfab      	itete	ge
 800da98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da9a:	89a3      	ldrhlt	r3, [r4, #12]
 800da9c:	181b      	addge	r3, r3, r0
 800da9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800daa2:	bfac      	ite	ge
 800daa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800daa6:	81a3      	strhlt	r3, [r4, #12]
 800daa8:	bd10      	pop	{r4, pc}

0800daaa <__swrite>:
 800daaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	461f      	mov	r7, r3
 800dab0:	898b      	ldrh	r3, [r1, #12]
 800dab2:	05db      	lsls	r3, r3, #23
 800dab4:	4605      	mov	r5, r0
 800dab6:	460c      	mov	r4, r1
 800dab8:	4616      	mov	r6, r2
 800daba:	d505      	bpl.n	800dac8 <__swrite+0x1e>
 800dabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac0:	2302      	movs	r3, #2
 800dac2:	2200      	movs	r2, #0
 800dac4:	f000 f868 	bl	800db98 <_lseek_r>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	4632      	mov	r2, r6
 800dad6:	463b      	mov	r3, r7
 800dad8:	4628      	mov	r0, r5
 800dada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dade:	f000 b817 	b.w	800db10 <_write_r>

0800dae2 <__sseek>:
 800dae2:	b510      	push	{r4, lr}
 800dae4:	460c      	mov	r4, r1
 800dae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daea:	f000 f855 	bl	800db98 <_lseek_r>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	bf15      	itete	ne
 800daf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800daf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dafa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dafe:	81a3      	strheq	r3, [r4, #12]
 800db00:	bf18      	it	ne
 800db02:	81a3      	strhne	r3, [r4, #12]
 800db04:	bd10      	pop	{r4, pc}

0800db06 <__sclose>:
 800db06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0a:	f000 b813 	b.w	800db34 <_close_r>
	...

0800db10 <_write_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d07      	ldr	r5, [pc, #28]	; (800db30 <_write_r+0x20>)
 800db14:	4604      	mov	r4, r0
 800db16:	4608      	mov	r0, r1
 800db18:	4611      	mov	r1, r2
 800db1a:	2200      	movs	r2, #0
 800db1c:	602a      	str	r2, [r5, #0]
 800db1e:	461a      	mov	r2, r3
 800db20:	f7f6 f9de 	bl	8003ee0 <_write>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_write_r+0x1e>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_write_r+0x1e>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	24003b54 	.word	0x24003b54

0800db34 <_close_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d06      	ldr	r5, [pc, #24]	; (800db50 <_close_r+0x1c>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	f7f3 f958 	bl	8000df4 <_close>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_close_r+0x1a>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_close_r+0x1a>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	24003b54 	.word	0x24003b54

0800db54 <_fstat_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d07      	ldr	r5, [pc, #28]	; (800db74 <_fstat_r+0x20>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	4611      	mov	r1, r2
 800db60:	602b      	str	r3, [r5, #0]
 800db62:	f7f3 f94a 	bl	8000dfa <_fstat>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d102      	bne.n	800db70 <_fstat_r+0x1c>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	b103      	cbz	r3, 800db70 <_fstat_r+0x1c>
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	bd38      	pop	{r3, r4, r5, pc}
 800db72:	bf00      	nop
 800db74:	24003b54 	.word	0x24003b54

0800db78 <_isatty_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d06      	ldr	r5, [pc, #24]	; (800db94 <_isatty_r+0x1c>)
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7f3 f93e 	bl	8000e04 <_isatty>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_isatty_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_isatty_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	24003b54 	.word	0x24003b54

0800db98 <_lseek_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d07      	ldr	r5, [pc, #28]	; (800dbb8 <_lseek_r+0x20>)
 800db9c:	4604      	mov	r4, r0
 800db9e:	4608      	mov	r0, r1
 800dba0:	4611      	mov	r1, r2
 800dba2:	2200      	movs	r2, #0
 800dba4:	602a      	str	r2, [r5, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	f7f3 f92e 	bl	8000e08 <_lseek>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_lseek_r+0x1e>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_lseek_r+0x1e>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	24003b54 	.word	0x24003b54

0800dbbc <_read_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d07      	ldr	r5, [pc, #28]	; (800dbdc <_read_r+0x20>)
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	602a      	str	r2, [r5, #0]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f7f3 f904 	bl	8000dd8 <_read>
 800dbd0:	1c43      	adds	r3, r0, #1
 800dbd2:	d102      	bne.n	800dbda <_read_r+0x1e>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	b103      	cbz	r3, 800dbda <_read_r+0x1e>
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	bd38      	pop	{r3, r4, r5, pc}
 800dbdc:	24003b54 	.word	0x24003b54

0800dbe0 <with_errnof>:
 800dbe0:	b513      	push	{r0, r1, r4, lr}
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dbe8:	f7fd fb46 	bl	800b278 <__errno>
 800dbec:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dbf0:	6004      	str	r4, [r0, #0]
 800dbf2:	b002      	add	sp, #8
 800dbf4:	bd10      	pop	{r4, pc}

0800dbf6 <xflowf>:
 800dbf6:	b130      	cbz	r0, 800dc06 <xflowf+0x10>
 800dbf8:	eef1 7a40 	vneg.f32	s15, s0
 800dbfc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dc00:	2022      	movs	r0, #34	; 0x22
 800dc02:	f7ff bfed 	b.w	800dbe0 <with_errnof>
 800dc06:	eef0 7a40 	vmov.f32	s15, s0
 800dc0a:	e7f7      	b.n	800dbfc <xflowf+0x6>

0800dc0c <__math_uflowf>:
 800dc0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc14 <__math_uflowf+0x8>
 800dc10:	f7ff bff1 	b.w	800dbf6 <xflowf>
 800dc14:	10000000 	.word	0x10000000

0800dc18 <__math_may_uflowf>:
 800dc18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc20 <__math_may_uflowf+0x8>
 800dc1c:	f7ff bfeb 	b.w	800dbf6 <xflowf>
 800dc20:	1a200000 	.word	0x1a200000

0800dc24 <__math_oflowf>:
 800dc24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc2c <__math_oflowf+0x8>
 800dc28:	f7ff bfe5 	b.w	800dbf6 <xflowf>
 800dc2c:	70000000 	.word	0x70000000

0800dc30 <expf>:
 800dc30:	ee10 2a10 	vmov	r2, s0
 800dc34:	f240 412a 	movw	r1, #1066	; 0x42a
 800dc38:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800dc3c:	428b      	cmp	r3, r1
 800dc3e:	b430      	push	{r4, r5}
 800dc40:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800dc44:	d92a      	bls.n	800dc9c <expf+0x6c>
 800dc46:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800dc4a:	d058      	beq.n	800dcfe <expf+0xce>
 800dc4c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800dc50:	d303      	bcc.n	800dc5a <expf+0x2a>
 800dc52:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc56:	bc30      	pop	{r4, r5}
 800dc58:	4770      	bx	lr
 800dc5a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800dd04 <expf+0xd4>
 800dc5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc66:	dd03      	ble.n	800dc70 <expf+0x40>
 800dc68:	bc30      	pop	{r4, r5}
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f7ff bfda 	b.w	800dc24 <__math_oflowf>
 800dc70:	eddf 7a25 	vldr	s15, [pc, #148]	; 800dd08 <expf+0xd8>
 800dc74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc7c:	d503      	bpl.n	800dc86 <expf+0x56>
 800dc7e:	bc30      	pop	{r4, r5}
 800dc80:	2000      	movs	r0, #0
 800dc82:	f7ff bfc3 	b.w	800dc0c <__math_uflowf>
 800dc86:	eddf 7a21 	vldr	s15, [pc, #132]	; 800dd0c <expf+0xdc>
 800dc8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc92:	d503      	bpl.n	800dc9c <expf+0x6c>
 800dc94:	bc30      	pop	{r4, r5}
 800dc96:	2000      	movs	r0, #0
 800dc98:	f7ff bfbe 	b.w	800dc18 <__math_may_uflowf>
 800dc9c:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <expf+0xe0>)
 800dc9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dca2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800dca6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800dcaa:	eeb0 7b44 	vmov.f64	d7, d4
 800dcae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dcb2:	ee17 0a10 	vmov	r0, s14
 800dcb6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800dcba:	f000 021f 	and.w	r2, r0, #31
 800dcbe:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800dcc2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800dcc6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dcca:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800dcce:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800dcd2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dcd6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800dcda:	684d      	ldr	r5, [r1, #4]
 800dcdc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800dce0:	2100      	movs	r1, #0
 800dce2:	190a      	adds	r2, r1, r4
 800dce4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800dce8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800dcec:	ec43 2b17 	vmov	d7, r2, r3
 800dcf0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800dcf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dcf8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dcfc:	e7ab      	b.n	800dc56 <expf+0x26>
 800dcfe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800dd14 <expf+0xe4>
 800dd02:	e7a8      	b.n	800dc56 <expf+0x26>
 800dd04:	42b17217 	.word	0x42b17217
 800dd08:	c2cff1b4 	.word	0xc2cff1b4
 800dd0c:	c2ce8ecf 	.word	0xc2ce8ecf
 800dd10:	0804a930 	.word	0x0804a930
 800dd14:	00000000 	.word	0x00000000

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr
