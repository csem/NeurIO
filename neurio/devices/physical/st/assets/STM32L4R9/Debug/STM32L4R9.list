
STM32L4R9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003aec  0800c580  0800c580  0001c580  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801006c  0801006c  0003074c  2**0
                  CONTENTS
  4 .ARM          00000008  0801006c  0801006c  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010074  08010074  0003074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010074  08010074  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010078  08010078  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000074c  20000000  0801007c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003378  20000760  080107c8  00030760  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20003ad8  080107c8  00033ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002225c  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056c3  00000000  00000000  000529d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000580a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b88  00000000  00000000  00059070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036c46  00000000  00000000  0005abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db08  00000000  00000000  0009183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00137f32  00000000  00000000  000af346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  001e7278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  001e7344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00012504  00000000  00000000  001eb08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000760 	.word	0x20000760
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c560 	.word	0x0800c560

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000764 	.word	0x20000764
 80001fc:	0800c560 	.word	0x0800c560

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_uldivmod>:
 8000df4:	b953      	cbnz	r3, 8000e0c <__aeabi_uldivmod+0x18>
 8000df6:	b94a      	cbnz	r2, 8000e0c <__aeabi_uldivmod+0x18>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2800      	cmpeq	r0, #0
 8000dfe:	bf1c      	itt	ne
 8000e00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e08:	f000 b992 	b.w	8001130 <__aeabi_idiv0>
 8000e0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e14:	f000 f824 	bl	8000e60 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_d2ulz>:
 8000e24:	b5d0      	push	{r4, r6, r7, lr}
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__aeabi_d2ulz+0x34>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4606      	mov	r6, r0
 8000e2c:	460f      	mov	r7, r1
 8000e2e:	f7ff fbfb 	bl	8000628 <__aeabi_dmul>
 8000e32:	f000 f97f 	bl	8001134 <__aeabi_d2uiz>
 8000e36:	4604      	mov	r4, r0
 8000e38:	f7ff fb7c 	bl	8000534 <__aeabi_ui2d>
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <__aeabi_d2ulz+0x38>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f7ff fbf2 	bl	8000628 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4630      	mov	r0, r6
 8000e4a:	4639      	mov	r1, r7
 8000e4c:	f7ff fa34 	bl	80002b8 <__aeabi_dsub>
 8000e50:	f000 f970 	bl	8001134 <__aeabi_d2uiz>
 8000e54:	4621      	mov	r1, r4
 8000e56:	bdd0      	pop	{r4, r6, r7, pc}
 8000e58:	3df00000 	.word	0x3df00000
 8000e5c:	41f00000 	.word	0x41f00000

08000e60 <__udivmoddi4>:
 8000e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e64:	9d08      	ldr	r5, [sp, #32]
 8000e66:	4604      	mov	r4, r0
 8000e68:	468e      	mov	lr, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d14d      	bne.n	8000f0a <__udivmoddi4+0xaa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	4694      	mov	ip, r2
 8000e72:	d969      	bls.n	8000f48 <__udivmoddi4+0xe8>
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	b152      	cbz	r2, 8000e90 <__udivmoddi4+0x30>
 8000e7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000e7e:	f1c2 0120 	rsb	r1, r2, #32
 8000e82:	fa20 f101 	lsr.w	r1, r0, r1
 8000e86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	0c21      	lsrs	r1, r4, #16
 8000e96:	fbbe f6f8 	udiv	r6, lr, r8
 8000e9a:	fa1f f78c 	uxth.w	r7, ip
 8000e9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ea2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ea6:	fb06 f107 	mul.w	r1, r6, r7
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	d90a      	bls.n	8000ec4 <__udivmoddi4+0x64>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000eb6:	f080 811f 	bcs.w	80010f8 <__udivmoddi4+0x298>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 811c 	bls.w	80010f8 <__udivmoddi4+0x298>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ecc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb00 f707 	mul.w	r7, r0, r7
 8000ed8:	42a7      	cmp	r7, r4
 8000eda:	d90a      	bls.n	8000ef2 <__udivmoddi4+0x92>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ee4:	f080 810a 	bcs.w	80010fc <__udivmoddi4+0x29c>
 8000ee8:	42a7      	cmp	r7, r4
 8000eea:	f240 8107 	bls.w	80010fc <__udivmoddi4+0x29c>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ef6:	1be4      	subs	r4, r4, r7
 8000ef8:	2600      	movs	r6, #0
 8000efa:	b11d      	cbz	r5, 8000f04 <__udivmoddi4+0xa4>
 8000efc:	40d4      	lsrs	r4, r2
 8000efe:	2300      	movs	r3, #0
 8000f00:	e9c5 4300 	strd	r4, r3, [r5]
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d909      	bls.n	8000f22 <__udivmoddi4+0xc2>
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	f000 80ef 	beq.w	80010f2 <__udivmoddi4+0x292>
 8000f14:	2600      	movs	r6, #0
 8000f16:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	fab3 f683 	clz	r6, r3
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d14a      	bne.n	8000fc0 <__udivmoddi4+0x160>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0xd4>
 8000f2e:	4282      	cmp	r2, r0
 8000f30:	f200 80f9 	bhi.w	8001126 <__udivmoddi4+0x2c6>
 8000f34:	1a84      	subs	r4, r0, r2
 8000f36:	eb61 0303 	sbc.w	r3, r1, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d0e0      	beq.n	8000f04 <__udivmoddi4+0xa4>
 8000f42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f46:	e7dd      	b.n	8000f04 <__udivmoddi4+0xa4>
 8000f48:	b902      	cbnz	r2, 8000f4c <__udivmoddi4+0xec>
 8000f4a:	deff      	udf	#255	; 0xff
 8000f4c:	fab2 f282 	clz	r2, r2
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	f040 8092 	bne.w	800107a <__udivmoddi4+0x21a>
 8000f56:	eba1 010c 	sub.w	r1, r1, ip
 8000f5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5e:	fa1f fe8c 	uxth.w	lr, ip
 8000f62:	2601      	movs	r6, #1
 8000f64:	0c20      	lsrs	r0, r4, #16
 8000f66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000f6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f72:	fb0e f003 	mul.w	r0, lr, r3
 8000f76:	4288      	cmp	r0, r1
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x12c>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f82:	d202      	bcs.n	8000f8a <__udivmoddi4+0x12a>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f200 80cb 	bhi.w	8001120 <__udivmoddi4+0x2c0>
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1110 	mls	r1, r7, r0, r1
 8000f98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x156>
 8000fa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fac:	d202      	bcs.n	8000fb4 <__udivmoddi4+0x154>
 8000fae:	45a6      	cmp	lr, r4
 8000fb0:	f200 80bb 	bhi.w	800112a <__udivmoddi4+0x2ca>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x9a>
 8000fc0:	f1c6 0720 	rsb	r7, r6, #32
 8000fc4:	40b3      	lsls	r3, r6
 8000fc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fce:	fa20 f407 	lsr.w	r4, r0, r7
 8000fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fd6:	431c      	orrs	r4, r3
 8000fd8:	40f9      	lsrs	r1, r7
 8000fda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fde:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fe6:	0c20      	lsrs	r0, r4, #16
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	fb09 1118 	mls	r1, r9, r8, r1
 8000ff0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ff4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	fa02 f206 	lsl.w	r2, r2, r6
 8000ffe:	d90b      	bls.n	8001018 <__udivmoddi4+0x1b8>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001008:	f080 8088 	bcs.w	800111c <__udivmoddi4+0x2bc>
 800100c:	4288      	cmp	r0, r1
 800100e:	f240 8085 	bls.w	800111c <__udivmoddi4+0x2bc>
 8001012:	f1a8 0802 	sub.w	r8, r8, #2
 8001016:	4461      	add	r1, ip
 8001018:	1a09      	subs	r1, r1, r0
 800101a:	b2a4      	uxth	r4, r4
 800101c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001020:	fb09 1110 	mls	r1, r9, r0, r1
 8001024:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001028:	fb00 fe0e 	mul.w	lr, r0, lr
 800102c:	458e      	cmp	lr, r1
 800102e:	d908      	bls.n	8001042 <__udivmoddi4+0x1e2>
 8001030:	eb1c 0101 	adds.w	r1, ip, r1
 8001034:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8001038:	d26c      	bcs.n	8001114 <__udivmoddi4+0x2b4>
 800103a:	458e      	cmp	lr, r1
 800103c:	d96a      	bls.n	8001114 <__udivmoddi4+0x2b4>
 800103e:	3802      	subs	r0, #2
 8001040:	4461      	add	r1, ip
 8001042:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001046:	fba0 9402 	umull	r9, r4, r0, r2
 800104a:	eba1 010e 	sub.w	r1, r1, lr
 800104e:	42a1      	cmp	r1, r4
 8001050:	46c8      	mov	r8, r9
 8001052:	46a6      	mov	lr, r4
 8001054:	d356      	bcc.n	8001104 <__udivmoddi4+0x2a4>
 8001056:	d053      	beq.n	8001100 <__udivmoddi4+0x2a0>
 8001058:	b15d      	cbz	r5, 8001072 <__udivmoddi4+0x212>
 800105a:	ebb3 0208 	subs.w	r2, r3, r8
 800105e:	eb61 010e 	sbc.w	r1, r1, lr
 8001062:	fa01 f707 	lsl.w	r7, r1, r7
 8001066:	fa22 f306 	lsr.w	r3, r2, r6
 800106a:	40f1      	lsrs	r1, r6
 800106c:	431f      	orrs	r7, r3
 800106e:	e9c5 7100 	strd	r7, r1, [r5]
 8001072:	2600      	movs	r6, #0
 8001074:	4631      	mov	r1, r6
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	40d8      	lsrs	r0, r3
 8001080:	fa0c fc02 	lsl.w	ip, ip, r2
 8001084:	fa21 f303 	lsr.w	r3, r1, r3
 8001088:	4091      	lsls	r1, r2
 800108a:	4301      	orrs	r1, r0
 800108c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001090:	fa1f fe8c 	uxth.w	lr, ip
 8001094:	fbb3 f0f7 	udiv	r0, r3, r7
 8001098:	fb07 3610 	mls	r6, r7, r0, r3
 800109c:	0c0b      	lsrs	r3, r1, #16
 800109e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010a2:	fb00 f60e 	mul.w	r6, r0, lr
 80010a6:	429e      	cmp	r6, r3
 80010a8:	fa04 f402 	lsl.w	r4, r4, r2
 80010ac:	d908      	bls.n	80010c0 <__udivmoddi4+0x260>
 80010ae:	eb1c 0303 	adds.w	r3, ip, r3
 80010b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010b6:	d22f      	bcs.n	8001118 <__udivmoddi4+0x2b8>
 80010b8:	429e      	cmp	r6, r3
 80010ba:	d92d      	bls.n	8001118 <__udivmoddi4+0x2b8>
 80010bc:	3802      	subs	r0, #2
 80010be:	4463      	add	r3, ip
 80010c0:	1b9b      	subs	r3, r3, r6
 80010c2:	b289      	uxth	r1, r1
 80010c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80010c8:	fb07 3316 	mls	r3, r7, r6, r3
 80010cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010d0:	fb06 f30e 	mul.w	r3, r6, lr
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x28a>
 80010d8:	eb1c 0101 	adds.w	r1, ip, r1
 80010dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80010e0:	d216      	bcs.n	8001110 <__udivmoddi4+0x2b0>
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d914      	bls.n	8001110 <__udivmoddi4+0x2b0>
 80010e6:	3e02      	subs	r6, #2
 80010e8:	4461      	add	r1, ip
 80010ea:	1ac9      	subs	r1, r1, r3
 80010ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010f0:	e738      	b.n	8000f64 <__udivmoddi4+0x104>
 80010f2:	462e      	mov	r6, r5
 80010f4:	4628      	mov	r0, r5
 80010f6:	e705      	b.n	8000f04 <__udivmoddi4+0xa4>
 80010f8:	4606      	mov	r6, r0
 80010fa:	e6e3      	b.n	8000ec4 <__udivmoddi4+0x64>
 80010fc:	4618      	mov	r0, r3
 80010fe:	e6f8      	b.n	8000ef2 <__udivmoddi4+0x92>
 8001100:	454b      	cmp	r3, r9
 8001102:	d2a9      	bcs.n	8001058 <__udivmoddi4+0x1f8>
 8001104:	ebb9 0802 	subs.w	r8, r9, r2
 8001108:	eb64 0e0c 	sbc.w	lr, r4, ip
 800110c:	3801      	subs	r0, #1
 800110e:	e7a3      	b.n	8001058 <__udivmoddi4+0x1f8>
 8001110:	4646      	mov	r6, r8
 8001112:	e7ea      	b.n	80010ea <__udivmoddi4+0x28a>
 8001114:	4620      	mov	r0, r4
 8001116:	e794      	b.n	8001042 <__udivmoddi4+0x1e2>
 8001118:	4640      	mov	r0, r8
 800111a:	e7d1      	b.n	80010c0 <__udivmoddi4+0x260>
 800111c:	46d0      	mov	r8, sl
 800111e:	e77b      	b.n	8001018 <__udivmoddi4+0x1b8>
 8001120:	3b02      	subs	r3, #2
 8001122:	4461      	add	r1, ip
 8001124:	e732      	b.n	8000f8c <__udivmoddi4+0x12c>
 8001126:	4630      	mov	r0, r6
 8001128:	e709      	b.n	8000f3e <__udivmoddi4+0xde>
 800112a:	4464      	add	r4, ip
 800112c:	3802      	subs	r0, #2
 800112e:	e742      	b.n	8000fb6 <__udivmoddi4+0x156>

08001130 <__aeabi_idiv0>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__aeabi_d2uiz>:
 8001134:	004a      	lsls	r2, r1, #1
 8001136:	d211      	bcs.n	800115c <__aeabi_d2uiz+0x28>
 8001138:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800113c:	d211      	bcs.n	8001162 <__aeabi_d2uiz+0x2e>
 800113e:	d50d      	bpl.n	800115c <__aeabi_d2uiz+0x28>
 8001140:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001144:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001148:	d40e      	bmi.n	8001168 <__aeabi_d2uiz+0x34>
 800114a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800114e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001152:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001156:	fa23 f002 	lsr.w	r0, r3, r2
 800115a:	4770      	bx	lr
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	4770      	bx	lr
 8001162:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001166:	d102      	bne.n	800116e <__aeabi_d2uiz+0x3a>
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b500      	push	{lr}
 8001176:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001178:	2244      	movs	r2, #68	; 0x44
 800117a:	2100      	movs	r1, #0
 800117c:	a805      	add	r0, sp, #20
 800117e:	f008 fcd5 	bl	8009b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001182:	2214      	movs	r2, #20
 8001184:	2100      	movs	r1, #0
 8001186:	4668      	mov	r0, sp
 8001188:	f008 fcd0 	bl	8009b2c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800118c:	2000      	movs	r0, #0
 800118e:	f000 fdef 	bl	8001d70 <HAL_PWREx_ControlVoltageScaling>
 8001192:	b108      	cbz	r0, 8001198 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001196:	e7fe      	b.n	8001196 <SystemClock_Config+0x22>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001198:	2310      	movs	r3, #16
 800119a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800119c:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800119e:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011a4:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ac:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011b0:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b6:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f000 fec1 	bl	8001f40 <HAL_RCC_OscConfig>
 80011be:	b108      	cbz	r0, 80011c4 <SystemClock_Config+0x50>
 80011c0:	b672      	cpsid	i
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c4:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	220f      	movs	r2, #15
 80011ca:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ce:	2105      	movs	r1, #5
 80011d0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d6:	f001 f95b 	bl	8002490 <HAL_RCC_ClockConfig>
 80011da:	b108      	cbz	r0, 80011e0 <SystemClock_Config+0x6c>
 80011dc:	b672      	cpsid	i
  while (1)
 80011de:	e7fe      	b.n	80011de <SystemClock_Config+0x6a>
}
 80011e0:	b017      	add	sp, #92	; 0x5c
 80011e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011e8 <main>:
{
 80011e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ec:	4cca      	ldr	r4, [pc, #808]	; (8001518 <main+0x330>)
{
 80011ee:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80011f0:	f000 fbce 	bl	8001990 <HAL_Init>
  SystemClock_Config();
 80011f4:	f7ff ffbe 	bl	8001174 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	2214      	movs	r2, #20
 80011fa:	2100      	movs	r1, #0
 80011fc:	a809      	add	r0, sp, #36	; 0x24
 80011fe:	f008 fc95 	bl	8009b2c <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001202:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	64e3      	str	r3, [r4, #76]	; 0x4c
 800120a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001214:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800121c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800122e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001240:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001252:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	9304      	str	r3, [sp, #16]
 800125a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800125e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001262:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001264:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	9305      	str	r3, [sp, #20]
 800126c:	9b05      	ldr	r3, [sp, #20]
  HAL_PWREx_EnableVddIO2();
 800126e:	f000 fdd9 	bl	8001e24 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001274:	48a9      	ldr	r0, [pc, #676]	; (800151c <main+0x334>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800127c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	9306      	str	r3, [sp, #24]
 8001284:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800128e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001298:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80012a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f244 0114 	movw	r1, #16404	; 0x4014
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012b0:	f000 fd46 	bl	8001d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80012b4:	489a      	ldr	r0, [pc, #616]	; (8001520 <main+0x338>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012bc:	f000 fd40 	bl	8001d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f000 fd3a 	bl	8001d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4895      	ldr	r0, [pc, #596]	; (8001524 <main+0x33c>)
 80012d0:	2104      	movs	r1, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2603      	movs	r6, #3
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80012d8:	f000 fd32 	bl	8001d40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80012dc:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	f44f 6364 	mov.w	r3, #3648	; 0xe40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012e4:	4890      	ldr	r0, [pc, #576]	; (8001528 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80012e6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ea:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012f6:	f000 fc49 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	f244 0314 	movw	r3, #16404	; 0x4014
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fe:	4887      	ldr	r0, [pc, #540]	; (800151c <main+0x334>)
 8001300:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001302:	f04f 080c 	mov.w	r8, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800130e:	f000 fc3d 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001312:	f64f 739b 	movw	r3, #65435	; 0xff9b
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001316:	4885      	ldr	r0, [pc, #532]	; (800152c <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001318:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f000 fc31 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800132a:	2310      	movs	r3, #16
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800132c:	487d      	ldr	r0, [pc, #500]	; (8001524 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800132e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001330:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800133a:	f000 fc27 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800133e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001346:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001348:	2307      	movs	r3, #7
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800134e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001354:	f000 fc1a 	bl	8001b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001358:	4873      	ldr	r0, [pc, #460]	; (8001528 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800135e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001360:	f04f 0b0a 	mov.w	fp, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800136c:	f000 fc0e 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001370:	23b0      	movs	r3, #176	; 0xb0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001372:	486d      	ldr	r0, [pc, #436]	; (8001528 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001374:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001378:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001382:	f000 fc03 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001386:	220d      	movs	r2, #13
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001388:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	4865      	ldr	r0, [pc, #404]	; (8001524 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800138e:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f000 fbf7 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 800139e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a2:	4863      	ldr	r0, [pc, #396]	; (8001530 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80013a4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b2:	f000 fbeb 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80013b6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	485e      	ldr	r0, [pc, #376]	; (8001534 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013bc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f000 fbdf 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80013d2:	4855      	ldr	r0, [pc, #340]	; (8001528 <main+0x340>)
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80013d4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80013d6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f000 fbd6 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80013e0:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013e4:	484d      	ldr	r0, [pc, #308]	; (800151c <main+0x334>)
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80013e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ea:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ec:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013f8:	f000 fbc8 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	2312      	movs	r3, #18
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001400:	4848      	ldr	r0, [pc, #288]	; (8001524 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001402:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001406:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001410:	f000 fbbc 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001418:	4840      	ldr	r0, [pc, #256]	; (800151c <main+0x334>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800141a:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800141c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001426:	f000 fbb1 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 800142a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 1509 	strd	r1, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001432:	483a      	ldr	r0, [pc, #232]	; (800151c <main+0x334>)
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001434:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001438:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	f000 fba5 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001442:	2164      	movs	r1, #100	; 0x64
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001444:	220d      	movs	r2, #13
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	e9cd 1509 	strd	r1, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	4838      	ldr	r0, [pc, #224]	; (800152c <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800144c:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001454:	f000 fb9a 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001458:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800145a:	4832      	ldr	r0, [pc, #200]	; (8001524 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800145c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001460:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800146a:	f000 fb8f 	bl	8001b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800146e:	4831      	ldr	r0, [pc, #196]	; (8001534 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001470:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001474:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800147e:	f000 fb85 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001482:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001488:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f000 fb79 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 800149a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	a909      	add	r1, sp, #36	; 0x24
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014ac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f000 fb6c 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80014b8:	4819      	ldr	r0, [pc, #100]	; (8001520 <main+0x338>)
 80014ba:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f000 fb62 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014cc:	a909      	add	r1, sp, #36	; 0x24
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	e9cd 2409 	strd	r2, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f000 fb58 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80014dc:	f24f 023f 	movw	r2, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <main+0x350>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f0:	f000 fb4c 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014f8:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014fc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001500:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f000 fb3f 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	e012      	b.n	800153c <main+0x354>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	48001c00 	.word	0x48001c00
 8001520:	48000800 	.word	0x48000800
 8001524:	48000400 	.word	0x48000400
 8001528:	48002000 	.word	0x48002000
 800152c:	48001000 	.word	0x48001000
 8001530:	48001800 	.word	0x48001800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001400 	.word	0x48001400
 800153c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001540:	485f      	ldr	r0, [pc, #380]	; (80016c0 <main+0x4d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001544:	a909      	add	r1, sp, #36	; 0x24
 8001546:	f000 fb21 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154a:	2312      	movs	r3, #18
 800154c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001550:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001554:	a909      	add	r1, sp, #36	; 0x24
 8001556:	485b      	ldr	r0, [pc, #364]	; (80016c4 <main+0x4dc>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001558:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001560:	f000 fb14 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001564:	233f      	movs	r3, #63	; 0x3f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001566:	4857      	ldr	r0, [pc, #348]	; (80016c4 <main+0x4dc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001568:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001576:	f000 fb09 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 800157a:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	484f      	ldr	r0, [pc, #316]	; (80016c0 <main+0x4d8>)
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001582:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001586:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f000 fafe 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001590:	2307      	movs	r3, #7
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001592:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	484c      	ldr	r0, [pc, #304]	; (80016c8 <main+0x4e0>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001598:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f000 faf2 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015a8:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	4845      	ldr	r0, [pc, #276]	; (80016c0 <main+0x4d8>)
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015ac:	920d      	str	r2, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015b0:	f04f 080b 	mov.w	r8, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f000 fae6 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c0:	2218      	movs	r2, #24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	483f      	ldr	r0, [pc, #252]	; (80016c0 <main+0x4d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015c8:	e9cd 2809 	strd	r2, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f000 fade 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 80015d0:	2281      	movs	r2, #129	; 0x81
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	a909      	add	r1, sp, #36	; 0x24
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015d8:	e9cd 2809 	strd	r2, r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f000 fad5 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 80015e2:	2220      	movs	r2, #32
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 80015e4:	a909      	add	r1, sp, #36	; 0x24
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f2:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f000 faca 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80015f8:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80015fa:	a909      	add	r1, sp, #36	; 0x24
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001608:	f000 fac0 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 800160c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	482d      	ldr	r0, [pc, #180]	; (80016c8 <main+0x4e0>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001612:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	e9cd 460b 	strd	r4, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f000 fab4 	bl	8001b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001624:	a909      	add	r1, sp, #36	; 0x24
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001632:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001634:	f000 faaa 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001638:	f44f 6200 	mov.w	r2, #2048	; 0x800
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800163c:	4823      	ldr	r0, [pc, #140]	; (80016cc <main+0x4e4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 800163e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001642:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800164c:	f000 fa9e 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8001650:	2310      	movs	r3, #16
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001652:	a909      	add	r1, sp, #36	; 0x24
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001660:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001664:	f000 fa92 	bl	8001b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <main+0x4e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800166c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800166e:	e9cd 7809 	strd	r7, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001672:	f000 fa8b 	bl	8001b8c <HAL_GPIO_Init>
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <main+0x4e0>)
 8001678:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	e9cd 9709 	strd	r9, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001682:	f000 fa83 	bl	8001b8c <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001686:	2306      	movs	r3, #6
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <main+0x4e0>)
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800168a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001690:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800169a:	f000 fa77 	bl	8001b8c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <main+0x4e8>)
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <main+0x4ec>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016a2:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016a4:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 80016a8:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016aa:	6207      	str	r7, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016ac:	f000 fa10 	bl	8001ad0 <HAL_CRC_Init>
 80016b0:	b108      	cbz	r0, 80016b6 <main+0x4ce>
 80016b2:	b672      	cpsid	i
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <main+0x4cc>
  MX_X_CUBE_AI_Init();
 80016b6:	f003 fa61 	bl	8004b7c <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80016ba:	f003 fa66 	bl	8004b8a <MX_X_CUBE_AI_Process>
  while (1)
 80016be:	e7fc      	b.n	80016ba <main+0x4d2>
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48001800 	.word	0x48001800
 80016c8:	48000400 	.word	0x48000400
 80016cc:	48001400 	.word	0x48001400
 80016d0:	2000077c 	.word	0x2000077c
 80016d4:	40023000 	.word	0x40023000

080016d8 <MX_USART2_UART_Init>:
{
 80016d8:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 115200;
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <MX_USART2_UART_Init+0x5c>)
  huart2.Instance = USART2;
 80016dc:	4c16      	ldr	r4, [pc, #88]	; (8001738 <MX_USART2_UART_Init+0x60>)
  huart2.Init.BaudRate = 115200;
 80016de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016e2:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ea:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f0:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f4:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fc:	6123      	str	r3, [r4, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fe:	f001 fe7c 	bl	80033fa <HAL_UART_Init>
 8001702:	4601      	mov	r1, r0
 8001704:	b108      	cbz	r0, 800170a <MX_USART2_UART_Init+0x32>
 8001706:	b672      	cpsid	i
  while (1)
 8001708:	e7fe      	b.n	8001708 <MX_USART2_UART_Init+0x30>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	4620      	mov	r0, r4
 800170c:	f001 fee3 	bl	80034d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4601      	mov	r1, r0
 8001712:	b108      	cbz	r0, 8001718 <MX_USART2_UART_Init+0x40>
 8001714:	b672      	cpsid	i
  while (1)
 8001716:	e7fe      	b.n	8001716 <MX_USART2_UART_Init+0x3e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001718:	4620      	mov	r0, r4
 800171a:	f001 ff00 	bl	800351e <HAL_UARTEx_SetRxFifoThreshold>
 800171e:	b108      	cbz	r0, 8001724 <MX_USART2_UART_Init+0x4c>
 8001720:	b672      	cpsid	i
  while (1)
 8001722:	e7fe      	b.n	8001722 <MX_USART2_UART_Init+0x4a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001724:	4620      	mov	r0, r4
 8001726:	f001 febb 	bl	80034a0 <HAL_UARTEx_DisableFifoMode>
 800172a:	b108      	cbz	r0, 8001730 <MX_USART2_UART_Init+0x58>
 800172c:	b672      	cpsid	i
  while (1)
 800172e:	e7fe      	b.n	800172e <MX_USART2_UART_Init+0x56>
}
 8001730:	bd10      	pop	{r4, pc}
 8001732:	bf00      	nop
 8001734:	40004400 	.word	0x40004400
 8001738:	200007a0 	.word	0x200007a0

0800173c <Error_Handler>:
 800173c:	b672      	cpsid	i
  while (1)
 800173e:	e7fe      	b.n	800173e <Error_Handler+0x2>

08001740 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_MspInit+0x2c>)
 8001742:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	661a      	str	r2, [r3, #96]	; 0x60
 800174a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800174c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	f002 0201 	and.w	r2, r2, #1
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175c:	659a      	str	r2, [r3, #88]	; 0x58
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001768:	b002      	add	sp, #8
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001770:	6802      	ldr	r2, [r0, #0]
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_CRC_MspInit+0x24>)
 8001774:	429a      	cmp	r2, r3
{
 8001776:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001778:	d10a      	bne.n	8001790 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800177a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800177e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001780:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
 8001786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001790:	b002      	add	sp, #8
 8001792:	4770      	bx	lr
 8001794:	40023000 	.word	0x40023000

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	b0ae      	sub	sp, #184	; 0xb8
 800179c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	2214      	movs	r2, #20
 80017a0:	2100      	movs	r1, #0
 80017a2:	a802      	add	r0, sp, #8
 80017a4:	f008 f9c2 	bl	8009b2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	229c      	movs	r2, #156	; 0x9c
 80017aa:	2100      	movs	r1, #0
 80017ac:	a807      	add	r0, sp, #28
 80017ae:	f008 f9bd 	bl	8009b2c <memset>
  if(huart->Instance==USART2)
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_UART_MspInit+0x94>)
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d135      	bne.n	8001826 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ba:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017be:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f001 f892 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	b108      	cbz	r0, 80017ca <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80017c6:	f7ff ffb9 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0x98>)
 80017cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
 80017d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017d6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	9b01      	ldr	r3, [sp, #4]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2602      	movs	r6, #2
 80017f2:	2308      	movs	r3, #8
 80017f4:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2503      	movs	r5, #3
 80017fa:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fc:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80017fe:	a902      	add	r1, sp, #8
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800180a:	f000 f9bf 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800180e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001814:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001820:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001822:	f000 f9b3 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001826:	b02e      	add	sp, #184	; 0xb8
 8001828:	bd70      	pop	{r4, r5, r6, pc}
 800182a:	bf00      	nop
 800182c:	40004400 	.word	0x40004400
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler>

08001836 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler>

08001838 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler>

0800183a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler>

0800183c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler>

0800183e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 b8b4 	b.w	80019b0 <HAL_IncTick>

08001848 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001848:	2001      	movs	r0, #1
 800184a:	4770      	bx	lr

0800184c <_kill>:

int _kill(int pid, int sig)
{
 800184c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800184e:	f008 f92d 	bl	8009aac <__errno>
 8001852:	2316      	movs	r3, #22
 8001854:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185a:	bd08      	pop	{r3, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800185e:	f008 f925 	bl	8009aac <__errno>
 8001862:	2316      	movs	r3, #22
 8001864:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0xa>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b570      	push	{r4, r5, r6, lr}
 800186a:	460d      	mov	r5, r1
 800186c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	460e      	mov	r6, r1
 8001870:	1b73      	subs	r3, r6, r5
 8001872:	429c      	cmp	r4, r3
 8001874:	dc01      	bgt.n	800187a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001876:	4620      	mov	r0, r4
 8001878:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	e7f5      	b.n	8001870 <_read+0x8>

08001884 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800188a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001890:	2000      	movs	r0, #0
 8001892:	4770      	bx	lr

08001894 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001894:	2001      	movs	r0, #1
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001898:	2000      	movs	r0, #0
 800189a:	4770      	bx	lr

0800189c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <_sbrk+0x30>)
 800189e:	6811      	ldr	r1, [r2, #0]
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80018a4:	b909      	cbnz	r1, 80018aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <_sbrk+0x34>)
 80018a8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	6810      	ldr	r0, [r2, #0]
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <_sbrk+0x38>)
 80018ae:	4c0a      	ldr	r4, [pc, #40]	; (80018d8 <_sbrk+0x3c>)
 80018b0:	4403      	add	r3, r0
 80018b2:	1b09      	subs	r1, r1, r4
 80018b4:	428b      	cmp	r3, r1
 80018b6:	d906      	bls.n	80018c6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018b8:	f008 f8f8 	bl	8009aac <__errno>
 80018bc:	230c      	movs	r3, #12
 80018be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80018c4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80018c6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80018c8:	e7fc      	b.n	80018c4 <_sbrk+0x28>
 80018ca:	bf00      	nop
 80018cc:	20000830 	.word	0x20000830
 80018d0:	20003ad8 	.word	0x20003ad8
 80018d4:	200a0000 	.word	0x200a0000
 80018d8:	00000800 	.word	0x00000800

080018dc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <SystemInit+0x10>)
 80018de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001928 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f4:	f7ff fff2 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopForever+0x6>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopForever+0xe>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopForever+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f008 f8cb 	bl	8009ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001922:	f7ff fc61 	bl	80011e8 <main>

08001926 <LoopForever>:

LoopForever:
    b LoopForever
 8001926:	e7fe      	b.n	8001926 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001928:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	2000074c 	.word	0x2000074c
  ldr r2, =_sidata
 8001934:	0801007c 	.word	0x0801007c
  ldr r2, =_sbss
 8001938:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 800193c:	20003ad8 	.word	0x20003ad8

08001940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_IRQHandler>
	...

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_InitTick+0x40>)
{
 8001948:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800194a:	7818      	ldrb	r0, [r3, #0]
 800194c:	b908      	cbnz	r0, 8001952 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800194e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001950:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_InitTick+0x44>)
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	fbb3 f3f0 	udiv	r3, r3, r0
 800195c:	6810      	ldr	r0, [r2, #0]
 800195e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001962:	f000 f8a1 	bl	8001aa8 <HAL_SYSTICK_Config>
 8001966:	4604      	mov	r4, r0
 8001968:	2800      	cmp	r0, #0
 800196a:	d1f0      	bne.n	800194e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196c:	2d0f      	cmp	r5, #15
 800196e:	d8ee      	bhi.n	800194e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	4602      	mov	r2, r0
 8001972:	4629      	mov	r1, r5
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f000 f864 	bl	8001a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_InitTick+0x48>)
 800197e:	4620      	mov	r0, r4
 8001980:	601d      	str	r5, [r3, #0]
  return status;
 8001982:	e7e5      	b.n	8001950 <HAL_InitTick+0xc>
 8001984:	20000004 	.word	0x20000004
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_Init>:
{
 8001990:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f844 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff ffd3 	bl	8001944 <HAL_InitTick>
 800199e:	4604      	mov	r4, r0
 80019a0:	b918      	cbnz	r0, 80019aa <HAL_Init+0x1a>
    HAL_MspInit();
 80019a2:	f7ff fecd 	bl	8001740 <HAL_MspInit>
}
 80019a6:	4620      	mov	r0, r4
 80019a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80019aa:	2401      	movs	r4, #1
 80019ac:	e7fb      	b.n	80019a6 <HAL_Init+0x16>
	...

080019b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <HAL_IncTick+0x10>)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_IncTick+0x14>)
 80019b4:	6811      	ldr	r1, [r2, #0]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	440b      	add	r3, r1
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000834 	.word	0x20000834
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <HAL_GetTick+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000834 	.word	0x20000834

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff fff6 	bl	80019c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019dc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80019de:	bf1c      	itt	ne
 80019e0:	4b05      	ldrne	r3, [pc, #20]	; (80019f8 <HAL_Delay+0x24>)
 80019e2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80019e6:	bf18      	it	ne
 80019e8:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	f7ff ffed 	bl	80019c8 <HAL_GetTick>
 80019ee:	1b43      	subs	r3, r0, r5
 80019f0:	42a3      	cmp	r3, r4
 80019f2:	d3fa      	bcc.n	80019ea <HAL_Delay+0x16>
  {
  }
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 80019fc:	4800      	ldr	r0, [pc, #0]	; (8001a00 <HAL_GetHalVersion+0x4>)
 80019fe:	4770      	bx	lr
 8001a00:	010d0300 	.word	0x010d0300

08001a04 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001a04:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <HAL_GetREVID+0x8>)
 8001a06:	6818      	ldr	r0, [r3, #0]
}
 8001a08:	0c00      	lsrs	r0, r0, #16
 8001a0a:	4770      	bx	lr
 8001a0c:	e0042000 	.word	0xe0042000

08001a10 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <HAL_GetDEVID+0xc>)
 8001a12:	6818      	ldr	r0, [r3, #0]
}
 8001a14:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e0042000 	.word	0xe0042000

08001a20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a22:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a30:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a3c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b530      	push	{r4, r5, lr}
 8001a48:	68dc      	ldr	r4, [r3, #12]
 8001a4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	2d04      	cmp	r5, #4
 8001a56:	bf28      	it	cs
 8001a58:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a60:	bf8c      	ite	hi
 8001a62:	3c03      	subhi	r4, #3
 8001a64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a66:	fa03 f505 	lsl.w	r5, r3, r5
 8001a6a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6e:	40a3      	lsls	r3, r4
 8001a70:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001a76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	bfac      	ite	ge
 8001a7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	4a08      	ldrlt	r2, [pc, #32]	; (8001aa4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	bfb8      	it	lt
 8001a8a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	bfaa      	itet	ge
 8001a92:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a9c:	bd30      	pop	{r4, r5, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	e000ed14 	.word	0xe000ed14

08001aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	3801      	subs	r0, #1
 8001aaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001aae:	d20b      	bcs.n	8001ac8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	4a05      	ldr	r2, [pc, #20]	; (8001acc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	21f0      	movs	r1, #240	; 0xf0
 8001aba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ac8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ad0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	b908      	cbnz	r0, 8001ada <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001ad6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001ad8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ada:	7f43      	ldrb	r3, [r0, #29]
 8001adc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ae0:	b913      	cbnz	r3, 8001ae8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001ae2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001ae4:	f7ff fe44 	bl	8001770 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001aec:	7923      	ldrb	r3, [r4, #4]
 8001aee:	b9e3      	cbnz	r3, 8001b2a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_CRC_Init+0x70>)
 8001af4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	f022 0218 	bic.w	r2, r2, #24
 8001afc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001afe:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b00:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b02:	b9d2      	cbnz	r2, 8001b3a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b08:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	6961      	ldr	r1, [r4, #20]
 8001b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69a1      	ldr	r1, [r4, #24]
 8001b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001b22:	2301      	movs	r3, #1
 8001b24:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001b26:	2000      	movs	r0, #0
 8001b28:	e7d6      	b.n	8001ad8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b2a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f000 f808 	bl	8001b44 <HAL_CRCEx_Polynomial_Set>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d0e2      	beq.n	8001afe <HAL_CRC_Init+0x2e>
 8001b38:	e7cd      	b.n	8001ad6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b3a:	6922      	ldr	r2, [r4, #16]
 8001b3c:	e7e4      	b.n	8001b08 <HAL_CRC_Init+0x38>
 8001b3e:	bf00      	nop
 8001b40:	04c11db7 	.word	0x04c11db7

08001b44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001b44:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b46:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	d31c      	bcc.n	8001b86 <HAL_CRCEx_Polynomial_Set+0x42>
 8001b4c:	fa21 f403 	lsr.w	r4, r1, r3
 8001b50:	07e4      	lsls	r4, r4, #31
 8001b52:	d5f9      	bpl.n	8001b48 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001b54:	2a10      	cmp	r2, #16
 8001b56:	d012      	beq.n	8001b7e <HAL_CRCEx_Polynomial_Set+0x3a>
 8001b58:	d804      	bhi.n	8001b64 <HAL_CRCEx_Polynomial_Set+0x20>
 8001b5a:	b13a      	cbz	r2, 8001b6c <HAL_CRCEx_Polynomial_Set+0x28>
 8001b5c:	2a08      	cmp	r2, #8
 8001b5e:	d010      	beq.n	8001b82 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001b60:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001b62:	e00b      	b.n	8001b7c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001b64:	2a18      	cmp	r2, #24
 8001b66:	d1fb      	bne.n	8001b60 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b68:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b6a:	d8f9      	bhi.n	8001b60 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b6c:	6800      	ldr	r0, [r0, #0]
 8001b6e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b70:	6883      	ldr	r3, [r0, #8]
 8001b72:	f023 0318 	bic.w	r3, r3, #24
 8001b76:	431a      	orrs	r2, r3
 8001b78:	6082      	str	r2, [r0, #8]
 8001b7a:	2000      	movs	r0, #0
}
 8001b7c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b7e:	2b07      	cmp	r3, #7
 8001b80:	e7f3      	b.n	8001b6a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	e7f1      	b.n	8001b6a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d1ea      	bne.n	8001b60 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001b8a:	e7ef      	b.n	8001b6c <HAL_CRCEx_Polynomial_Set+0x28>

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001d3c <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b94:	4c67      	ldr	r4, [pc, #412]	; (8001d34 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 8001b96:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	680a      	ldr	r2, [r1, #0]
 8001b9a:	fa32 f503 	lsrs.w	r5, r2, r3
 8001b9e:	d102      	bne.n	8001ba6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001ba0:	b003      	add	sp, #12
 8001ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba6:	f04f 0e01 	mov.w	lr, #1
 8001baa:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001bae:	ea1e 0202 	ands.w	r2, lr, r2
 8001bb2:	f000 80ae 	beq.w	8001d12 <HAL_GPIO_Init+0x186>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb6:	684e      	ldr	r6, [r1, #4]
 8001bb8:	f006 0503 	and.w	r5, r6, #3
 8001bbc:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc0:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bca:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bcc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd0:	d834      	bhi.n	8001c3c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001bd2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	68cf      	ldr	r7, [r1, #12]
 8001bda:	fa07 f708 	lsl.w	r7, r7, r8
 8001bde:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001be2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001be4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bea:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001bee:	409f      	lsls	r7, r3
 8001bf0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001bf4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001bf6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	688f      	ldr	r7, [r1, #8]
 8001bfe:	fa07 f708 	lsl.w	r7, r7, r8
 8001c02:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001c08:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	d119      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8001c0c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c10:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c14:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001c18:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c20:	f04f 0e0f 	mov.w	lr, #15
 8001c24:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001c28:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2c:	690f      	ldr	r7, [r1, #16]
 8001c2e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001c32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001c36:	f8ca 7020 	str.w	r7, [sl, #32]
 8001c3a:	e001      	b.n	8001c40 <HAL_GPIO_Init+0xb4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3c:	2d03      	cmp	r5, #3
 8001c3e:	d1da      	bne.n	8001bf6 <HAL_GPIO_Init+0x6a>
      temp = GPIOx->MODER;
 8001c40:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c42:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c46:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c4a:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001c50:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	d05e      	beq.n	8001d12 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001c58:	f045 0501 	orr.w	r5, r5, #1
 8001c5c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8001c60:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001c64:	f023 0703 	bic.w	r7, r3, #3
 8001c68:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001c6c:	f005 0501 	and.w	r5, r5, #1
 8001c70:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001c74:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c76:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c7c:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c80:	f04f 0e0f 	mov.w	lr, #15
 8001c84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001c88:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c90:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	d03f      	beq.n	8001d16 <HAL_GPIO_Init+0x18a>
 8001c96:	4d28      	ldr	r5, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x1ac>)
 8001c98:	42a8      	cmp	r0, r5
 8001c9a:	d03e      	beq.n	8001d1a <HAL_GPIO_Init+0x18e>
 8001c9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ca0:	42a8      	cmp	r0, r5
 8001ca2:	d03c      	beq.n	8001d1e <HAL_GPIO_Init+0x192>
 8001ca4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ca8:	42a8      	cmp	r0, r5
 8001caa:	d03a      	beq.n	8001d22 <HAL_GPIO_Init+0x196>
 8001cac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb0:	42a8      	cmp	r0, r5
 8001cb2:	d038      	beq.n	8001d26 <HAL_GPIO_Init+0x19a>
 8001cb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cb8:	42a8      	cmp	r0, r5
 8001cba:	d036      	beq.n	8001d2a <HAL_GPIO_Init+0x19e>
 8001cbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc0:	42a8      	cmp	r0, r5
 8001cc2:	d034      	beq.n	8001d2e <HAL_GPIO_Init+0x1a2>
 8001cc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc8:	42a8      	cmp	r0, r5
 8001cca:	bf0c      	ite	eq
 8001ccc:	2507      	moveq	r5, #7
 8001cce:	2508      	movne	r5, #8
 8001cd0:	fa05 f50c 	lsl.w	r5, r5, ip
 8001cd4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001cda:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001cdc:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cde:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001ce2:	bf0c      	ite	eq
 8001ce4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001ce6:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001ce8:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001cea:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cec:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001cf0:	bf0c      	ite	eq
 8001cf2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001cf4:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001cf6:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001cf8:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfa:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001cfe:	bf0c      	ite	eq
 8001d00:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001d02:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001d04:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001d06:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d08:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001d0a:	bf54      	ite	pl
 8001d0c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001d0e:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001d10:	6025      	str	r5, [r4, #0]
    position++;
 8001d12:	3301      	adds	r3, #1
 8001d14:	e740      	b.n	8001b98 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d16:	2500      	movs	r5, #0
 8001d18:	e7da      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d1a:	2501      	movs	r5, #1
 8001d1c:	e7d8      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d1e:	2502      	movs	r5, #2
 8001d20:	e7d6      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d22:	2503      	movs	r5, #3
 8001d24:	e7d4      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d26:	2504      	movs	r5, #4
 8001d28:	e7d2      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d2a:	2505      	movs	r5, #5
 8001d2c:	e7d0      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d2e:	2506      	movs	r5, #6
 8001d30:	e7ce      	b.n	8001cd0 <HAL_GPIO_Init+0x144>
 8001d32:	bf00      	nop
 8001d34:	40010400 	.word	0x40010400
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	b10a      	cbz	r2, 8001d46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d42:	6181      	str	r1, [r0, #24]
 8001d44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_PWREx_GetVoltageRange+0x20>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001d58:	d006      	beq.n	8001d68 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001d5a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d5e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001d62:	bf18      	it	ne
 8001d64:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40007000 	.word	0x40007000

08001d70 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d72:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d74:	bb30      	cbnz	r0, 8001dc4 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d76:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001d7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d8a:	d11a      	bne.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d96:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	2132      	movs	r1, #50	; 0x32
 8001d9e:	434a      	muls	r2, r1
 8001da0:	491f      	ldr	r1, [pc, #124]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001da2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001da6:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da8:	6959      	ldr	r1, [r3, #20]
 8001daa:	0549      	lsls	r1, r1, #21
 8001dac:	d500      	bpl.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001dae:	b922      	cbnz	r2, 8001dba <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	0558      	lsls	r0, r3, #21
 8001db4:	d403      	bmi.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001db6:	2000      	movs	r0, #0
}
 8001db8:	4770      	bx	lr
        wait_loop_index--;
 8001dba:	3a01      	subs	r2, #1
 8001dbc:	e7f4      	b.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001dc8:	d11f      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dca:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001dce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dd2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dde:	d1ea      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dea:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	2132      	movs	r1, #50	; 0x32
 8001df2:	434a      	muls	r2, r1
 8001df4:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001df6:	fbb2 f2f1 	udiv	r2, r2, r1
 8001dfa:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfc:	6959      	ldr	r1, [r3, #20]
 8001dfe:	0549      	lsls	r1, r1, #21
 8001e00:	d5d6      	bpl.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d0d4      	beq.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8001e06:	3a01      	subs	r2, #1
 8001e08:	e7f8      	b.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e0a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001e0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e7cf      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x46>
 8001e16:	bf00      	nop
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	000f4240 	.word	0x000f4240

08001e24 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001e24:	4a02      	ldr	r2, [pc, #8]	; (8001e30 <HAL_PWREx_EnableVddIO2+0xc>)
 8001e26:	6853      	ldr	r3, [r2, #4]
 8001e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2c:	6053      	str	r3, [r2, #4]
}
 8001e2e:	4770      	bx	lr
 8001e30:	40007000 	.word	0x40007000

08001e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e36:	4d1c      	ldr	r5, [pc, #112]	; (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8001e38:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e3a:	00da      	lsls	r2, r3, #3
{
 8001e3c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e3e:	d518      	bpl.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff ff84 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e48:	d123      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	2c80      	cmp	r4, #128	; 0x80
 8001e4c:	d928      	bls.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4e:	2ca0      	cmp	r4, #160	; 0xa0
 8001e50:	bf8c      	ite	hi
 8001e52:	2002      	movhi	r0, #2
 8001e54:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f023 030f 	bic.w	r3, r3, #15
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001e68:	1a18      	subs	r0, r3, r0
 8001e6a:	bf18      	it	ne
 8001e6c:	2001      	movne	r0, #1
 8001e6e:	b003      	add	sp, #12
 8001e70:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e7a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff ff62 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e90:	e7d8      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8001e92:	2c7f      	cmp	r4, #127	; 0x7f
 8001e94:	d806      	bhi.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8001e96:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001e9a:	4258      	negs	r0, r3
 8001e9c:	4158      	adcs	r0, r3
 8001e9e:	e7da      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	e7d8      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	e7d6      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x84>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb4:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eb6:	f012 020c 	ands.w	r2, r2, #12
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x18>
 8001ebc:	2a0c      	cmp	r2, #12
 8001ebe:	d115      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec0:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ec4:	2901      	cmp	r1, #1
 8001ec6:	d118      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ec8:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001eca:	481b      	ldr	r0, [pc, #108]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x88>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ecc:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ece:	bf55      	itete	pl
 8001ed0:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed4:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed6:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eda:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001ede:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee2:	b112      	cbz	r2, 8001eea <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	2a0c      	cmp	r2, #12
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x4c>
 8001ee8:	2000      	movs	r0, #0
}
 8001eea:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eec:	2a04      	cmp	r2, #4
 8001eee:	d01f      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x80>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef0:	2a08      	cmp	r2, #8
 8001ef2:	4812      	ldr	r0, [pc, #72]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001ef4:	bf18      	it	ne
 8001ef6:	2000      	movne	r0, #0
 8001ef8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001efa:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001efc:	68da      	ldr	r2, [r3, #12]
      pllvco = HSI_VALUE;
 8001efe:	490f      	ldr	r1, [pc, #60]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x8c>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f00:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001f04:	3a02      	subs	r2, #2
      pllvco = HSI_VALUE;
 8001f06:	2a01      	cmp	r2, #1
 8001f08:	bf98      	it	ls
 8001f0a:	4608      	movls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f0c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001f14:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f16:	68d8      	ldr	r0, [r3, #12]
 8001f18:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f1c:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f20:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f22:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f24:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f26:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001f2a:	fbb2 f0f0 	udiv	r0, r2, r0
 8001f2e:	4770      	bx	lr
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	0800ccb4 	.word	0x0800ccb4
 8001f3c:	00f42400 	.word	0x00f42400

08001f40 <HAL_RCC_OscConfig>:
{
 8001f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001f44:	4605      	mov	r5, r0
 8001f46:	b908      	cbnz	r0, 8001f4c <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	e047      	b.n	8001fdc <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4c:	4c94      	ldr	r4, [pc, #592]	; (80021a0 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f4e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f50:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f52:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f54:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5e:	d575      	bpl.n	800204c <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f60:	b11e      	cbz	r6, 8001f6a <HAL_RCC_OscConfig+0x2a>
 8001f62:	2e0c      	cmp	r6, #12
 8001f64:	d154      	bne.n	8002010 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f66:	2f01      	cmp	r7, #1
 8001f68:	d152      	bne.n	8002010 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	0798      	lsls	r0, r3, #30
 8001f6e:	d502      	bpl.n	8001f76 <HAL_RCC_OscConfig+0x36>
 8001f70:	69ab      	ldr	r3, [r5, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0e8      	beq.n	8001f48 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	6a28      	ldr	r0, [r5, #32]
 8001f7a:	0719      	lsls	r1, r3, #28
 8001f7c:	bf56      	itet	pl
 8001f7e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001f82:	6823      	ldrmi	r3, [r4, #0]
 8001f84:	091b      	lsrpl	r3, r3, #4
 8001f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d929      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8e:	f7ff ff51 	bl	8001e34 <RCC_SetFlashLatencyFromMSIRange>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d1d8      	bne.n	8001f48 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	6a2a      	ldr	r2, [r5, #32]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001faa:	6863      	ldr	r3, [r4, #4]
 8001fac:	69ea      	ldr	r2, [r5, #28]
 8001fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fb6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fb8:	f7ff ff7a 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	4a79      	ldr	r2, [pc, #484]	; (80021a4 <HAL_RCC_OscConfig+0x264>)
 8001fc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	40d8      	lsrs	r0, r3
 8001fcc:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fce:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001fd0:	4b76      	ldr	r3, [pc, #472]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	f7ff fcb6 	bl	8001944 <HAL_InitTick>
        if(status != HAL_OK)
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d037      	beq.n	800204c <HAL_RCC_OscConfig+0x10c>
}
 8001fdc:	b003      	add	sp, #12
 8001fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6023      	str	r3, [r4, #0]
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff0:	4303      	orrs	r3, r0
 8001ff2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	69ea      	ldr	r2, [r5, #28]
 8001ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002000:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002002:	2e00      	cmp	r6, #0
 8002004:	d1d8      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002006:	f7ff ff15 	bl	8001e34 <RCC_SetFlashLatencyFromMSIRange>
 800200a:	2800      	cmp	r0, #0
 800200c:	d0d4      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x78>
 800200e:	e79b      	b.n	8001f48 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002010:	69ab      	ldr	r3, [r5, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03a      	beq.n	800208c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800201e:	f7ff fcd3 	bl	80019c8 <HAL_GetTick>
 8002022:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	079a      	lsls	r2, r3, #30
 8002028:	d528      	bpl.n	800207c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	6023      	str	r3, [r4, #0]
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	6a2a      	ldr	r2, [r5, #32]
 8002036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203a:	4313      	orrs	r3, r2
 800203c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	69ea      	ldr	r2, [r5, #28]
 8002042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800204a:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	07d8      	lsls	r0, r3, #31
 8002050:	d42d      	bmi.n	80020ae <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	682b      	ldr	r3, [r5, #0]
 8002054:	0799      	lsls	r1, r3, #30
 8002056:	d46b      	bmi.n	8002130 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002058:	682b      	ldr	r3, [r5, #0]
 800205a:	0718      	lsls	r0, r3, #28
 800205c:	f100 80a8 	bmi.w	80021b0 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	0759      	lsls	r1, r3, #29
 8002064:	f100 80ce 	bmi.w	8002204 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	0699      	lsls	r1, r3, #26
 800206c:	f100 8137 	bmi.w	80022de <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002070:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 815d 	bne.w	8002332 <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8002078:	2000      	movs	r0, #0
 800207a:	e7af      	b.n	8001fdc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800207c:	f7ff fca4 	bl	80019c8 <HAL_GetTick>
 8002080:	eba0 0008 	sub.w	r0, r0, r8
 8002084:	2802      	cmp	r0, #2
 8002086:	d9cd      	bls.n	8002024 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8002088:	2003      	movs	r0, #3
 800208a:	e7a7      	b.n	8001fdc <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002094:	f7ff fc98 	bl	80019c8 <HAL_GetTick>
 8002098:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	079b      	lsls	r3, r3, #30
 800209e:	d5d5      	bpl.n	800204c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a0:	f7ff fc92 	bl	80019c8 <HAL_GetTick>
 80020a4:	eba0 0008 	sub.w	r0, r0, r8
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d9f6      	bls.n	800209a <HAL_RCC_OscConfig+0x15a>
 80020ac:	e7ec      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020ae:	2e08      	cmp	r6, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_OscConfig+0x17a>
 80020b2:	2e0c      	cmp	r6, #12
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020b6:	2f03      	cmp	r7, #3
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	039a      	lsls	r2, r3, #14
 80020be:	d5c8      	bpl.n	8002052 <HAL_RCC_OscConfig+0x112>
 80020c0:	686b      	ldr	r3, [r5, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1c5      	bne.n	8002052 <HAL_RCC_OscConfig+0x112>
 80020c6:	e73f      	b.n	8001f48 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	686b      	ldr	r3, [r5, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d110      	bne.n	80020f2 <HAL_RCC_OscConfig+0x1b2>
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020d8:	f7ff fc76 	bl	80019c8 <HAL_GetTick>
 80020dc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	039b      	lsls	r3, r3, #14
 80020e2:	d4b6      	bmi.n	8002052 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fc70 	bl	80019c8 <HAL_GetTick>
 80020e8:	eba0 0008 	sub.w	r0, r0, r8
 80020ec:	2864      	cmp	r0, #100	; 0x64
 80020ee:	d9f6      	bls.n	80020de <HAL_RCC_OscConfig+0x19e>
 80020f0:	e7ca      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f6:	d104      	bne.n	8002102 <HAL_RCC_OscConfig+0x1c2>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fe:	6023      	str	r3, [r4, #0]
 8002100:	e7e6      	b.n	80020d0 <HAL_RCC_OscConfig+0x190>
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002108:	6022      	str	r2, [r4, #0]
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002110:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8002116:	f7ff fc57 	bl	80019c8 <HAL_GetTick>
 800211a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	0398      	lsls	r0, r3, #14
 8002120:	d597      	bpl.n	8002052 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002122:	f7ff fc51 	bl	80019c8 <HAL_GetTick>
 8002126:	eba0 0008 	sub.w	r0, r0, r8
 800212a:	2864      	cmp	r0, #100	; 0x64
 800212c:	d9f6      	bls.n	800211c <HAL_RCC_OscConfig+0x1dc>
 800212e:	e7ab      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002130:	2e04      	cmp	r6, #4
 8002132:	d003      	beq.n	800213c <HAL_RCC_OscConfig+0x1fc>
 8002134:	2e0c      	cmp	r6, #12
 8002136:	d110      	bne.n	800215a <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002138:	2f02      	cmp	r7, #2
 800213a:	d10e      	bne.n	800215a <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	0559      	lsls	r1, r3, #21
 8002140:	d503      	bpl.n	800214a <HAL_RCC_OscConfig+0x20a>
 8002142:	68eb      	ldr	r3, [r5, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f43f aeff 	beq.w	8001f48 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	692a      	ldr	r2, [r5, #16]
 800214e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002152:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002156:	6063      	str	r3, [r4, #4]
 8002158:	e77e      	b.n	8002058 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215a:	68eb      	ldr	r3, [r5, #12]
 800215c:	b17b      	cbz	r3, 800217e <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002166:	f7ff fc2f 	bl	80019c8 <HAL_GetTick>
 800216a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	055a      	lsls	r2, r3, #21
 8002170:	d4eb      	bmi.n	800214a <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fc29 	bl	80019c8 <HAL_GetTick>
 8002176:	1bc0      	subs	r0, r0, r7
 8002178:	2802      	cmp	r0, #2
 800217a:	d9f7      	bls.n	800216c <HAL_RCC_OscConfig+0x22c>
 800217c:	e784      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002186:	f7ff fc1f 	bl	80019c8 <HAL_GetTick>
 800218a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	055b      	lsls	r3, r3, #21
 8002190:	f57f af62 	bpl.w	8002058 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff fc18 	bl	80019c8 <HAL_GetTick>
 8002198:	1bc0      	subs	r0, r0, r7
 800219a:	2802      	cmp	r0, #2
 800219c:	d9f6      	bls.n	800218c <HAL_RCC_OscConfig+0x24c>
 800219e:	e773      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	0800cc9c 	.word	0x0800cc9c
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b0:	696b      	ldr	r3, [r5, #20]
 80021b2:	b19b      	cbz	r3, 80021dc <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 80021b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80021c0:	f7ff fc02 	bl	80019c8 <HAL_GetTick>
 80021c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021ca:	079a      	lsls	r2, r3, #30
 80021cc:	f53f af48 	bmi.w	8002060 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff fbfa 	bl	80019c8 <HAL_GetTick>
 80021d4:	1bc0      	subs	r0, r0, r7
 80021d6:	2802      	cmp	r0, #2
 80021d8:	d9f5      	bls.n	80021c6 <HAL_RCC_OscConfig+0x286>
 80021da:	e755      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 80021dc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80021e8:	f7ff fbee 	bl	80019c8 <HAL_GetTick>
 80021ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80021f2:	079b      	lsls	r3, r3, #30
 80021f4:	f57f af34 	bpl.w	8002060 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7ff fbe6 	bl	80019c8 <HAL_GetTick>
 80021fc:	1bc0      	subs	r0, r0, r7
 80021fe:	2802      	cmp	r0, #2
 8002200:	d9f5      	bls.n	80021ee <HAL_RCC_OscConfig+0x2ae>
 8002202:	e741      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002204:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002206:	00d8      	lsls	r0, r3, #3
 8002208:	d429      	bmi.n	800225e <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	65a3      	str	r3, [r4, #88]	; 0x58
 8002212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800221c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002220:	4f98      	ldr	r7, [pc, #608]	; (8002484 <HAL_RCC_OscConfig+0x544>)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	05d9      	lsls	r1, r3, #23
 8002226:	d51d      	bpl.n	8002264 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	68ab      	ldr	r3, [r5, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d12b      	bne.n	8002286 <HAL_RCC_OscConfig+0x346>
 800222e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800223a:	f7ff fbc5 	bl	80019c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002242:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002248:	079b      	lsls	r3, r3, #30
 800224a:	d542      	bpl.n	80022d2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 800224c:	f1b8 0f00 	cmp.w	r8, #0
 8002250:	f43f af0a 	beq.w	8002068 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225a:	65a3      	str	r3, [r4, #88]	; 0x58
 800225c:	e704      	b.n	8002068 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 800225e:	f04f 0800 	mov.w	r8, #0
 8002262:	e7dd      	b.n	8002220 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800226c:	f7ff fbac 	bl	80019c8 <HAL_GetTick>
 8002270:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	05da      	lsls	r2, r3, #23
 8002276:	d4d7      	bmi.n	8002228 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7ff fba6 	bl	80019c8 <HAL_GetTick>
 800227c:	eba0 0009 	sub.w	r0, r0, r9
 8002280:	2802      	cmp	r0, #2
 8002282:	d9f6      	bls.n	8002272 <HAL_RCC_OscConfig+0x332>
 8002284:	e700      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002286:	2b05      	cmp	r3, #5
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x358>
 800228a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002296:	e7ca      	b.n	800222e <HAL_RCC_OscConfig+0x2ee>
 8002298:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80022a4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80022a8:	f022 0204 	bic.w	r2, r2, #4
 80022ac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1c2      	bne.n	800223a <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 80022b4:	f7ff fb88 	bl	80019c8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80022c2:	0798      	lsls	r0, r3, #30
 80022c4:	d5c2      	bpl.n	800224c <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff fb7f 	bl	80019c8 <HAL_GetTick>
 80022ca:	1bc0      	subs	r0, r0, r7
 80022cc:	4548      	cmp	r0, r9
 80022ce:	d9f6      	bls.n	80022be <HAL_RCC_OscConfig+0x37e>
 80022d0:	e6da      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff fb79 	bl	80019c8 <HAL_GetTick>
 80022d6:	1bc0      	subs	r0, r0, r7
 80022d8:	4548      	cmp	r0, r9
 80022da:	d9b3      	bls.n	8002244 <HAL_RCC_OscConfig+0x304>
 80022dc:	e6d4      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022e0:	b19b      	cbz	r3, 800230a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 80022e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80022ee:	f7ff fb6b 	bl	80019c8 <HAL_GetTick>
 80022f2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022f4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80022f8:	079a      	lsls	r2, r3, #30
 80022fa:	f53f aeb9 	bmi.w	8002070 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fe:	f7ff fb63 	bl	80019c8 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	2802      	cmp	r0, #2
 8002306:	d9f5      	bls.n	80022f4 <HAL_RCC_OscConfig+0x3b4>
 8002308:	e6be      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 800230a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002316:	f7ff fb57 	bl	80019c8 <HAL_GetTick>
 800231a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800231c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002320:	079b      	lsls	r3, r3, #30
 8002322:	f57f aea5 	bpl.w	8002070 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002326:	f7ff fb4f 	bl	80019c8 <HAL_GetTick>
 800232a:	1bc0      	subs	r0, r0, r7
 800232c:	2802      	cmp	r0, #2
 800232e:	d9f5      	bls.n	800231c <HAL_RCC_OscConfig+0x3dc>
 8002330:	e6aa      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 808c 	bne.w	8002450 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 8002338:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800233c:	f003 0103 	and.w	r1, r3, #3
 8002340:	4291      	cmp	r1, r2
 8002342:	d122      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002344:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002346:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800234a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002350:	d11b      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002352:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800235c:	d115      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002360:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002364:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800236c:	0852      	lsrs	r2, r2, #1
 800236e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002372:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002374:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002378:	d107      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800237c:	0852      	lsrs	r2, r2, #1
 800237e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002382:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002384:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002388:	d049      	beq.n	800241e <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238a:	2e0c      	cmp	r6, #12
 800238c:	f43f addc 	beq.w	8001f48 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	015f      	lsls	r7, r3, #5
 8002394:	f53f add8 	bmi.w	8001f48 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	00de      	lsls	r6, r3, #3
 800239c:	f53f add4 	bmi.w	8001f48 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80023a8:	f7ff fb0e 	bl	80019c8 <HAL_GetTick>
 80023ac:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	0198      	lsls	r0, r3, #6
 80023b2:	d42e      	bmi.n	8002412 <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b4:	68e2      	ldr	r2, [r4, #12]
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x548>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80023bc:	4313      	orrs	r3, r2
 80023be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80023c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023c4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80023c6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80023ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80023cc:	3a01      	subs	r2, #1
 80023ce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80023d2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80023d4:	0852      	lsrs	r2, r2, #1
 80023d6:	3a01      	subs	r2, #1
 80023d8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80023dc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80023de:	0852      	lsrs	r2, r2, #1
 80023e0:	3a01      	subs	r2, #1
 80023e2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80023e6:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ee:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f6:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80023f8:	f7ff fae6 	bl	80019c8 <HAL_GetTick>
 80023fc:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	0199      	lsls	r1, r3, #6
 8002402:	f53f ae39 	bmi.w	8002078 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff fadf 	bl	80019c8 <HAL_GetTick>
 800240a:	1b40      	subs	r0, r0, r5
 800240c:	2802      	cmp	r0, #2
 800240e:	d9f6      	bls.n	80023fe <HAL_RCC_OscConfig+0x4be>
 8002410:	e63a      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fad9 	bl	80019c8 <HAL_GetTick>
 8002416:	1b80      	subs	r0, r0, r6
 8002418:	2802      	cmp	r0, #2
 800241a:	d9c8      	bls.n	80023ae <HAL_RCC_OscConfig+0x46e>
 800241c:	e634      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	019a      	lsls	r2, r3, #6
 8002422:	f53f ae29 	bmi.w	8002078 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800242e:	68e3      	ldr	r3, [r4, #12]
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002434:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002436:	f7ff fac7 	bl	80019c8 <HAL_GetTick>
 800243a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	f53f ae1a 	bmi.w	8002078 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff fac0 	bl	80019c8 <HAL_GetTick>
 8002448:	1b40      	subs	r0, r0, r5
 800244a:	2802      	cmp	r0, #2
 800244c:	d9f6      	bls.n	800243c <HAL_RCC_OscConfig+0x4fc>
 800244e:	e61b      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002450:	2e0c      	cmp	r6, #12
 8002452:	f43f ad79 	beq.w	8001f48 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800245e:	f7ff fab3 	bl	80019c8 <HAL_GetTick>
 8002462:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800246a:	d104      	bne.n	8002476 <HAL_RCC_OscConfig+0x536>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800246c:	68e1      	ldr	r1, [r4, #12]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_RCC_OscConfig+0x54c>)
 8002470:	400a      	ands	r2, r1
 8002472:	60e2      	str	r2, [r4, #12]
 8002474:	e600      	b.n	8002078 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff faa7 	bl	80019c8 <HAL_GetTick>
 800247a:	1b40      	subs	r0, r0, r5
 800247c:	2802      	cmp	r0, #2
 800247e:	d9f1      	bls.n	8002464 <HAL_RCC_OscConfig+0x524>
 8002480:	e602      	b.n	8002088 <HAL_RCC_OscConfig+0x148>
 8002482:	bf00      	nop
 8002484:	40007000 	.word	0x40007000
 8002488:	019d800c 	.word	0x019d800c
 800248c:	feeefffc 	.word	0xfeeefffc

08002490 <HAL_RCC_ClockConfig>:
{
 8002490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002494:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002496:	4605      	mov	r5, r0
 8002498:	b910      	cbnz	r0, 80024a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
}
 800249c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4a72      	ldr	r2, [pc, #456]	; (800266c <HAL_RCC_ClockConfig+0x1dc>)
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d379      	bcc.n	80025a0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	6828      	ldr	r0, [r5, #0]
 80024ae:	0787      	lsls	r7, r0, #30
 80024b0:	f100 8082 	bmi.w	80025b8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b4:	07c4      	lsls	r4, r0, #31
 80024b6:	d53f      	bpl.n	8002538 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	686b      	ldr	r3, [r5, #4]
 80024ba:	4c6d      	ldr	r4, [pc, #436]	; (8002670 <HAL_RCC_ClockConfig+0x1e0>)
 80024bc:	2b03      	cmp	r3, #3
 80024be:	f040 8096 	bne.w	80025ee <HAL_RCC_ClockConfig+0x15e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	0198      	lsls	r0, r3, #6
 80024c6:	d5e8      	bpl.n	800249a <HAL_RCC_ClockConfig+0xa>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c8:	68e3      	ldr	r3, [r4, #12]
 80024ca:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d07f      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x142>
 80024d2:	3b02      	subs	r3, #2
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	4a67      	ldr	r2, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1e4>)
 80024d8:	bf28      	it	cs
 80024da:	2200      	movcs	r2, #0
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024dc:	68e1      	ldr	r1, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80024e4:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e6:	68e2      	ldr	r2, [r4, #12]
 80024e8:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ec:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f0:	3201      	adds	r2, #1
 80024f2:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f4:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
  sysclockfreq = pllvco / pllr;
 80024fa:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_ClockConfig+0x1e8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f200 8089 	bhi.w	8002618 <HAL_RCC_ClockConfig+0x188>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002506:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002508:	68a3      	ldr	r3, [r4, #8]
 800250a:	686a      	ldr	r2, [r5, #4]
 800250c:	f023 0303 	bic.w	r3, r3, #3
 8002510:	4313      	orrs	r3, r2
 8002512:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002514:	f7ff fa58 	bl	80019c8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800251c:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	68a3      	ldr	r3, [r4, #8]
 8002520:	686a      	ldr	r2, [r5, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800252a:	f040 8082 	bne.w	8002632 <HAL_RCC_ClockConfig+0x1a2>
  if(hpre == RCC_SYSCLK_DIV2)
 800252e:	b11f      	cbz	r7, 8002538 <HAL_RCC_ClockConfig+0xa8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002536:	60a3      	str	r3, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	6829      	ldr	r1, [r5, #0]
 800253a:	078a      	lsls	r2, r1, #30
 800253c:	d50b      	bpl.n	8002556 <HAL_RCC_ClockConfig+0xc6>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800253e:	4a4c      	ldr	r2, [pc, #304]	; (8002670 <HAL_RCC_ClockConfig+0x1e0>)
 8002540:	68ac      	ldr	r4, [r5, #8]
 8002542:	6890      	ldr	r0, [r2, #8]
 8002544:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8002548:	4284      	cmp	r4, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254a:	bf3f      	itttt	cc
 800254c:	6893      	ldrcc	r3, [r2, #8]
 800254e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8002552:	4323      	orrcc	r3, r4
 8002554:	6093      	strcc	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002556:	4a45      	ldr	r2, [pc, #276]	; (800266c <HAL_RCC_ClockConfig+0x1dc>)
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	42b3      	cmp	r3, r6
 8002560:	d870      	bhi.n	8002644 <HAL_RCC_ClockConfig+0x1b4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	f011 0f04 	tst.w	r1, #4
 8002566:	4c42      	ldr	r4, [pc, #264]	; (8002670 <HAL_RCC_ClockConfig+0x1e0>)
 8002568:	d178      	bne.n	800265c <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256a:	070b      	lsls	r3, r1, #28
 800256c:	d506      	bpl.n	800257c <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	68a3      	ldr	r3, [r4, #8]
 8002570:	692a      	ldr	r2, [r5, #16]
 8002572:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002576:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800257a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257c:	f7ff fc98 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002580:	68a3      	ldr	r3, [r4, #8]
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <HAL_RCC_ClockConfig+0x1ec>)
 8002584:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	40d8      	lsrs	r0, r3
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1f4>)
 8002596:	6818      	ldr	r0, [r3, #0]
}
 8002598:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 800259c:	f7ff b9d2 	b.w	8001944 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	f023 030f 	bic.w	r3, r3, #15
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	428b      	cmp	r3, r1
 80025b2:	f47f af72 	bne.w	800249a <HAL_RCC_ClockConfig+0xa>
 80025b6:	e779      	b.n	80024ac <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025b8:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_RCC_ClockConfig+0x1e0>)
 80025ba:	68ac      	ldr	r4, [r5, #8]
 80025bc:	6891      	ldr	r1, [r2, #8]
 80025be:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80025c2:	428c      	cmp	r4, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	bf81      	itttt	hi
 80025c6:	6893      	ldrhi	r3, [r2, #8]
 80025c8:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80025cc:	4323      	orrhi	r3, r4
 80025ce:	6093      	strhi	r3, [r2, #8]
 80025d0:	e770      	b.n	80024b4 <HAL_RCC_ClockConfig+0x24>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025d2:	6823      	ldr	r3, [r4, #0]
    pllvco = MSIRangeTable[msirange];
 80025d4:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <HAL_RCC_ClockConfig+0x1f8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025d6:	0719      	lsls	r1, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d8:	bf55      	itete	pl
 80025da:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025de:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025e0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 80025e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    break;
 80025ec:	e776      	b.n	80024dc <HAL_RCC_ClockConfig+0x4c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	f43f af4f 	beq.w	800249a <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80025fc:	f7ff fc58 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_ClockConfig+0x1e8>)
 8002602:	4298      	cmp	r0, r3
 8002604:	e77d      	b.n	8002502 <HAL_RCC_ClockConfig+0x72>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002606:	b91b      	cbnz	r3, 8002610 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f013 0f02 	tst.w	r3, #2
 800260e:	e7f3      	b.n	80025f8 <HAL_RCC_ClockConfig+0x168>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002616:	e7ef      	b.n	80025f8 <HAL_RCC_ClockConfig+0x168>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002618:	68a3      	ldr	r3, [r4, #8]
 800261a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800261e:	f47f af72 	bne.w	8002506 <HAL_RCC_ClockConfig+0x76>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002622:	68a3      	ldr	r3, [r4, #8]
 8002624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	60a3      	str	r3, [r4, #8]
          hpre = RCC_SYSCLK_DIV2;
 800262e:	2780      	movs	r7, #128	; 0x80
 8002630:	e76a      	b.n	8002508 <HAL_RCC_ClockConfig+0x78>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7ff f9c9 	bl	80019c8 <HAL_GetTick>
 8002636:	eba0 0008 	sub.w	r0, r0, r8
 800263a:	4548      	cmp	r0, r9
 800263c:	f67f af6f 	bls.w	800251e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002640:	2003      	movs	r0, #3
 8002642:	e72b      	b.n	800249c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	f023 030f 	bic.w	r3, r3, #15
 800264a:	4333      	orrs	r3, r6
 800264c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	42b3      	cmp	r3, r6
 8002656:	f47f af20 	bne.w	800249a <HAL_RCC_ClockConfig+0xa>
 800265a:	e782      	b.n	8002562 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	68ea      	ldr	r2, [r5, #12]
 8002660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002664:	4313      	orrs	r3, r2
 8002666:	60a3      	str	r3, [r4, #8]
 8002668:	e77f      	b.n	800256a <HAL_RCC_ClockConfig+0xda>
 800266a:	bf00      	nop
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	00f42400 	.word	0x00f42400
 8002678:	04c4b400 	.word	0x04c4b400
 800267c:	0800cc9c 	.word	0x0800cc9c
 8002680:	20000000 	.word	0x20000000
 8002684:	20000008 	.word	0x20000008
 8002688:	0800ccb4 	.word	0x0800ccb4

0800268c <HAL_RCC_GetHCLKFreq>:
}
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <HAL_RCC_GetHCLKFreq+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a6:	6810      	ldr	r0, [r2, #0]
 80026a8:	f003 031f 	and.w	r3, r3, #31
}
 80026ac:	40d8      	lsrs	r0, r3
 80026ae:	4770      	bx	lr
 80026b0:	40021000 	.word	0x40021000
 80026b4:	0800ccac 	.word	0x0800ccac
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026be:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ca:	6810      	ldr	r0, [r2, #0]
 80026cc:	f003 031f 	and.w	r3, r3, #31
}
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	0800ccac 	.word	0x0800ccac
 80026dc:	20000000 	.word	0x20000000

080026e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e2:	4c3c      	ldr	r4, [pc, #240]	; (80027d4 <RCCEx_PLLSAI1_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026e4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e6:	68e2      	ldr	r2, [r4, #12]
{
 80026e8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ea:	0790      	lsls	r0, r2, #30
{
 80026ec:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ee:	d023      	beq.n	8002738 <RCCEx_PLLSAI1_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026f0:	68e2      	ldr	r2, [r4, #12]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d16a      	bne.n	80027d0 <RCCEx_PLLSAI1_Config+0xf0>
       ||
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d068      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0xf0>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002704:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002706:	f7ff f95f 	bl	80019c8 <HAL_GetTick>
 800270a:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	011a      	lsls	r2, r3, #4
 8002710:	d42d      	bmi.n	800276e <RCCEx_PLLSAI1_Config+0x8e>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002712:	68ab      	ldr	r3, [r5, #8]
 8002714:	021e      	lsls	r6, r3, #8
 8002716:	686b      	ldr	r3, [r5, #4]
 8002718:	3b01      	subs	r3, #1
 800271a:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 800271c:	b377      	cbz	r7, 800277c <RCCEx_PLLSAI1_Config+0x9c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800271e:	2f01      	cmp	r7, #1
 8002720:	d145      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xce>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002722:	692b      	ldr	r3, [r5, #16]
 8002724:	6927      	ldr	r7, [r4, #16]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	1e59      	subs	r1, r3, #1
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <RCCEx_PLLSAI1_Config+0xf8>)
 800272c:	403b      	ands	r3, r7
 800272e:	4333      	orrs	r3, r6
 8002730:	4303      	orrs	r3, r0
 8002732:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002736:	e029      	b.n	800278c <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 8002738:	2b02      	cmp	r3, #2
 800273a:	d00d      	beq.n	8002758 <RCCEx_PLLSAI1_Config+0x78>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d00f      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0x80>
 8002740:	2b01      	cmp	r3, #1
 8002742:	d145      	bne.n	80027d0 <RCCEx_PLLSAI1_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800274a:	d041      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800274c:	68e0      	ldr	r0, [r4, #12]
 800274e:	f020 0003 	bic.w	r0, r0, #3
 8002752:	4318      	orrs	r0, r3
 8002754:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002756:	e7d2      	b.n	80026fe <RCCEx_PLLSAI1_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800275e:	e7f4      	b.n	800274a <RCCEx_PLLSAI1_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002760:	6822      	ldr	r2, [r4, #0]
 8002762:	0391      	lsls	r1, r2, #14
 8002764:	d4f2      	bmi.n	800274c <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800276c:	e7ed      	b.n	800274a <RCCEx_PLLSAI1_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276e:	f7ff f92b 	bl	80019c8 <HAL_GetTick>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	2802      	cmp	r0, #2
 8002776:	d9c9      	bls.n	800270c <RCCEx_PLLSAI1_Config+0x2c>
        status = HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800277c:	68e9      	ldr	r1, [r5, #12]
 800277e:	6922      	ldr	r2, [r4, #16]
 8002780:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 8002784:	4915      	ldr	r1, [pc, #84]	; (80027dc <RCCEx_PLLSAI1_Config+0xfc>)
 8002786:	4011      	ands	r1, r2
 8002788:	430b      	orrs	r3, r1
 800278a:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800278c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002794:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002796:	f7ff f917 	bl	80019c8 <HAL_GetTick>
 800279a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	d510      	bpl.n	80027c4 <RCCEx_PLLSAI1_Config+0xe4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a2:	6923      	ldr	r3, [r4, #16]
 80027a4:	69aa      	ldr	r2, [r5, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	6123      	str	r3, [r4, #16]
 80027aa:	2000      	movs	r0, #0
  return status;
 80027ac:	e7e5      	b.n	800277a <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ae:	696b      	ldr	r3, [r5, #20]
 80027b0:	6921      	ldr	r1, [r4, #16]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCCEx_PLLSAI1_Config+0x100>)
 80027b8:	400b      	ands	r3, r1
 80027ba:	4333      	orrs	r3, r6
 80027bc:	4303      	orrs	r3, r0
 80027be:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80027c2:	e7e3      	b.n	800278c <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c4:	f7ff f900 	bl	80019c8 <HAL_GetTick>
 80027c8:	1b80      	subs	r0, r0, r6
 80027ca:	2802      	cmp	r0, #2
 80027cc:	d9e6      	bls.n	800279c <RCCEx_PLLSAI1_Config+0xbc>
 80027ce:	e7d3      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x98>
      status = HAL_ERROR;
 80027d0:	2001      	movs	r0, #1
 80027d2:	e7d2      	b.n	800277a <RCCEx_PLLSAI1_Config+0x9a>
 80027d4:	40021000 	.word	0x40021000
 80027d8:	ff9f800f 	.word	0xff9f800f
 80027dc:	07ff800f 	.word	0x07ff800f
 80027e0:	f9ff800f 	.word	0xf9ff800f

080027e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e6:	4c3c      	ldr	r4, [pc, #240]	; (80028d8 <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027e8:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ea:	68e2      	ldr	r2, [r4, #12]
{
 80027ec:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ee:	0790      	lsls	r0, r2, #30
{
 80027f0:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	d023      	beq.n	800283c <RCCEx_PLLSAI2_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027f4:	68e2      	ldr	r2, [r4, #12]
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d16a      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
       ||
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d068      	beq.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002808:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800280a:	f7ff f8dd 	bl	80019c8 <HAL_GetTick>
 800280e:	4606      	mov	r6, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	d42d      	bmi.n	8002872 <RCCEx_PLLSAI2_Config+0x8e>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002816:	68ab      	ldr	r3, [r5, #8]
 8002818:	021e      	lsls	r6, r3, #8
 800281a:	686b      	ldr	r3, [r5, #4]
 800281c:	3b01      	subs	r3, #1
 800281e:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 8002820:	b377      	cbz	r7, 8002880 <RCCEx_PLLSAI2_Config+0x9c>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002822:	2f01      	cmp	r7, #1
 8002824:	d145      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xce>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002826:	692b      	ldr	r3, [r5, #16]
 8002828:	6967      	ldr	r7, [r4, #20]
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	1e59      	subs	r1, r3, #1
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <RCCEx_PLLSAI2_Config+0xf8>)
 8002830:	403b      	ands	r3, r7
 8002832:	4333      	orrs	r3, r6
 8002834:	4303      	orrs	r3, r0
 8002836:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800283a:	e029      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xac>
    switch(PllSai2->PLLSAI2Source)
 800283c:	2b02      	cmp	r3, #2
 800283e:	d00d      	beq.n	800285c <RCCEx_PLLSAI2_Config+0x78>
 8002840:	2b03      	cmp	r3, #3
 8002842:	d00f      	beq.n	8002864 <RCCEx_PLLSAI2_Config+0x80>
 8002844:	2b01      	cmp	r3, #1
 8002846:	d145      	bne.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800284e:	d041      	beq.n	80028d4 <RCCEx_PLLSAI2_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002850:	68e0      	ldr	r0, [r4, #12]
 8002852:	f020 0003 	bic.w	r0, r0, #3
 8002856:	4318      	orrs	r0, r3
 8002858:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800285a:	e7d2      	b.n	8002802 <RCCEx_PLLSAI2_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002862:	e7f4      	b.n	800284e <RCCEx_PLLSAI2_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002864:	6822      	ldr	r2, [r4, #0]
 8002866:	0391      	lsls	r1, r2, #14
 8002868:	d4f2      	bmi.n	8002850 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002870:	e7ed      	b.n	800284e <RCCEx_PLLSAI2_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002872:	f7ff f8a9 	bl	80019c8 <HAL_GetTick>
 8002876:	1b80      	subs	r0, r0, r6
 8002878:	2802      	cmp	r0, #2
 800287a:	d9c9      	bls.n	8002810 <RCCEx_PLLSAI2_Config+0x2c>
        status = HAL_TIMEOUT;
 800287c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002880:	68e9      	ldr	r1, [r5, #12]
 8002882:	6962      	ldr	r2, [r4, #20]
 8002884:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 8002888:	4915      	ldr	r1, [pc, #84]	; (80028e0 <RCCEx_PLLSAI2_Config+0xfc>)
 800288a:	4011      	ands	r1, r2
 800288c:	430b      	orrs	r3, r1
 800288e:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002890:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800289a:	f7ff f895 	bl	80019c8 <HAL_GetTick>
 800289e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	d510      	bpl.n	80028c8 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028a6:	6963      	ldr	r3, [r4, #20]
 80028a8:	69aa      	ldr	r2, [r5, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	6163      	str	r3, [r4, #20]
 80028ae:	2000      	movs	r0, #0
  return status;
 80028b0:	e7e5      	b.n	800287e <RCCEx_PLLSAI2_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028b2:	696b      	ldr	r3, [r5, #20]
 80028b4:	6961      	ldr	r1, [r4, #20]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCCEx_PLLSAI2_Config+0x100>)
 80028bc:	400b      	ands	r3, r1
 80028be:	4333      	orrs	r3, r6
 80028c0:	4303      	orrs	r3, r0
 80028c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80028c6:	e7e3      	b.n	8002890 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028c8:	f7ff f87e 	bl	80019c8 <HAL_GetTick>
 80028cc:	1b80      	subs	r0, r0, r6
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d9e6      	bls.n	80028a0 <RCCEx_PLLSAI2_Config+0xbc>
 80028d2:	e7d3      	b.n	800287c <RCCEx_PLLSAI2_Config+0x98>
      status = HAL_ERROR;
 80028d4:	2001      	movs	r0, #1
 80028d6:	e7d2      	b.n	800287e <RCCEx_PLLSAI2_Config+0x9a>
 80028d8:	40021000 	.word	0x40021000
 80028dc:	ff9f800f 	.word	0xff9f800f
 80028e0:	07ff800f 	.word	0x07ff800f
 80028e4:	f9ff800f 	.word	0xf9ff800f

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80028e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028ec:	6805      	ldr	r5, [r0, #0]
 80028ee:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80028f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028f4:	d007      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80028f6:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80028f8:	2940      	cmp	r1, #64	; 0x40
 80028fa:	d022      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80028fc:	d812      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80028fe:	b331      	cbz	r1, 800294e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002900:	2920      	cmp	r1, #32
 8002902:	d02b      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002904:	2501      	movs	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	04db      	lsls	r3, r3, #19
 800290a:	d509      	bpl.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai2ClockSelection)
 800290c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800290e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002912:	d030      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002914:	d827      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002916:	b3a1      	cbz	r1, 8002982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8002918:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800291c:	d074      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800291e:	2501      	movs	r5, #1
 8002920:	462e      	mov	r6, r5
 8002922:	e03d      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002924:	2960      	cmp	r1, #96	; 0x60
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002928:	2980      	cmp	r1, #128	; 0x80
 800292a:	d1eb      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292c:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800292e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002930:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002934:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002938:	430b      	orrs	r3, r1
 800293a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800293e:	2500      	movs	r5, #0
 8002940:	e7e1      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002942:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002944:	68d3      	ldr	r3, [r2, #12]
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800294c:	e7ee      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800294e:	3004      	adds	r0, #4
 8002950:	f7ff fec6 	bl	80026e0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002954:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002956:	2800      	cmp	r0, #0
 8002958:	d1d5      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800295a:	e7e7      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800295c:	2100      	movs	r1, #0
 800295e:	3020      	adds	r0, #32
 8002960:	f7ff ff40 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002964:	e7f6      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002966:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800296a:	d002      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800296c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002970:	d1d5      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8002972:	462e      	mov	r6, r5
 8002974:	e009      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002976:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002978:	68d3      	ldr	r3, [r2, #12]
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	60d3      	str	r3, [r2, #12]
      break;
 8002980:	e7f7      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002982:	1d20      	adds	r0, r4, #4
 8002984:	f7ff feac 	bl	80026e0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002988:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800298a:	2e00      	cmp	r6, #0
 800298c:	d142      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002990:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002992:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	039f      	lsls	r7, r3, #14
 80029a4:	d54f      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a6:	4f1e      	ldr	r7, [pc, #120]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80029a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029aa:	00d8      	lsls	r0, r3, #3
 80029ac:	d434      	bmi.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029c0:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029c8:	f8d9 3000 	ldr.w	r3, [r9]
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80029d4:	f7fe fff8 	bl	80019c8 <HAL_GetTick>
 80029d8:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029da:	f8d9 3000 	ldr.w	r3, [r9]
 80029de:	05d9      	lsls	r1, r3, #23
 80029e0:	d522      	bpl.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	f040 819b 	bne.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x436>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029f0:	f040 816a 	bne.w	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80029fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a06:	e017      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f104 0020 	add.w	r0, r4, #32
 8002a0e:	f7ff fee9 	bl	80027e4 <RCCEx_PLLSAI2_Config>
 8002a12:	e7b9      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a14:	4635      	mov	r5, r6
 8002a16:	e7c3      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    FlagStatus       pwrclkchanged = RESET;
 8002a18:	f04f 0800 	mov.w	r8, #0
 8002a1c:	e7d2      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe ffce 	bl	80019c8 <HAL_GetTick>
 8002a2c:	eba0 000a 	sub.w	r0, r0, sl
 8002a30:	2802      	cmp	r0, #2
 8002a32:	d9d2      	bls.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xf2>
        ret = HAL_TIMEOUT;
 8002a34:	2503      	movs	r5, #3
 8002a36:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8002a38:	f1b8 0f00 	cmp.w	r8, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a44:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	07df      	lsls	r7, r3, #31
 8002a4a:	d508      	bpl.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4c:	49b5      	ldr	r1, [pc, #724]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002a4e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a54:	f022 0203 	bic.w	r2, r2, #3
 8002a58:	4302      	orrs	r2, r0
 8002a5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5e:	0798      	lsls	r0, r3, #30
 8002a60:	d508      	bpl.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a62:	49b0      	ldr	r1, [pc, #704]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002a64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002a66:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a6a:	f022 020c 	bic.w	r2, r2, #12
 8002a6e:	4302      	orrs	r2, r0
 8002a70:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a74:	0759      	lsls	r1, r3, #29
 8002a76:	d508      	bpl.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a78:	49aa      	ldr	r1, [pc, #680]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002a7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a80:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002a84:	4302      	orrs	r2, r0
 8002a86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a8a:	071a      	lsls	r2, r3, #28
 8002a8c:	d508      	bpl.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a8e:	49a5      	ldr	r1, [pc, #660]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002a90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002a92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a9a:	4302      	orrs	r2, r0
 8002a9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa0:	06df      	lsls	r7, r3, #27
 8002aa2:	d508      	bpl.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aa4:	499f      	ldr	r1, [pc, #636]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002aa6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002aa8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ab0:	4302      	orrs	r2, r0
 8002ab2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab6:	0698      	lsls	r0, r3, #26
 8002ab8:	d508      	bpl.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aba:	499a      	ldr	r1, [pc, #616]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002abc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002abe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ac2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ac6:	4302      	orrs	r2, r0
 8002ac8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002acc:	0599      	lsls	r1, r3, #22
 8002ace:	d508      	bpl.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad0:	4994      	ldr	r1, [pc, #592]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002ad2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002ad4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ad8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002adc:	4302      	orrs	r2, r0
 8002ade:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ae2:	055a      	lsls	r2, r3, #21
 8002ae4:	d508      	bpl.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae6:	498f      	ldr	r1, [pc, #572]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002ae8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002aea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002af2:	4302      	orrs	r2, r0
 8002af4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	065f      	lsls	r7, r3, #25
 8002afa:	d508      	bpl.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afc:	4989      	ldr	r1, [pc, #548]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b04:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b08:	4302      	orrs	r2, r0
 8002b0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b0e:	0618      	lsls	r0, r3, #24
 8002b10:	d508      	bpl.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b12:	4984      	ldr	r1, [pc, #528]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b1e:	4302      	orrs	r2, r0
 8002b20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b24:	05d9      	lsls	r1, r3, #23
 8002b26:	d508      	bpl.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b28:	497e      	ldr	r1, [pc, #504]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002b2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b2c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b30:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b34:	4302      	orrs	r2, r0
 8002b36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b3a:	02da      	lsls	r2, r3, #11
 8002b3c:	d508      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b3e:	4979      	ldr	r1, [pc, #484]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002b40:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002b42:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002b46:	f022 0203 	bic.w	r2, r2, #3
 8002b4a:	4302      	orrs	r2, r0
 8002b4c:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b50:	049f      	lsls	r7, r3, #18
 8002b52:	d510      	bpl.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b54:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002b56:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002b58:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b5c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b60:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b62:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6a:	f040 80dd 	bne.w	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x440>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6e:	68d3      	ldr	r3, [r2, #12]
 8002b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b74:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	0318      	lsls	r0, r3, #12
 8002b7a:	d50f      	bpl.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b7c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002b7e:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002b80:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002b84:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b88:	f040 80da 	bne.w	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8002b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9a:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	0359      	lsls	r1, r3, #13
 8002ba0:	d510      	bpl.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ba2:	4a60      	ldr	r2, [pc, #384]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002ba4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ba6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002baa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002bae:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bb0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bb8:	f040 80e0 	bne.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x494>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbc:	68d3      	ldr	r3, [r2, #12]
 8002bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	045a      	lsls	r2, r3, #17
 8002bc8:	d513      	bpl.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bca:	4956      	ldr	r1, [pc, #344]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002bcc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002bd0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002bd4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002bd8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bda:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002be4:	2102      	movs	r1, #2
 8002be6:	1d20      	adds	r0, r4, #4
 8002be8:	f7ff fd7a 	bl	80026e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002bec:	1e06      	subs	r6, r0, #0
 8002bee:	bf18      	it	ne
 8002bf0:	4635      	movne	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	03d3      	lsls	r3, r2, #15
 8002bf6:	d509      	bpl.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x324>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bf8:	494a      	ldr	r1, [pc, #296]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002bfa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002bfe:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8002c02:	f023 0304 	bic.w	r3, r3, #4
 8002c06:	4303      	orrs	r3, r0
 8002c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c0c:	0297      	lsls	r7, r2, #10
 8002c0e:	d509      	bpl.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c10:	4944      	ldr	r1, [pc, #272]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002c12:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8002c16:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8002c1a:	f023 0318 	bic.w	r3, r3, #24
 8002c1e:	4303      	orrs	r3, r0
 8002c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c24:	0250      	lsls	r0, r2, #9
 8002c26:	d51f      	bpl.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c28:	4f3e      	ldr	r7, [pc, #248]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002c32:	f7fe fec9 	bl	80019c8 <HAL_GetTick>
 8002c36:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	f100 80aa 	bmi.w	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if(ret == HAL_OK)
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	f040 80b0 	bne.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c4a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c58:	2102      	movs	r1, #2
 8002c5a:	f104 0020 	add.w	r0, r4, #32
 8002c5e:	f7ff fdc1 	bl	80027e4 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 8002c62:	2800      	cmp	r0, #0
 8002c64:	bf18      	it	ne
 8002c66:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	021a      	lsls	r2, r3, #8
 8002c6c:	d514      	bpl.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002c6e:	492d      	ldr	r1, [pc, #180]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002c70:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002c74:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c7c:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8002c7e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002c82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8002c86:	d107      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	f104 0020 	add.w	r0, r4, #32
 8002c8e:	f7ff fda9 	bl	80027e4 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002c92:	2800      	cmp	r0, #0
 8002c94:	bf18      	it	ne
 8002c96:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	01db      	lsls	r3, r3, #7
 8002c9c:	d510      	bpl.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8002ca0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002ca4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002ca8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002cac:	430b      	orrs	r3, r1
 8002cae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002cb2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb6:	bf02      	ittt	eq
 8002cb8:	68d3      	ldreq	r3, [r2, #12]
 8002cba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002cbe:	60d3      	streq	r3, [r2, #12]
}
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	b002      	add	sp, #8
 8002cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f43f ae91 	beq.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cee:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002cf4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf8:	f57f ae7c 	bpl.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fe64 	bl	80019c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d04:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d0a:	079b      	lsls	r3, r3, #30
 8002d0c:	f53f ae72 	bmi.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe fe5a 	bl	80019c8 <HAL_GetTick>
 8002d14:	eba0 0009 	sub.w	r0, r0, r9
 8002d18:	4550      	cmp	r0, sl
 8002d1a:	d9f4      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8002d1c:	e68a      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d1e:	4635      	mov	r5, r6
 8002d20:	e68a      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d28:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d2c:	f47f af23 	bne.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d30:	2101      	movs	r1, #1
 8002d32:	1d20      	adds	r0, r4, #4
 8002d34:	f7ff fcd4 	bl	80026e0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002d38:	1e06      	subs	r6, r0, #0
 8002d3a:	bf18      	it	ne
 8002d3c:	4635      	movne	r5, r6
 8002d3e:	e71a      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d4c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002d50:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d5a:	d103      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d62:	e71a      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d64:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d68:	f47f af18 	bne.w	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	1d20      	adds	r0, r4, #4
 8002d70:	f7ff fcb6 	bl	80026e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d74:	1e06      	subs	r6, r0, #0
 8002d76:	bf18      	it	ne
 8002d78:	4635      	movne	r5, r6
 8002d7a:	e70f      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d7c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002d80:	f47f af20 	bne.w	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d84:	2101      	movs	r1, #1
 8002d86:	1d20      	adds	r0, r4, #4
 8002d88:	f7ff fcaa 	bl	80026e0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d8c:	1e06      	subs	r6, r0, #0
 8002d8e:	bf18      	it	ne
 8002d90:	4635      	movne	r5, r6
 8002d92:	e717      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d94:	f7fe fe18 	bl	80019c8 <HAL_GetTick>
 8002d98:	eba0 0008 	sub.w	r0, r0, r8
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	f67f af4b 	bls.w	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x350>
        ret = HAL_TIMEOUT;
 8002da2:	2503      	movs	r5, #3
 8002da4:	e760      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8002da6:	4635      	mov	r5, r6
 8002da8:	e75e      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8002daa:	bf00      	nop

08002dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b538      	push	{r3, r4, r5, lr}
 8002dae:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002db0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db2:	6921      	ldr	r1, [r4, #16]
 8002db4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db8:	69c0      	ldr	r0, [r0, #28]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	6961      	ldr	r1, [r4, #20]
 8002dbe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc0:	49a0      	ldr	r1, [pc, #640]	; (8003044 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc4:	4029      	ands	r1, r5
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68e1      	ldr	r1, [r4, #12]
 8002dce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd6:	4a9c      	ldr	r2, [pc, #624]	; (8003048 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dda:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ddc:	bf1c      	itt	ne
 8002dde:	6a22      	ldrne	r2, [r4, #32]
 8002de0:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8002de8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002df4:	f022 020f 	bic.w	r2, r2, #15
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfc:	4a93      	ldr	r2, [pc, #588]	; (800304c <UART_SetConfig+0x2a0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d11b      	bne.n	8002e3a <UART_SetConfig+0x8e>
 8002e02:	4b93      	ldr	r3, [pc, #588]	; (8003050 <UART_SetConfig+0x2a4>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	f200 80e4 	bhi.w	8002fdc <UART_SetConfig+0x230>
 8002e14:	4a8f      	ldr	r2, [pc, #572]	; (8003054 <UART_SetConfig+0x2a8>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e1c:	f040 80ab 	bne.w	8002f76 <UART_SetConfig+0x1ca>
  {
    switch (clocksource)
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d826      	bhi.n	8002e72 <UART_SetConfig+0xc6>
 8002e24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e28:	00dd00ee 	.word	0x00dd00ee
 8002e2c:	002500a5 	.word	0x002500a5
 8002e30:	002500e3 	.word	0x002500e3
 8002e34:	00250025 	.word	0x00250025
 8002e38:	00f2      	.short	0x00f2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3a:	4a87      	ldr	r2, [pc, #540]	; (8003058 <UART_SetConfig+0x2ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d106      	bne.n	8002e4e <UART_SetConfig+0xa2>
 8002e40:	4b83      	ldr	r3, [pc, #524]	; (8003050 <UART_SetConfig+0x2a4>)
 8002e42:	4a86      	ldr	r2, [pc, #536]	; (800305c <UART_SetConfig+0x2b0>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	e7e3      	b.n	8002e16 <UART_SetConfig+0x6a>
 8002e4e:	4a84      	ldr	r2, [pc, #528]	; (8003060 <UART_SetConfig+0x2b4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d119      	bne.n	8002e88 <UART_SetConfig+0xdc>
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <UART_SetConfig+0x2a4>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	f000 80c8 	beq.w	8002ff4 <UART_SetConfig+0x248>
 8002e64:	d807      	bhi.n	8002e76 <UART_SetConfig+0xca>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80c9 	beq.w	8002ffe <UART_SetConfig+0x252>
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	f000 80bb 	beq.w	8002fe8 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	2001      	movs	r0, #1
 8002e74:	e04e      	b.n	8002f14 <UART_SetConfig+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e76:	2b30      	cmp	r3, #48	; 0x30
 8002e78:	d1fb      	bne.n	8002e72 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e7e:	f000 80c5 	beq.w	800300c <UART_SetConfig+0x260>
 8002e82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e86:	e093      	b.n	8002fb0 <UART_SetConfig+0x204>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e88:	4a76      	ldr	r2, [pc, #472]	; (8003064 <UART_SetConfig+0x2b8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10f      	bne.n	8002eae <UART_SetConfig+0x102>
 8002e8e:	4b70      	ldr	r3, [pc, #448]	; (8003050 <UART_SetConfig+0x2a4>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	f000 80ab 	beq.w	8002ff4 <UART_SetConfig+0x248>
 8002e9e:	d804      	bhi.n	8002eaa <UART_SetConfig+0xfe>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80ac 	beq.w	8002ffe <UART_SetConfig+0x252>
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	e7e1      	b.n	8002e6e <UART_SetConfig+0xc2>
 8002eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8002eac:	e7e4      	b.n	8002e78 <UART_SetConfig+0xcc>
 8002eae:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <UART_SetConfig+0x2bc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d112      	bne.n	8002eda <UART_SetConfig+0x12e>
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <UART_SetConfig+0x2a4>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec2:	f000 8097 	beq.w	8002ff4 <UART_SetConfig+0x248>
 8002ec6:	d805      	bhi.n	8002ed4 <UART_SetConfig+0x128>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8098 	beq.w	8002ffe <UART_SetConfig+0x252>
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed2:	e7cc      	b.n	8002e6e <UART_SetConfig+0xc2>
 8002ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed8:	e7ce      	b.n	8002e78 <UART_SetConfig+0xcc>
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <UART_SetConfig+0x29c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d1c8      	bne.n	8002e72 <UART_SetConfig+0xc6>
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <UART_SetConfig+0x2a4>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eee:	d018      	beq.n	8002f22 <UART_SetConfig+0x176>
 8002ef0:	d806      	bhi.n	8002f00 <UART_SetConfig+0x154>
 8002ef2:	b15b      	cbz	r3, 8002f0c <UART_SetConfig+0x160>
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d1bb      	bne.n	8002e72 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002efa:	f7fe ffd9 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
        break;
 8002efe:	e007      	b.n	8002f10 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f04:	d1b5      	bne.n	8002e72 <UART_SetConfig+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8002f06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f0a:	e00b      	b.n	8002f24 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7ff fbc4 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f10:	b940      	cbnz	r0, 8002f24 <UART_SetConfig+0x178>
 8002f12:	2000      	movs	r0, #0
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002f14:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002f18:	66a3      	str	r3, [r4, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f1a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002f1c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002f22:	4852      	ldr	r0, [pc, #328]	; (800306c <UART_SetConfig+0x2c0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f24:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <UART_SetConfig+0x2c4>)
 8002f28:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f2a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f2e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002f32:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f36:	4299      	cmp	r1, r3
 8002f38:	d89b      	bhi.n	8002e72 <UART_SetConfig+0xc6>
 8002f3a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8002f3e:	d898      	bhi.n	8002e72 <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f40:	2300      	movs	r3, #0
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd ff56 	bl	8000df4 <__aeabi_uldivmod>
 8002f48:	0209      	lsls	r1, r1, #8
 8002f4a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8002f4e:	086b      	lsrs	r3, r5, #1
 8002f50:	0200      	lsls	r0, r0, #8
 8002f52:	18c0      	adds	r0, r0, r3
 8002f54:	462a      	mov	r2, r5
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f141 0100 	adc.w	r1, r1, #0
 8002f5e:	f7fd ff49 	bl	8000df4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f62:	4b44      	ldr	r3, [pc, #272]	; (8003074 <UART_SetConfig+0x2c8>)
 8002f64:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d882      	bhi.n	8002e72 <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	60d8      	str	r0, [r3, #12]
 8002f70:	e7cf      	b.n	8002f12 <UART_SetConfig+0x166>
        pclk = (uint32_t) HSI_VALUE;
 8002f72:	483e      	ldr	r0, [pc, #248]	; (800306c <UART_SetConfig+0x2c0>)
 8002f74:	e04a      	b.n	800300c <UART_SetConfig+0x260>
    switch (clocksource)
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	f63f af7b 	bhi.w	8002e72 <UART_SetConfig+0xc6>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <UART_SetConfig+0x1d8>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	08002fd1 	.word	0x08002fd1
 8002f8c:	08002ffb 	.word	0x08002ffb
 8002f90:	08002e73 	.word	0x08002e73
 8002f94:	08002fd7 	.word	0x08002fd7
 8002f98:	08002e73 	.word	0x08002e73
 8002f9c:	08002e73 	.word	0x08002e73
 8002fa0:	08002e73 	.word	0x08002e73
 8002fa4:	08002e83 	.word	0x08002e83
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff fb76 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d0b0      	beq.n	8002f12 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fb0:	6863      	ldr	r3, [r4, #4]
 8002fb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <UART_SetConfig+0x2c4>)
 8002fb6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002fba:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fbe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002fc2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002fca:	f1a0 0210 	sub.w	r2, r0, #16
 8002fce:	e7cb      	b.n	8002f68 <UART_SetConfig+0x1bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd0:	f7ff fb74 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
        break;
 8002fd4:	e7ea      	b.n	8002fac <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd6:	f7fe ff6b 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
        break;
 8002fda:	e7e7      	b.n	8002fac <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002fe0:	d1f6      	bne.n	8002fd0 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe2:	f7ff fb6b 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
        break;
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002fec:	d1f3      	bne.n	8002fd6 <UART_SetConfig+0x22a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe ff5f 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
        break;
 8002ff2:	e009      	b.n	8003008 <UART_SetConfig+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ff8:	d0bb      	beq.n	8002f72 <UART_SetConfig+0x1c6>
        pclk = (uint32_t) HSI_VALUE;
 8002ffa:	481c      	ldr	r0, [pc, #112]	; (800306c <UART_SetConfig+0x2c0>)
 8002ffc:	e7d8      	b.n	8002fb0 <UART_SetConfig+0x204>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003002:	d1d1      	bne.n	8002fa8 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003004:	f7ff fb48 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003008:	2800      	cmp	r0, #0
 800300a:	d082      	beq.n	8002f12 <UART_SetConfig+0x166>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800300c:	6862      	ldr	r2, [r4, #4]
 800300e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <UART_SetConfig+0x2c4>)
 8003012:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	0850      	lsrs	r0, r2, #1
 800301c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003020:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003024:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003028:	f1a0 0210 	sub.w	r2, r0, #16
 800302c:	429a      	cmp	r2, r3
 800302e:	f63f af20 	bhi.w	8002e72 <UART_SetConfig+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003032:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8003036:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003038:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800303e:	4318      	orrs	r0, r3
 8003040:	60d0      	str	r0, [r2, #12]
 8003042:	e766      	b.n	8002f12 <UART_SetConfig+0x166>
 8003044:	cfff69f3 	.word	0xcfff69f3
 8003048:	40008000 	.word	0x40008000
 800304c:	40013800 	.word	0x40013800
 8003050:	40021000 	.word	0x40021000
 8003054:	0800cce4 	.word	0x0800cce4
 8003058:	40004400 	.word	0x40004400
 800305c:	0800cce7 	.word	0x0800cce7
 8003060:	40004800 	.word	0x40004800
 8003064:	40004c00 	.word	0x40004c00
 8003068:	40005000 	.word	0x40005000
 800306c:	00f42400 	.word	0x00f42400
 8003070:	0800ccf4 	.word	0x0800ccf4
 8003074:	000ffcff 	.word	0x000ffcff

08003078 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003078:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800307a:	07da      	lsls	r2, r3, #31
{
 800307c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800307e:	d506      	bpl.n	800308e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003080:	6801      	ldr	r1, [r0, #0]
 8003082:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003084:	684a      	ldr	r2, [r1, #4]
 8003086:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800308a:	4322      	orrs	r2, r4
 800308c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308e:	079c      	lsls	r4, r3, #30
 8003090:	d506      	bpl.n	80030a0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003092:	6801      	ldr	r1, [r0, #0]
 8003094:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003096:	684a      	ldr	r2, [r1, #4]
 8003098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800309c:	4322      	orrs	r2, r4
 800309e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a0:	0759      	lsls	r1, r3, #29
 80030a2:	d506      	bpl.n	80030b2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a4:	6801      	ldr	r1, [r0, #0]
 80030a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030a8:	684a      	ldr	r2, [r1, #4]
 80030aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ae:	4322      	orrs	r2, r4
 80030b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b2:	071a      	lsls	r2, r3, #28
 80030b4:	d506      	bpl.n	80030c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b6:	6801      	ldr	r1, [r0, #0]
 80030b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030ba:	684a      	ldr	r2, [r1, #4]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c0:	4322      	orrs	r2, r4
 80030c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c4:	06dc      	lsls	r4, r3, #27
 80030c6:	d506      	bpl.n	80030d6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c8:	6801      	ldr	r1, [r0, #0]
 80030ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030cc:	688a      	ldr	r2, [r1, #8]
 80030ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d2:	4322      	orrs	r2, r4
 80030d4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	0699      	lsls	r1, r3, #26
 80030d8:	d506      	bpl.n	80030e8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030da:	6801      	ldr	r1, [r0, #0]
 80030dc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80030de:	688a      	ldr	r2, [r1, #8]
 80030e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e4:	4322      	orrs	r2, r4
 80030e6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e8:	065a      	lsls	r2, r3, #25
 80030ea:	d50f      	bpl.n	800310c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ec:	6801      	ldr	r1, [r0, #0]
 80030ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030f0:	684a      	ldr	r2, [r1, #4]
 80030f2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80030f6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030fc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fe:	d105      	bne.n	800310c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003100:	684a      	ldr	r2, [r1, #4]
 8003102:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003104:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003108:	4322      	orrs	r2, r4
 800310a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	d506      	bpl.n	800311e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003110:	6802      	ldr	r2, [r0, #0]
 8003112:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003114:	6853      	ldr	r3, [r2, #4]
 8003116:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800311a:	430b      	orrs	r3, r1
 800311c:	6053      	str	r3, [r2, #4]
  }
}
 800311e:	bd10      	pop	{r4, pc}

08003120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003128:	4604      	mov	r4, r0
 800312a:	460e      	mov	r6, r1
 800312c:	4615      	mov	r5, r2
 800312e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003130:	6822      	ldr	r2, [r4, #0]
 8003132:	69d3      	ldr	r3, [r2, #28]
 8003134:	ea36 0303 	bics.w	r3, r6, r3
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	42ab      	cmp	r3, r5
 8003140:	d001      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003142:	2000      	movs	r0, #0
 8003144:	e027      	b.n	8003196 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003146:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800314a:	d0f2      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fe fc3c 	bl	80019c8 <HAL_GetTick>
 8003150:	1bc0      	subs	r0, r0, r7
 8003152:	4540      	cmp	r0, r8
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	d802      	bhi.n	800315e <UART_WaitOnFlagUntilTimeout+0x3e>
 8003158:	f1b8 0f00 	cmp.w	r8, #0
 800315c:	d11d      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003162:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	e840 3200 	strex	r2, r3, [r0]
 800316a:	2a00      	cmp	r2, #0
 800316c:	d1f7      	bne.n	800315e <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	f100 0308 	add.w	r3, r0, #8
 8003172:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	f100 0108 	add.w	r1, r0, #8
 800317e:	e841 3200 	strex	r2, r3, [r1]
 8003182:	2a00      	cmp	r2, #0
 8003184:	d1f3      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8003186:	2320      	movs	r3, #32
 8003188:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800318c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8003190:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003194:	2003      	movs	r0, #3
}
 8003196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	075a      	lsls	r2, r3, #29
 800319e:	d5c7      	bpl.n	8003130 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a0:	69c3      	ldr	r3, [r0, #28]
 80031a2:	051b      	lsls	r3, r3, #20
 80031a4:	d5c4      	bpl.n	8003130 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031aa:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	e840 3200 	strex	r2, r3, [r0]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d1f7      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	f100 0308 	add.w	r3, r0, #8
 80031c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	f100 0108 	add.w	r1, r0, #8
 80031cc:	e841 3200 	strex	r2, r3, [r1]
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d1f3      	bne.n	80031bc <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 80031d4:	2320      	movs	r3, #32
 80031d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80031da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80031e2:	e7d5      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0x70>

080031e4 <HAL_UART_Transmit>:
{
 80031e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80031e8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80031ea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80031ee:	2b20      	cmp	r3, #32
{
 80031f0:	4604      	mov	r4, r0
 80031f2:	460e      	mov	r6, r1
 80031f4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80031f6:	d150      	bne.n	800329a <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d04c      	beq.n	8003296 <HAL_UART_Transmit+0xb2>
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d04a      	beq.n	8003296 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8003200:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003204:	2b01      	cmp	r3, #1
 8003206:	d048      	beq.n	800329a <HAL_UART_Transmit+0xb6>
 8003208:	2301      	movs	r3, #1
 800320a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003210:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003216:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 800321a:	f7fe fbd5 	bl	80019c8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321e:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003220:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003228:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800322a:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322e:	d103      	bne.n	8003238 <HAL_UART_Transmit+0x54>
 8003230:	6922      	ldr	r2, [r4, #16]
 8003232:	b90a      	cbnz	r2, 8003238 <HAL_UART_Transmit+0x54>
 8003234:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003236:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003238:	2200      	movs	r2, #0
 800323a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800323e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003246:	b292      	uxth	r2, r2
 8003248:	b942      	cbnz	r2, 800325c <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	2140      	movs	r1, #64	; 0x40
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff ff67 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003252:	b958      	cbnz	r0, 800326c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8003254:	2320      	movs	r3, #32
 8003256:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800325a:	e008      	b.n	800326e <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325c:	2200      	movs	r2, #0
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	4620      	mov	r0, r4
 8003262:	9303      	str	r3, [sp, #12]
 8003264:	f7ff ff5c 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003268:	9b03      	ldr	r3, [sp, #12]
 800326a:	b118      	cbz	r0, 8003274 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 800326c:	2003      	movs	r0, #3
}
 800326e:	b004      	add	sp, #16
 8003270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003274:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003276:	b95e      	cbnz	r6, 8003290 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003278:	f835 2b02 	ldrh.w	r2, [r5], #2
 800327c:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003280:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003282:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8003286:	3a01      	subs	r2, #1
 8003288:	b292      	uxth	r2, r2
 800328a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 800328e:	e7d6      	b.n	800323e <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003290:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003294:	e7f4      	b.n	8003280 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8003296:	2001      	movs	r0, #1
 8003298:	e7e9      	b.n	800326e <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 800329a:	2002      	movs	r0, #2
 800329c:	e7e7      	b.n	800326e <HAL_UART_Transmit+0x8a>

0800329e <HAL_UART_Receive>:
{
 800329e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032a2:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80032a4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80032a8:	2b20      	cmp	r3, #32
{
 80032aa:	4604      	mov	r4, r0
 80032ac:	460d      	mov	r5, r1
 80032ae:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b0:	d16a      	bne.n	8003388 <HAL_UART_Receive+0xea>
    if ((pData == NULL) || (Size == 0U))
 80032b2:	2900      	cmp	r1, #0
 80032b4:	d066      	beq.n	8003384 <HAL_UART_Receive+0xe6>
 80032b6:	2a00      	cmp	r2, #0
 80032b8:	d064      	beq.n	8003384 <HAL_UART_Receive+0xe6>
    __HAL_LOCK(huart);
 80032ba:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d062      	beq.n	8003388 <HAL_UART_Receive+0xea>
 80032c2:	2301      	movs	r3, #1
 80032c4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032cc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ce:	f8c0 808c 	str.w	r8, [r0, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d6:	f8c0 806c 	str.w	r8, [r0, #108]	; 0x6c
    tickstart = HAL_GetTick();
 80032da:	f7fe fb75 	bl	80019c8 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80032de:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80032e0:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80032e8:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80032ea:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 80032ee:	d11d      	bne.n	800332c <HAL_UART_Receive+0x8e>
 80032f0:	6922      	ldr	r2, [r4, #16]
 80032f2:	b9ca      	cbnz	r2, 8003328 <HAL_UART_Receive+0x8a>
 80032f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032f8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8003300:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003304:	d123      	bne.n	800334e <HAL_UART_Receive+0xb0>
 8003306:	6923      	ldr	r3, [r4, #16]
 8003308:	bb0b      	cbnz	r3, 800334e <HAL_UART_Receive+0xb0>
 800330a:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800330c:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 800330e:	2300      	movs	r3, #0
 8003310:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8003314:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003318:	b290      	uxth	r0, r2
 800331a:	b9d0      	cbnz	r0, 8003352 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 800331c:	2320      	movs	r3, #32
 800331e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8003322:	b003      	add	sp, #12
 8003324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	e7e5      	b.n	80032f8 <HAL_UART_Receive+0x5a>
 800332c:	b923      	cbnz	r3, 8003338 <HAL_UART_Receive+0x9a>
 800332e:	6922      	ldr	r2, [r4, #16]
 8003330:	2a00      	cmp	r2, #0
 8003332:	d0f9      	beq.n	8003328 <HAL_UART_Receive+0x8a>
 8003334:	227f      	movs	r2, #127	; 0x7f
 8003336:	e7df      	b.n	80032f8 <HAL_UART_Receive+0x5a>
 8003338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800333c:	d104      	bne.n	8003348 <HAL_UART_Receive+0xaa>
 800333e:	6922      	ldr	r2, [r4, #16]
 8003340:	2a00      	cmp	r2, #0
 8003342:	d0f7      	beq.n	8003334 <HAL_UART_Receive+0x96>
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	e7d7      	b.n	80032f8 <HAL_UART_Receive+0x5a>
 8003348:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 800334c:	e7d6      	b.n	80032fc <HAL_UART_Receive+0x5e>
      pdata16bits = NULL;
 800334e:	2600      	movs	r6, #0
 8003350:	e7dd      	b.n	800330e <HAL_UART_Receive+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003352:	9700      	str	r7, [sp, #0]
 8003354:	464b      	mov	r3, r9
 8003356:	2200      	movs	r2, #0
 8003358:	2120      	movs	r1, #32
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff fee0 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 8003360:	b9a0      	cbnz	r0, 800338c <HAL_UART_Receive+0xee>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003366:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 800336a:	b945      	cbnz	r5, 800337e <HAL_UART_Receive+0xe0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800336c:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8003370:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003374:	3a01      	subs	r2, #1
 8003376:	b292      	uxth	r2, r2
 8003378:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800337c:	e7ca      	b.n	8003314 <HAL_UART_Receive+0x76>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800337e:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8003382:	e7f5      	b.n	8003370 <HAL_UART_Receive+0xd2>
      return  HAL_ERROR;
 8003384:	2001      	movs	r0, #1
 8003386:	e7cc      	b.n	8003322 <HAL_UART_Receive+0x84>
    return HAL_BUSY;
 8003388:	2002      	movs	r0, #2
 800338a:	e7ca      	b.n	8003322 <HAL_UART_Receive+0x84>
        return HAL_TIMEOUT;
 800338c:	2003      	movs	r0, #3
 800338e:	e7c8      	b.n	8003322 <HAL_UART_Receive+0x84>

08003390 <UART_CheckIdleState>:
{
 8003390:	b530      	push	{r4, r5, lr}
 8003392:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003394:	2500      	movs	r5, #0
{
 8003396:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800339c:	f7fe fb14 	bl	80019c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80033a6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033a8:	d417      	bmi.n	80033da <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	0752      	lsls	r2, r2, #29
 80033b0:	d509      	bpl.n	80033c6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033b2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033bc:	2200      	movs	r2, #0
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff feae 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 80033c4:	b9b0      	cbnz	r0, 80033f4 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80033ce:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 80033d8:	e00d      	b.n	80033f6 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033da:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	9003      	str	r0, [sp, #12]
 80033e2:	462a      	mov	r2, r5
 80033e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff fe99 	bl	8003120 <UART_WaitOnFlagUntilTimeout>
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d0da      	beq.n	80033aa <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80033f4:	2003      	movs	r0, #3
}
 80033f6:	b005      	add	sp, #20
 80033f8:	bd30      	pop	{r4, r5, pc}

080033fa <HAL_UART_Init>:
{
 80033fa:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033fc:	4604      	mov	r4, r0
 80033fe:	b350      	cbz	r0, 8003456 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003400:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003404:	b91b      	cbnz	r3, 800340e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003406:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800340a:	f7fe f9c5 	bl	8001798 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800340e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	2324      	movs	r3, #36	; 0x24
 8003412:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800341e:	4620      	mov	r0, r4
 8003420:	f7ff fcc4 	bl	8002dac <UART_SetConfig>
 8003424:	2801      	cmp	r0, #1
 8003426:	d016      	beq.n	8003456 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800342a:	b113      	cbz	r3, 8003432 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800342c:	4620      	mov	r0, r4
 800342e:	f7ff fe23 	bl	8003078 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003442:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800344a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003452:	f7ff bf9d 	b.w	8003390 <UART_CheckIdleState>
}
 8003456:	2001      	movs	r0, #1
 8003458:	bd10      	pop	{r4, pc}
	...

0800345c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800345c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 800345e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003460:	b91b      	cbnz	r3, 800346a <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8003462:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003466:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003468:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800346a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800346c:	4d0a      	ldr	r5, [pc, #40]	; (8003498 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800346e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003470:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003472:	4c0a      	ldr	r4, [pc, #40]	; (800349c <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003474:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003476:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800347a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800347c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	fbb3 f3f1 	udiv	r3, r3, r1
 8003484:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003488:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800348a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003492:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8003496:	e7e7      	b.n	8003468 <UARTEx_SetNbDataToProcess+0xc>
 8003498:	0800cd14 	.word	0x0800cd14
 800349c:	0800cd0c 	.word	0x0800cd0c

080034a0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80034a0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d014      	beq.n	80034d2 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034a8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034aa:	2324      	movs	r3, #36	; 0x24
 80034ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034b0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034ba:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034c2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	2220      	movs	r2, #32
 80034c6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80034ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80034ce:	4618      	mov	r0, r3
 80034d0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80034d2:	2002      	movs	r0, #2
}
 80034d4:	4770      	bx	lr

080034d6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80034d6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80034d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80034dc:	2b01      	cmp	r3, #1
{
 80034de:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80034e0:	d01b      	beq.n	800351a <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80034e2:	2301      	movs	r3, #1
 80034e4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80034e8:	2324      	movs	r3, #36	; 0x24
 80034ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034ee:	6803      	ldr	r3, [r0, #0]
 80034f0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003500:	4311      	orrs	r1, r2
 8003502:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003504:	f7ff ffaa 	bl	800345c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003508:	6803      	ldr	r3, [r0, #0]
 800350a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800350c:	2320      	movs	r3, #32
 800350e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8003512:	2000      	movs	r0, #0
 8003514:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003518:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800351a:	2002      	movs	r0, #2
 800351c:	e7fc      	b.n	8003518 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800351e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800351e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003520:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8003524:	2b01      	cmp	r3, #1
{
 8003526:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003528:	d01b      	beq.n	8003562 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800352a:	2301      	movs	r3, #1
 800352c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	2324      	movs	r3, #36	; 0x24
 8003532:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003548:	4311      	orrs	r1, r2
 800354a:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800354c:	f7ff ff86 	bl	800345c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003550:	6803      	ldr	r3, [r0, #0]
 8003552:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003554:	2320      	movs	r3, #32
 8003556:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800355a:	2000      	movs	r0, #0
 800355c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8003560:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003562:	2002      	movs	r0, #2
 8003564:	e7fc      	b.n	8003560 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08003568 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 800356a:	4d0e      	ldr	r5, [pc, #56]	; (80035a4 <write_callback+0x3c>)
{
 800356c:	460e      	mov	r6, r1
 800356e:	4614      	mov	r4, r2
  bool res = true;
 8003570:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8003572:	2700      	movs	r7, #0
  while (count) {
 8003574:	b93c      	cbnz	r4, 8003586 <write_callback+0x1e>
 8003576:	e00b      	b.n	8003590 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8003578:	18ea      	adds	r2, r5, r3
 800357a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800357e:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003580:	3301      	adds	r3, #1
      count--;
 8003582:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003584:	702b      	strb	r3, [r5, #0]
 8003586:	782b      	ldrb	r3, [r5, #0]
 8003588:	2b1f      	cmp	r3, #31
 800358a:	d802      	bhi.n	8003592 <write_callback+0x2a>
 800358c:	2c00      	cmp	r4, #0
 800358e:	d1f3      	bne.n	8003578 <write_callback+0x10>
    }
  }
  return res;
}
 8003590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8003592:	2b20      	cmp	r3, #32
 8003594:	d1ee      	bne.n	8003574 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003596:	2121      	movs	r1, #33	; 0x21
 8003598:	4628      	mov	r0, r5
 800359a:	f000 fda3 	bl	80040e4 <ioRawWriteBuffer>
      o_packet.pw = 0;
 800359e:	702f      	strb	r7, [r5, #0]
 80035a0:	e7e8      	b.n	8003574 <write_callback+0xc>
 80035a2:	bf00      	nop
 80035a4:	20000860 	.word	0x20000860

080035a8 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 80035a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 80035ae:	4614      	mov	r4, r2
 80035b0:	b1f2      	cbz	r2, 80035f0 <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 80035b2:	4d1d      	ldr	r5, [pc, #116]	; (8003628 <read_callback+0x80>)
 80035b4:	4e1d      	ldr	r6, [pc, #116]	; (800362c <read_callback+0x84>)
 80035b6:	782b      	ldrb	r3, [r5, #0]
 80035b8:	2bff      	cmp	r3, #255	; 0xff
 80035ba:	d11b      	bne.n	80035f4 <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80035bc:	2121      	movs	r1, #33	; 0x21
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 fd9e 	bl	8004100 <ioRawReadBuffer>
  i_ridx = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 80035c8:	b9a0      	cbnz	r0, 80035f4 <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 80035ca:	b003      	add	sp, #12
 80035cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 80035d0:	5cea      	ldrb	r2, [r5, r3]
 80035d2:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80035d6:	782a      	ldrb	r2, [r5, #0]
 80035d8:	3a01      	subs	r2, #1
 80035da:	702a      	strb	r2, [r5, #0]
      count--;
 80035dc:	3c01      	subs	r4, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80035de:	2201      	movs	r2, #1
 80035e0:	7828      	ldrb	r0, [r5, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	b158      	cbz	r0, 80035fe <read_callback+0x56>
 80035e6:	3301      	adds	r3, #1
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d1f1      	bne.n	80035d0 <read_callback+0x28>
 80035ec:	b102      	cbz	r2, 80035f0 <read_callback+0x48>
 80035ee:	6031      	str	r1, [r6, #0]
 80035f0:	2001      	movs	r0, #1
 80035f2:	e7ea      	b.n	80035ca <read_callback+0x22>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80035f4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8003628 <read_callback+0x80>
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 80035f8:	f04f 0900 	mov.w	r9, #0
 80035fc:	e011      	b.n	8003622 <read_callback+0x7a>
 80035fe:	b102      	cbz	r2, 8003602 <read_callback+0x5a>
 8003600:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 8003602:	2c00      	cmp	r4, #0
 8003604:	d0f4      	beq.n	80035f0 <read_callback+0x48>
      uint8_t sync = 0xAA;
 8003606:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8003608:	2101      	movs	r1, #1
 800360a:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 800360e:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8003612:	f000 fd67 	bl	80040e4 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003616:	2121      	movs	r1, #33	; 0x21
 8003618:	4640      	mov	r0, r8
 800361a:	f000 fd71 	bl	8004100 <ioRawReadBuffer>
  i_ridx = 0;
 800361e:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 8003622:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003624:	2200      	movs	r2, #0
 8003626:	e7db      	b.n	80035e0 <read_callback+0x38>
 8003628:	20000838 	.word	0x20000838
 800362c:	2000085c 	.word	0x2000085c

08003630 <pb_io_flush_ostream>:
{
 8003630:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003632:	4c06      	ldr	r4, [pc, #24]	; (800364c <pb_io_flush_ostream+0x1c>)
 8003634:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003636:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003638:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800363c:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800363e:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003640:	f000 fd50 	bl	80040e4 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	7023      	strb	r3, [r4, #0]
}
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	20000860 	.word	0x20000860

08003650 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <pb_io_flush_istream+0x10>)
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8003656:	4b03      	ldr	r3, [pc, #12]	; (8003664 <pb_io_flush_istream+0x14>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000838 	.word	0x20000838
 8003664:	2000085c 	.word	0x2000085c

08003668 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 8003668:	b510      	push	{r4, lr}
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 800366a:	2200      	movs	r2, #0
 800366c:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 8003670:	4a03      	ldr	r2, [pc, #12]	; (8003680 <pb_io_ostream+0x18>)
 8003672:	e9c0 2100 	strd	r2, r1, [r0]
 8003676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800367a:	6082      	str	r2, [r0, #8]
}
 800367c:	bd10      	pop	{r4, pc}
 800367e:	bf00      	nop
 8003680:	08003569 	.word	0x08003569

08003684 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8003684:	2200      	movs	r2, #0
 8003686:	60c2      	str	r2, [r0, #12]
  return stream;
 8003688:	4a03      	ldr	r2, [pc, #12]	; (8003698 <pb_io_istream+0x14>)
 800368a:	e9c0 2100 	strd	r2, r1, [r0]
 800368e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003692:	6082      	str	r2, [r0, #8]
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	080035a9 	.word	0x080035a9

0800369c <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 800369c:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 800369e:	f000 fd3d 	bl	800411c <ioRawDisableLLWrite>
  return 0;
}
 80036a2:	2000      	movs	r0, #0
 80036a4:	bd08      	pop	{r3, pc}

080036a6 <aiPbBuffer_read_cb3>:
  return (uint32_t)aiFmt;
}

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 80036a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 80036a8:	6814      	ldr	r4, [r2, #0]
  size_t itsize;

  UNUSED(field);

  int maxr = bm->n_max;  /* number of item w/o padding */
  msg = (aiBufferByteMsg *)bm->msg;
 80036aa:	6923      	ldr	r3, [r4, #16]
  int maxr = bm->n_max;  /* number of item w/o padding */
 80036ac:	f8d4 c004 	ldr.w	ip, [r4, #4]
  return (ai_buffer_format)msgFmt;
 80036b0:	681a      	ldr	r2, [r3, #0]
  format = aiPbMsgFmtToAiFmt(msg->shape.format);

  /* Check shape/format */
  bm->err = EnumError_E_NONE;
 80036b2:	2100      	movs	r1, #0
  if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80036b4:	2a40      	cmp	r2, #64	; 0x40
{
 80036b6:	4606      	mov	r6, r0
  bm->err = EnumError_E_NONE;
 80036b8:	60e1      	str	r1, [r4, #12]
  if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80036ba:	d003      	beq.n	80036c4 <aiPbBuffer_read_cb3+0x1e>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	6807      	ldr	r7, [r0, #0]
 80036c0:	4297      	cmp	r7, r2
 80036c2:	d012      	beq.n	80036ea <aiPbBuffer_read_cb3+0x44>
    maxr = 0;
    bm->err = EnumError_E_INVALID_FORMAT;
 80036c4:	2302      	movs	r3, #2
  } else if ((msg->shape.channels != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_CHANNEL)) ||
      (msg->shape.height != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_HEIGHT)) ||
      (msg->shape.width != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_WIDTH)) ||
      (msg->shape.n_batches != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH)) ) {
    maxr = 0;
    bm->err = EnumError_E_INVALID_SHAPE;
 80036c6:	60e3      	str	r3, [r4, #12]
    maxr = 0;
 80036c8:	2500      	movs	r5, #0
#endif
    bm->n_max = maxr;
  }

  /* Read data */
  uint8_t *pw = (uint8_t *)bm->buffer->data;
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	685f      	ldr	r7, [r3, #4]
  while (stream->bytes_left) {
 80036ce:	68b3      	ldr	r3, [r6, #8]
 80036d0:	bb63      	cbnz	r3, 800372c <aiPbBuffer_read_cb3+0x86>
    }
    bm->n_ops++;
  }

  /* Check nb_op */
  if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 80036d2:	68e3      	ldr	r3, [r4, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d13c      	bne.n	8003752 <aiPbBuffer_read_cb3+0xac>
 80036d8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f04f 0001 	mov.w	r0, #1
 80036e2:	d000      	beq.n	80036e6 <aiPbBuffer_read_cb3+0x40>
    bm->err = EnumError_E_INVALID_SIZE;
 80036e4:	60e0      	str	r0, [r4, #12]

  return true;
}
 80036e6:	b003      	add	sp, #12
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if ((msg->shape.channels != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_CHANNEL)) ||
 80036ea:	6982      	ldr	r2, [r0, #24]
 80036ec:	691d      	ldr	r5, [r3, #16]
 80036ee:	6851      	ldr	r1, [r2, #4]
 80036f0:	428d      	cmp	r5, r1
 80036f2:	d10b      	bne.n	800370c <aiPbBuffer_read_cb3+0x66>
 80036f4:	68d1      	ldr	r1, [r2, #12]
 80036f6:	689d      	ldr	r5, [r3, #8]
 80036f8:	428d      	cmp	r5, r1
 80036fa:	d107      	bne.n	800370c <aiPbBuffer_read_cb3+0x66>
      (msg->shape.height != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_HEIGHT)) ||
 80036fc:	6891      	ldr	r1, [r2, #8]
 80036fe:	68dd      	ldr	r5, [r3, #12]
 8003700:	428d      	cmp	r5, r1
 8003702:	d103      	bne.n	800370c <aiPbBuffer_read_cb3+0x66>
      (msg->shape.width != AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_WIDTH)) ||
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	4299      	cmp	r1, r3
 800370a:	d001      	beq.n	8003710 <aiPbBuffer_read_cb3+0x6a>
    bm->err = EnumError_E_INVALID_SHAPE;
 800370c:	2305      	movs	r3, #5
 800370e:	e7da      	b.n	80036c6 <aiPbBuffer_read_cb3+0x20>
  if (maxr) {
 8003710:	f1bc 0f00 	cmp.w	ip, #0
 8003714:	d008      	beq.n	8003728 <aiPbBuffer_read_cb3+0x82>
    maxr = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer), format);
 8003716:	2101      	movs	r1, #1
 8003718:	f002 fff8 	bl	800670c <ai_buffer_get_size>
 800371c:	4639      	mov	r1, r7
 800371e:	f003 f825 	bl	800676c <ai_buffer_get_byte_size>
 8003722:	4605      	mov	r5, r0
    bm->n_max = maxr;
 8003724:	6060      	str	r0, [r4, #4]
 8003726:	e7d0      	b.n	80036ca <aiPbBuffer_read_cb3+0x24>
 8003728:	4665      	mov	r5, ip
 800372a:	e7ce      	b.n	80036ca <aiPbBuffer_read_cb3+0x24>
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800372c:	2201      	movs	r2, #1
 800372e:	4669      	mov	r1, sp
 8003730:	4630      	mov	r0, r6
 8003732:	f001 ffcf 	bl	80056d4 <pb_read>
 8003736:	2800      	cmp	r0, #0
 8003738:	d0d5      	beq.n	80036e6 <aiPbBuffer_read_cb3+0x40>
    if (maxr > 0) {
 800373a:	2d00      	cmp	r5, #0
 800373c:	dd05      	ble.n	800374a <aiPbBuffer_read_cb3+0xa4>
      if (pw) {
 800373e:	b11f      	cbz	r7, 8003748 <aiPbBuffer_read_cb3+0xa2>
        *pw = *(uint8_t *)&number;
 8003740:	f89d 3000 	ldrb.w	r3, [sp]
 8003744:	f807 3b01 	strb.w	r3, [r7], #1
      maxr--;
 8003748:	3d01      	subs	r5, #1
    bm->n_ops++;
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	e7bd      	b.n	80036ce <aiPbBuffer_read_cb3+0x28>
  return true;
 8003752:	2001      	movs	r0, #1
 8003754:	e7c7      	b.n	80036e6 <aiPbBuffer_read_cb3+0x40>

08003756 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8003756:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800375a:	6814      	ldr	r4, [r2, #0]
  size_t n_bytes;

  int maxw = bm->n_max;
 800375c:	6867      	ldr	r7, [r4, #4]
{
 800375e:	4605      	mov	r5, r0
 8003760:	460e      	mov	r6, r1
  ai_buffer_format format;

  if ((maxw == 0) || (!bm->buffer))
 8003762:	b31f      	cbz	r7, 80037ac <aiPbBuffer_write_cb3+0x56>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	b308      	cbz	r0, 80037ac <aiPbBuffer_write_cb3+0x56>

  format = bm->buffer->format;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  n_bytes = aiPbAiBufferSize(bm->buffer) * AI_BUFFER_FMT_GET_BITS(format) / 8;
#else
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 8003768:	2101      	movs	r1, #1
  format = bm->buffer->format;
 800376a:	f8d0 8000 	ldr.w	r8, [r0]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 800376e:	f002 ffcd 	bl	800670c <ai_buffer_get_size>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4641      	mov	r1, r8
 800377a:	4358      	muls	r0, r3
 800377c:	f002 fff6 	bl	800676c <ai_buffer_get_byte_size>
#endif

  /* Write data */
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8003780:	6823      	ldr	r3, [r4, #0]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH), format);
 8003782:	9001      	str	r0, [sp, #4]

  if (!pb_encode_tag_for_field(stream, field))
 8003784:	4631      	mov	r1, r6
 8003786:	4628      	mov	r0, r5
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8003788:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (!pb_encode_tag_for_field(stream, field))
 800378c:	f002 fdb8 	bl	8006300 <pb_encode_tag_for_field>
 8003790:	9a01      	ldr	r2, [sp, #4]
 8003792:	b918      	cbnz	r0, 800379c <aiPbBuffer_write_cb3+0x46>
    return false;
 8003794:	2000      	movs	r0, #0
    return false;

  bm->n_ops = maxw;

  return true;
}
 8003796:	b002      	add	sp, #8
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pb_encode_string(stream, pr, n_bytes))
 800379c:	4641      	mov	r1, r8
 800379e:	4628      	mov	r0, r5
 80037a0:	f002 ff08 	bl	80065b4 <pb_encode_string>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0f5      	beq.n	8003794 <aiPbBuffer_write_cb3+0x3e>
  bm->n_ops = maxw;
 80037a8:	60a7      	str	r7, [r4, #8]
  return true;
 80037aa:	e7f4      	b.n	8003796 <aiPbBuffer_write_cb3+0x40>
    return true;
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7f2      	b.n	8003796 <aiPbBuffer_write_cb3+0x40>

080037b0 <aiPbMgrSetMetaInfo.constprop.0>:
}

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
  shape->scale = 0.0f;
 80037b0:	2300      	movs	r3, #0
  shape->zeropoint = 0;
 80037b2:	2200      	movs	r2, #0
static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
 80037b4:	b510      	push	{r4, lr}
  shape->scale = 0.0f;
 80037b6:	614b      	str	r3, [r1, #20]
  shape->zeropoint = 0;
 80037b8:	618a      	str	r2, [r1, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 80037ba:	b1a0      	cbz	r0, 80037e6 <aiPbMgrSetMetaInfo.constprop.0+0x36>
 80037bc:	6802      	ldr	r2, [r0, #0]
 80037be:	07d2      	lsls	r2, r2, #31
 80037c0:	d511      	bpl.n	80037e6 <aiPbMgrSetMetaInfo.constprop.0+0x36>
 80037c2:	6840      	ldr	r0, [r0, #4]
 80037c4:	b178      	cbz	r0, 80037e6 <aiPbMgrSetMetaInfo.constprop.0+0x36>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 80037c6:	6842      	ldr	r2, [r0, #4]
 80037c8:	b11a      	cbz	r2, 80037d2 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 80037ca:	8844      	ldrh	r4, [r0, #2]
 80037cc:	b10c      	cbz	r4, 80037d2 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	614b      	str	r3, [r1, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 80037d4:	8803      	ldrh	r3, [r0, #0]
 80037d6:	079b      	lsls	r3, r3, #30
 80037d8:	d506      	bpl.n	80037e8 <aiPbMgrSetMetaInfo.constprop.0+0x38>
 80037da:	b16a      	cbz	r2, 80037f8 <aiPbMgrSetMetaInfo.constprop.0+0x48>
 80037dc:	8843      	ldrh	r3, [r0, #2]
 80037de:	b10b      	cbz	r3, 80037e4 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 80037e0:	6853      	ldr	r3, [r2, #4]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	618b      	str	r3, [r1, #24]
  }
}
 80037e6:	bd10      	pop	{r4, pc}
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 80037e8:	b132      	cbz	r2, 80037f8 <aiPbMgrSetMetaInfo.constprop.0+0x48>
 80037ea:	8843      	ldrh	r3, [r0, #2]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f9      	beq.n	80037e4 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 80037f0:	6853      	ldr	r3, [r2, #4]
 80037f2:	f993 3000 	ldrsb.w	r3, [r3]
 80037f6:	e7f5      	b.n	80037e4 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 80037f8:	4613      	mov	r3, r2
 80037fa:	e7f3      	b.n	80037e4 <aiPbMgrSetMetaInfo.constprop.0+0x34>

080037fc <init_aibuffer_msg>:
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 80037fc:	b430      	push	{r4, r5}
  if ((!aibuffer) || (!msg))
 80037fe:	4602      	mov	r2, r0
 8003800:	b180      	cbz	r0, 8003824 <init_aibuffer_msg+0x28>
    msg->zeropoint = 0;
  }
#else
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);

  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 8003802:	6814      	ldr	r4, [r2, #0]
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 8003804:	6880      	ldr	r0, [r0, #8]
  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 8003806:	600c      	str	r4, [r1, #0]
  msg->channels = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_CHANNEL);
 8003808:	6994      	ldr	r4, [r2, #24]
  msg->height = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_HEIGHT);
  msg->width = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_WIDTH);
  msg->n_batches = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_BATCH);
  msg->addr = (uint32_t)aibuffer->data;
 800380a:	6852      	ldr	r2, [r2, #4]
  msg->channels = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_CHANNEL);
 800380c:	6865      	ldr	r5, [r4, #4]
 800380e:	610d      	str	r5, [r1, #16]
  msg->height = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_HEIGHT);
 8003810:	68e5      	ldr	r5, [r4, #12]
 8003812:	608d      	str	r5, [r1, #8]
  msg->width = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_WIDTH);
 8003814:	68a5      	ldr	r5, [r4, #8]
 8003816:	60cd      	str	r5, [r1, #12]
  msg->n_batches = AI_BUFFER_SHAPE_ELEM(aibuffer, AI_SHAPE_BATCH);
 8003818:	6824      	ldr	r4, [r4, #0]
 800381a:	604c      	str	r4, [r1, #4]
  msg->addr = (uint32_t)aibuffer->data;
 800381c:	61ca      	str	r2, [r1, #28]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
#endif
}
 800381e:	bc30      	pop	{r4, r5}
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 8003820:	f7ff bfc6 	b.w	80037b0 <aiPbMgrSetMetaInfo.constprop.0>
}
 8003824:	bc30      	pop	{r4, r5}
 8003826:	4770      	bx	lr

08003828 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 8003828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382c:	261c      	movs	r6, #28
    if (!pb_encode_tag_for_field(stream, field))
      return false;

    init_aibuffer_msg(&aibuffer[i], &msg);

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 800382e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8003874 <nn_shape_w_cb+0x4c>
{
 8003832:	b088      	sub	sp, #32
 8003834:	4605      	mov	r5, r0
 8003836:	460f      	mov	r7, r1
 8003838:	4614      	mov	r4, r2
 800383a:	fb06 2603 	mla	r6, r6, r3, r2
  for (int i = 0; i < maxw; i++) {
 800383e:	42b4      	cmp	r4, r6
 8003840:	d101      	bne.n	8003846 <nn_shape_w_cb+0x1e>
      return false;
  }
  return true;
 8003842:	2001      	movs	r0, #1
 8003844:	e005      	b.n	8003852 <nn_shape_w_cb+0x2a>
    if (!pb_encode_tag_for_field(stream, field))
 8003846:	4639      	mov	r1, r7
 8003848:	4628      	mov	r0, r5
 800384a:	f002 fd59 	bl	8006300 <pb_encode_tag_for_field>
 800384e:	b918      	cbnz	r0, 8003858 <nn_shape_w_cb+0x30>
      return false;
 8003850:	2000      	movs	r0, #0
}
 8003852:	b008      	add	sp, #32
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    init_aibuffer_msg(&aibuffer[i], &msg);
 8003858:	4620      	mov	r0, r4
 800385a:	4669      	mov	r1, sp
 800385c:	f7ff ffce 	bl	80037fc <init_aibuffer_msg>
    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8003860:	466a      	mov	r2, sp
 8003862:	4641      	mov	r1, r8
 8003864:	4628      	mov	r0, r5
 8003866:	f002 fef5 	bl	8006654 <pb_encode_submessage>
 800386a:	341c      	adds	r4, #28
 800386c:	2800      	cmp	r0, #0
 800386e:	d1e6      	bne.n	800383e <nn_shape_w_cb+0x16>
 8003870:	e7ee      	b.n	8003850 <nn_shape_w_cb+0x28>
 8003872:	bf00      	nop
 8003874:	0800f85c 	.word	0x0800f85c

08003878 <nn_outputs_w_cb>:
}

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
  ai_network_report *report = (ai_network_report *)*arg;
 8003878:	6812      	ldr	r2, [r2, #0]

  if (!report)
 800387a:	b11a      	cbz	r2, 8003884 <nn_outputs_w_cb+0xc>
    return true;

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 800387c:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 800387e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003880:	f7ff bfd2 	b.w	8003828 <nn_shape_w_cb>
}
 8003884:	2001      	movs	r0, #1
 8003886:	4770      	bx	lr

08003888 <nn_inputs_w_cb>:
  ai_network_report *report = (ai_network_report *)*arg;
 8003888:	6812      	ldr	r2, [r2, #0]
  if (!report)
 800388a:	b11a      	cbz	r2, 8003894 <nn_inputs_w_cb+0xc>
  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 800388c:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800388e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003890:	f7ff bfca 	b.w	8003828 <nn_shape_w_cb>
}
 8003894:	2001      	movs	r0, #1
 8003896:	4770      	bx	lr

08003898 <aiPbMgrInit>:
{
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800389a:	4c1b      	ldr	r4, [pc, #108]	; (8003908 <aiPbMgrInit+0x70>)
{
 800389c:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800389e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80038a2:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80038a4:	ad06      	add	r5, sp, #24
{
 80038a6:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80038a8:	4620      	mov	r0, r4
 80038aa:	f006 f93f 	bl	8009b2c <memset>
  pb_io_stream_init();
 80038ae:	f7ff fef5 	bl	800369c <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 80038b2:	4628      	mov	r0, r5
 80038b4:	2100      	movs	r1, #0
 80038b6:	f7ff fee5 	bl	8003684 <pb_io_istream>
 80038ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80038be:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 80038c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80038c4:	2100      	movs	r1, #0
 80038c6:	4668      	mov	r0, sp
 80038c8:	f7ff fece 	bl	8003668 <pb_io_ostream>
 80038cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ce:	f104 0610 	add.w	r6, r4, #16
 80038d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 80038d8:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 80038da:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 80038de:	b97f      	cbnz	r7, 8003900 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
}
 80038e6:	b00b      	add	sp, #44	; 0x2c
 80038e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 80038ea:	320c      	adds	r2, #12
 80038ec:	462b      	mov	r3, r5
 80038ee:	2101      	movs	r1, #1
    while (cfunc->process) {
 80038f0:	6850      	ldr	r0, [r2, #4]
 80038f2:	1c5d      	adds	r5, r3, #1
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1f8      	bne.n	80038ea <aiPbMgrInit+0x52>
 80038f8:	b101      	cbz	r1, 80038fc <aiPbMgrInit+0x64>
 80038fa:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 80038fc:	6267      	str	r7, [r4, #36]	; 0x24
 80038fe:	e7ef      	b.n	80038e0 <aiPbMgrInit+0x48>
 8003900:	463a      	mov	r2, r7
 8003902:	4619      	mov	r1, r3
 8003904:	e7f4      	b.n	80038f0 <aiPbMgrInit+0x58>
 8003906:	bf00      	nop
 8003908:	20000884 	.word	0x20000884

0800390c <aiPbMgrSendResp>:
{
 800390c:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 800390e:	6803      	ldr	r3, [r0, #0]
 8003910:	600b      	str	r3, [r1, #0]
  resp->state = state;
 8003912:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8003914:	4804      	ldr	r0, [pc, #16]	; (8003928 <aiPbMgrSendResp+0x1c>)
 8003916:	460a      	mov	r2, r1
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <aiPbMgrSendResp+0x20>)
 800391a:	f002 fe17 	bl	800654c <pb_encode>
}
 800391e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8003922:	f7ff be85 	b.w	8003630 <pb_io_flush_ostream>
 8003926:	bf00      	nop
 8003928:	20000894 	.word	0x20000894
 800392c:	0800fb64 	.word	0x0800fb64

08003930 <aiPbMgrWaitAndProcess>:
{
 8003930:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8003932:	4c1d      	ldr	r4, [pc, #116]	; (80039a8 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8003934:	f7ff fe8c 	bl	8003650 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8003938:	491c      	ldr	r1, [pc, #112]	; (80039ac <aiPbMgrWaitAndProcess+0x7c>)
 800393a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800393e:	4620      	mov	r0, r4
 8003940:	f002 fb0a 	bl	8005f58 <pb_decode_delimited>
 8003944:	b348      	cbz	r0, 800399a <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8003946:	f7ff fe83 	bl	8003650 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 800394a:	2302      	movs	r3, #2
 800394c:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003950:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8003952:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8003956:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003958:	2500      	movs	r5, #0
 800395a:	42a9      	cmp	r1, r5
 800395c:	d00d      	beq.n	800397a <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 800395e:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8003960:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8003964:	4286      	cmp	r6, r0
 8003966:	d11c      	bne.n	80039a2 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8003968:	4911      	ldr	r1, [pc, #68]	; (80039b0 <aiPbMgrWaitAndProcess+0x80>)
 800396a:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 800396e:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
 8003972:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8003974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003976:	42ab      	cmp	r3, r5
 8003978:	d10c      	bne.n	8003994 <aiPbMgrWaitAndProcess+0x64>
  aiPbMgrSendResp(req, resp, state);
 800397a:	490d      	ldr	r1, [pc, #52]	; (80039b0 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 800397c:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 800397e:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8003980:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
  resp->which_payload = respMsg_ack_tag;
 8003984:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
  resp->payload.ack.param = param;
 8003988:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  resp->payload.ack.error = error;
 800398c:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  aiPbMgrSendResp(req, resp, state);
 8003990:	f7ff ffbc 	bl	800390c <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8003994:	2301      	movs	r3, #1
 8003996:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
  pb_io_flush_istream();
 800399a:	f7ff fe59 	bl	8003650 <pb_io_flush_istream>
}
 800399e:	2000      	movs	r0, #0
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80039a2:	3501      	adds	r5, #1
 80039a4:	e7d9      	b.n	800395a <aiPbMgrWaitAndProcess+0x2a>
 80039a6:	bf00      	nop
 80039a8:	20000884 	.word	0x20000884
 80039ac:	0800fb0a 	.word	0x0800fb0a
 80039b0:	20000900 	.word	0x20000900

080039b4 <aiPbMgrSendAck>:
{
 80039b4:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 80039b6:	260c      	movs	r6, #12
{
 80039b8:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 80039bc:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 80039be:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 80039c0:	608b      	str	r3, [r1, #8]
}
 80039c2:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 80039c4:	f7ff bfa2 	b.w	800390c <aiPbMgrSendResp>

080039c8 <aiPbMgrWaitAck>:
{
 80039c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ackMsg ack = ackMsg_init_default;
 80039ca:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <aiPbMgrWaitAck+0x24>)
 80039ce:	4808      	ldr	r0, [pc, #32]	; (80039f0 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 80039d0:	9302      	str	r3, [sp, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80039d2:	aa02      	add	r2, sp, #8
  ackMsg ack = ackMsg_init_default;
 80039d4:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80039d8:	f002 fabe 	bl	8005f58 <pb_decode_delimited>
 80039dc:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 80039de:	f7ff fe37 	bl	8003650 <pb_io_flush_istream>
}
 80039e2:	9801      	ldr	r0, [sp, #4]
 80039e4:	b005      	add	sp, #20
 80039e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80039ea:	bf00      	nop
 80039ec:	0800f7f8 	.word	0x0800f7f8
 80039f0:	20000884 	.word	0x20000884

080039f4 <aiPbAiBufferSize>:
  if (!buffer)
 80039f4:	b100      	cbz	r0, 80039f8 <aiPbAiBufferSize+0x4>
    return buffer->size;
 80039f6:	6900      	ldr	r0, [r0, #16]
}
 80039f8:	4770      	bx	lr
	...

080039fc <aiPbMgrReceiveAiBuffer3>:
{
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	b090      	sub	sp, #64	; 0x40
 8003a00:	4615      	mov	r5, r2
  hdlb.n_ops = 0;
 8003a02:	2200      	movs	r2, #0
{
 8003a04:	4606      	mov	r6, r0
 8003a06:	460c      	mov	r4, r1
  hdlb.n_ops = 0;
 8003a08:	9203      	str	r2, [sp, #12]
  hdlb.buffer = buffer;
 8003a0a:	9301      	str	r3, [sp, #4]
  hdlb.err = EnumError_E_NONE;
 8003a0c:	9204      	str	r2, [sp, #16]
  if (!buffer)
 8003a0e:	b103      	cbz	r3, 8003a12 <aiPbMgrReceiveAiBuffer3+0x16>
    return buffer->size;
 8003a10:	691b      	ldr	r3, [r3, #16]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 8003a12:	9302      	str	r3, [sp, #8]
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <aiPbMgrReceiveAiBuffer3+0x6c>)
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8003a16:	4915      	ldr	r1, [pc, #84]	; (8003a6c <aiPbMgrReceiveAiBuffer3+0x70>)
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 8003a18:	930e      	str	r3, [sp, #56]	; 0x38
  hdlb.msg = &msg;
 8003a1a:	aa06      	add	r2, sp, #24
  msg.datas.arg = &hdlb;
 8003a1c:	ab01      	add	r3, sp, #4
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8003a1e:	4814      	ldr	r0, [pc, #80]	; (8003a70 <aiPbMgrReceiveAiBuffer3+0x74>)
  hdlb.msg = &msg;
 8003a20:	9205      	str	r2, [sp, #20]
  msg.datas.arg = &hdlb;
 8003a22:	930f      	str	r3, [sp, #60]	; 0x3c
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8003a24:	f002 fa98 	bl	8005f58 <pb_decode_delimited>
  pb_io_flush_istream();
 8003a28:	f7ff fe12 	bl	8003650 <pb_io_flush_istream>
  if (hdlb.err) {
 8003a2c:	9b04      	ldr	r3, [sp, #16]
 8003a2e:	220c      	movs	r2, #12
  resp->which_payload = respMsg_ack_tag;
 8003a30:	80e2      	strh	r2, [r4, #6]
  if (hdlb.err) {
 8003a32:	b14b      	cbz	r3, 8003a48 <aiPbMgrReceiveAiBuffer3+0x4c>
  aiPbMgrSendResp(req, resp, state);
 8003a34:	4630      	mov	r0, r6
  resp->payload.ack.param = param;
 8003a36:	60a3      	str	r3, [r4, #8]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8003a38:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7ff ff65 	bl	800390c <aiPbMgrSendResp>
    res = false;
 8003a42:	2000      	movs	r0, #0
}
 8003a44:	b010      	add	sp, #64	; 0x40
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
  resp->payload.ack.param = param;
 8003a48:	9a03      	ldr	r2, [sp, #12]
 8003a4a:	60a2      	str	r2, [r4, #8]
  resp->payload.ack.error = error;
 8003a4c:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 8003a4e:	462a      	mov	r2, r5
 8003a50:	4621      	mov	r1, r4
 8003a52:	4630      	mov	r0, r6
    if ((state == EnumState_S_WAITING) ||
 8003a54:	3d01      	subs	r5, #1
  aiPbMgrSendResp(req, resp, state);
 8003a56:	f7ff ff59 	bl	800390c <aiPbMgrSendResp>
    if ((state == EnumState_S_WAITING) ||
 8003a5a:	2d01      	cmp	r5, #1
 8003a5c:	d801      	bhi.n	8003a62 <aiPbMgrReceiveAiBuffer3+0x66>
      aiPbMgrWaitAck();
 8003a5e:	f7ff ffb3 	bl	80039c8 <aiPbMgrWaitAck>
  bool res = true;
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7ee      	b.n	8003a44 <aiPbMgrReceiveAiBuffer3+0x48>
 8003a66:	bf00      	nop
 8003a68:	080036a7 	.word	0x080036a7
 8003a6c:	0800f825 	.word	0x0800f825
 8003a70:	20000884 	.word	0x20000884

08003a74 <aiPbMgrSendAiBuffer4>:
{
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a76:	b087      	sub	sp, #28
 8003a78:	460c      	mov	r4, r1
 8003a7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  hdlb.buffer = (ai_buffer *)buffer;
 8003a7c:	9501      	str	r5, [sp, #4]
    hdlb.n_max  = 0;
 8003a7e:	2b00      	cmp	r3, #0
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8003a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
{
 8003a84:	4607      	mov	r7, r0
 8003a86:	4616      	mov	r6, r2
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 8003a88:	68a8      	ldr	r0, [r5, #8]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 8003a8a:	692a      	ldr	r2, [r5, #16]
  resp->payload.node.type = type;
 8003a8c:	60a3      	str	r3, [r4, #8]
  resp->payload.node.id = id;
 8003a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a90:	60e3      	str	r3, [r4, #12]
  hdlb.n_ops = 0;
 8003a92:	f04f 0100 	mov.w	r1, #0
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	6163      	str	r3, [r4, #20]
    hdlb.n_max  = 0;
 8003a9a:	bfb8      	it	lt
 8003a9c:	460a      	movlt	r2, r1
  resp->payload.node.buffer.shape.n_batches = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003a9e:	69ab      	ldr	r3, [r5, #24]
  hdlb.err = EnumError_E_NONE;
 8003aa0:	9104      	str	r1, [sp, #16]
  resp->payload.node.duration = dur_ms;
 8003aa2:	ed84 0a04 	vstr	s0, [r4, #16]
  hdlb.n_ops = 0;
 8003aa6:	9103      	str	r1, [sp, #12]
    hdlb.n_max  = 0;
 8003aa8:	9202      	str	r2, [sp, #8]
  resp->which_payload = respMsg_node_tag;
 8003aaa:	220e      	movs	r2, #14
 8003aac:	80e2      	strh	r2, [r4, #6]
  resp->payload.node.buffer.shape.n_batches = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	61a2      	str	r2, [r4, #24]
  resp->payload.node.buffer.shape.height = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT);
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	61e2      	str	r2, [r4, #28]
  resp->payload.node.buffer.shape.width = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH);
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	6222      	str	r2, [r4, #32]
  resp->payload.node.buffer.shape.channels = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL);
 8003aba:	685b      	ldr	r3, [r3, #4]
  hdlb.msg = NULL;
 8003abc:	9105      	str	r1, [sp, #20]
  resp->payload.node.buffer.shape.channels = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL);
 8003abe:	6263      	str	r3, [r4, #36]	; 0x24
  resp->payload.node.buffer.shape.addr = 0;
 8003ac0:	6321      	str	r1, [r4, #48]	; 0x30
  if (meta_info && scale == 0.0f)
 8003ac2:	b1b8      	cbz	r0, 8003af4 <aiPbMgrSendAiBuffer4+0x80>
 8003ac4:	eef5 0a40 	vcmp.f32	s1, #0.0
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	d112      	bne.n	8003af4 <aiPbMgrSendAiBuffer4+0x80>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 8003ace:	f104 0114 	add.w	r1, r4, #20
 8003ad2:	f7ff fe6d 	bl	80037b0 <aiPbMgrSetMetaInfo.constprop.0>
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <aiPbMgrSendAiBuffer4+0x90>)
 8003ad8:	6363      	str	r3, [r4, #52]	; 0x34
  resp->payload.node.buffer.datas.arg = &hdlb;
 8003ada:	ab01      	add	r3, sp, #4
 8003adc:	63a3      	str	r3, [r4, #56]	; 0x38
  aiPbMgrSendResp(req, resp, state);
 8003ade:	4632      	mov	r2, r6
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff ff12 	bl	800390c <aiPbMgrSendResp>
  if (state == EnumState_S_PROCESSING)
 8003ae8:	2e02      	cmp	r6, #2
 8003aea:	d108      	bne.n	8003afe <aiPbMgrSendAiBuffer4+0x8a>
    return aiPbMgrWaitAck();
 8003aec:	f7ff ff6c 	bl	80039c8 <aiPbMgrWaitAck>
}
 8003af0:	b007      	add	sp, #28
 8003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 8003af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    resp->payload.node.buffer.shape.scale = scale;
 8003af6:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 8003afa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003afc:	e7eb      	b.n	8003ad6 <aiPbMgrSendAiBuffer4+0x62>
    return true;
 8003afe:	2001      	movs	r0, #1
 8003b00:	e7f6      	b.n	8003af0 <aiPbMgrSendAiBuffer4+0x7c>
 8003b02:	bf00      	nop
 8003b04:	08003757 	.word	0x08003757

08003b08 <aiPbCmdSync>:
{
 8003b08:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8003b0a:	240a      	movs	r4, #10
 8003b0c:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8003b0e:	f240 2402 	movw	r4, #514	; 0x202
 8003b12:	608c      	str	r4, [r1, #8]
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003b14:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 8003b16:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003b18:	f044 0402 	orr.w	r4, r4, #2
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8003b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003b20:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8003b22:	610a      	str	r2, [r1, #16]
}
 8003b24:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f7ff beef 	b.w	800390c <aiPbMgrSendResp>

08003b2e <aiPbCmdSysInfo>:
{
 8003b2e:	b538      	push	{r3, r4, r5, lr}
  resp->which_payload = respMsg_sinfo_tag;
 8003b30:	230b      	movs	r3, #11
 8003b32:	80cb      	strh	r3, [r1, #6]
{
 8003b34:	460c      	mov	r4, r1
 8003b36:	4605      	mov	r5, r0
  resp->payload.sinfo.devid = HAL_GetDEVID();
 8003b38:	f7fd ff6a 	bl	8001a10 <HAL_GetDEVID>
 8003b3c:	60a0      	str	r0, [r4, #8]
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 8003b3e:	f7fe f9b7 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8003b42:	60e0      	str	r0, [r4, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 8003b44:	f7fe fda2 	bl	800268c <HAL_RCC_GetHCLKFreq>
 8003b48:	6120      	str	r0, [r4, #16]
  resp->payload.sinfo.cache = getFlashCacheConf();
 8003b4a:	f000 fba1 	bl	8004290 <getFlashCacheConf>
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003b4e:	4621      	mov	r1, r4
  resp->payload.sinfo.cache = getFlashCacheConf();
 8003b50:	6160      	str	r0, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003b52:	2200      	movs	r2, #0
 8003b54:	4628      	mov	r0, r5
}
 8003b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003b5a:	f7ff bed7 	b.w	800390c <aiPbMgrSendResp>
	...

08003b60 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8003b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003b62:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8003b64:	4a11      	ldr	r2, [pc, #68]	; (8003bac <aiPbStrCopy+0x4c>)
{
 8003b66:	4605      	mov	r5, r0
 8003b68:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8003b6a:	6810      	ldr	r0, [r2, #0]
 8003b6c:	6851      	ldr	r1, [r2, #4]
 8003b6e:	8912      	ldrh	r2, [r2, #8]
 8003b70:	ab01      	add	r3, sp, #4
 8003b72:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8003b74:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8003b76:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8003b78:	f7fc fb42 	bl	8000200 <strlen>

  if (l > max)
 8003b7c:	42b0      	cmp	r0, r6
    l = max-1;
 8003b7e:	bf88      	it	hi
 8003b80:	f106 30ff 	addhi.w	r0, r6, #4294967295	; 0xffffffff

  if (!dst)
 8003b84:	b184      	cbz	r4, 8003ba8 <aiPbStrCopy+0x48>
    return;

  if (src && l)
 8003b86:	b138      	cbz	r0, 8003b98 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8003b88:	1c42      	adds	r2, r0, #1
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4620      	mov	r0, r4
  else
    memcpy(dst, undef, strlen(undef)+1);
}
 8003b8e:	b004      	add	sp, #16
 8003b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8003b94:	f005 bfbc 	b.w	8009b10 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8003b98:	a801      	add	r0, sp, #4
 8003b9a:	f7fc fb31 	bl	8000200 <strlen>
 8003b9e:	a901      	add	r1, sp, #4
 8003ba0:	1c42      	adds	r2, r0, #1
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f005 ffb4 	bl	8009b10 <memcpy>
}
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	0800c580 	.word	0x0800c580

08003bb0 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
  if (!ver)
 8003bb0:	b108      	cbz	r0, 8003bb6 <aiPbVersionToUint32+0x6>
    return 0;

  return ver->major << 24 | ver->minor << 16
 8003bb2:	6800      	ldr	r0, [r0, #0]
 8003bb4:	ba00      	rev	r0, r0
      | ver->micro << 8 | ver->reserved;
}
 8003bb6:	4770      	bx	lr

08003bb8 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	461d      	mov	r5, r3
  resp->which_payload = respMsg_ninfo_tag;
 8003bbe:	2314      	movs	r3, #20
{
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	b096      	sub	sp, #88	; 0x58
  resp->which_payload = respMsg_ninfo_tag;
 8003bc4:	80cb      	strh	r3, [r1, #6]
{
 8003bc6:	4607      	mov	r7, r0

  aiPbStrCopy(nn->model_name,
 8003bc8:	3108      	adds	r1, #8
 8003bca:	6828      	ldr	r0, [r5, #0]
{
 8003bcc:	4690      	mov	r8, r2
  aiPbStrCopy(nn->model_name,
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	f7ff ffc6 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 8003bd4:	6868      	ldr	r0, [r5, #4]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8003bdc:	f7ff ffc0 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 8003be0:	68a8      	ldr	r0, [r5, #8]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	f104 0188 	add.w	r1, r4, #136	; 0x88
 8003be8:	f7ff ffba 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 8003bec:	68e8      	ldr	r0, [r5, #12]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8003bf4:	f7ff ffb4 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 8003bf8:	6928      	ldr	r0, [r5, #16]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	f504 7184 	add.w	r1, r4, #264	; 0x108
 8003c00:	f7ff ffae 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 8003c04:	69a8      	ldr	r0, [r5, #24]
 8003c06:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	f7ff ffa8 	bl	8003b60 <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 8003c10:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8003c12:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 8003c16:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8003c18:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 8003c1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003c1e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 8003c22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c24:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c

  resp->payload.ninfo.signature = nn->signature;
 8003c28:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8003c2a:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 8003c2e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003c32:	f7ff ffbd 	bl	8003bb0 <aiPbVersionToUint32>
  resp->payload.ninfo.api_version =
 8003c36:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 8003c3a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8003c3e:	f7ff ffb7 	bl	8003bb0 <aiPbVersionToUint32>
  resp->payload.ninfo.interface_api_version =
 8003c42:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 8003c46:	f105 0014 	add.w	r0, r5, #20
 8003c4a:	f7ff ffb1 	bl	8003bb0 <aiPbVersionToUint32>
  resp->payload.ninfo.runtime_version =
 8003c4e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 8003c52:	f105 001c 	add.w	r0, r5, #28
 8003c56:	f7ff ffab 	bl	8003bb0 <aiPbVersionToUint32>
  resp->payload.ninfo.tool_version =
 8003c5a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 8003c5e:	f105 0020 	add.w	r0, r5, #32
 8003c62:	f7ff ffa5 	bl	8003bb0 <aiPbVersionToUint32>
   */
  ai_size size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->activations, AI_SHAPE_CHANNEL);
#else
  if (nn->map_activations.size) {
 8003c66:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
  resp->payload.ninfo.tool_api_version =
 8003c6a:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
  if (nn->map_activations.size) {
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d056      	beq.n	8003d20 <aiPbMgrSendNNInfo+0x168>
    for (int i=0; i<nn->map_activations.size; i++)
      size += nn->map_activations.buffer[i].size;
 8003c72:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    for (int i=0; i<nn->map_activations.size; i++)
 8003c74:	2200      	movs	r2, #0
  ai_size size = 0;
 8003c76:	4613      	mov	r3, r2
      size += nn->map_activations.buffer[i].size;
 8003c78:	3010      	adds	r0, #16
 8003c7a:	f04f 0c1c 	mov.w	ip, #28
 8003c7e:	fb0c f602 	mul.w	r6, ip, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8003c82:	3201      	adds	r2, #1
      size += nn->map_activations.buffer[i].size;
 8003c84:	5986      	ldr	r6, [r0, r6]
    for (int i=0; i<nn->map_activations.size; i++)
 8003c86:	4291      	cmp	r1, r2
      size += nn->map_activations.buffer[i].size;
 8003c88:	4433      	add	r3, r6
    for (int i=0; i<nn->map_activations.size; i++)
 8003c8a:	dcf8      	bgt.n	8003c7e <aiPbMgrSendNNInfo+0xc6>
    }
#endif
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <aiPbMgrSendNNInfo+0x170>)
 8003c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8003c90:	2600      	movs	r6, #0
 8003c92:	e9cd 2608 	strd	r2, r6, [sp, #32]
 8003c96:	f240 4201 	movw	r2, #1025	; 0x401
 8003c9a:	920d      	str	r2, [sp, #52]	; 0x34
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8003c9c:	a808      	add	r0, sp, #32
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003c9e:	2201      	movs	r2, #1
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8003ca0:	f504 71de 	add.w	r1, r4, #444	; 0x1bc
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003ca4:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8003ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8003cac:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8003cb0:	f8cd d038 	str.w	sp, [sp, #56]	; 0x38
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8003cb4:	f7ff fda2 	bl	80037fc <init_aibuffer_msg>

  size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->params, AI_SHAPE_CHANNEL);
#else
  if (nn->map_weights.size) {
 8003cb8:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
 8003cbc:	b390      	cbz	r0, 8003d24 <aiPbMgrSendNNInfo+0x16c>
    for (int i=0; i<nn->map_weights.size; i++)
      size += nn->map_weights.buffer[i].size;
 8003cbe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    for (int i=0; i<nn->map_weights.size; i++)
 8003cc0:	4633      	mov	r3, r6
  size = 0;
 8003cc2:	4631      	mov	r1, r6
      size += nn->map_weights.buffer[i].size;
 8003cc4:	3210      	adds	r2, #16
 8003cc6:	f04f 0c1c 	mov.w	ip, #28
 8003cca:	fb0c f603 	mul.w	r6, ip, r3
    for (int i=0; i<nn->map_weights.size; i++)
 8003cce:	3301      	adds	r3, #1
      size += nn->map_weights.buffer[i].size;
 8003cd0:	5996      	ldr	r6, [r2, r6]
    for (int i=0; i<nn->map_weights.size; i++)
 8003cd2:	4298      	cmp	r0, r3
      size += nn->map_weights.buffer[i].size;
 8003cd4:	4431      	add	r1, r6
    for (int i=0; i<nn->map_weights.size; i++)
 8003cd6:	dcf8      	bgt.n	8003cca <aiPbMgrSendNNInfo+0x112>
  }
#endif
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003cd8:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <aiPbMgrSendNNInfo+0x170>)
 8003cda:	9113      	str	r1, [sp, #76]	; 0x4c
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8003ce2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8003ce6:	f240 4301 	movw	r3, #1025	; 0x401
 8003cea:	9314      	str	r3, [sp, #80]	; 0x50
 8003cec:	2301      	movs	r3, #1
 8003cee:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8003cf2:	e9cd 3306 	strd	r3, r3, [sp, #24]
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003cf6:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003cfa:	ab04      	add	r3, sp, #16
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003cfc:	a80f      	add	r0, sp, #60	; 0x3c
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8003cfe:	9315      	str	r3, [sp, #84]	; 0x54
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8003d00:	f7ff fd7c 	bl	80037fc <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <aiPbMgrSendNNInfo+0x174>)
  resp->payload.ninfo.inputs.arg = (void *)nn;
 8003d06:	e9c4 356b 	strd	r3, r5, [r4, #428]	; 0x1ac

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <aiPbMgrSendNNInfo+0x178>)
  resp->payload.ninfo.outputs.arg = (void *)nn;

  aiPbMgrSendResp(req, resp, state);
 8003d0c:	4642      	mov	r2, r8
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8003d0e:	e9c4 356d 	strd	r3, r5, [r4, #436]	; 0x1b4
  aiPbMgrSendResp(req, resp, state);
 8003d12:	4621      	mov	r1, r4
 8003d14:	4638      	mov	r0, r7
 8003d16:	f7ff fdf9 	bl	800390c <aiPbMgrSendResp>
}
 8003d1a:	b016      	add	sp, #88	; 0x58
 8003d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size = 0;
 8003d20:	460b      	mov	r3, r1
 8003d22:	e7b3      	b.n	8003c8c <aiPbMgrSendNNInfo+0xd4>
  size = 0;
 8003d24:	4601      	mov	r1, r0
 8003d26:	e7d7      	b.n	8003cd8 <aiPbMgrSendNNInfo+0x120>
 8003d28:	00040440 	.word	0x00040440
 8003d2c:	08003889 	.word	0x08003889
 8003d30:	08003879 	.word	0x08003879

08003d34 <aiPlatformVersion>:
#include <aiTestUtility.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8003d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8003d36:	2201      	movs	r2, #1
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2107      	movs	r1, #7
 8003d3c:	9100      	str	r1, [sp, #0]
 8003d3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003d42:	4803      	ldr	r0, [pc, #12]	; (8003d50 <aiPlatformVersion+0x1c>)
 8003d44:	4611      	mov	r1, r2
 8003d46:	f000 fa0f 	bl	8004168 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8003d4a:	b005      	add	sp, #20
 8003d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d50:	0800c58a 	.word	0x0800c58a

08003d54 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8003d54:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003d56:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003d5a:	b2c4      	uxtb	r4, r0
  if (fct)
 8003d5c:	b129      	cbz	r1, 8003d6a <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003d5e:	4622      	mov	r2, r4
 8003d60:	4805      	ldr	r0, [pc, #20]	; (8003d78 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8003d62:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003d66:	f000 b9ff 	b.w	8004168 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4803      	ldr	r0, [pc, #12]	; (8003d7c <aiLogErr+0x28>)
}
 8003d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 b9f8 	b.w	8004168 <lc_print>
 8003d78:	0800c5bc 	.word	0x0800c5bc
 8003d7c:	0800c5e9 	.word	0x0800c5e9

08003d80 <aiPrintBufferInfo>:
    }
}


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const ai_buffer_format fmt = buffer->format;
  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003d84:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 8003d86:	6807      	ldr	r7, [r0, #0]
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003d88:	680c      	ldr	r4, [r1, #0]
 8003d8a:	68ca      	ldr	r2, [r1, #12]
 8003d8c:	688b      	ldr	r3, [r1, #8]
 8003d8e:	684d      	ldr	r5, [r1, #4]
{
 8003d90:	b085      	sub	sp, #20
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003d92:	2101      	movs	r1, #1
 8003d94:	9203      	str	r2, [sp, #12]
 8003d96:	9302      	str	r3, [sp, #8]
{
 8003d98:	4606      	mov	r6, r0
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003d9a:	f002 fcb7 	bl	800670c <ai_buffer_get_size>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	e9cd 5000 	strd	r5, r0, [sp]
 8003da4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003da8:	485a      	ldr	r0, [pc, #360]	; (8003f14 <aiPrintBufferInfo+0x194>)
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003daa:	f3c7 4543 	ubfx	r5, r7, #17, #4
  LC_PRINT("(%d,%d,%d,%d) %d/",
 8003dae:	f000 f9db 	bl	8004168 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003db2:	2d01      	cmp	r5, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003db4:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8003db8:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003dbc:	d116      	bne.n	8003dec <aiPrintBufferInfo+0x6c>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003dbe:	4856      	ldr	r0, [pc, #344]	; (8003f18 <aiPrintBufferInfo+0x198>)
 8003dc0:	4621      	mov	r1, r4
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003dc2:	f000 f9d1 	bl	8004168 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8003dc6:	6874      	ldr	r4, [r6, #4]
    LC_PRINT(" @0x%X/%d",
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4630      	mov	r0, r6
  if (buffer->data)
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	f000 808f 	beq.w	8003ef0 <aiPrintBufferInfo+0x170>
    LC_PRINT(" @0x%X/%d",
 8003dd2:	f002 fc9b 	bl	800670c <ai_buffer_get_size>
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	f002 fcc8 	bl	800676c <ai_buffer_get_byte_size>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	484f      	ldr	r0, [pc, #316]	; (8003f1c <aiPrintBufferInfo+0x19c>)
 8003de0:	4621      	mov	r1, r4
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8003de2:	b005      	add	sp, #20
 8003de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 8003de8:	f000 b9be 	b.w	8004168 <lc_print>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003dec:	2d03      	cmp	r5, #3
 8003dee:	d102      	bne.n	8003df6 <aiPrintBufferInfo+0x76>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003df0:	484b      	ldr	r0, [pc, #300]	; (8003f20 <aiPrintBufferInfo+0x1a0>)
 8003df2:	4621      	mov	r1, r4
 8003df4:	e7e5      	b.n	8003dc2 <aiPrintBufferInfo+0x42>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8003df6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003f34 <aiPrintBufferInfo+0x1b4>
 8003dfa:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 8003dfe:	f108 0102 	add.w	r1, r8, #2
 8003e02:	4622      	mov	r2, r4
 8003e04:	bf18      	it	ne
 8003e06:	4641      	movne	r1, r8
 8003e08:	f108 0029 	add.w	r0, r8, #41	; 0x29
 8003e0c:	f000 f9ac 	bl	8004168 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8003e10:	2d02      	cmp	r5, #2
 8003e12:	d1d8      	bne.n	8003dc6 <aiPrintBufferInfo+0x46>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003e14:	68b3      	ldr	r3, [r6, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d059      	beq.n	8003ece <aiPrintBufferInfo+0x14e>
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	07d2      	lsls	r2, r2, #31
 8003e1e:	d556      	bpl.n	8003ece <aiPrintBufferInfo+0x14e>
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d053      	beq.n	8003ece <aiPrintBufferInfo+0x14e>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8003e26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 8003e2a:	f108 002e 	add.w	r0, r8, #46	; 0x2e
      const int max_ = s_> 4?4:s_;
 8003e2e:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 8003e32:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 8003e34:	46ca      	mov	sl, r9
 8003e36:	bf28      	it	cs
 8003e38:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 8003e3c:	f000 f994 	bl	8004168 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003e40:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003e42:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", scale, zero_point);
 8003e46:	f108 0833 	add.w	r8, r8, #51	; 0x33
      for (int idx=0; idx<max_; idx++) {
 8003e4a:	4555      	cmp	r5, sl
 8003e4c:	db07      	blt.n	8003e5e <aiPrintBufferInfo+0xde>
      LC_PRINT((s_ > max_)?"..":"");
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <aiPrintBufferInfo+0x1a4>)
 8003e50:	1cd8      	adds	r0, r3, #3
 8003e52:	45ca      	cmp	sl, r9
 8003e54:	bf38      	it	cc
 8003e56:	4618      	movcc	r0, r3
 8003e58:	f000 f986 	bl	8004168 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003e5c:	e7b3      	b.n	8003dc6 <aiPrintBufferInfo+0x46>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003e5e:	68b2      	ldr	r2, [r6, #8]
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	d02f      	beq.n	8003ec4 <aiPrintBufferInfo+0x144>
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f013 0401 	ands.w	r4, r3, #1
 8003e6a:	d02e      	beq.n	8003eca <aiPrintBufferInfo+0x14a>
 8003e6c:	6853      	ldr	r3, [r2, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04a      	beq.n	8003f08 <aiPrintBufferInfo+0x188>
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	2a00      	cmp	r2, #0
 8003e76:	d04a      	beq.n	8003f0e <aiPrintBufferInfo+0x18e>
 8003e78:	8859      	ldrh	r1, [r3, #2]
 8003e7a:	42a9      	cmp	r1, r5
 8003e7c:	dd47      	ble.n	8003f0e <aiPrintBufferInfo+0x18e>
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8003e84:	6810      	ldr	r0, [r2, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03f      	beq.n	8003f0a <aiPrintBufferInfo+0x18a>
 8003e8a:	881a      	ldrh	r2, [r3, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003e8c:	685c      	ldr	r4, [r3, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003e8e:	f012 0202 	ands.w	r2, r2, #2
 8003e92:	d00f      	beq.n	8003eb4 <aiPrintBufferInfo+0x134>
 8003e94:	b124      	cbz	r4, 8003ea0 <aiPrintBufferInfo+0x120>
 8003e96:	885b      	ldrh	r3, [r3, #2]
 8003e98:	42ab      	cmp	r3, r5
 8003e9a:	dd36      	ble.n	8003f0a <aiPrintBufferInfo+0x18a>
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	5d5c      	ldrb	r4, [r3, r5]
        LC_PRINT("(%f,%d),", scale, zero_point);
 8003ea0:	f7fc fb6a 	bl	8000578 <__aeabi_f2d>
 8003ea4:	9400      	str	r4, [sp, #0]
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f000 f95c 	bl	8004168 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	e7ca      	b.n	8003e4a <aiPrintBufferInfo+0xca>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003eb4:	2c00      	cmp	r4, #0
 8003eb6:	d0f3      	beq.n	8003ea0 <aiPrintBufferInfo+0x120>
 8003eb8:	885b      	ldrh	r3, [r3, #2]
 8003eba:	42ab      	cmp	r3, r5
 8003ebc:	dd03      	ble.n	8003ec6 <aiPrintBufferInfo+0x146>
 8003ebe:	6863      	ldr	r3, [r4, #4]
 8003ec0:	575c      	ldrsb	r4, [r3, r5]
 8003ec2:	e7ed      	b.n	8003ea0 <aiPrintBufferInfo+0x120>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003ec4:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003ec6:	4614      	mov	r4, r2
 8003ec8:	e7ea      	b.n	8003ea0 <aiPrintBufferInfo+0x120>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003eca:	4658      	mov	r0, fp
 8003ecc:	e7e8      	b.n	8003ea0 <aiPrintBufferInfo+0x120>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003ece:	f019 0f78 	tst.w	r9, #120	; 0x78
 8003ed2:	d102      	bne.n	8003eda <aiPrintBufferInfo+0x15a>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003ed4:	4814      	ldr	r0, [pc, #80]	; (8003f28 <aiPrintBufferInfo+0x1a8>)
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	e773      	b.n	8003dc2 <aiPrintBufferInfo+0x42>
      LC_PRINT(" Q%d.%d",
 8003eda:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 8003ede:	3a40      	subs	r2, #64	; 0x40
 8003ee0:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 8003ee4:	4411      	add	r1, r2
 8003ee6:	4811      	ldr	r0, [pc, #68]	; (8003f2c <aiPrintBufferInfo+0x1ac>)
 8003ee8:	1a61      	subs	r1, r4, r1
 8003eea:	f000 f93d 	bl	8004168 <lc_print>
 8003eee:	e76a      	b.n	8003dc6 <aiPrintBufferInfo+0x46>
    LC_PRINT(" (User Domain)/%d",
 8003ef0:	f002 fc0c 	bl	800670c <ai_buffer_get_size>
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	f002 fc39 	bl	800676c <ai_buffer_get_byte_size>
 8003efa:	4601      	mov	r1, r0
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <aiPrintBufferInfo+0x1b0>)
}
 8003efe:	b005      	add	sp, #20
 8003f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8003f04:	f000 b930 	b.w	8004168 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003f08:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003f0a:	2400      	movs	r4, #0
 8003f0c:	e7c8      	b.n	8003ea0 <aiPrintBufferInfo+0x120>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003f0e:	4658      	mov	r0, fp
 8003f10:	e7b9      	b.n	8003e86 <aiPrintBufferInfo+0x106>
 8003f12:	bf00      	nop
 8003f14:	0800c619 	.word	0x0800c619
 8003f18:	0800c62b 	.word	0x0800c62b
 8003f1c:	0800c660 	.word	0x0800c660
 8003f20:	0800c633 	.word	0x0800c633
 8003f24:	0800c615 	.word	0x0800c615
 8003f28:	0800c64d 	.word	0x0800c64d
 8003f2c:	0800c658 	.word	0x0800c658
 8003f30:	0800c66a 	.word	0x0800c66a
 8003f34:	0800c611 	.word	0x0800c611

08003f38 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8003f3e:	484e      	ldr	r0, [pc, #312]	; (8004078 <aiPrintNetworkInfo+0x140>)
 8003f40:	f000 f912 	bl	8004168 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	484d      	ldr	r0, [pc, #308]	; (800407c <aiPrintNetworkInfo+0x144>)
 8003f48:	f000 f90e 	bl	8004168 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003f4c:	6861      	ldr	r1, [r4, #4]
 8003f4e:	484c      	ldr	r0, [pc, #304]	; (8004080 <aiPrintNetworkInfo+0x148>)
 8003f50:	f000 f90a 	bl	8004168 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003f54:	68a1      	ldr	r1, [r4, #8]
 8003f56:	484b      	ldr	r0, [pc, #300]	; (8004084 <aiPrintNetworkInfo+0x14c>)
 8003f58:	f000 f906 	bl	8004168 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8003f5c:	68e1      	ldr	r1, [r4, #12]
 8003f5e:	484a      	ldr	r0, [pc, #296]	; (8004088 <aiPrintNetworkInfo+0x150>)
 8003f60:	f000 f902 	bl	8004168 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8003f64:	7da3      	ldrb	r3, [r4, #22]
 8003f66:	7d21      	ldrb	r1, [r4, #20]
 8003f68:	7d62      	ldrb	r2, [r4, #21]
 8003f6a:	4848      	ldr	r0, [pc, #288]	; (800408c <aiPrintNetworkInfo+0x154>)
 8003f6c:	f000 f8fc 	bl	8004168 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8003f70:	69a1      	ldr	r1, [r4, #24]
 8003f72:	780b      	ldrb	r3, [r1, #0]
 8003f74:	b113      	cbz	r3, 8003f7c <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003f76:	4846      	ldr	r0, [pc, #280]	; (8004090 <aiPrintNetworkInfo+0x158>)
 8003f78:	f000 f8f6 	bl	8004168 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003f7c:	7fa3      	ldrb	r3, [r4, #30]
 8003f7e:	7f62      	ldrb	r2, [r4, #29]
 8003f80:	7f21      	ldrb	r1, [r4, #28]
 8003f82:	4844      	ldr	r0, [pc, #272]	; (8004094 <aiPrintNetworkInfo+0x15c>)
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003f84:	4f44      	ldr	r7, [pc, #272]	; (8004098 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003f86:	f000 f8ef 	bl	8004168 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8003f8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f8c:	4843      	ldr	r0, [pc, #268]	; (800409c <aiPrintNetworkInfo+0x164>)
 8003f8e:	f000 f8eb 	bl	8004168 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003f92:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003f94:	4842      	ldr	r0, [pc, #264]	; (80040a0 <aiPrintNetworkInfo+0x168>)
 8003f96:	f000 f8e7 	bl	8004168 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8003f9a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8003f9e:	4841      	ldr	r0, [pc, #260]	; (80040a4 <aiPrintNetworkInfo+0x16c>)
 8003fa0:	f000 f8e2 	bl	8004168 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003fa4:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003fa6:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003faa:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003fae:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	dc25      	bgt.n	8004002 <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003fb6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8003fba:	483b      	ldr	r0, [pc, #236]	; (80040a8 <aiPrintNetworkInfo+0x170>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8003fbc:	4f36      	ldr	r7, [pc, #216]	; (8004098 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003fbe:	f000 f8d3 	bl	8004168 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003fc2:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003fc4:	f04f 081c 	mov.w	r8, #28
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003fc8:	f107 0908 	add.w	r9, r7, #8
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003fcc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8003fd0:	42ab      	cmp	r3, r5
 8003fd2:	dc25      	bgt.n	8004020 <aiPrintNetworkInfo+0xe8>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003fd4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003fd6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8003fd8:	4834      	ldr	r0, [pc, #208]	; (80040ac <aiPrintNetworkInfo+0x174>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8003fda:	4e35      	ldr	r6, [pc, #212]	; (80040b0 <aiPrintNetworkInfo+0x178>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003fdc:	f000 f8c4 	bl	8004168 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003fe0:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8003fe2:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003fe4:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  for (int i=0; i<report->n_inputs; i++) {
 8003fe8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8003fea:	42ab      	cmp	r3, r5
 8003fec:	dc27      	bgt.n	800403e <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8003fee:	4e31      	ldr	r6, [pc, #196]	; (80040b4 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 8003ff0:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8003ff2:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003ff4:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8003ff8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003ffa:	42ab      	cmp	r3, r5
 8003ffc:	dc2d      	bgt.n	800405a <aiPrintNetworkInfo+0x122>
  }
}
 8003ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004002:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8004004:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8004006:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 800400a:	4638      	mov	r0, r7
 800400c:	f000 f8ac 	bl	8004168 <lc_print>
      aiPrintBufferInfo(buffer);
 8004010:	4630      	mov	r0, r6
 8004012:	f7ff feb5 	bl	8003d80 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004016:	4648      	mov	r0, r9
 8004018:	f000 f8a6 	bl	8004168 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800401c:	3501      	adds	r5, #1
 800401e:	e7c6      	b.n	8003fae <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004020:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 8004022:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004024:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8004028:	4638      	mov	r0, r7
 800402a:	f000 f89d 	bl	8004168 <lc_print>
      aiPrintBufferInfo(buffer);
 800402e:	4630      	mov	r0, r6
 8004030:	f7ff fea6 	bl	8003d80 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8004034:	4648      	mov	r0, r9
 8004036:	f000 f897 	bl	8004168 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800403a:	3501      	adds	r5, #1
 800403c:	e7c6      	b.n	8003fcc <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 800403e:	4629      	mov	r1, r5
 8004040:	4630      	mov	r0, r6
 8004042:	f000 f891 	bl	8004168 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8004046:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004048:	fb07 0005 	mla	r0, r7, r5, r0
 800404c:	f7ff fe98 	bl	8003d80 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8004050:	4640      	mov	r0, r8
 8004052:	f000 f889 	bl	8004168 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8004056:	3501      	adds	r5, #1
 8004058:	e7c6      	b.n	8003fe8 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 800405a:	4629      	mov	r1, r5
 800405c:	4630      	mov	r0, r6
 800405e:	f000 f883 	bl	8004168 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8004062:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004064:	fb07 0005 	mla	r0, r7, r5, r0
 8004068:	f7ff fe8a 	bl	8003d80 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800406c:	4640      	mov	r0, r8
 800406e:	f000 f87b 	bl	8004168 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8004072:	3501      	adds	r5, #1
 8004074:	e7c0      	b.n	8003ff8 <aiPrintNetworkInfo+0xc0>
 8004076:	bf00      	nop
 8004078:	0800c67c 	.word	0x0800c67c
 800407c:	0800c696 	.word	0x0800c696
 8004080:	0800c6b1 	.word	0x0800c6b1
 8004084:	0800c6cc 	.word	0x0800c6cc
 8004088:	0800c6e7 	.word	0x0800c6e7
 800408c:	0800c702 	.word	0x0800c702
 8004090:	0800c723 	.word	0x0800c723
 8004094:	0800c73e 	.word	0x0800c73e
 8004098:	0800c7b6 	.word	0x0800c7b6
 800409c:	0800c75f 	.word	0x0800c75f
 80040a0:	0800c780 	.word	0x0800c780
 80040a4:	0800c79b 	.word	0x0800c79b
 80040a8:	0800c7c1 	.word	0x0800c7c1
 80040ac:	0800c7dc 	.word	0x0800c7dc
 80040b0:	0800c7fa 	.word	0x0800c7fa
 80040b4:	0800c803 	.word	0x0800c803

080040b8 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL)

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 80040b8:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <_put_c_driver+0x24>)
{
 80040bc:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b13b      	cbz	r3, 80040d4 <_put_c_driver+0x1c>
    HAL_UART_Transmit(&UartHandle, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 80040c4:	4806      	ldr	r0, [pc, #24]	; (80040e0 <_put_c_driver+0x28>)
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ca:	2201      	movs	r2, #1
 80040cc:	f10d 0107 	add.w	r1, sp, #7
 80040d0:	f7ff f888 	bl	80031e4 <HAL_UART_Transmit>
}
 80040d4:	b003      	add	sp, #12
 80040d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80040da:	bf00      	nop
 80040dc:	2000000c 	.word	0x2000000c
 80040e0:	200007a0 	.word	0x200007a0

080040e4 <ioRawWriteBuffer>:
{
 80040e4:	b508      	push	{r3, lr}
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80040e6:	b28a      	uxth	r2, r1
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ec:	4601      	mov	r1, r0
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <ioRawWriteBuffer+0x18>)
 80040f0:	f7ff f878 	bl	80031e4 <HAL_UART_Transmit>
}
 80040f4:	fab0 f080 	clz	r0, r0
 80040f8:	0940      	lsrs	r0, r0, #5
 80040fa:	bd08      	pop	{r3, pc}
 80040fc:	200007a0 	.word	0x200007a0

08004100 <ioRawReadBuffer>:
{
 8004100:	b508      	push	{r3, lr}
  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8004102:	b28a      	uxth	r2, r1
 8004104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004108:	4601      	mov	r1, r0
 800410a:	4803      	ldr	r0, [pc, #12]	; (8004118 <ioRawReadBuffer+0x18>)
 800410c:	f7ff f8c7 	bl	800329e <HAL_UART_Receive>
}
 8004110:	fab0 f080 	clz	r0, r0
 8004114:	0940      	lsrs	r0, r0, #5
 8004116:	bd08      	pop	{r3, pc}
 8004118:	200007a0 	.word	0x200007a0

0800411c <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 800411c:	4b01      	ldr	r3, [pc, #4]	; (8004124 <ioRawDisableLLWrite+0x8>)
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
}
 8004122:	4770      	bx	lr
 8004124:	2000000c 	.word	0x2000000c

08004128 <_write>:
{
 8004128:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800412a:	1e14      	subs	r4, r2, #0
 800412c:	da0a      	bge.n	8004144 <_write+0x1c>
 800412e:	3801      	subs	r0, #1
 8004130:	2801      	cmp	r0, #1
 8004132:	d907      	bls.n	8004144 <_write+0x1c>
    errno = EBADF;
 8004134:	f005 fcba 	bl	8009aac <__errno>
 8004138:	2309      	movs	r3, #9
 800413a:	6003      	str	r3, [r0, #0]
    return -1;
 800413c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8004140:	4620      	mov	r0, r4
 8004142:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <_write+0x38>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f9      	beq.n	8004140 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800414c:	b2a2      	uxth	r2, r4
 800414e:	4805      	ldr	r0, [pc, #20]	; (8004164 <_write+0x3c>)
 8004150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004154:	f7ff f846 	bl	80031e4 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8004158:	2800      	cmp	r0, #0
 800415a:	bf18      	it	ne
 800415c:	2400      	movne	r4, #0
 800415e:	e7ef      	b.n	8004140 <_write+0x18>
 8004160:	2000000c 	.word	0x2000000c
 8004164:	200007a0 	.word	0x200007a0

08004168 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8004168:	b40f      	push	{r0, r1, r2, r3}
 800416a:	b507      	push	{r0, r1, r2, lr}
 800416c:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800416e:	2100      	movs	r1, #0
{
 8004170:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004174:	4804      	ldr	r0, [pc, #16]	; (8004188 <lc_print+0x20>)
  va_start(ap, fmt);
 8004176:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004178:	f000 fe52 	bl	8004e20 <vlc_print>
  va_end(ap);
}
 800417c:	b003      	add	sp, #12
 800417e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004182:	b004      	add	sp, #16
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	080040b9 	.word	0x080040b9

0800418c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 800418c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800418e:	4d11      	ldr	r5, [pc, #68]	; (80041d4 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8004190:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8004192:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8004194:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004198:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800419c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80041a0:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80041a2:	f005 fcad 	bl	8009b00 <malloc>

  /* remember size */
  if (ptr) {
 80041a6:	b1a0      	cbz	r0, 80041d2 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80041a8:	1903      	adds	r3, r0, r4
 80041aa:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80041ac:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80041ae:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	07db      	lsls	r3, r3, #31
 80041b4:	d50c      	bpl.n	80041d0 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80041b6:	68eb      	ldr	r3, [r5, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80041bc:	686b      	ldr	r3, [r5, #4]
 80041be:	4423      	add	r3, r4
 80041c0:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80041c2:	69ab      	ldr	r3, [r5, #24]
 80041c4:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80041c6:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 80041c8:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 80041ca:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 80041cc:	bf88      	it	hi
 80041ce:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80041d0:	3004      	adds	r0, #4
}
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000b10 	.word	0x20000b10
 80041d8:	efdcba98 	.word	0xefdcba98

080041dc <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80041dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	4604      	mov	r4, r0
 80041e2:	468a      	mov	sl, r1
  if (!t)
 80041e4:	4617      	mov	r7, r2
 80041e6:	b382      	cbz	r2, 800424a <dwtCyclesToTime+0x6e>
  return HAL_RCC_GetHCLKFreq();
 80041e8:	f7fe fa50 	bl	800268c <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 80041ec:	2300      	movs	r3, #0
  return HAL_RCC_GetHCLKFreq();
 80041ee:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 80041f0:	9001      	str	r0, [sp, #4]
 80041f2:	4651      	mov	r1, sl
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7fc fdfd 	bl	8000df4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 80041fa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 80041fe:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8004200:	fba4 0106 	umull	r0, r1, r4, r6
 8004204:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004206:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004250 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 800420a:	2300      	movs	r3, #0
 800420c:	fb06 110a 	mla	r1, r6, sl, r1
 8004210:	f7fc fdf0 	bl	8000df4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8004214:	fbab 3106 	umull	r3, r1, fp, r6
 8004218:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800421a:	fba4 0109 	umull	r0, r1, r4, r9
 800421e:	9a01      	ldr	r2, [sp, #4]
 8004220:	fb09 110a 	mla	r1, r9, sl, r1
 8004224:	2300      	movs	r3, #0
 8004226:	f7fc fde5 	bl	8000df4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 800422a:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 800422c:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 800422e:	fbab 8909 	umull	r8, r9, fp, r9
 8004232:	eba0 0008 	sub.w	r0, r0, r8
 8004236:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 800423a:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 800423e:	1b40      	subs	r0, r0, r5
  t->us = us;
 8004240:	60f8      	str	r0, [r7, #12]
  return 0;
 8004242:	2000      	movs	r0, #0
}
 8004244:	b003      	add	sp, #12
 8004246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800424a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800424e:	e7f9      	b.n	8004244 <dwtCyclesToTime+0x68>
 8004250:	000f4240 	.word	0x000f4240

08004254 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8004254:	b510      	push	{r4, lr}
 8004256:	ed2d 8b02 	vpush	{d8}
 800425a:	b082      	sub	sp, #8
 800425c:	4604      	mov	r4, r0
 800425e:	9101      	str	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8004260:	f7fe fa14 	bl	800268c <HAL_RCC_GetHCLKFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 8004264:	9901      	ldr	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8004266:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 800426a:	4620      	mov	r0, r4
 800426c:	f7fc fd7c 	bl	8000d68 <__aeabi_ul2f>
 8004270:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800428c <dwtCyclesToFloatMs+0x38>
 8004274:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 8004278:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 800427c:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8004280:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8004284:	b002      	add	sp, #8
 8004286:	ecbd 8b02 	vpop	{d8}
 800428a:	bd10      	pop	{r4, pc}
 800428c:	447a0000 	.word	0x447a0000

08004290 <getFlashCacheConf>:
static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
  return mconf;
}
 8004290:	4b01      	ldr	r3, [pc, #4]	; (8004298 <getFlashCacheConf+0x8>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000b2c 	.word	0x20000b2c

0800429c <systemSettingLog>:

void systemSettingLog(void)
{
 800429c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

#if !defined(STM32F0) && !defined(STM32L0) && !defined(STM32G0) && !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5)
  uint32_t acr = FLASH->ACR ;
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <systemSettingLog+0x124>)
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80042a0:	4848      	ldr	r0, [pc, #288]	; (80043c4 <systemSettingLog+0x128>)
  uint32_t acr = FLASH->ACR ;
 80042a2:	681d      	ldr	r5, [r3, #0]
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80042a4:	2203      	movs	r2, #3
 80042a6:	2301      	movs	r3, #1
 80042a8:	210a      	movs	r1, #10
 80042aa:	f7ff ff5d 	bl	8004168 <lc_print>
#endif


  /* Display Device configuration */

  LC_PRINT("STM32 Runtime configuration...\r\n");
 80042ae:	4846      	ldr	r0, [pc, #280]	; (80043c8 <systemSettingLog+0x12c>)
 80042b0:	f7ff ff5a 	bl	8004168 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80042b4:	f7fd fbac 	bl	8001a10 <HAL_GetDEVID>
 80042b8:	4606      	mov	r6, r0
 80042ba:	f7fd fba9 	bl	8001a10 <HAL_GetDEVID>
  switch (dev_id) {
 80042be:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80042c2:	b283      	uxth	r3, r0
  switch (dev_id) {
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d077      	beq.n	80043b8 <systemSettingLog+0x11c>
 80042c8:	d86e      	bhi.n	80043a8 <systemSettingLog+0x10c>
 80042ca:	f240 4215 	movw	r2, #1045	; 0x415
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d074      	beq.n	80043bc <systemSettingLog+0x120>
  case 0x435: str = "STM32L43xxx"; break;
 80042d2:	4c3e      	ldr	r4, [pc, #248]	; (80043cc <systemSettingLog+0x130>)
 80042d4:	f240 4135 	movw	r1, #1077	; 0x435
 80042d8:	f104 0214 	add.w	r2, r4, #20
 80042dc:	428b      	cmp	r3, r1
 80042de:	bf08      	it	eq
 80042e0:	4614      	moveq	r4, r2
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80042e2:	f7fd fb8f 	bl	8001a04 <HAL_GetREVID>
 80042e6:	4622      	mov	r2, r4
 80042e8:	4603      	mov	r3, r0
 80042ea:	4631      	mov	r1, r6
 80042ec:	4838      	ldr	r0, [pc, #224]	; (80043d0 <systemSettingLog+0x134>)
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 80042ee:	4c39      	ldr	r4, [pc, #228]	; (80043d4 <systemSettingLog+0x138>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80042f0:	f7ff ff3a 	bl	8004168 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <systemSettingLog+0x13c>)
 80042f6:	2104      	movs	r1, #4
 80042f8:	1d5a      	adds	r2, r3, #5
 80042fa:	f103 000a 	add.w	r0, r3, #10
 80042fe:	f7ff ff33 	bl	8004168 <lc_print>
  mconf = (1 << 16);  /* FPU present and used */
 8004302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004306:	6023      	str	r3, [r4, #0]
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8004308:	f7fd fb78 	bl	80019fc <HAL_GetHalVersion>
 800430c:	4601      	mov	r1, r0
 800430e:	4833      	ldr	r0, [pc, #204]	; (80043dc <systemSettingLog+0x140>)
 8004310:	f7ff ff2a 	bl	8004168 <lc_print>
  return HAL_RCC_GetHCLKFreq();
 8004314:	f7fe f9ba 	bl	800268c <HAL_RCC_GetHCLKFreq>

  val = systemCoreClock()/1000000;

#if !defined(STM32H7)
  LC_PRINT(" system clock : %u MHz\r\n", (int)val);
 8004318:	4931      	ldr	r1, [pc, #196]	; (80043e0 <systemSettingLog+0x144>)
 800431a:	fbb0 f1f1 	udiv	r1, r0, r1
 800431e:	4831      	ldr	r0, [pc, #196]	; (80043e4 <systemSettingLog+0x148>)
 8004320:	f7ff ff22 	bl	8004168 <lc_print>
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32G0) && !defined(STM32L0) && !defined(STM32F0) && !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f005 000f 	and.w	r0, r5, #15
 800432a:	4303      	orrs	r3, r0
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800432c:	05ea      	lsls	r2, r5, #23
    mconf |= (1 << 8);
 800432e:	bf4c      	ite	mi
 8004330:	f043 2301 	orrmi.w	r3, r3, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8004334:	f043 7380 	orrpl.w	r3, r3, #16777216	; 0x1000000
    mconf |= (1 << 8);
 8004338:	6023      	str	r3, [r4, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 800433a:	05ae      	lsls	r6, r5, #22
    mconf |= (1 << 9);
 800433c:	bf42      	ittt	mi
 800433e:	6823      	ldrmi	r3, [r4, #0]
 8004340:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8004344:	6023      	strmi	r3, [r4, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8004346:	0569      	lsls	r1, r5, #21
    mconf |= (1 << 10);
 8004348:	bf42      	ittt	mi
 800434a:	6823      	ldrmi	r3, [r4, #0]
 800434c:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
 8004350:	6023      	strmi	r3, [r4, #0]
    return "False";
 8004352:	4c25      	ldr	r4, [pc, #148]	; (80043e8 <systemSettingLog+0x14c>)
 8004354:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004358:	f104 0105 	add.w	r1, r4, #5
 800435c:	bf0c      	ite	eq
 800435e:	460a      	moveq	r2, r1
 8004360:	4622      	movne	r2, r4
 8004362:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004366:	bf0c      	ite	eq
 8004368:	460b      	moveq	r3, r1
 800436a:	4623      	movne	r3, r4
 800436c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004370:	bf18      	it	ne
 8004372:	4621      	movne	r1, r4
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004374:	e9cd 1000 	strd	r1, r0, [sp]
 8004378:	4629      	mov	r1, r5
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800437a:	4d1c      	ldr	r5, [pc, #112]	; (80043ec <systemSettingLog+0x150>)
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800437c:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 8004380:	f7ff fef2 	bl	8004168 <lc_print>
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8004384:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004386:	04db      	lsls	r3, r3, #19
 8004388:	d403      	bmi.n	8004392 <systemSettingLog+0xf6>
    LC_PRINT("W: CRC IP clock is NOT enabled\r\n");
 800438a:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800438e:	f7ff feeb 	bl	8004168 <lc_print>
  __HAL_RCC_CRC_CLK_ENABLE();
 8004392:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004398:	64ab      	str	r3, [r5, #72]	; 0x48
 800439a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	9b03      	ldr	r3, [sp, #12]
    mconf |= (1 << 9);
#endif
#endif

  crcIpInit();
}
 80043a4:	b004      	add	sp, #16
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
  case 0x470: str = "STM32L4Rxxx"; break;
 80043a8:	4c08      	ldr	r4, [pc, #32]	; (80043cc <systemSettingLog+0x130>)
 80043aa:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80043ae:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80043b2:	bf08      	it	eq
 80043b4:	4614      	moveq	r4, r2
 80043b6:	e794      	b.n	80042e2 <systemSettingLog+0x46>
  switch (dev_id) {
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <systemSettingLog+0x154>)
 80043ba:	e792      	b.n	80042e2 <systemSettingLog+0x46>
  case 0x415: str = "STM32L4x6xx"; break;
 80043bc:	4c0d      	ldr	r4, [pc, #52]	; (80043f4 <systemSettingLog+0x158>)
 80043be:	e790      	b.n	80042e2 <systemSettingLog+0x46>
 80043c0:	40022000 	.word	0x40022000
 80043c4:	0800c8b5 	.word	0x0800c8b5
 80043c8:	0800c8d2 	.word	0x0800c8d2
 80043cc:	0800c872 	.word	0x0800c872
 80043d0:	0800c8f3 	.word	0x0800c8f3
 80043d4:	20000b2c 	.word	0x20000b2c
 80043d8:	0800c924 	.word	0x0800c924
 80043dc:	0800c94c 	.word	0x0800c94c
 80043e0:	000f4240 	.word	0x000f4240
 80043e4:	0800c965 	.word	0x0800c965
 80043e8:	0800c8aa 	.word	0x0800c8aa
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800c87a 	.word	0x0800c87a
 80043f4:	0800c892 	.word	0x0800c892

080043f8 <dwtIpInit>:
};

#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <dwtIpInit+0x24>)
 80043fa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8004406:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 800440a:	2300      	movs	r3, #0
 800440c:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <cyclesCounterStart>:
  dwtIpInit();
#endif
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8004420:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 8004422:	f7fd fad1 	bl	80019c8 <HAL_GetTick>
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = HAL_GetTick();
 800442a:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800442c:	2100      	movs	r1, #0
 800442e:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 8004430:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 8004432:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8004434:	bd08      	pop	{r3, pc}
 8004436:	bf00      	nop
 8004438:	20000b04 	.word	0x20000b04
 800443c:	e0001000 	.word	0xe0001000

08004440 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8004440:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <cyclesCounterEnd+0x40>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8004444:	4d0f      	ldr	r5, [pc, #60]	; (8004484 <cyclesCounterEnd+0x44>)
  return DWT->CYCCNT;
 8004446:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8004448:	686b      	ldr	r3, [r5, #4]
 800444a:	2100      	movs	r1, #0
 800444c:	1ae4      	subs	r4, r4, r3
 800444e:	9101      	str	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8004450:	f7fd faba 	bl	80019c8 <HAL_GetTick>
 8004454:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8004456:	682a      	ldr	r2, [r5, #0]
 8004458:	9901      	ldr	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800445a:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 800445c:	4290      	cmp	r0, r2
 800445e:	d90c      	bls.n	800447a <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8004460:	460b      	mov	r3, r1
 8004462:	f7fc fcc7 	bl	8000df4 <__aeabi_uldivmod>
 8004466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800446a:	fba0 0303 	umull	r0, r3, r0, r3
 800446e:	1900      	adds	r0, r0, r4
 8004470:	eba3 0101 	sub.w	r1, r3, r1
 8004474:	4604      	mov	r4, r0
 8004476:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 800447a:	4620      	mov	r0, r4
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	e0001000 	.word	0xe0001000
 8004484:	20000b04 	.word	0x20000b04

08004488 <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	ed2d 8b02 	vpush	{d8}
 8004490:	b095      	sub	sp, #84	; 0x54
 8004492:	460d      	mov	r5, r1

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004494:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    const ai_observer_node *node) {
 8004498:	4617      	mov	r7, r2

  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 800449a:	f7ff ffd1 	bl	8004440 <cyclesCounterEnd>

  if (flags & AI_OBSERVER_PRE_EVT) {
 800449e:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 80044a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (flags & AI_OBSERVER_PRE_EVT) {
 80044a6:	d011      	beq.n	80044cc <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 80044a8:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 80044aa:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 80044ac:	f103 0301 	add.w	r3, r3, #1
 80044b0:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 80044b2:	d503      	bpl.n	80044bc <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 80044b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044b8:	e9c4 2308 	strd	r2, r3, [r4, #32]
      // break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
    }
    obs_ctx->tcom += cyclesCounterEnd();
  }

  cyclesCounterStart();
 80044bc:	f7ff ffb0 	bl	8004420 <cyclesCounterStart>
  return 0;
}
 80044c0:	2000      	movs	r0, #0
 80044c2:	b015      	add	sp, #84	; 0x54
 80044c4:	ecbd 8b02 	vpop	{d8}
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 80044cc:	076b      	lsls	r3, r5, #29
 80044ce:	d5f5      	bpl.n	80044bc <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 80044d0:	f7ff ffa6 	bl	8004420 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 80044d4:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80044d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044dc:	181b      	adds	r3, r3, r0
 80044de:	eb42 0201 	adc.w	r2, r2, r1
 80044e2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 80044e6:	68a3      	ldr	r3, [r4, #8]
    if (obs_ctx->no_data)
 80044e8:	7d22      	ldrb	r2, [r4, #20]
    obs_ctx->n_cb_out++;
 80044ea:	3301      	adds	r3, #1
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 80044ec:	f415 7f00 	tst.w	r5, #512	; 0x200
    obs_ctx->n_cb_out++;
 80044f0:	60a3      	str	r3, [r4, #8]
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 80044f2:	bf14      	ite	ne
 80044f4:	2302      	movne	r3, #2
 80044f6:	2301      	moveq	r3, #1
    type = type << 16;
 80044f8:	041b      	lsls	r3, r3, #16
    if (obs_ctx->no_data)
 80044fa:	b10a      	cbz	r2, 8004500 <aiOnExecNode_cb+0x78>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 80044fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8004500:	68f9      	ldr	r1, [r7, #12]
 8004502:	880a      	ldrh	r2, [r1, #0]
 8004504:	2a01      	cmp	r2, #1
 8004506:	d809      	bhi.n	800451c <aiOnExecNode_cb+0x94>
    obs_ctx->tcom += cyclesCounterEnd();
 8004508:	f7ff ff9a 	bl	8004440 <cyclesCounterEnd>
 800450c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8004510:	1818      	adds	r0, r3, r0
 8004512:	eb42 0101 	adc.w	r1, r2, r1
 8004516:	e9c4 0106 	strd	r0, r1, [r4, #24]
 800451a:	e7cf      	b.n	80044bc <aiOnExecNode_cb+0x34>
    type |= (node->type & (ai_u16)0x7FFF);
 800451c:	887a      	ldrh	r2, [r7, #2]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800451e:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8004650 <aiOnExecNode_cb+0x1c8>
    type |= (node->type & (ai_u16)0x7FFF);
 8004522:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004526:	ea42 0803 	orr.w	r8, r2, r3
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 800452a:	684b      	ldr	r3, [r1, #4]
 800452c:	9304      	str	r3, [sp, #16]
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 800452e:	9b04      	ldr	r3, [sp, #16]
 8004530:	8999      	ldrh	r1, [r3, #12]
 8004532:	428e      	cmp	r6, r1
 8004534:	d2e8      	bcs.n	8004508 <aiOnExecNode_cb+0x80>
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0e5      	beq.n	8004508 <aiOnExecNode_cb+0x80>
 800453c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004540:	2800      	cmp	r0, #0
 8004542:	d0e1      	beq.n	8004508 <aiOnExecNode_cb+0x80>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8004544:	6802      	ldr	r2, [r0, #0]
 8004546:	2a00      	cmp	r2, #0
 8004548:	d06f      	beq.n	800462a <aiOnExecNode_cb+0x1a2>
 800454a:	6853      	ldr	r3, [r2, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d06c      	beq.n	800462a <aiOnExecNode_cb+0x1a2>
 8004550:	8855      	ldrh	r5, [r2, #2]
 8004552:	2d00      	cmp	r5, #0
 8004554:	d069      	beq.n	800462a <aiOnExecNode_cb+0x1a2>
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	ed93 8a00 	vldr	s16, [r3]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 800455c:	f8d0 b018 	ldr.w	fp, [r0, #24]
 8004560:	f8db 3000 	ldr.w	r3, [fp]
 8004564:	f413 0500 	ands.w	r5, r3, #8388608	; 0x800000
 8004568:	d062      	beq.n	8004630 <aiOnExecNode_cb+0x1a8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 800456a:	2a00      	cmp	r2, #0
 800456c:	d06e      	beq.n	800464c <aiOnExecNode_cb+0x1c4>
 800456e:	6855      	ldr	r5, [r2, #4]
 8004570:	b12d      	cbz	r5, 800457e <aiOnExecNode_cb+0xf6>
 8004572:	8852      	ldrh	r2, [r2, #2]
 8004574:	2a00      	cmp	r2, #0
 8004576:	d069      	beq.n	800464c <aiOnExecNode_cb+0x1c4>
 8004578:	686a      	ldr	r2, [r5, #4]
 800457a:	f992 5000 	ldrsb.w	r5, [r2]
      const ai_i32 h_ = AI_SHAPE_H(AI_TENSOR_SHAPE(t));
 800457e:	68c2      	ldr	r2, [r0, #12]
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 8004580:	6880      	ldr	r0, [r0, #8]
      const ai_i32 ch_ = AI_SHAPE_CH(AI_TENSOR_SHAPE(t));
 8004582:	f8d2 c004 	ldr.w	ip, [r2, #4]
      ai_buffer buffer =
 8004586:	930d      	str	r3, [sp, #52]	; 0x34
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 8004588:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 800458c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
      const ai_i32 d_ = AI_SHAPE_D(AI_TENSOR_SHAPE(t));
 8004590:	bf2c      	ite	cs
 8004592:	f8d2 a010 	ldrcs.w	sl, [r2, #16]
 8004596:	f04f 0a01 	movcc.w	sl, #1
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 800459a:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
      const ai_i32 w_ = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 800459e:	e9d2 9e02 	ldrd	r9, lr, [r2, #8]
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 80045a2:	bf08      	it	eq
 80045a4:	6952      	ldreq	r2, [r2, #20]
      ai_buffer buffer =
 80045a6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80045aa:	900e      	str	r0, [sp, #56]	; 0x38
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045ac:	f3c3 13c6 	ubfx	r3, r3, #7, #7
      const ai_i32 e_ = AI_SHAPE_E(AI_TENSOR_SHAPE(t));
 80045b0:	bf18      	it	ne
 80045b2:	2201      	movne	r2, #1
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045b4:	fb02 f20a 	mul.w	r2, r2, sl
 80045b8:	2b01      	cmp	r3, #1
      ai_buffer buffer =
 80045ba:	f04f 0000 	mov.w	r0, #0
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045be:	bf08      	it	eq
 80045c0:	f10c 031f 	addeq.w	r3, ip, #31
      ai_buffer buffer =
 80045c4:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045c8:	fb0e f002 	mul.w	r0, lr, r2
 80045cc:	bf18      	it	ne
 80045ce:	4663      	movne	r3, ip
 80045d0:	fb09 f000 	mul.w	r0, r9, r0
 80045d4:	bf08      	it	eq
 80045d6:	f023 031f 	biceq.w	r3, r3, #31
 80045da:	4343      	muls	r3, r0
      ai_buffer buffer =
 80045dc:	9311      	str	r3, [sp, #68]	; 0x44
 80045de:	f240 4301 	movw	r3, #1025	; 0x401
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045e2:	e9cd 9e0b 	strd	r9, lr, [sp, #44]	; 0x2c
      ai_buffer buffer =
 80045e6:	9312      	str	r3, [sp, #72]	; 0x48
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80045e8:	e9d4 9a03 	ldrd	r9, sl, [r4, #12]
      ai_buffer buffer =
 80045ec:	ab09      	add	r3, sp, #36	; 0x24
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 80045ee:	3901      	subs	r1, #1
 80045f0:	428e      	cmp	r6, r1
      ai_buffer buffer =
 80045f2:	9313      	str	r3, [sp, #76]	; 0x4c
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 80045f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f8:	88bb      	ldrh	r3, [r7, #4]
 80045fa:	9305      	str	r3, [sp, #20]
          AI_BUFFER_INIT(AI_FLAG_NONE,                          /* flags */
 80045fc:	e9cd 2c09 	strd	r2, ip, [sp, #36]	; 0x24
        n_type = type | (EnumLayerType_LAYER_TYPE_INTERNAL_DATA_NO_LAST << 16);
 8004600:	bf34      	ite	cc
 8004602:	f448 2b80 	orrcc.w	fp, r8, #262144	; 0x40000
        n_type = type;
 8004606:	46c3      	movcs	fp, r8
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004608:	f7ff fe24 	bl	8004254 <dwtCyclesToFloatMs>
 800460c:	9b05      	ldr	r3, [sp, #20]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	aa0d      	add	r2, sp, #52	; 0x34
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	9502      	str	r5, [sp, #8]
 8004616:	eef0 0a48 	vmov.f32	s1, s16
 800461a:	465b      	mov	r3, fp
 800461c:	2202      	movs	r2, #2
 800461e:	4651      	mov	r1, sl
 8004620:	4648      	mov	r0, r9
 8004622:	f7ff fa27 	bl	8003a74 <aiPbMgrSendAiBuffer4>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004626:	3601      	adds	r6, #1
 8004628:	e781      	b.n	800452e <aiOnExecNode_cb+0xa6>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800462a:	eeb0 8a68 	vmov.f32	s16, s17
 800462e:	e795      	b.n	800455c <aiOnExecNode_cb+0xd4>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8004630:	2a00      	cmp	r2, #0
 8004632:	d0a4      	beq.n	800457e <aiOnExecNode_cb+0xf6>
 8004634:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8004638:	f1bc 0f00 	cmp.w	ip, #0
 800463c:	d09f      	beq.n	800457e <aiOnExecNode_cb+0xf6>
 800463e:	8852      	ldrh	r2, [r2, #2]
 8004640:	2a00      	cmp	r2, #0
 8004642:	d09c      	beq.n	800457e <aiOnExecNode_cb+0xf6>
 8004644:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004648:	7815      	ldrb	r5, [r2, #0]
 800464a:	e798      	b.n	800457e <aiOnExecNode_cb+0xf6>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 800464c:	4615      	mov	r5, r2
 800464e:	e796      	b.n	800457e <aiOnExecNode_cb+0xf6>
 8004650:	00000000 	.word	0x00000000

08004654 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8004654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004656:	4604      	mov	r4, r0
  struct ai_network_exec_ctx *cur = NULL;

  if (!nn_name)
    return NULL;

  if (!nn_name[0]) {
 8004658:	7800      	ldrb	r0, [r0, #0]
 800465a:	b930      	cbnz	r0, 800466a <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 800465c:	b921      	cbnz	r1, 8004668 <aiExecCtx+0x14>
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <aiExecCtx+0x4c>)
 8004660:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8004662:	2800      	cmp	r0, #0
 8004664:	bf18      	it	ne
 8004666:	4618      	movne	r0, r3
      }
      cur = NULL;
    }
  }
  return cur;
}
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 800466a:	4e0d      	ldr	r6, [pc, #52]	; (80046a0 <aiExecCtx+0x4c>)
 800466c:	6830      	ldr	r0, [r6, #0]
 800466e:	2800      	cmp	r0, #0
 8004670:	d0fa      	beq.n	8004668 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8004672:	6877      	ldr	r7, [r6, #4]
 8004674:	4638      	mov	r0, r7
 8004676:	f7fb fdc3 	bl	8000200 <strlen>
 800467a:	4605      	mov	r5, r0
 800467c:	4620      	mov	r0, r4
 800467e:	f7fb fdbf 	bl	8000200 <strlen>
      if (cur->handle &&
 8004682:	4285      	cmp	r5, r0
 8004684:	d109      	bne.n	800469a <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8004686:	462a      	mov	r2, r5
 8004688:	4621      	mov	r1, r4
 800468a:	4638      	mov	r0, r7
 800468c:	f005 ffb0 	bl	800a5f0 <strncmp>
      cur = &net_exec_ctx[pos];
 8004690:	2800      	cmp	r0, #0
 8004692:	bf0c      	ite	eq
 8004694:	4630      	moveq	r0, r6
 8004696:	2000      	movne	r0, #0
 8004698:	e7e6      	b.n	8004668 <aiExecCtx+0x14>
 800469a:	2000      	movs	r0, #0
 800469c:	e7e4      	b.n	8004668 <aiExecCtx+0x14>
 800469e:	bf00      	nop
 80046a0:	20000b30 	.word	0x20000b30

080046a4 <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80046a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	460d      	mov	r5, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 80046aa:	300c      	adds	r0, #12
 80046ac:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80046b0:	f7ff ffd0 	bl	8004654 <aiExecCtx>
  if (ctx)
 80046b4:	b140      	cbz	r0, 80046c8 <aiPbCmdNNInfo+0x24>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 80046b6:	1d03      	adds	r3, r0, #4
 80046b8:	2200      	movs	r2, #0
 80046ba:	4629      	mov	r1, r5
 80046bc:	4620      	mov	r0, r4
        &ctx->report);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 80046be:	b003      	add	sp, #12
 80046c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 80046c4:	f7ff ba78 	b.w	8003bb8 <aiPbMgrSendNNInfo>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80046c8:	2304      	movs	r3, #4
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	4629      	mov	r1, r5
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff f96f 	bl	80039b4 <aiPbMgrSendAck>
}
 80046d6:	b003      	add	sp, #12
 80046d8:	bd30      	pop	{r4, r5, pc}
	...

080046dc <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	ed2d 8b02 	vpush	{d8}
 80046e4:	4606      	mov	r6, r0
 80046e6:	b0a5      	sub	sp, #148	; 0x94
 80046e8:	460d      	mov	r5, r1
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 80046ea:	300c      	adds	r0, #12
 80046ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046f0:	f7ff ffb0 	bl	8004654 <aiExecCtx>
  if (!ctx) {
 80046f4:	4604      	mov	r4, r0
 80046f6:	b958      	cbnz	r0, 8004710 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80046f8:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4629      	mov	r1, r5
 8004700:	4630      	mov	r0, r6
 8004702:	f7ff f957 	bl	80039b4 <aiPbMgrSendAck>
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
  }

  aiObserverUnbind(ctx);
}
 8004706:	b025      	add	sp, #148	; 0x94
 8004708:	ecbd 8b02 	vpop	{d8}
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aiObserverConfig(ctx, req);
 8004710:	68b2      	ldr	r2, [r6, #8]
  net_obs_ctx.no_data = false;
 8004712:	4b80      	ldr	r3, [pc, #512]	; (8004914 <aiPbCmdNNRun+0x238>)
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004714:	f8df b210 	ldr.w	fp, [pc, #528]	; 8004928 <aiPbCmdNNRun+0x24c>
  ctx->obs_ctx = &net_obs_ctx;
 8004718:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  net_obs_ctx.no_data = false;
 800471c:	2100      	movs	r1, #0
 800471e:	7519      	strb	r1, [r3, #20]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8004720:	f012 0101 	ands.w	r1, r2, #1
    net_obs_ctx.is_enabled = true;
 8004724:	bf18      	it	ne
 8004726:	2101      	movne	r1, #1
 8004728:	7019      	strb	r1, [r3, #0]
  net_obs_ctx.tcom = 0ULL;
 800472a:	2000      	movs	r0, #0
 800472c:	2100      	movs	r1, #0
  net_obs_ctx.n_cb_in  = 0;
 800472e:	2700      	movs	r7, #0
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8004730:	0792      	lsls	r2, r2, #30
  net_obs_ctx.tcom = 0ULL;
 8004732:	e9c3 0106 	strd	r0, r1, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8004736:	e9c3 0108 	strd	r0, r1, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 800473a:	e9c3 7701 	strd	r7, r7, [r3, #4]
    net_obs_ctx.is_enabled = true;
 800473e:	bf42      	ittt	mi
 8004740:	2201      	movmi	r2, #1
 8004742:	701a      	strbmi	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 8004744:	751a      	strbmi	r2, [r3, #20]
return 0;
 8004746:	f10d 0820 	add.w	r8, sp, #32
    ai_input[i] = ctx->report.inputs[i];
 800474a:	f04f 0a1c 	mov.w	sl, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800474e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004750:	42bb      	cmp	r3, r7
 8004752:	dc42      	bgt.n	80047da <aiPbCmdNNRun+0xfe>
 8004754:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 8004758:	46c1      	mov	r9, r8
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800475a:	f04f 0e00 	mov.w	lr, #0
    ai_output[i] = ctx->report.outputs[i];
 800475e:	f04f 0b1c 	mov.w	fp, #28
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004762:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004764:	4573      	cmp	r3, lr
 8004766:	dc50      	bgt.n	800480a <aiPbCmdNNRun+0x12e>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004768:	a808      	add	r0, sp, #32
 800476a:	f7ff f943 	bl	80039f4 <aiPbAiBufferSize>
 800476e:	2700      	movs	r7, #0
 8004770:	4603      	mov	r3, r0
 8004772:	9700      	str	r7, [sp, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4629      	mov	r1, r5
 8004778:	4630      	mov	r0, r6
 800477a:	f7ff f91b 	bl	80039b4 <aiPbMgrSendAck>
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 800477e:	f04f 091c 	mov.w	r9, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004782:	463b      	mov	r3, r7
 8004784:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8004786:	429a      	cmp	r2, r3
 8004788:	dc58      	bgt.n	800483c <aiPbCmdNNRun+0x160>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800478a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 800478e:	783b      	ldrb	r3, [r7, #0]
 8004790:	b18b      	cbz	r3, 80047b6 <aiPbCmdNNRun+0xda>
  if (ctx->handle == AI_HANDLE_NULL)
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	b178      	cbz	r0, 80047b6 <aiPbCmdNNRun+0xda>
  ai_mnetwork_get_private_handle(ctx->handle,
 8004796:	a907      	add	r1, sp, #28
  obs_ctx->cresp = cresp;
 8004798:	e9c7 6503 	strd	r6, r5, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 800479c:	aa16      	add	r2, sp, #88	; 0x58
 800479e:	f000 fa93 	bl	8004cc8 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80047a2:	4b5d      	ldr	r3, [pc, #372]	; (8004918 <aiPbCmdNNRun+0x23c>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80047a4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80047a8:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80047aa:	9807      	ldr	r0, [sp, #28]
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80047ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80047b2:	f003 fba3 	bl	8007efc <ai_platform_observer_register_s>
  cyclesCounterStart();
 80047b6:	f7ff fe33 	bl	8004420 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	aa0f      	add	r2, sp, #60	; 0x3c
 80047be:	a908      	add	r1, sp, #32
 80047c0:	f000 fa71 	bl	8004ca6 <ai_mnetwork_run>
  if (batch != 1) {
 80047c4:	2801      	cmp	r0, #1
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80047c6:	4682      	mov	sl, r0
  if (batch != 1) {
 80047c8:	d049      	beq.n	800485e <aiPbCmdNNRun+0x182>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	f000 fa3f 	bl	8004c4e <ai_mnetwork_get_error>
 80047d0:	4952      	ldr	r1, [pc, #328]	; (800491c <aiPbCmdNNRun+0x240>)
 80047d2:	f7ff fabf 	bl	8003d54 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80047d6:	230a      	movs	r3, #10
 80047d8:	e78f      	b.n	80046fa <aiPbCmdNNRun+0x1e>
    ai_input[i] = ctx->report.inputs[i];
 80047da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047dc:	fb0a 3907 	mla	r9, sl, r7, r3
 80047e0:	46ce      	mov	lr, r9
 80047e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80047e6:	46c4      	mov	ip, r8
 80047e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80047ec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 80047f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ai_input[i] = ctx->report.inputs[i];
 80047f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 80047f8:	b90b      	cbnz	r3, 80047fe <aiPbCmdNNRun+0x122>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80047fa:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80047fe:	f8c8 3004 	str.w	r3, [r8, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004802:	3701      	adds	r7, #1
 8004804:	f108 081c 	add.w	r8, r8, #28
 8004808:	e7a1      	b.n	800474e <aiPbCmdNNRun+0x72>
    ai_output[i] = ctx->report.outputs[i];
 800480a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800480c:	fb0b 3a0e 	mla	sl, fp, lr, r3
 8004810:	46d4      	mov	ip, sl
 8004812:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004816:	464f      	mov	r7, r9
 8004818:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800481a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 800481e:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = ctx->report.outputs[i];
 8004822:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 8004826:	b913      	cbnz	r3, 800482e <aiPbCmdNNRun+0x152>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004828:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <aiPbCmdNNRun+0x244>)
 800482a:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 800482e:	f8c9 3004 	str.w	r3, [r9, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004832:	f10e 0e01 	add.w	lr, lr, #1
 8004836:	f109 091c 	add.w	r9, r9, #28
 800483a:	e792      	b.n	8004762 <aiPbCmdNNRun+0x86>
    if ((i + 1) == ctx->report.n_inputs)
 800483c:	1c5f      	adds	r7, r3, #1
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 800483e:	a908      	add	r1, sp, #32
 8004840:	fb09 1303 	mla	r3, r9, r3, r1
 8004844:	42ba      	cmp	r2, r7
 8004846:	bf0c      	ite	eq
 8004848:	2202      	moveq	r2, #2
 800484a:	2201      	movne	r2, #1
 800484c:	4629      	mov	r1, r5
 800484e:	4630      	mov	r0, r6
 8004850:	f7ff f8d4 	bl	80039fc <aiPbMgrReceiveAiBuffer3>
    if (res != true)
 8004854:	2800      	cmp	r0, #0
 8004856:	f43f af56 	beq.w	8004706 <aiPbCmdNNRun+0x2a>
 800485a:	463b      	mov	r3, r7
 800485c:	e792      	b.n	8004784 <aiPbCmdNNRun+0xa8>
  tend = cyclesCounterEnd();
 800485e:	f7ff fdef 	bl	8004440 <cyclesCounterEnd>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004862:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8004866:	e9d2 3706 	ldrd	r3, r7, [r2, #24]
 800486a:	e9d2 c208 	ldrd	ip, r2, [r2, #32]
 800486e:	eb13 030c 	adds.w	r3, r3, ip
 8004872:	eb47 0202 	adc.w	r2, r7, r2
 8004876:	181f      	adds	r7, r3, r0
 8004878:	eb42 0901 	adc.w	r9, r2, r1
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800487c:	4638      	mov	r0, r7
 800487e:	4649      	mov	r1, r9
 8004880:	f7ff fce8 	bl	8004254 <dwtCyclesToFloatMs>
  if (obs_ctx->is_enabled == false)
 8004884:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	b183      	cbz	r3, 80048ae <aiPbCmdNNRun+0x1d2>
  resp->which_payload = respMsg_report_tag;
 800488c:	2315      	movs	r3, #21
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 800488e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  resp->which_payload = respMsg_report_tag;
 8004890:	80eb      	strh	r3, [r5, #6]
  resp->payload.report.id = 0;
 8004892:	2300      	movs	r3, #0
  resp->payload.report.num_inferences = 1;
 8004894:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  resp->payload.report.id = 0;
 8004898:	60ab      	str	r3, [r5, #8]
  resp->payload.report.elapsed_ms = dur_ms;
 800489a:	ed85 0a06 	vstr	s0, [r5, #24]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 800489e:	616a      	str	r2, [r5, #20]
  aiPbMgrSendResp(req, resp, state);
 80048a0:	4629      	mov	r1, r5
 80048a2:	2202      	movs	r2, #2
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff f831 	bl	800390c <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 80048aa:	f7ff f88d 	bl	80039c8 <aiPbMgrWaitAck>
      state = EnumState_S_DONE;
 80048ae:	f04f 0a00 	mov.w	sl, #0
    aiPbMgrSendAiBuffer4(req, resp, state,
 80048b2:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8004924 <aiPbCmdNNRun+0x248>
 80048b6:	46d3      	mov	fp, sl
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80048b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80048ba:	4552      	cmp	r2, sl
 80048bc:	dc10      	bgt.n	80048e0 <aiPbCmdNNRun+0x204>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80048be:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 80048c2:	782b      	ldrb	r3, [r5, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f43f af1e 	beq.w	8004706 <aiPbCmdNNRun+0x2a>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80048ca:	a907      	add	r1, sp, #28
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	aa16      	add	r2, sp, #88	; 0x58
 80048d0:	f000 f9fa 	bl	8004cc8 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80048d4:	9807      	ldr	r0, [sp, #28]
 80048d6:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80048da:	f003 fbaf 	bl	800803c <ai_platform_observer_unregister_s>
  return 0;
 80048de:	e712      	b.n	8004706 <aiPbCmdNNRun+0x2a>
    if ((i + 1) == ctx->report.n_outputs)
 80048e0:	f10a 0a01 	add.w	sl, sl, #1
      state = EnumState_S_DONE;
 80048e4:	4592      	cmp	sl, r2
 80048e6:	bf14      	ite	ne
 80048e8:	2202      	movne	r2, #2
 80048ea:	2203      	moveq	r2, #3
    aiPbMgrSendAiBuffer4(req, resp, state,
 80048ec:	4638      	mov	r0, r7
 80048ee:	4649      	mov	r1, r9
      state = EnumState_S_DONE;
 80048f0:	9205      	str	r2, [sp, #20]
    aiPbMgrSendAiBuffer4(req, resp, state,
 80048f2:	f7ff fcaf 	bl	8004254 <dwtCyclesToFloatMs>
 80048f6:	e9cd 8b01 	strd	r8, fp, [sp, #4]
 80048fa:	9a05      	ldr	r2, [sp, #20]
 80048fc:	f8cd b000 	str.w	fp, [sp]
 8004900:	eef0 0a48 	vmov.f32	s1, s16
 8004904:	2300      	movs	r3, #0
 8004906:	4629      	mov	r1, r5
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff f8b3 	bl	8003a74 <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800490e:	f108 081c 	add.w	r8, r8, #28
 8004912:	e7d1      	b.n	80048b8 <aiPbCmdNNRun+0x1dc>
 8004914:	20000bb8 	.word	0x20000bb8
 8004918:	08004489 	.word	0x08004489
 800491c:	0800c9e3 	.word	0x0800c9e3
 8004920:	20000054 	.word	0x20000054
 8004924:	00000000 	.word	0x00000000
 8004928:	20000050 	.word	0x20000050

0800492c <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 800492c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 800492e:	4c1f      	ldr	r4, [pc, #124]	; (80049ac <aiValidationInit+0x80>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004930:	4e1f      	ldr	r6, [pc, #124]	; (80049b0 <aiValidationInit+0x84>)
 8004932:	f104 0010 	add.w	r0, r4, #16
 8004936:	f7ff fc17 	bl	8004168 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800493a:	2300      	movs	r3, #0
 800493c:	2206      	movs	r2, #6
 800493e:	f104 0116 	add.w	r1, r4, #22
 8004942:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8004946:	f7ff fc0f 	bl	8004168 <lc_print>
 800494a:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 800494c:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8004950:	f7ff fc0a 	bl	8004168 <lc_print>

  systemSettingLog();
 8004954:	f7ff fca2 	bl	800429c <systemSettingLog>
  dwtIpInit();
 8004958:	f7ff fd4e 	bl	80043f8 <dwtIpInit>
  HAL_Delay(100);
 800495c:	2064      	movs	r0, #100	; 0x64
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800495e:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 8004960:	f7fd f838 	bl	80019d4 <HAL_Delay>
  return DWT->CYCCNT;
 8004964:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8004966:	466a      	mov	r2, sp
 8004968:	2664      	movs	r6, #100	; 0x64
 800496a:	4629      	mov	r1, r5
 800496c:	fbb0 f0f6 	udiv	r0, r0, r6
 8004970:	f7ff fc34 	bl	80041dc <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 8004974:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8004978:	9a03      	ldr	r2, [sp, #12]
 800497a:	fb06 3101 	mla	r1, r6, r1, r3
 800497e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8004982:	f7ff fbf1 	bl	8004168 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8004986:	466a      	mov	r2, sp
 8004988:	2100      	movs	r1, #0
 800498a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498e:	f7ff fc25 	bl	80041dc <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8004992:	9a01      	ldr	r2, [sp, #4]
 8004994:	9b02      	ldr	r3, [sp, #8]
 8004996:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800499a:	fb01 3302 	mla	r3, r1, r2, r3
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <aiValidationInit+0x88>)
 80049a0:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 80049a2:	f7ff fd29 	bl	80043f8 <dwtIpInit>

  cyclesCounterInit();

  return 0;
}
 80049a6:	4628      	mov	r0, r5
 80049a8:	b004      	add	sp, #16
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	0800c9e3 	.word	0x0800c9e3
 80049b0:	e0001000 	.word	0xe0001000
 80049b4:	20000b04 	.word	0x20000b04

080049b8 <aiValidationProcess>:

int aiValidationProcess(void)
{
 80049b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80049bc:	4c50      	ldr	r4, [pc, #320]	; (8004b00 <aiValidationProcess+0x148>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80049be:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8004b34 <aiValidationProcess+0x17c>
  aiPlatformVersion();
 80049c2:	f7ff f9b7 	bl	8003d34 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80049c6:	2700      	movs	r7, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 80049c8:	484e      	ldr	r0, [pc, #312]	; (8004b04 <aiValidationProcess+0x14c>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80049ca:	f844 7b04 	str.w	r7, [r4], #4
  LC_PRINT("Discovering the network(s)...\r\n");
 80049ce:	f7ff fbcb 	bl	8004168 <lc_print>
  int res = -1;
 80049d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80049d6:	f108 0917 	add.w	r9, r8, #23
  LC_PRINT("Initializing the network\r\n");
 80049da:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 80049de:	4639      	mov	r1, r7
 80049e0:	2000      	movs	r0, #0
 80049e2:	f000 f8d5 	bl	8004b90 <ai_mnetwork_find>
    if (nn_name) {
 80049e6:	4606      	mov	r6, r0
 80049e8:	b1a8      	cbz	r0, 8004a16 <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80049ea:	4601      	mov	r1, r0
 80049ec:	4640      	mov	r0, r8
 80049ee:	f7ff fbbb 	bl	8004168 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80049f2:	4631      	mov	r1, r6
 80049f4:	4648      	mov	r0, r9
 80049f6:	f7ff fbb7 	bl	8004168 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80049fa:	2200      	movs	r2, #0
 80049fc:	1f21      	subs	r1, r4, #4
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 f8d4 	bl	8004bac <ai_mnetwork_create>
  if (err.type) {
 8004a04:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8004a08:	d016      	beq.n	8004a38 <aiValidationProcess+0x80>
    aiLogErr(err, "ai_mnetwork_create");
 8004a0a:	493f      	ldr	r1, [pc, #252]	; (8004b08 <aiValidationProcess+0x150>)
 8004a0c:	f7ff f9a2 	bl	8003d54 <aiLogErr>
        nn_name = NULL;
 8004a10:	2600      	movs	r6, #0
    return -1;
 8004a12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    idx++;
 8004a16:	3701      	adds	r7, #1
  } while (nn_name);
 8004a18:	3484      	adds	r4, #132	; 0x84
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d1df      	bne.n	80049de <aiValidationProcess+0x26>
  int r;

  r = aiInit();
  if (r) {
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	d04a      	beq.n	8004ab8 <aiValidationProcess+0x100>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8004a22:	483a      	ldr	r0, [pc, #232]	; (8004b0c <aiValidationProcess+0x154>)
 8004a24:	4629      	mov	r1, r5
 8004a26:	f7ff fb9f 	bl	8004168 <lc_print>
    HAL_Delay(2000);
 8004a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a2e:	f7fc ffd1 	bl	80019d4 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8004a38:	4650      	mov	r0, sl
 8004a3a:	f7ff fb95 	bl	8004168 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004a3e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004a42:	4621      	mov	r1, r4
 8004a44:	f000 f8f8 	bl	8004c38 <ai_mnetwork_get_report>
 8004a48:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8004a4a:	f854 0c04 	ldr.w	r0, [r4, #-4]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8004a4e:	f1bb 0f00 	cmp.w	fp, #0
 8004a52:	d10e      	bne.n	8004a72 <aiValidationProcess+0xba>
    err = ai_mnetwork_get_error(ctx->handle);
 8004a54:	f000 f8fb 	bl	8004c4e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8004a58:	492d      	ldr	r1, [pc, #180]	; (8004b10 <aiValidationProcess+0x158>)
 8004a5a:	f7ff f97b 	bl	8003d54 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8004a5e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004a62:	f000 f8d1 	bl	8004c08 <ai_mnetwork_destroy>
        nn_name = NULL;
 8004a66:	465e      	mov	r6, fp
    ctx->handle = AI_HANDLE_NULL;
 8004a68:	f844 bc04 	str.w	fp, [r4, #-4]
    return -2;
 8004a6c:	f06f 0501 	mvn.w	r5, #1
 8004a70:	e7d1      	b.n	8004a16 <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 8004a72:	f000 f8f9 	bl	8004c68 <ai_mnetwork_init>
 8004a76:	4683      	mov	fp, r0
 8004a78:	b980      	cbnz	r0, 8004a9c <aiValidationProcess+0xe4>
    err = ai_mnetwork_get_error(ctx->handle);
 8004a7a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004a7e:	f000 f8e6 	bl	8004c4e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8004a82:	4924      	ldr	r1, [pc, #144]	; (8004b14 <aiValidationProcess+0x15c>)
 8004a84:	f7ff f966 	bl	8003d54 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8004a88:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004a8c:	f000 f8bc 	bl	8004c08 <ai_mnetwork_destroy>
        nn_name = NULL;
 8004a90:	465e      	mov	r6, fp
    ctx->handle = AI_HANDLE_NULL;
 8004a92:	f844 bc04 	str.w	fp, [r4, #-4]
    return -4;
 8004a96:	f06f 0503 	mvn.w	r5, #3
 8004a9a:	e7bc      	b.n	8004a16 <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 8004a9c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	f000 f8c9 	bl	8004c38 <ai_mnetwork_get_report>
 8004aa6:	4683      	mov	fp, r0
 8004aa8:	b118      	cbz	r0, 8004ab2 <aiValidationProcess+0xfa>
    aiPrintNetworkInfo(&ctx->report);
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff fa44 	bl	8003f38 <aiPrintNetworkInfo>
      if (res)
 8004ab0:	e7b1      	b.n	8004a16 <aiValidationProcess+0x5e>
    err = ai_mnetwork_get_error(ctx->handle);
 8004ab2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004ab6:	e7cd      	b.n	8004a54 <aiValidationProcess+0x9c>
    LC_PRINT("\r\n");
 8004ab8:	4817      	ldr	r0, [pc, #92]	; (8004b18 <aiValidationProcess+0x160>)
 8004aba:	f7ff fb55 	bl	8004168 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004abe:	4817      	ldr	r0, [pc, #92]	; (8004b1c <aiValidationProcess+0x164>)
 8004ac0:	f7ff fb52 	bl	8004168 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8004ac4:	4816      	ldr	r0, [pc, #88]	; (8004b20 <aiValidationProcess+0x168>)
 8004ac6:	f7ff fb4f 	bl	8004168 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004aca:	4814      	ldr	r0, [pc, #80]	; (8004b1c <aiValidationProcess+0x164>)
 8004acc:	f7ff fb4c 	bl	8004168 <lc_print>
    LC_PRINT("\r\n");
 8004ad0:	4811      	ldr	r0, [pc, #68]	; (8004b18 <aiValidationProcess+0x160>)
 8004ad2:	f7ff fb49 	bl	8004168 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8004ad6:	4813      	ldr	r0, [pc, #76]	; (8004b24 <aiValidationProcess+0x16c>)
 8004ad8:	f7ff fb46 	bl	8004168 <lc_print>
    LC_PRINT("# and a stm32com-base interface should be used\r\n");
 8004adc:	4812      	ldr	r0, [pc, #72]	; (8004b28 <aiValidationProcess+0x170>)
 8004ade:	f7ff fb43 	bl	8004168 <lc_print>
    LC_PRINT("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	4811      	ldr	r0, [pc, #68]	; (8004b2c <aiValidationProcess+0x174>)
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	f7ff fb3e 	bl	8004168 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8004aec:	4810      	ldr	r0, [pc, #64]	; (8004b30 <aiValidationProcess+0x178>)
 8004aee:	f7fe fed3 	bl	8003898 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8004af2:	f7fe ff1d 	bl	8003930 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8004af6:	4605      	mov	r5, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d0fa      	beq.n	8004af2 <aiValidationProcess+0x13a>
 8004afc:	e799      	b.n	8004a32 <aiValidationProcess+0x7a>
 8004afe:	bf00      	nop
 8004b00:	20000b30 	.word	0x20000b30
 8004b04:	0800ca63 	.word	0x0800ca63
 8004b08:	0800cab8 	.word	0x0800cab8
 8004b0c:	0800cb0c 	.word	0x0800cb0c
 8004b10:	0800cae6 	.word	0x0800cae6
 8004b14:	0800cafb 	.word	0x0800cafb
 8004b18:	0800cb22 	.word	0x0800cb22
 8004b1c:	0800cb25 	.word	0x0800cb25
 8004b20:	0800cb53 	.word	0x0800cb53
 8004b24:	0800cb81 	.word	0x0800cb81
 8004b28:	0800cbc7 	.word	0x0800cbc7
 8004b2c:	0800cbf8 	.word	0x0800cbf8
 8004b30:	20000010 	.word	0x20000010
 8004b34:	0800ca83 	.word	0x0800ca83

08004b38 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <ai_mnetwork_handle+0x18>)
 8004b3a:	b120      	cbz	r0, 8004b46 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	bf0c      	ite	eq
 8004b40:	4618      	moveq	r0, r3
 8004b42:	2000      	movne	r0, #0
 8004b44:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004b46:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	bf08      	it	eq
 8004b4c:	4618      	moveq	r0, r3
}
 8004b4e:	4770      	bx	lr
 8004b50:	20002238 	.word	0x20002238

08004b54 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004b54:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004b56:	4604      	mov	r4, r0
 8004b58:	b160      	cbz	r0, 8004b74 <ai_mnetwork_is_valid.constprop.0+0x20>
 8004b5a:	f7fb fb51 	bl	8000200 <strlen>
 8004b5e:	2807      	cmp	r0, #7
 8004b60:	4602      	mov	r2, r0
 8004b62:	d107      	bne.n	8004b74 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8004b64:	4804      	ldr	r0, [pc, #16]	; (8004b78 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8004b66:	4621      	mov	r1, r4
 8004b68:	f005 fd42 	bl	800a5f0 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004b6c:	fab0 f080 	clz	r0, r0
 8004b70:	0940      	lsrs	r0, r0, #5
}
 8004b72:	bd10      	pop	{r4, pc}
    return false;
 8004b74:	2000      	movs	r0, #0
 8004b76:	e7fc      	b.n	8004b72 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8004b78:	0800cd1c 	.word	0x0800cd1c

08004b7c <MX_X_CUBE_AI_Init>:
{
 8004b7c:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8004b7e:	f7fc fdab 	bl	80016d8 <MX_USART2_UART_Init>
}
 8004b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8004b86:	f7ff bed1 	b.w	800492c <aiValidationInit>

08004b8a <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8004b8a:	f7ff bf15 	b.w	80049b8 <aiValidationProcess>
	...

08004b90 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8004b90:	b510      	push	{r4, lr}
 8004b92:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8004b94:	f7ff ffde 	bl	8004b54 <ai_mnetwork_is_valid.constprop.0>
 8004b98:	b920      	cbnz	r0, 8004ba4 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8004b9a:	2c00      	cmp	r4, #0
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <ai_mnetwork_find+0x18>)
 8004b9e:	bf18      	it	ne
 8004ba0:	2000      	movne	r0, #0
}
 8004ba2:	bd10      	pop	{r4, pc}
            return entry->name;
 8004ba4:	4800      	ldr	r0, [pc, #0]	; (8004ba8 <ai_mnetwork_find+0x18>)
 8004ba6:	e7fc      	b.n	8004ba2 <ai_mnetwork_find+0x12>
 8004ba8:	0800cd1c 	.word	0x0800cd1c

08004bac <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8004bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bae:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004bb0:	2000      	movs	r0, #0
{
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004bb6:	f7ff ffbf 	bl	8004b38 <ai_mnetwork_handle>

    if (!inst) {
 8004bba:	4604      	mov	r4, r0
 8004bbc:	b930      	cbnz	r0, 8004bcc <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8004bbe:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8004bc6:	f241 0014 	movw	r0, #4116	; 0x1014
 8004bca:	e7fa      	b.n	8004bc2 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8004bcc:	4630      	mov	r0, r6
 8004bce:	9101      	str	r1, [sp, #4]
 8004bd0:	f7ff ffc0 	bl	8004b54 <ai_mnetwork_is_valid.constprop.0>
 8004bd4:	9901      	ldr	r1, [sp, #4]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0f5      	beq.n	8004bc6 <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fb8a 	bl	80052f4 <ai_network_create>
 8004be0:	b2c2      	uxtb	r2, r0
 8004be2:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8004be6:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8004bea:	d104      	bne.n	8004bf6 <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8004bec:	4905      	ldr	r1, [pc, #20]	; (8004c04 <ai_mnetwork_create+0x58>)
 8004bee:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8004bf0:	6829      	ldr	r1, [r5, #0]
 8004bf2:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8004bf4:	602c      	str	r4, [r5, #0]
    return err;
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f362 0007 	bfi	r0, r2, #0, #8
 8004bfc:	f363 201f 	bfi	r0, r3, #8, #24
 8004c00:	e7df      	b.n	8004bc2 <ai_mnetwork_create+0x16>
 8004c02:	bf00      	nop
 8004c04:	0800cd24 	.word	0x0800cd24

08004c08 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004c0c:	f7ff ff94 	bl	8004b38 <ai_mnetwork_handle>
    if (inn) {
 8004c10:	4605      	mov	r5, r0
 8004c12:	b160      	cbz	r0, 8004c2e <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004c14:	6803      	ldr	r3, [r0, #0]
 8004c16:	6840      	ldr	r0, [r0, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004c1c:	686b      	ldr	r3, [r5, #4]
 8004c1e:	4283      	cmp	r3, r0
 8004c20:	d005      	beq.n	8004c2e <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <ai_mnetwork_destroy+0x2c>)
 8004c24:	429d      	cmp	r5, r3
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	d100      	bne.n	8004c2e <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8004c2c:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8004c2e:	4620      	mov	r0, r4
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	bf00      	nop
 8004c34:	20002238 	.word	0x20002238

08004c38 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004c38:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004c3a:	f7ff ff7d 	bl	8004b38 <ai_mnetwork_handle>
    if (inn)
 8004c3e:	b128      	cbz	r0, 8004c4c <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8004c40:	6802      	ldr	r2, [r0, #0]
 8004c42:	6840      	ldr	r0, [r0, #4]
 8004c44:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8004c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004c4a:	4710      	bx	r2
}
 8004c4c:	bd10      	pop	{r4, pc}

08004c4e <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004c4e:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004c50:	f7ff ff72 	bl	8004b38 <ai_mnetwork_handle>
    if (inn)
 8004c54:	b128      	cbz	r0, 8004c62 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8004c56:	6803      	ldr	r3, [r0, #0]
 8004c58:	6840      	ldr	r0, [r0, #4]
 8004c5a:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004c60:	4718      	bx	r3
}
 8004c62:	f241 0014 	movw	r0, #4116	; 0x1014
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004c68:	b530      	push	{r4, r5, lr}
 8004c6a:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004c6c:	f7ff ff64 	bl	8004b38 <ai_mnetwork_handle>
    if (inn) {
 8004c70:	4604      	mov	r4, r0
 8004c72:	b168      	cbz	r0, 8004c90 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8004c74:	6803      	ldr	r3, [r0, #0]
 8004c76:	4668      	mov	r0, sp
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004c82:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004c84:	42aa      	cmp	r2, r5
 8004c86:	dc05      	bgt.n	8004c94 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	6860      	ldr	r0, [r4, #4]
 8004c8c:	4669      	mov	r1, sp
 8004c8e:	4798      	blx	r3
    }
    else
        return false;
}
 8004c90:	b00f      	add	sp, #60	; 0x3c
 8004c92:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	4629      	mov	r1, r5
 8004c98:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004c9c:	a803      	add	r0, sp, #12
 8004c9e:	f001 fd77 	bl	8006790 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	e7eb      	b.n	8004c7e <ai_mnetwork_init+0x16>

08004ca6 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8004ca6:	b513      	push	{r0, r1, r4, lr}
 8004ca8:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004caa:	f7ff ff45 	bl	8004b38 <ai_mnetwork_handle>
    if (inn)
 8004cae:	4603      	mov	r3, r0
 8004cb0:	b140      	cbz	r0, 8004cc4 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8004cb2:	6800      	ldr	r0, [r0, #0]
 8004cb4:	9a01      	ldr	r2, [sp, #4]
 8004cb6:	6a04      	ldr	r4, [r0, #32]
 8004cb8:	6858      	ldr	r0, [r3, #4]
 8004cba:	4623      	mov	r3, r4
    else
        return 0;
}
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8004cc2:	4718      	bx	r3
}
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd10      	pop	{r4, pc}

08004cc8 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004ccc:	f7ff ff34 	bl	8004b38 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004cd0:	b188      	cbz	r0, 8004cf6 <ai_mnetwork_get_private_handle+0x2e>
 8004cd2:	b181      	cbz	r1, 8004cf6 <ai_mnetwork_get_private_handle+0x2e>
 8004cd4:	b17d      	cbz	r5, 8004cf6 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8004cd6:	6843      	ldr	r3, [r0, #4]
 8004cd8:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004cda:	f100 0408 	add.w	r4, r0, #8
 8004cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cee:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004cf2:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	e7fb      	b.n	8004cf4 <ai_mnetwork_get_private_handle+0x2c>

08004cfc <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004d00:	6896      	ldr	r6, [r2, #8]
{
 8004d02:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8004d04:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004d06:	f016 0304 	ands.w	r3, r6, #4
{
 8004d0a:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004d0c:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004d10:	d028      	beq.n	8004d64 <_write_number+0x68>
    if ((int64_t)number < 0) {
 8004d12:	42a9      	cmp	r1, r5
 8004d14:	da07      	bge.n	8004d26 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004d16:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004d18:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004d1a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      number = -number;
 8004d1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8004d22:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 8004d24:	252d      	movs	r5, #45	; 0x2d
 8004d26:	f016 0f08 	tst.w	r6, #8
 8004d2a:	bf14      	ite	ne
 8004d2c:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004d30:	f04f 0861 	moveq.w	r8, #97	; 0x61
 8004d34:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004d38:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004d3a:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004d3e:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8004d42:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004d46:	f1ba 0f00 	cmp.w	sl, #0
 8004d4a:	d032      	beq.n	8004db2 <_write_number+0xb6>
      chr = number & 0x0F;
 8004d4c:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004d50:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004d52:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004d54:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004d58:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004d5c:	d906      	bls.n	8004d6c <_write_number+0x70>
 8004d5e:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e004      	b.n	8004d6e <_write_number+0x72>
  char sign_neg = 0;
 8004d64:	461d      	mov	r5, r3
 8004d66:	e7de      	b.n	8004d26 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004d68:	4617      	mov	r7, r2
 8004d6a:	e7ea      	b.n	8004d42 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004d6c:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004d6e:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8004d72:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004d76:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    count++;
 8004d7a:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004d7e:	d1f3      	bne.n	8004d68 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004d80:	f006 0101 	and.w	r1, r6, #1
 8004d84:	b14d      	cbz	r5, 8004d9a <_write_number+0x9e>
 8004d86:	b941      	cbnz	r1, 8004d9a <_write_number+0x9e>
    buf[idx--] = sign_neg;
 8004d88:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004d8c:	eb0d 0203 	add.w	r2, sp, r3
    count++;
 8004d90:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004d94:	f802 5c40 	strb.w	r5, [r2, #-64]
 8004d98:	1eba      	subs	r2, r7, #2
 8004d9a:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	bf14      	ite	ne
 8004da0:	2130      	movne	r1, #48	; 0x30
 8004da2:	2120      	moveq	r1, #32
 8004da4:	f006 0602 	and.w	r6, r6, #2
 8004da8:	455b      	cmp	r3, fp
 8004daa:	dd13      	ble.n	8004dd4 <_write_number+0xd8>
 8004dac:	b166      	cbz	r6, 8004dc8 <_write_number+0xcc>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004dae:	b9a5      	cbnz	r5, 8004dda <_write_number+0xde>
 8004db0:	e01b      	b.n	8004dea <_write_number+0xee>
      t = number / 10;
 8004db2:	2300      	movs	r3, #0
 8004db4:	220a      	movs	r2, #10
 8004db6:	f7fc f81d 	bl	8000df4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004dba:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004dbe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004dc2:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 8004dc6:	e7cb      	b.n	8004d60 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8004dc8:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004dcc:	f10b 0b01 	add.w	fp, fp, #1
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	e7e9      	b.n	8004da8 <_write_number+0xac>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004dd4:	b14d      	cbz	r5, 8004dea <_write_number+0xee>
 8004dd6:	455b      	cmp	r3, fp
 8004dd8:	d107      	bne.n	8004dea <_write_number+0xee>
    buf[idx--] = sign_neg;
 8004dda:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004dde:	446b      	add	r3, sp
    count++;
 8004de0:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004de4:	f803 5c40 	strb.w	r5, [r3, #-64]
 8004de8:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004dea:	eb0d 0602 	add.w	r6, sp, r2
 8004dee:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004df0:	68e3      	ldr	r3, [r4, #12]
 8004df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004df6:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 8004df8:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004dfa:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8004dfc:	45ab      	cmp	fp, r5
 8004dfe:	d1f7      	bne.n	8004df0 <_write_number+0xf4>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	d408      	bmi.n	8004e18 <_write_number+0x11c>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004e06:	4628      	mov	r0, r5
 8004e08:	b011      	add	sp, #68	; 0x44
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	6920      	ldr	r0, [r4, #16]
 8004e12:	2120      	movs	r1, #32
 8004e14:	4798      	blx	r3
 8004e16:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	42ab      	cmp	r3, r5
 8004e1c:	dcf7      	bgt.n	8004e0e <_write_number+0x112>
 8004e1e:	e7f2      	b.n	8004e06 <_write_number+0x10a>

08004e20 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	ed2d 8b02 	vpush	{d8}
 8004e28:	4683      	mov	fp, r0
 8004e2a:	b09d      	sub	sp, #116	; 0x74
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004e30:	2500      	movs	r5, #0
  return *(*fmtP)++;
 8004e32:	4613      	mov	r3, r2
 8004e34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004e38:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004e3a:	b929      	cbnz	r1, 8004e48 <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	b01d      	add	sp, #116	; 0x74
 8004e40:	ecbd 8b02 	vpop	{d8}
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004e48:	290a      	cmp	r1, #10
 8004e4a:	d103      	bne.n	8004e54 <vlc_print+0x34>
      putc_fct(user, c);
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	47d8      	blx	fp
      count++;
 8004e50:	3501      	adds	r5, #1
 8004e52:	e0c5      	b.n	8004fe0 <vlc_print+0x1c0>
    else if (c == '%')
 8004e54:	2925      	cmp	r1, #37	; 0x25
 8004e56:	d1f9      	bne.n	8004e4c <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004e5e:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
 8004e62:	970b      	str	r7, [sp, #44]	; 0x2c
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4698      	mov	r8, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	469e      	mov	lr, r3
 8004e6c:	4618      	mov	r0, r3
      bool has_precision = false;
 8004e6e:	469c      	mov	ip, r3
 8004e70:	f04f 090a 	mov.w	r9, #10
  return *(*fmtP)++;
 8004e74:	9e04      	ldr	r6, [sp, #16]
 8004e76:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004e7a:	9604      	str	r6, [sp, #16]
        if (!c)
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	f000 81d6 	beq.w	800522e <vlc_print+0x40e>
        else if (c == '0')
 8004e82:	2930      	cmp	r1, #48	; 0x30
 8004e84:	d116      	bne.n	8004eb4 <vlc_print+0x94>
          if (!specifier.width && !specifier.precision) {
 8004e86:	ea50 0102 	orrs.w	r1, r0, r2
 8004e8a:	d107      	bne.n	8004e9c <vlc_print+0x7c>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004e8c:	9b00      	ldr	r3, [sp, #0]
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	460a      	mov	r2, r1
 8004e96:	4608      	mov	r0, r1
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7eb      	b.n	8004e74 <vlc_print+0x54>
          } else if (has_precision) {
 8004e9c:	f1bc 0f00 	cmp.w	ip, #0
 8004ea0:	d003      	beq.n	8004eaa <vlc_print+0x8a>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004ea2:	fb09 f202 	mul.w	r2, r9, r2
 8004ea6:	46e0      	mov	r8, ip
 8004ea8:	e7e4      	b.n	8004e74 <vlc_print+0x54>
            specifier.width = specifier.width * 10 + (c - '0');
 8004eaa:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004eae:	f04f 0e01 	mov.w	lr, #1
 8004eb2:	e7df      	b.n	8004e74 <vlc_print+0x54>
        else if (c == '-')
 8004eb4:	292d      	cmp	r1, #45	; 0x2d
 8004eb6:	d104      	bne.n	8004ec2 <vlc_print+0xa2>
          specifier.flags |= FLAG_NEG_PAD;
 8004eb8:	9b00      	ldr	r3, [sp, #0]
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	e7ea      	b.n	8004e98 <vlc_print+0x78>
        else if (c == '.')
 8004ec2:	292e      	cmp	r1, #46	; 0x2e
 8004ec4:	f000 81c1 	beq.w	800524a <vlc_print+0x42a>
        else if ((c >= '1') && (c <= '9'))
 8004ec8:	f1a1 0631 	sub.w	r6, r1, #49	; 0x31
 8004ecc:	2e08      	cmp	r6, #8
 8004ece:	d809      	bhi.n	8004ee4 <vlc_print+0xc4>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004ed0:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004ed2:	f1bc 0f00 	cmp.w	ip, #0
 8004ed6:	d002      	beq.n	8004ede <vlc_print+0xbe>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004ed8:	fb09 1202 	mla	r2, r9, r2, r1
 8004edc:	e7e3      	b.n	8004ea6 <vlc_print+0x86>
            specifier.width = specifier.width * 10 + (c - '0');
 8004ede:	fb09 1000 	mla	r0, r9, r0, r1
 8004ee2:	e7e4      	b.n	8004eae <vlc_print+0x8e>
        else if (c == 'l')
 8004ee4:	296c      	cmp	r1, #108	; 0x6c
 8004ee6:	d0c5      	beq.n	8004e74 <vlc_print+0x54>
 8004ee8:	f1be 0f00 	cmp.w	lr, #0
 8004eec:	d000      	beq.n	8004ef0 <vlc_print+0xd0>
 8004eee:	9007      	str	r0, [sp, #28]
 8004ef0:	f1b8 0f00 	cmp.w	r8, #0
 8004ef4:	d000      	beq.n	8004ef8 <vlc_print+0xd8>
 8004ef6:	9208      	str	r2, [sp, #32]
 8004ef8:	b10b      	cbz	r3, 8004efe <vlc_print+0xde>
 8004efa:	9b00      	ldr	r3, [sp, #0]
 8004efc:	9309      	str	r3, [sp, #36]	; 0x24
          switch(c)
 8004efe:	2978      	cmp	r1, #120	; 0x78
 8004f00:	d809      	bhi.n	8004f16 <vlc_print+0xf6>
 8004f02:	2962      	cmp	r1, #98	; 0x62
 8004f04:	d813      	bhi.n	8004f2e <vlc_print+0x10e>
 8004f06:	2946      	cmp	r1, #70	; 0x46
 8004f08:	f000 80b1 	beq.w	800506e <vlc_print+0x24e>
 8004f0c:	2958      	cmp	r1, #88	; 0x58
 8004f0e:	f000 808e 	beq.w	800502e <vlc_print+0x20e>
 8004f12:	2925      	cmp	r1, #37	; 0x25
 8004f14:	d09a      	beq.n	8004e4c <vlc_print+0x2c>
        putc_fct(user, '<');
 8004f16:	213c      	movs	r1, #60	; 0x3c
 8004f18:	4638      	mov	r0, r7
 8004f1a:	47d8      	blx	fp
        putc_fct(user, '!');
 8004f1c:	2121      	movs	r1, #33	; 0x21
 8004f1e:	4638      	mov	r0, r7
 8004f20:	47d8      	blx	fp
        putc_fct(user, '>');
 8004f22:	213e      	movs	r1, #62	; 0x3e
 8004f24:	4638      	mov	r0, r7
 8004f26:	47d8      	blx	fp
        va_arg(vl, signed long);
 8004f28:	3404      	adds	r4, #4
        count += 3;
 8004f2a:	3503      	adds	r5, #3
        error = false;
 8004f2c:	e058      	b.n	8004fe0 <vlc_print+0x1c0>
          switch(c)
 8004f2e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8004f32:	2b15      	cmp	r3, #21
 8004f34:	d8ef      	bhi.n	8004f16 <vlc_print+0xf6>
 8004f36:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <vlc_print+0x11c>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f95 	.word	0x08004f95
 8004f40:	0800504f 	.word	0x0800504f
 8004f44:	08004f17 	.word	0x08004f17
 8004f48:	0800506f 	.word	0x0800506f
 8004f4c:	08004f17 	.word	0x08004f17
 8004f50:	08004f17 	.word	0x08004f17
 8004f54:	0800504f 	.word	0x0800504f
 8004f58:	08004f17 	.word	0x08004f17
 8004f5c:	08004f17 	.word	0x08004f17
 8004f60:	08004f17 	.word	0x08004f17
 8004f64:	08004f17 	.word	0x08004f17
 8004f68:	08004f17 	.word	0x08004f17
 8004f6c:	08004f17 	.word	0x08004f17
 8004f70:	08005023 	.word	0x08005023
 8004f74:	08004f17 	.word	0x08004f17
 8004f78:	08004f17 	.word	0x08004f17
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004f17 	.word	0x08004f17
 8004f84:	08005057 	.word	0x08005057
 8004f88:	08004f17 	.word	0x08004f17
 8004f8c:	08004f17 	.word	0x08004f17
 8004f90:	08005037 	.word	0x08005037
            t = (char)va_arg(vl, signed int);
 8004f94:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8004f98:	b2c9      	uxtb	r1, r1
 8004f9a:	e757      	b.n	8004e4c <vlc_print+0x2c>
            if (!str) str = "(null)";
 8004f9c:	4bac      	ldr	r3, [pc, #688]	; (8005250 <vlc_print+0x430>)
            str = va_arg(vl, char*);
 8004f9e:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004fa2:	f1b9 0f00 	cmp.w	r9, #0
 8004fa6:	bf08      	it	eq
 8004fa8:	4699      	moveq	r9, r3
  int len = strlen(str);
 8004faa:	4648      	mov	r0, r9
 8004fac:	f7fb f928 	bl	8000200 <strlen>
  if (specifier->precision) {
 8004fb0:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004fb2:	4680      	mov	r8, r0
  if (specifier->precision) {
 8004fb4:	b113      	cbz	r3, 8004fbc <vlc_print+0x19c>
    len = (len > specifier->precision)?specifier->precision:len;
 8004fb6:	4298      	cmp	r0, r3
 8004fb8:	bfa8      	it	ge
 8004fba:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004fbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004fbe:	f016 0602 	ands.w	r6, r6, #2
 8004fc2:	d014      	beq.n	8004fee <vlc_print+0x1ce>
  int count = 0;
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8004fc8:	ebaa 0309 	sub.w	r3, sl, r9
 8004fcc:	4598      	cmp	r8, r3
 8004fce:	dc14      	bgt.n	8004ffa <vlc_print+0x1da>
  if (specifier->flags & FLAG_NEG_PAD) {
 8004fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd2:	f1b8 0f00 	cmp.w	r8, #0
 8004fd6:	bfa8      	it	ge
 8004fd8:	4446      	addge	r6, r8
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	d41e      	bmi.n	800501c <vlc_print+0x1fc>
            count += _write_string(str, &specifier);
 8004fde:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8004fe0:	9a04      	ldr	r2, [sp, #16]
 8004fe2:	e726      	b.n	8004e32 <vlc_print+0x12>
      _WRITE_C(' ');
 8004fe4:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004fe8:	2120      	movs	r1, #32
 8004fea:	4798      	blx	r3
 8004fec:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8004fee:	9a07      	ldr	r2, [sp, #28]
 8004ff0:	eb08 0306 	add.w	r3, r8, r6
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	dbf5      	blt.n	8004fe4 <vlc_print+0x1c4>
 8004ff8:	e7e5      	b.n	8004fc6 <vlc_print+0x1a6>
    _WRITE_C(*str++);
 8004ffa:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8004ffe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005002:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8005004:	e7e0      	b.n	8004fc8 <vlc_print+0x1a8>
      _WRITE_C(' ');
 8005006:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 800500a:	2120      	movs	r1, #32
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8005010:	9a07      	ldr	r2, [sp, #28]
 8005012:	eb08 0306 	add.w	r3, r8, r6
 8005016:	429a      	cmp	r2, r3
 8005018:	dcf5      	bgt.n	8005006 <vlc_print+0x1e6>
 800501a:	e7e0      	b.n	8004fde <vlc_print+0x1be>
 800501c:	eba8 0806 	sub.w	r8, r8, r6
 8005020:	e7f6      	b.n	8005010 <vlc_print+0x1f0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 800502a:	2308      	movs	r3, #8
 800502c:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 800502e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.flags |= FLAG_HEX;
 8005036:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8005038:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 800503c:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8005040:	aa07      	add	r2, sp, #28
 8005042:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8005044:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8005046:	f7ff fe59 	bl	8004cfc <_write_number>
 800504a:	4405      	add	r5, r0
            break;
 800504c:	e7c8      	b.n	8004fe0 <vlc_print+0x1c0>
            specifier.flags |= FLAG_IS_SIGNED;
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	9309      	str	r3, [sp, #36]	; 0x24
              val = va_arg(vl, unsigned int);
 8005056:	6820      	ldr	r0, [r4, #0]
            if (c == 'u')
 8005058:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 800505a:	bf0c      	ite	eq
 800505c:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 800505e:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8005060:	aa07      	add	r2, sp, #28
 8005062:	f7ff fe4b 	bl	8004cfc <_write_number>
              val = va_arg(vl, unsigned int);
 8005066:	1d26      	adds	r6, r4, #4
            count += _write_number(val, &specifier);
 8005068:	4405      	add	r5, r0
            break;
 800506a:	4634      	mov	r4, r6
 800506c:	e7b8      	b.n	8004fe0 <vlc_print+0x1c0>
            dbl = va_arg(vl, double);
 800506e:	3407      	adds	r4, #7
 8005070:	f024 0407 	bic.w	r4, r4, #7
 8005074:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8005078:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 800507a:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 800507e:	b90b      	cbnz	r3, 8005084 <vlc_print+0x264>
              specifier.precision = 6;
 8005080:	2306      	movs	r3, #6
 8005082:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8005084:	9e08      	ldr	r6, [sp, #32]
 8005086:	2300      	movs	r3, #0
  float mul = 1.0;
 8005088:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    mul *= 10;
 800508c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8005090:	42b3      	cmp	r3, r6
 8005092:	f2c0 80bc 	blt.w	800520e <vlc_print+0x3ee>
  if (is_signed)
 8005096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800509a:	2200      	movs	r2, #0
 800509c:	2300      	movs	r3, #0
 800509e:	f7fb fd35 	bl	8000b0c <__aeabi_dcmplt>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f000 80b7 	beq.w	8005216 <vlc_print+0x3f6>
    number = -number;
 80050a8:	9b00      	ldr	r3, [sp, #0]
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050b2:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 80050b4:	ee18 0a10 	vmov	r0, s16
 80050b8:	f7fb fa5e 	bl	8000578 <__aeabi_f2d>
 80050bc:	4680      	mov	r8, r0
 80050be:	4689      	mov	r9, r1
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	2000      	movs	r0, #0
 80050c6:	4963      	ldr	r1, [pc, #396]	; (8005254 <vlc_print+0x434>)
 80050c8:	f7fb fbd8 	bl	800087c <__aeabi_ddiv>
 80050cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d0:	f7fb f8f4 	bl	80002bc <__adddf3>
  val = (uint64_t)(number * mul);
 80050d4:	464b      	mov	r3, r9
 80050d6:	4642      	mov	r2, r8
 80050d8:	f7fb faa6 	bl	8000628 <__aeabi_dmul>
 80050dc:	f7fb fea2 	bl	8000e24 <__aeabi_d2ulz>
  uint32_t count = 0;
 80050e0:	f04f 0800 	mov.w	r8, #0
  val = (uint64_t)(number * mul);
 80050e4:	4603      	mov	r3, r0
  uint32_t idx = sizeof(buf) - 1;
 80050e6:	f04f 093f 	mov.w	r9, #63	; 0x3f
    uint64_t t = val / 10;
 80050ea:	469a      	mov	sl, r3
 80050ec:	220a      	movs	r2, #10
 80050ee:	2300      	movs	r3, #0
 80050f0:	4650      	mov	r0, sl
 80050f2:	9105      	str	r1, [sp, #20]
 80050f4:	f7fb fe7e 	bl	8000df4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80050f8:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 80050fc:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 80050fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005102:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 8005106:	f109 0c70 	add.w	ip, r9, #112	; 0x70
 800510a:	44ec      	add	ip, sp
 800510c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8005110:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 8005114:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 8005118:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 800511a:	bf01      	itttt	eq
 800511c:	3270      	addeq	r2, #112	; 0x70
 800511e:	446a      	addeq	r2, sp
 8005120:	202e      	moveq	r0, #46	; 0x2e
 8005122:	f802 0c40 	strbeq.w	r0, [r2, #-64]
    buf[idx--] = chr;
 8005126:	bf18      	it	ne
 8005128:	4691      	movne	r9, r2
  } while (val);
 800512a:	9a05      	ldr	r2, [sp, #20]
      buf[idx--] = '.';
 800512c:	bf06      	itte	eq
 800512e:	f1a9 0902 	subeq.w	r9, r9, #2
      count++;
 8005132:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8005136:	4680      	movne	r8, r0
  } while (val);
 8005138:	f1ba 0f0a 	cmp.w	sl, #10
 800513c:	f172 0200 	sbcs.w	r2, r2, #0
 8005140:	d2d3      	bcs.n	80050ea <vlc_print+0x2ca>
    buf[idx--] = '0';
 8005142:	45b0      	cmp	r8, r6
 8005144:	f1c6 0001 	rsb	r0, r6, #1
 8005148:	4440      	add	r0, r8
 800514a:	f04f 0130 	mov.w	r1, #48	; 0x30
 800514e:	bf88      	it	hi
 8005150:	2001      	movhi	r0, #1
 8005152:	eba6 0a08 	sub.w	sl, r6, r8
 8005156:	eb0d 0301 	add.w	r3, sp, r1
 800515a:	bf88      	it	hi
 800515c:	f04f 0a00 	movhi.w	sl, #0
 8005160:	4448      	add	r0, r9
 8005162:	4418      	add	r0, r3
 8005164:	4652      	mov	r2, sl
 8005166:	f004 fce1 	bl	8009b2c <memset>
 800516a:	eba8 0306 	sub.w	r3, r8, r6
 800516e:	45b0      	cmp	r8, r6
 8005170:	bf88      	it	hi
 8005172:	2300      	movhi	r3, #0
 8005174:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 8005176:	4546      	cmp	r6, r8
 8005178:	4499      	add	r9, r3
 800517a:	f106 0601 	add.w	r6, r6, #1
 800517e:	d108      	bne.n	8005192 <vlc_print+0x372>
    buf[idx--] = '.';
 8005180:	f109 0370 	add.w	r3, r9, #112	; 0x70
 8005184:	446b      	add	r3, sp
 8005186:	222e      	movs	r2, #46	; 0x2e
 8005188:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 800518c:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 800518e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  if (count == specifier->precision + 1)
 8005192:	4546      	cmp	r6, r8
 8005194:	d109      	bne.n	80051aa <vlc_print+0x38a>
    buf[idx--] = '0';
 8005196:	f109 0370 	add.w	r3, r9, #112	; 0x70
 800519a:	446b      	add	r3, sp
 800519c:	2230      	movs	r2, #48	; 0x30
 800519e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80051a2:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 80051a6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  if (is_signed) {
 80051aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2300      	movs	r3, #0
 80051b2:	f7fb fcab 	bl	8000b0c <__aeabi_dcmplt>
 80051b6:	b148      	cbz	r0, 80051cc <vlc_print+0x3ac>
    buf[idx--] = '-';
 80051b8:	f109 0370 	add.w	r3, r9, #112	; 0x70
 80051bc:	446b      	add	r3, sp
 80051be:	222d      	movs	r2, #45	; 0x2d
 80051c0:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80051c4:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 80051c8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  while (count < specifier->width) {
 80051cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    buf[idx--] = ' ';
 80051d0:	45d0      	cmp	r8, sl
 80051d2:	f1ca 0001 	rsb	r0, sl, #1
 80051d6:	4440      	add	r0, r8
 80051d8:	bf88      	it	hi
 80051da:	2001      	movhi	r0, #1
 80051dc:	ebaa 0608 	sub.w	r6, sl, r8
 80051e0:	ab0c      	add	r3, sp, #48	; 0x30
 80051e2:	bf88      	it	hi
 80051e4:	2600      	movhi	r6, #0
 80051e6:	4448      	add	r0, r9
 80051e8:	4632      	mov	r2, r6
 80051ea:	4418      	add	r0, r3
 80051ec:	2120      	movs	r1, #32
 80051ee:	f004 fc9d 	bl	8009b2c <memset>
  for(int i = 0; i < count; i++) {
 80051f2:	eba8 030a 	sub.w	r3, r8, sl
 80051f6:	45d0      	cmp	r8, sl
 80051f8:	bf88      	it	hi
 80051fa:	2300      	movhi	r3, #0
 80051fc:	4499      	add	r9, r3
 80051fe:	ab0c      	add	r3, sp, #48	; 0x30
 8005200:	44b0      	add	r8, r6
 8005202:	4499      	add	r9, r3
 8005204:	2600      	movs	r6, #0
 8005206:	45b0      	cmp	r8, r6
 8005208:	d10a      	bne.n	8005220 <vlc_print+0x400>
            count += _write_double(dbl, &specifier);
 800520a:	4445      	add	r5, r8
            break;
 800520c:	e6e8      	b.n	8004fe0 <vlc_print+0x1c0>
    mul *= 10;
 800520e:	ee28 8a27 	vmul.f32	s16, s16, s15
  for (int i=0;i <specifier->precision; i++)
 8005212:	3301      	adds	r3, #1
 8005214:	e73c      	b.n	8005090 <vlc_print+0x270>
 8005216:	ed9d 7b00 	vldr	d7, [sp]
 800521a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800521e:	e749      	b.n	80050b4 <vlc_print+0x294>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8005220:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8005224:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8005228:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800522a:	3601      	adds	r6, #1
 800522c:	e7eb      	b.n	8005206 <vlc_print+0x3e6>
 800522e:	f1be 0f00 	cmp.w	lr, #0
 8005232:	d000      	beq.n	8005236 <vlc_print+0x416>
 8005234:	9007      	str	r0, [sp, #28]
 8005236:	f1b8 0f00 	cmp.w	r8, #0
 800523a:	d000      	beq.n	800523e <vlc_print+0x41e>
 800523c:	9208      	str	r2, [sp, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f43f ae69 	beq.w	8004f16 <vlc_print+0xf6>
 8005244:	9b00      	ldr	r3, [sp, #0]
 8005246:	9309      	str	r3, [sp, #36]	; 0x24
 8005248:	e665      	b.n	8004f16 <vlc_print+0xf6>
          has_precision = true;
 800524a:	f04f 0c01 	mov.w	ip, #1
 800524e:	e611      	b.n	8004e74 <vlc_print+0x54>
 8005250:	0800cd50 	.word	0x0800cd50
 8005254:	3fe00000 	.word	0x3fe00000

08005258 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	b0a0      	sub	sp, #128	; 0x80
 800525c:	4606      	mov	r6, r0
 800525e:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005260:	f001 fd2e 	bl	8006cc0 <ai_platform_context_acquire>
 8005264:	4604      	mov	r4, r0

  if (report && net_ctx)
 8005266:	2d00      	cmp	r5, #0
 8005268:	d032      	beq.n	80052d0 <ai_network_get_report+0x78>
 800526a:	2800      	cmp	r0, #0
 800526c:	d02d      	beq.n	80052ca <ai_network_get_report+0x72>
  {
    ai_network_report r = {
 800526e:	226c      	movs	r2, #108	; 0x6c
 8005270:	2100      	movs	r1, #0
 8005272:	a805      	add	r0, sp, #20
 8005274:	f004 fc5a 	bl	8009b2c <memset>
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <ai_network_get_report+0x7c>)
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <ai_network_get_report+0x80>)
 800527e:	9302      	str	r3, [sp, #8]
 8005280:	4b16      	ldr	r3, [pc, #88]	; (80052dc <ai_network_get_report+0x84>)
 8005282:	9303      	str	r3, [sp, #12]
 8005284:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <ai_network_get_report+0x88>)
 8005286:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005288:	f001 fbdc 	bl	8006a44 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800528c:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 800528e:	f001 fc1b 	bl	8006ac8 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <ai_network_get_report+0x8c>)
 8005294:	9307      	str	r3, [sp, #28]
 8005296:	f240 1307 	movw	r3, #263	; 0x107
 800529a:	f8ad 3020 	strh.w	r3, [sp, #32]
      .runtime_version   = ai_platform_runtime_get_version(),
 800529e:	9006      	str	r0, [sp, #24]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80052a0:	f001 fc66 	bl	8006b70 <ai_platform_api_get_version>
 80052a4:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80052a6:	f001 fcb7 	bl	8006c18 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <ai_network_get_report+0x90>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80052ac:	900b      	str	r0, [sp, #44]	; 0x2c
    ai_network_report r = {
 80052ae:	930c      	str	r3, [sp, #48]	; 0x30
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80052b0:	a901      	add	r1, sp, #4
    ai_network_report r = {
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <ai_network_get_report+0x94>)
 80052b4:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80052b6:	4630      	mov	r0, r6
 80052b8:	f001 fdca 	bl	8006e50 <ai_platform_api_get_network_report>
 80052bc:	4604      	mov	r4, r0
 80052be:	b120      	cbz	r0, 80052ca <ai_network_get_report+0x72>

    *report = r;
 80052c0:	227c      	movs	r2, #124	; 0x7c
 80052c2:	a901      	add	r1, sp, #4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f004 fc23 	bl	8009b10 <memcpy>
    return true;
  }
  return false;
}
 80052ca:	4620      	mov	r0, r4
 80052cc:	b020      	add	sp, #128	; 0x80
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80052d0:	462c      	mov	r4, r5
 80052d2:	e7fa      	b.n	80052ca <ai_network_get_report+0x72>
 80052d4:	0800cd1c 	.word	0x0800cd1c
 80052d8:	0800cd57 	.word	0x0800cd57
 80052dc:	0800cd78 	.word	0x0800cd78
 80052e0:	0800cd91 	.word	0x0800cd91
 80052e4:	0800feef 	.word	0x0800feef
 80052e8:	0005a636 	.word	0x0005a636
 80052ec:	a1facade 	.word	0xa1facade

080052f0 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80052f0:	f001 bd2e 	b.w	8006d50 <ai_platform_network_get_error>

080052f4 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80052f4:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80052f6:	2305      	movs	r3, #5
 80052f8:	2200      	movs	r2, #0
 80052fa:	e9cd 3200 	strd	r3, r2, [sp]
 80052fe:	4a03      	ldr	r2, [pc, #12]	; (800530c <ai_network_create+0x18>)
 8005300:	2301      	movs	r3, #1
 8005302:	f002 f897 	bl	8007434 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005306:	b003      	add	sp, #12
 8005308:	f85d fb04 	ldr.w	pc, [sp], #4
 800530c:	200004b0 	.word	0x200004b0

08005310 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005310:	f002 b970 	b.w	80075f4 <ai_platform_network_destroy>

08005314 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005316:	4607      	mov	r7, r0
 8005318:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800531a:	f002 f9e3 	bl	80076e4 <ai_platform_network_init>
  if (!net_ctx) return false;
 800531e:	4604      	mov	r4, r0
 8005320:	2800      	cmp	r0, #0
 8005322:	d048      	beq.n	80053b6 <ai_network_init+0xa2>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8005324:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8005326:	4632      	mov	r2, r6
 8005328:	2101      	movs	r1, #1
 800532a:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800532c:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800532e:	f001 facb 	bl	80068c8 <ai_platform_get_weights_map>
 8005332:	4605      	mov	r5, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	d040      	beq.n	80053ba <ai_network_init+0xa6>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <ai_network_init+0xc0>)
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005340:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8005342:	9b01      	ldr	r3, [sp, #4]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8005344:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005348:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <ai_network_init+0xc4>)
 800534a:	6811      	ldr	r1, [r2, #0]
 800534c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005350:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 600);
 8005352:	f503 7116 	add.w	r1, r3, #600	; 0x258
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 600);
 8005356:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800535a:	4a20      	ldr	r2, [pc, #128]	; (80053dc <ai_network_init+0xc8>)
 800535c:	6811      	ldr	r1, [r2, #0]
 800535e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005362:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 624);
 8005364:	f503 711c 	add.w	r1, r3, #624	; 0x270
    conv2d_2_weights_array.data_start = AI_PTR(weights_map[0] + 624);
 8005368:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800536c:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <ai_network_init+0xcc>)
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 10224);
 800536e:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005372:	6811      	ldr	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 10224);
 8005374:	3330      	adds	r3, #48	; 0x30
    conv2d_2_bias_array.data_start = AI_PTR(weights_map[0] + 10224);
 8005376:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800537a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800537e:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005380:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005382:	4632      	mov	r2, r6
 8005384:	2101      	movs	r1, #1
 8005386:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005388:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800538a:	f001 faed 	bl	8006968 <ai_platform_get_activations_map>
 800538e:	4606      	mov	r6, r0
 8005390:	b1c8      	cbz	r0, 80053c6 <ai_network_init+0xb2>
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005392:	9b01      	ldr	r3, [sp, #4]
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <ai_network_init+0xd0>)
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8005396:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 1344);
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <ai_network_init+0xd4>)
 800539c:	f503 61a8 	add.w	r1, r3, #1344	; 0x540
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 1344);
 80053a0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80053a4:	4a11      	ldr	r2, [pc, #68]	; (80053ec <ai_network_init+0xd8>)
    conv2d_2_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80053a6:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80053aa:	4638      	mov	r0, r7
 80053ac:	f002 faa6 	bl	80078fc <ai_platform_network_post_init>
 80053b0:	4030      	ands	r0, r6
 80053b2:	4028      	ands	r0, r5
 80053b4:	b2c0      	uxtb	r0, r0

  return ok;
}
 80053b6:	b003      	add	sp, #12
 80053b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80053ba:	2212      	movs	r2, #18
 80053bc:	2130      	movs	r1, #48	; 0x30
 80053be:	4620      	mov	r0, r4
 80053c0:	f001 fd40 	bl	8006e44 <ai_platform_network_set_error>
  return false;
 80053c4:	e7dc      	b.n	8005380 <ai_network_init+0x6c>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80053c6:	2213      	movs	r2, #19
 80053c8:	2130      	movs	r1, #48	; 0x30
 80053ca:	4620      	mov	r0, r4
 80053cc:	f001 fd3a 	bl	8006e44 <ai_platform_network_set_error>
  return false;
 80053d0:	e7eb      	b.n	80053aa <ai_network_init+0x96>
 80053d2:	bf00      	nop
 80053d4:	20000394 	.word	0x20000394
 80053d8:	200002b4 	.word	0x200002b4
 80053dc:	200004a0 	.word	0x200004a0
 80053e0:	200003c0 	.word	0x200003c0
 80053e4:	20000368 	.word	0x20000368
 80053e8:	2000033c 	.word	0x2000033c
 80053ec:	20000474 	.word	0x20000474

080053f0 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80053f0:	f002 bb18 	b.w	8007a24 <ai_platform_network_process>

080053f4 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80053f4:	2200      	movs	r2, #0
 80053f6:	f002 bb15 	b.w	8007a24 <ai_platform_network_process>
	...

080053fc <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80053fc:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80053fe:	4603      	mov	r3, r0
{
 8005400:	b085      	sub	sp, #20
  if (!params) return false;
 8005402:	b170      	cbz	r0, 8005422 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8005404:	4c08      	ldr	r4, [pc, #32]	; (8005428 <ai_network_data_params_get+0x2c>)
 8005406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800540a:	466a      	mov	r2, sp
 800540c:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005410:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005414:	ad02      	add	r5, sp, #8
 8005416:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800541a:	4629      	mov	r1, r5
 800541c:	4618      	mov	r0, r3
 800541e:	f001 faf5 	bl	8006a0c <ai_platform_bind_network_params>
}
 8005422:	b005      	add	sp, #20
 8005424:	bd30      	pop	{r4, r5, pc}
 8005426:	bf00      	nop
 8005428:	0800cc78 	.word	0x0800cc78

0800542c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 800542c:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 800542e:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pos = fields;
 8005432:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8005436:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 800543a:	441a      	add	r2, r3
 800543c:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800543e:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 8005442:	441a      	add	r2, r3
 8005444:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8005446:	8808      	ldrh	r0, [r1, #0]
}
 8005448:	3800      	subs	r0, #0
 800544a:	bf18      	it	ne
 800544c:	2001      	movne	r0, #1
 800544e:	4770      	bx	lr

08005450 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8005450:	6841      	ldr	r1, [r0, #4]

    if (prev_field->tag == 0)
 8005452:	880a      	ldrh	r2, [r1, #0]
{
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 8005458:	2a00      	cmp	r2, #0
 800545a:	d038      	beq.n	80054ce <pb_field_iter_next+0x7e>
        return false;
    }
    
    iter->pos++;
    
    if (iter->pos->tag == 0)
 800545c:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 8005460:	f101 020f 	add.w	r2, r1, #15
 8005464:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8005466:	b92c      	cbnz	r4, 8005474 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8005468:	68c2      	ldr	r2, [r0, #12]
 800546a:	6801      	ldr	r1, [r0, #0]
 800546c:	f7ff ffde 	bl	800542c <pb_field_iter_begin>
        return false;
 8005470:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8005472:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005474:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8005476:	f8b1 2007 	ldrh.w	r2, [r1, #7]
            iter->pos->data_offset == PB_SIZE_MAX)
 800547a:	8a4c      	ldrh	r4, [r1, #18]
 800547c:	f000 0630 	and.w	r6, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005480:	2e30      	cmp	r6, #48	; 0x30
 8005482:	d10a      	bne.n	800549a <pb_field_iter_next+0x4a>
 8005484:	7c4d      	ldrb	r5, [r1, #17]
 8005486:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800548a:	2d30      	cmp	r5, #48	; 0x30
 800548c:	d119      	bne.n	80054c2 <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800548e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005492:	42ac      	cmp	r4, r5
 8005494:	d115      	bne.n	80054c2 <pb_field_iter_next+0x72>
            return true;
 8005496:	2001      	movs	r0, #1
 8005498:	e7eb      	b.n	8005472 <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800549a:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800549e:	2d20      	cmp	r5, #32
 80054a0:	d10f      	bne.n	80054c2 <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 80054a2:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 80054a6:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 80054a8:	b916      	cbnz	r6, 80054b0 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 80054aa:	6898      	ldr	r0, [r3, #8]
 80054ac:	3001      	adds	r0, #1
 80054ae:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80054b0:	4414      	add	r4, r2
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	4422      	add	r2, r4
 80054b6:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80054b8:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	615a      	str	r2, [r3, #20]
        return true;
 80054c0:	e7e9      	b.n	8005496 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 80054c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 80054c6:	2880      	cmp	r0, #128	; 0x80
 80054c8:	bf08      	it	eq
 80054ca:	2204      	moveq	r2, #4
 80054cc:	e7ec      	b.n	80054a8 <pb_field_iter_next+0x58>
        return false;
 80054ce:	4610      	mov	r0, r2
 80054d0:	e7cf      	b.n	8005472 <pb_field_iter_next+0x22>

080054d2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80054d2:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 80054d4:	6846      	ldr	r6, [r0, #4]
{
 80054d6:	4604      	mov	r4, r0
 80054d8:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	42aa      	cmp	r2, r5
 80054e0:	d104      	bne.n	80054ec <pb_field_iter_find+0x1a>
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d107      	bne.n	80054fc <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff ffaf 	bl	8005450 <pb_field_iter_next>
    } while (iter->pos != start);
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	42b3      	cmp	r3, r6
 80054f6:	d1f0      	bne.n	80054da <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80054f8:	2000      	movs	r0, #0
}
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80054fc:	2001      	movs	r0, #1
 80054fe:	e7fc      	b.n	80054fa <pb_field_iter_find+0x28>

08005500 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005500:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005502:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8005504:	18a3      	adds	r3, r4, r2
 8005506:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8005508:	b939      	cbnz	r1, 800551a <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 800550a:	2001      	movs	r0, #1
 800550c:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800550e:	5ce0      	ldrb	r0, [r4, r3]
 8005510:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 8005512:	3301      	adds	r3, #1
 8005514:	4293      	cmp	r3, r2
 8005516:	d1fa      	bne.n	800550e <buf_read+0xe>
 8005518:	e7f7      	b.n	800550a <buf_read+0xa>
 800551a:	2300      	movs	r3, #0
 800551c:	e7fa      	b.n	8005514 <buf_read+0x14>

0800551e <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800551e:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8005520:	6845      	ldr	r5, [r0, #4]
 8005522:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005524:	f002 060f 	and.w	r6, r2, #15
 8005528:	2e08      	cmp	r6, #8
{
 800552a:	b086      	sub	sp, #24
 800552c:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800552e:	d11f      	bne.n	8005570 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8005530:	6903      	ldr	r3, [r0, #16]
 8005532:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8005534:	2600      	movs	r6, #0
        while (ext != NULL)
 8005536:	b90c      	cbnz	r4, 800553c <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8005538:	b006      	add	sp, #24
 800553a:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800553c:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800553e:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005540:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8005542:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005544:	4629      	mov	r1, r5
 8005546:	4668      	mov	r0, sp
 8005548:	f7ff ff70 	bl	800542c <pb_field_iter_begin>
    iter->pData = extension->dest;
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8005550:	f104 030c 	add.w	r3, r4, #12
 8005554:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005556:	78ab      	ldrb	r3, [r5, #2]
 8005558:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800555c:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 800555e:	bf08      	it	eq
 8005560:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 8005562:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 8005564:	bf08      	it	eq
 8005566:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8005568:	f7ff ffd9 	bl	800551e <pb_field_set_to_default>
            ext = ext->next;
 800556c:	68a4      	ldr	r4, [r4, #8]
 800556e:	e7e2      	b.n	8005536 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005570:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8005574:	d127      	bne.n	80055c6 <pb_field_set_to_default+0xa8>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8005576:	f002 0030 	and.w	r0, r2, #48	; 0x30
 800557a:	2810      	cmp	r0, #16
 800557c:	d110      	bne.n	80055a0 <pb_field_set_to_default+0x82>
 800557e:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8005582:	4282      	cmp	r2, r0
 8005584:	d000      	beq.n	8005588 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 8005586:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8005588:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800558a:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800558e:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8005590:	d10b      	bne.n	80055aa <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8005592:	4601      	mov	r1, r0
 8005594:	4620      	mov	r0, r4
}
 8005596:	b006      	add	sp, #24
 8005598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800559c:	f000 b81b 	b.w	80055d6 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80055a0:	0690      	lsls	r0, r2, #26
 80055a2:	d5f1      	bpl.n	8005588 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	8019      	strh	r1, [r3, #0]
}
 80055a8:	e7c6      	b.n	8005538 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80055aa:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 80055ae:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 80055b0:	b124      	cbz	r4, 80055bc <pb_field_set_to_default+0x9e>
}
 80055b2:	b006      	add	sp, #24
 80055b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80055b8:	f004 baaa 	b.w	8009b10 <memcpy>
}
 80055bc:	b006      	add	sp, #24
 80055be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 80055c2:	f004 bab3 	b.w	8009b2c <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80055c6:	2980      	cmp	r1, #128	; 0x80
 80055c8:	d1b6      	bne.n	8005538 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 80055ca:	6900      	ldr	r0, [r0, #16]
 80055cc:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80055ce:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 80055d0:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80055d2:	d5b1      	bpl.n	8005538 <pb_field_set_to_default+0x1a>
 80055d4:	e7e6      	b.n	80055a4 <pb_field_set_to_default+0x86>

080055d6 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 80055d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80055d8:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 80055da:	4601      	mov	r1, r0
 80055dc:	4668      	mov	r0, sp
 80055de:	f7ff ff25 	bl	800542c <pb_field_iter_begin>
 80055e2:	b130      	cbz	r0, 80055f2 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 80055e4:	4668      	mov	r0, sp
 80055e6:	f7ff ff9a 	bl	800551e <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 80055ea:	4668      	mov	r0, sp
 80055ec:	f7ff ff30 	bl	8005450 <pb_field_iter_next>
 80055f0:	e7f7      	b.n	80055e2 <pb_message_set_to_defaults+0xc>
}
 80055f2:	b007      	add	sp, #28
 80055f4:	f85d fb04 	ldr.w	pc, [sp], #4

080055f8 <pb_readbyte>:
    if (stream->bytes_left == 0)
 80055f8:	6883      	ldr	r3, [r0, #8]
{
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 80055fe:	b93b      	cbnz	r3, 8005610 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005600:	68c2      	ldr	r2, [r0, #12]
 8005602:	490b      	ldr	r1, [pc, #44]	; (8005630 <pb_readbyte+0x38>)
 8005604:	2a00      	cmp	r2, #0
 8005606:	bf08      	it	eq
 8005608:	460a      	moveq	r2, r1
 800560a:	60c2      	str	r2, [r0, #12]
 800560c:	4618      	mov	r0, r3
}
 800560e:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8005610:	6803      	ldr	r3, [r0, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	4798      	blx	r3
 8005616:	b930      	cbnz	r0, 8005626 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8005618:	68e3      	ldr	r3, [r4, #12]
 800561a:	4a06      	ldr	r2, [pc, #24]	; (8005634 <pb_readbyte+0x3c>)
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf08      	it	eq
 8005620:	4613      	moveq	r3, r2
 8005622:	60e3      	str	r3, [r4, #12]
 8005624:	e7f3      	b.n	800560e <pb_readbyte+0x16>
    stream->bytes_left--;
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	3b01      	subs	r3, #1
 800562a:	60a3      	str	r3, [r4, #8]
    return true;    
 800562c:	e7ef      	b.n	800560e <pb_readbyte+0x16>
 800562e:	bf00      	nop
 8005630:	0800f5f0 	.word	0x0800f5f0
 8005634:	0800f5fe 	.word	0x0800f5fe

08005638 <pb_decode_varint32_eof>:
{
 8005638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800563c:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 800563e:	f10d 0107 	add.w	r1, sp, #7
{
 8005642:	4605      	mov	r5, r0
 8005644:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8005646:	f7ff ffd7 	bl	80055f8 <pb_readbyte>
 800564a:	4606      	mov	r6, r0
 800564c:	b958      	cbnz	r0, 8005666 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 800564e:	68ab      	ldr	r3, [r5, #8]
 8005650:	b10b      	cbz	r3, 8005656 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005652:	2600      	movs	r6, #0
 8005654:	e003      	b.n	800565e <pb_decode_varint32_eof+0x26>
            if (eof)
 8005656:	2c00      	cmp	r4, #0
 8005658:	d0fb      	beq.n	8005652 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 800565a:	2301      	movs	r3, #1
 800565c:	7023      	strb	r3, [r4, #0]
}
 800565e:	4630      	mov	r0, r6
 8005660:	b002      	add	sp, #8
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 8005666:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800566a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da2a      	bge.n	80056c8 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 8005672:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8005676:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 8005678:	f10d 0107 	add.w	r1, sp, #7
 800567c:	4628      	mov	r0, r5
 800567e:	f7ff ffbb 	bl	80055f8 <pb_readbyte>
 8005682:	2800      	cmp	r0, #0
 8005684:	d0e5      	beq.n	8005652 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8005686:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 800568a:	2f1f      	cmp	r7, #31
 800568c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005690:	d90f      	bls.n	80056b2 <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005692:	2f3f      	cmp	r7, #63	; 0x3f
 8005694:	bf34      	ite	cc
 8005696:	21ff      	movcc	r1, #255	; 0xff
 8005698:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800569a:	b162      	cbz	r2, 80056b6 <pb_decode_varint32_eof+0x7e>
 800569c:	2c00      	cmp	r4, #0
 800569e:	da01      	bge.n	80056a4 <pb_decode_varint32_eof+0x6c>
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d008      	beq.n	80056b6 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80056a4:	68eb      	ldr	r3, [r5, #12]
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <pb_decode_varint32_eof+0x98>)
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf08      	it	eq
 80056ac:	4613      	moveq	r3, r2
 80056ae:	60eb      	str	r3, [r5, #12]
 80056b0:	e7cf      	b.n	8005652 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80056b2:	40ba      	lsls	r2, r7
 80056b4:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 80056b6:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 80056b8:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 80056bc:	d4dc      	bmi.n	8005678 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 80056be:	2f23      	cmp	r7, #35	; 0x23
 80056c0:	d102      	bne.n	80056c8 <pb_decode_varint32_eof+0x90>
 80056c2:	f013 0f70 	tst.w	r3, #112	; 0x70
 80056c6:	d1ed      	bne.n	80056a4 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 80056c8:	f8c8 4000 	str.w	r4, [r8]
   return true;
 80056cc:	e7c7      	b.n	800565e <pb_decode_varint32_eof+0x26>
 80056ce:	bf00      	nop
 80056d0:	0800f607 	.word	0x0800f607

080056d4 <pb_read>:
{
 80056d4:	b530      	push	{r4, r5, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	b085      	sub	sp, #20
 80056da:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 80056dc:	b9a9      	cbnz	r1, 800570a <pb_read+0x36>
 80056de:	6802      	ldr	r2, [r0, #0]
 80056e0:	4b17      	ldr	r3, [pc, #92]	; (8005740 <pb_read+0x6c>)
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d011      	beq.n	800570a <pb_read+0x36>
		while (count > 16)
 80056e6:	2d10      	cmp	r5, #16
 80056e8:	d806      	bhi.n	80056f8 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 80056ea:	462a      	mov	r2, r5
 80056ec:	4669      	mov	r1, sp
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff fff0 	bl	80056d4 <pb_read>
}
 80056f4:	b005      	add	sp, #20
 80056f6:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80056f8:	2210      	movs	r2, #16
 80056fa:	4669      	mov	r1, sp
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7ff ffe9 	bl	80056d4 <pb_read>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0f6      	beq.n	80056f4 <pb_read+0x20>
			count -= 16;
 8005706:	3d10      	subs	r5, #16
 8005708:	e7ed      	b.n	80056e6 <pb_read+0x12>
    if (stream->bytes_left < count)
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	42ab      	cmp	r3, r5
 800570e:	d207      	bcs.n	8005720 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005710:	68e3      	ldr	r3, [r4, #12]
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <pb_read+0x70>)
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf08      	it	eq
 8005718:	4613      	moveq	r3, r2
 800571a:	60e3      	str	r3, [r4, #12]
 800571c:	2000      	movs	r0, #0
 800571e:	e7e9      	b.n	80056f4 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4620      	mov	r0, r4
 8005726:	4798      	blx	r3
 8005728:	b930      	cbnz	r0, 8005738 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	4a06      	ldr	r2, [pc, #24]	; (8005748 <pb_read+0x74>)
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf08      	it	eq
 8005732:	4613      	moveq	r3, r2
 8005734:	60e3      	str	r3, [r4, #12]
 8005736:	e7dd      	b.n	80056f4 <pb_read+0x20>
    stream->bytes_left -= count;
 8005738:	68a2      	ldr	r2, [r4, #8]
 800573a:	1b52      	subs	r2, r2, r5
 800573c:	60a2      	str	r2, [r4, #8]
    return true;
 800573e:	e7d9      	b.n	80056f4 <pb_read+0x20>
 8005740:	08005501 	.word	0x08005501
 8005744:	0800f5f0 	.word	0x0800f5f0
 8005748:	0800f5fe 	.word	0x0800f5fe

0800574c <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 800574c:	2200      	movs	r2, #0
 800574e:	f7ff bf73 	b.w	8005638 <pb_decode_varint32_eof>
	...

08005754 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8005758:	a901      	add	r1, sp, #4
{
 800575a:	4605      	mov	r5, r0
 800575c:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 800575e:	f7ff fff5 	bl	800574c <pb_decode_varint32>
 8005762:	4604      	mov	r4, r0
 8005764:	b188      	cbz	r0, 800578a <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8005766:	9901      	ldr	r1, [sp, #4]
 8005768:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800576c:	d307      	bcc.n	800577e <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800576e:	68eb      	ldr	r3, [r5, #12]
 8005770:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf08      	it	eq
 8005776:	4613      	moveq	r3, r2
 8005778:	60eb      	str	r3, [r5, #12]
 800577a:	2400      	movs	r4, #0
 800577c:	e005      	b.n	800578a <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 800577e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8005782:	b929      	cbnz	r1, 8005790 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8005784:	4630      	mov	r0, r6
 8005786:	f004 f9d1 	bl	8009b2c <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800578a:	4620      	mov	r0, r4
 800578c:	b003      	add	sp, #12
 800578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8005790:	4291      	cmp	r1, r2
 8005792:	d002      	beq.n	800579a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8005794:	68eb      	ldr	r3, [r5, #12]
 8005796:	4a05      	ldr	r2, [pc, #20]	; (80057ac <pb_dec_fixed_length_bytes+0x58>)
 8005798:	e7eb      	b.n	8005772 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 800579a:	460a      	mov	r2, r1
 800579c:	4628      	mov	r0, r5
 800579e:	4631      	mov	r1, r6
 80057a0:	f7ff ff98 	bl	80056d4 <pb_read>
 80057a4:	4604      	mov	r4, r0
 80057a6:	e7f0      	b.n	800578a <pb_dec_fixed_length_bytes+0x36>
 80057a8:	0800f617 	.word	0x0800f617
 80057ac:	0800f626 	.word	0x0800f626

080057b0 <pb_dec_string>:
{
 80057b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057b2:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 80057b4:	a901      	add	r1, sp, #4
{
 80057b6:	4604      	mov	r4, r0
 80057b8:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80057ba:	f7ff ffc7 	bl	800574c <pb_decode_varint32>
 80057be:	b198      	cbz	r0, 80057e8 <pb_dec_string+0x38>
    alloc_size = size + 1;
 80057c0:	9a01      	ldr	r2, [sp, #4]
 80057c2:	1c51      	adds	r1, r2, #1
 80057c4:	f04f 0600 	mov.w	r6, #0
 80057c8:	d207      	bcs.n	80057da <pb_dec_string+0x2a>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80057ca:	78bb      	ldrb	r3, [r7, #2]
 80057cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d10b      	bne.n	80057ec <pb_dec_string+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 80057d4:	68e3      	ldr	r3, [r4, #12]
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <pb_dec_string+0x58>)
 80057d8:	e001      	b.n	80057de <pb_dec_string+0x2e>
        PB_RETURN_ERROR(stream, "size too large");
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf08      	it	eq
 80057e2:	4613      	moveq	r3, r2
 80057e4:	60e3      	str	r3, [r4, #12]
 80057e6:	4630      	mov	r0, r6
}
 80057e8:	b003      	add	sp, #12
 80057ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 80057ec:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 80057f0:	428b      	cmp	r3, r1
 80057f2:	d202      	bcs.n	80057fa <pb_dec_string+0x4a>
            PB_RETURN_ERROR(stream, "string overflow");
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <pb_dec_string+0x60>)
 80057f8:	e7f1      	b.n	80057de <pb_dec_string+0x2e>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 80057fa:	4629      	mov	r1, r5
 80057fc:	4620      	mov	r0, r4
 80057fe:	f7ff ff69 	bl	80056d4 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8005802:	9b01      	ldr	r3, [sp, #4]
 8005804:	54ee      	strb	r6, [r5, r3]
    return status;
 8005806:	e7ef      	b.n	80057e8 <pb_dec_string+0x38>
 8005808:	0800f657 	.word	0x0800f657
 800580c:	0800f648 	.word	0x0800f648
 8005810:	0800f669 	.word	0x0800f669

08005814 <pb_dec_bytes>:
{
 8005814:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005816:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8005818:	a901      	add	r1, sp, #4
{
 800581a:	4604      	mov	r4, r0
 800581c:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 800581e:	f7ff ff95 	bl	800574c <pb_decode_varint32>
 8005822:	b1a0      	cbz	r0, 800584e <pb_dec_bytes+0x3a>
    if (size > PB_SIZE_MAX)
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800582a:	d302      	bcc.n	8005832 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 800582c:	68e3      	ldr	r3, [r4, #12]
 800582e:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <pb_dec_bytes+0x54>)
 8005830:	e008      	b.n	8005844 <pb_dec_bytes+0x30>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005832:	78b3      	ldrb	r3, [r6, #2]
 8005834:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005838:	2b80      	cmp	r3, #128	; 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800583a:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800583e:	d108      	bne.n	8005852 <pb_dec_bytes+0x3e>
        PB_RETURN_ERROR(stream, "no malloc support");
 8005840:	68e3      	ldr	r3, [r4, #12]
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf08      	it	eq
 8005848:	4613      	moveq	r3, r2
 800584a:	60e3      	str	r3, [r4, #12]
 800584c:	2000      	movs	r0, #0
}
 800584e:	b002      	add	sp, #8
 8005850:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8005852:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005856:	428b      	cmp	r3, r1
 8005858:	d3e8      	bcc.n	800582c <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 800585a:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 800585c:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 800585e:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8005862:	f7ff ff37 	bl	80056d4 <pb_read>
 8005866:	e7f2      	b.n	800584e <pb_dec_bytes+0x3a>
 8005868:	0800f617 	.word	0x0800f617
 800586c:	0800f657 	.word	0x0800f657

08005870 <pb_decode_varint>:
{
 8005870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8005874:	2500      	movs	r5, #0
{
 8005876:	4606      	mov	r6, r0
 8005878:	460f      	mov	r7, r1
    uint64_t result = 0;
 800587a:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 800587c:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 800587e:	f10d 0107 	add.w	r1, sp, #7
 8005882:	4630      	mov	r0, r6
 8005884:	f7ff feb8 	bl	80055f8 <pb_readbyte>
 8005888:	b310      	cbz	r0, 80058d0 <pb_decode_varint+0x60>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800588a:	f89d c007 	ldrb.w	ip, [sp, #7]
 800588e:	f1a4 0320 	sub.w	r3, r4, #32
 8005892:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
 8005896:	f1c4 0120 	rsb	r1, r4, #32
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	fa22 f101 	lsr.w	r1, r2, r1
 80058a2:	430b      	orrs	r3, r1
 80058a4:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 80058a6:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80058aa:	ea45 0502 	orr.w	r5, r5, r2
 80058ae:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 80058b2:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 80058b6:	d102      	bne.n	80058be <pb_decode_varint+0x4e>
    *dest = result;
 80058b8:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 80058bc:	e008      	b.n	80058d0 <pb_decode_varint+0x60>
        if (bitpos >= 64)
 80058be:	2c46      	cmp	r4, #70	; 0x46
 80058c0:	d1dd      	bne.n	800587e <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 80058c2:	68f3      	ldr	r3, [r6, #12]
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <pb_decode_varint+0x68>)
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf08      	it	eq
 80058ca:	4613      	moveq	r3, r2
 80058cc:	60f3      	str	r3, [r6, #12]
 80058ce:	2000      	movs	r0, #0
}
 80058d0:	b002      	add	sp, #8
 80058d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d6:	bf00      	nop
 80058d8:	0800f607 	.word	0x0800f607

080058dc <pb_dec_uvarint>:
{
 80058dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058de:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 80058e0:	4669      	mov	r1, sp
{
 80058e2:	4604      	mov	r4, r0
 80058e4:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 80058e6:	f7ff ffc3 	bl	8005870 <pb_decode_varint>
 80058ea:	b138      	cbz	r0, 80058fc <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 80058ec:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d105      	bne.n	8005900 <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 80058f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f8:	e9c5 2300 	strd	r2, r3, [r5]
}
 80058fc:	b002      	add	sp, #8
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 8005900:	2b04      	cmp	r3, #4
 8005902:	d10b      	bne.n	800591c <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8005904:	9b00      	ldr	r3, [sp, #0]
 8005906:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8005908:	e9dd 5100 	ldrd	r5, r1, [sp]
 800590c:	2200      	movs	r2, #0
 800590e:	4291      	cmp	r1, r2
 8005910:	bf08      	it	eq
 8005912:	429d      	cmpeq	r5, r3
 8005914:	d0f2      	beq.n	80058fc <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005916:	68e3      	ldr	r3, [r4, #12]
 8005918:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <pb_dec_uvarint+0x6c>)
 800591a:	e00e      	b.n	800593a <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 800591c:	2b02      	cmp	r3, #2
 800591e:	d103      	bne.n	8005928 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8005920:	9b00      	ldr	r3, [sp, #0]
 8005922:	802b      	strh	r3, [r5, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	e7ef      	b.n	8005908 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8005928:	2b01      	cmp	r3, #1
 800592a:	d104      	bne.n	8005936 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800592c:	9b00      	ldr	r3, [sp, #0]
 800592e:	702b      	strb	r3, [r5, #0]
 8005930:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005934:	e7e8      	b.n	8005908 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	4a04      	ldr	r2, [pc, #16]	; (800594c <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf08      	it	eq
 800593e:	4613      	moveq	r3, r2
 8005940:	60e3      	str	r3, [r4, #12]
 8005942:	2000      	movs	r0, #0
 8005944:	e7da      	b.n	80058fc <pb_dec_uvarint+0x20>
 8005946:	bf00      	nop
 8005948:	0800f68b 	.word	0x0800f68b
 800594c:	0800f679 	.word	0x0800f679

08005950 <pb_dec_varint>:
{
 8005950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005952:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8005954:	4669      	mov	r1, sp
{
 8005956:	4605      	mov	r5, r0
 8005958:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 800595a:	f7ff ff89 	bl	8005870 <pb_decode_varint>
 800595e:	b138      	cbz	r0, 8005970 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005960:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005964:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8005966:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 800596a:	d103      	bne.n	8005974 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 800596c:	e9c4 2100 	strd	r2, r1, [r4]
}
 8005970:	b002      	add	sp, #8
 8005972:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005974:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8005976:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 800597a:	d101      	bne.n	8005980 <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 800597c:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 800597e:	e7f7      	b.n	8005970 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 8005980:	2b02      	cmp	r3, #2
 8005982:	d109      	bne.n	8005998 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8005984:	b213      	sxth	r3, r2
 8005986:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8005988:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 800598a:	42b1      	cmp	r1, r6
 800598c:	bf08      	it	eq
 800598e:	4293      	cmpeq	r3, r2
 8005990:	d0ee      	beq.n	8005970 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005992:	68eb      	ldr	r3, [r5, #12]
 8005994:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <pb_dec_varint+0x64>)
 8005996:	e006      	b.n	80059a6 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800599c:	b253      	sxtb	r3, r2
 800599e:	7023      	strb	r3, [r4, #0]
 80059a0:	e7f2      	b.n	8005988 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80059a2:	68eb      	ldr	r3, [r5, #12]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf08      	it	eq
 80059aa:	4613      	moveq	r3, r2
 80059ac:	60eb      	str	r3, [r5, #12]
 80059ae:	2000      	movs	r0, #0
 80059b0:	e7de      	b.n	8005970 <pb_dec_varint+0x20>
 80059b2:	bf00      	nop
 80059b4:	0800f68b 	.word	0x0800f68b
 80059b8:	0800f679 	.word	0x0800f679

080059bc <pb_decode_tag>:
{
 80059bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059be:	461d      	mov	r5, r3
    *eof = false;
 80059c0:	2300      	movs	r3, #0
 80059c2:	702b      	strb	r3, [r5, #0]
{
 80059c4:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 80059c6:	700b      	strb	r3, [r1, #0]
{
 80059c8:	4617      	mov	r7, r2
    *tag = 0;
 80059ca:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	462a      	mov	r2, r5
 80059d0:	f7ff fe32 	bl	8005638 <pb_decode_varint32_eof>
 80059d4:	b120      	cbz	r0, 80059e0 <pb_decode_tag+0x24>
    if (temp == 0)
 80059d6:	9c01      	ldr	r4, [sp, #4]
 80059d8:	b924      	cbnz	r4, 80059e4 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 80059da:	2301      	movs	r3, #1
 80059dc:	702b      	strb	r3, [r5, #0]
        return false;
 80059de:	4620      	mov	r0, r4
}
 80059e0:	b003      	add	sp, #12
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 80059e4:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 80059e6:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 80059ea:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 80059ec:	7034      	strb	r4, [r6, #0]
    return true;
 80059ee:	e7f7      	b.n	80059e0 <pb_decode_tag+0x24>

080059f0 <pb_skip_field>:
{
 80059f0:	b513      	push	{r0, r1, r4, lr}
 80059f2:	4604      	mov	r4, r0
    switch (wire_type)
 80059f4:	2905      	cmp	r1, #5
 80059f6:	d825      	bhi.n	8005a44 <pb_skip_field+0x54>
 80059f8:	e8df f001 	tbb	[pc, r1]
 80059fc:	24170f03 	.word	0x24170f03
 8005a00:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 8005a02:	2201      	movs	r2, #1
 8005a04:	a901      	add	r1, sp, #4
 8005a06:	4620      	mov	r0, r4
 8005a08:	f7ff fe64 	bl	80056d4 <pb_read>
 8005a0c:	b118      	cbz	r0, 8005a16 <pb_skip_field+0x26>
    } while (byte & 0x80);
 8005a0e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dbf5      	blt.n	8005a02 <pb_skip_field+0x12>
}
 8005a16:	b002      	add	sp, #8
 8005a18:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8005a1a:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4620      	mov	r0, r4
}
 8005a20:	b002      	add	sp, #8
 8005a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005a26:	f7ff be55 	b.w	80056d4 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8005a2a:	a901      	add	r1, sp, #4
 8005a2c:	f7ff fe8e 	bl	800574c <pb_decode_varint32>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0f0      	beq.n	8005a16 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8005a34:	9a01      	ldr	r2, [sp, #4]
 8005a36:	2100      	movs	r1, #0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff fe4b 	bl	80056d4 <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 8005a3e:	e7ea      	b.n	8005a16 <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005a40:	2204      	movs	r2, #4
 8005a42:	e7eb      	b.n	8005a1c <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005a44:	68c3      	ldr	r3, [r0, #12]
 8005a46:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <pb_skip_field+0x64>)
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf08      	it	eq
 8005a4c:	4613      	moveq	r3, r2
 8005a4e:	60c3      	str	r3, [r0, #12]
 8005a50:	2000      	movs	r0, #0
 8005a52:	e7e0      	b.n	8005a16 <pb_skip_field+0x26>
 8005a54:	0800f69d 	.word	0x0800f69d

08005a58 <pb_make_string_substream>:
{
 8005a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a5a:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8005a5c:	a901      	add	r1, sp, #4
{
 8005a5e:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8005a60:	f7ff fe74 	bl	800574c <pb_decode_varint32>
 8005a64:	4606      	mov	r6, r0
 8005a66:	b168      	cbz	r0, 8005a84 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8005a68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a6c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8005a70:	9901      	ldr	r1, [sp, #4]
 8005a72:	428a      	cmp	r2, r1
 8005a74:	d209      	bcs.n	8005a8a <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <pb_make_string_substream+0x3c>)
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf08      	it	eq
 8005a7e:	4613      	moveq	r3, r2
 8005a80:	60e3      	str	r3, [r4, #12]
 8005a82:	2600      	movs	r6, #0
}
 8005a84:	4630      	mov	r0, r6
 8005a86:	b002      	add	sp, #8
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8005a8a:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	1a5b      	subs	r3, r3, r1
 8005a90:	60a3      	str	r3, [r4, #8]
    return true;
 8005a92:	e7f7      	b.n	8005a84 <pb_make_string_substream+0x2c>
 8005a94:	0800f6af 	.word	0x0800f6af

08005a98 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8005a98:	688a      	ldr	r2, [r1, #8]
{
 8005a9a:	b538      	push	{r3, r4, r5, lr}
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8005aa0:	b92a      	cbnz	r2, 8005aae <pb_close_string_substream+0x16>
    stream->state = substream->state;
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	60eb      	str	r3, [r5, #12]
    return true;
 8005aaa:	2001      	movs	r0, #1
}
 8005aac:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fe0f 	bl	80056d4 <pb_read>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d1f3      	bne.n	8005aa2 <pb_close_string_substream+0xa>
 8005aba:	e7f7      	b.n	8005aac <pb_close_string_substream+0x14>

08005abc <decode_field>:
{
 8005abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8005ac2:	6851      	ldr	r1, [r2, #4]
{
 8005ac4:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8005ac6:	788a      	ldrb	r2, [r1, #2]
 8005ac8:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8005acc:	2c40      	cmp	r4, #64	; 0x40
{
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8005ad2:	f000 8083 	beq.w	8005bdc <decode_field+0x120>
 8005ad6:	2c80      	cmp	r4, #128	; 0x80
 8005ad8:	d07d      	beq.n	8005bd6 <decode_field+0x11a>
 8005ada:	b964      	cbnz	r4, 8005af6 <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8005adc:	f002 0c0f 	and.w	ip, r2, #15
 8005ae0:	4f6f      	ldr	r7, [pc, #444]	; (8005ca0 <decode_field+0x1e4>)
 8005ae2:	f002 0230 	and.w	r2, r2, #48	; 0x30
    switch (PB_HTYPE(type))
 8005ae6:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8005ae8:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8005aec:	d02b      	beq.n	8005b46 <decode_field+0x8a>
 8005aee:	d805      	bhi.n	8005afc <decode_field+0x40>
 8005af0:	b1da      	cbz	r2, 8005b2a <decode_field+0x6e>
 8005af2:	2a10      	cmp	r2, #16
 8005af4:	d01f      	beq.n	8005b36 <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005af6:	68eb      	ldr	r3, [r5, #12]
 8005af8:	4a6a      	ldr	r2, [pc, #424]	; (8005ca4 <decode_field+0x1e8>)
 8005afa:	e04c      	b.n	8005b96 <decode_field+0xda>
    switch (PB_HTYPE(type))
 8005afc:	2a30      	cmp	r2, #48	; 0x30
 8005afe:	d1fa      	bne.n	8005af6 <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8005b00:	6973      	ldr	r3, [r6, #20]
 8005b02:	880a      	ldrh	r2, [r1, #0]
 8005b04:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005b06:	f1bc 0f07 	cmp.w	ip, #7
 8005b0a:	d10b      	bne.n	8005b24 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8005b0c:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005b10:	6930      	ldr	r0, [r6, #16]
 8005b12:	4621      	mov	r1, r4
 8005b14:	f004 f80a 	bl	8009b2c <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8005b18:	6873      	ldr	r3, [r6, #4]
 8005b1a:	6931      	ldr	r1, [r6, #16]
 8005b1c:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8005b20:	f7ff fd59 	bl	80055d6 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8005b24:	6932      	ldr	r2, [r6, #16]
 8005b26:	6871      	ldr	r1, [r6, #4]
 8005b28:	e00b      	b.n	8005b42 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 8005b2a:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 8005b2c:	463b      	mov	r3, r7
}
 8005b2e:	b009      	add	sp, #36	; 0x24
 8005b30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8005b34:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8005b36:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8005b3a:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8005b3c:	bf1c      	itt	ne
 8005b3e:	2001      	movne	r0, #1
 8005b40:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8005b42:	4628      	mov	r0, r5
 8005b44:	e7f2      	b.n	8005b2c <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8005b46:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8005b48:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8005b4c:	d134      	bne.n	8005bb8 <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005b4e:	f1bc 0f04 	cmp.w	ip, #4
 8005b52:	d831      	bhi.n	8005bb8 <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8005b54:	a904      	add	r1, sp, #16
 8005b56:	f7ff ff7f 	bl	8005a58 <pb_make_string_substream>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	b970      	cbnz	r0, 8005b7c <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005b5e:	2400      	movs	r4, #0
 8005b60:	e026      	b.n	8005bb0 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005b62:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8005b66:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 8005b68:	fb03 2200 	mla	r2, r3, r0, r2
 8005b6c:	a804      	add	r0, sp, #16
 8005b6e:	47b8      	blx	r7
 8005b70:	b1b0      	cbz	r0, 8005ba0 <decode_field+0xe4>
                    (*size)++;
 8005b72:	f8b8 3000 	ldrh.w	r3, [r8]
 8005b76:	3301      	adds	r3, #1
 8005b78:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8005b7c:	9b06      	ldr	r3, [sp, #24]
 8005b7e:	b133      	cbz	r3, 8005b8e <decode_field+0xd2>
 8005b80:	6871      	ldr	r1, [r6, #4]
 8005b82:	f8b8 3000 	ldrh.w	r3, [r8]
 8005b86:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d8e9      	bhi.n	8005b62 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 8005b8e:	9b06      	ldr	r3, [sp, #24]
 8005b90:	b143      	cbz	r3, 8005ba4 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 8005b92:	68eb      	ldr	r3, [r5, #12]
 8005b94:	4a44      	ldr	r2, [pc, #272]	; (8005ca8 <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf08      	it	eq
 8005b9a:	4613      	moveq	r3, r2
 8005b9c:	60eb      	str	r3, [r5, #12]
 8005b9e:	e7de      	b.n	8005b5e <decode_field+0xa2>
                        status = false;
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	e7f4      	b.n	8005b8e <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff ff76 	bl	8005a98 <pb_close_string_substream>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d0d6      	beq.n	8005b5e <decode_field+0xa2>
}
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	b009      	add	sp, #36	; 0x24
 8005bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005bb8:	f8b8 3000 	ldrh.w	r3, [r8]
 8005bbc:	6932      	ldr	r2, [r6, #16]
 8005bbe:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 8005bc2:	1c5c      	adds	r4, r3, #1
 8005bc4:	f8a8 4000 	strh.w	r4, [r8]
 8005bc8:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d9e0      	bls.n	8005b92 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 8005bd0:	fb03 2200 	mla	r2, r3, r0, r2
 8005bd4:	e7b5      	b.n	8005b42 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 8005bd6:	68c3      	ldr	r3, [r0, #12]
 8005bd8:	4a34      	ldr	r2, [pc, #208]	; (8005cac <decode_field+0x1f0>)
 8005bda:	e7dc      	b.n	8005b96 <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8005bdc:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8005bde:	b10f      	cbz	r7, 8005be4 <decode_field+0x128>
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	b932      	cbnz	r2, 8005bf2 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8005be4:	4619      	mov	r1, r3
 8005be6:	4628      	mov	r0, r5
}
 8005be8:	b009      	add	sp, #36	; 0x24
 8005bea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8005bee:	f7ff beff 	b.w	80059f0 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8005bf2:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8005bf4:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8005bf8:	d11c      	bne.n	8005c34 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 8005bfa:	a904      	add	r1, sp, #16
 8005bfc:	f7ff ff2c 	bl	8005a58 <pb_make_string_substream>
 8005c00:	4604      	mov	r4, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0d4      	beq.n	8005bb0 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6871      	ldr	r1, [r6, #4]
 8005c0a:	4642      	mov	r2, r8
 8005c0c:	a804      	add	r0, sp, #16
 8005c0e:	4798      	blx	r3
 8005c10:	4604      	mov	r4, r0
 8005c12:	b930      	cbnz	r0, 8005c22 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 8005c14:	68eb      	ldr	r3, [r5, #12]
 8005c16:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <decode_field+0x1f4>)
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf08      	it	eq
 8005c1c:	4613      	moveq	r3, r2
 8005c1e:	60eb      	str	r3, [r5, #12]
 8005c20:	e7c6      	b.n	8005bb0 <decode_field+0xf4>
        } while (substream.bytes_left);
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ee      	bne.n	8005c06 <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f7ff ff34 	bl	8005a98 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005c30:	4604      	mov	r4, r0
 8005c32:	e7bd      	b.n	8005bb0 <decode_field+0xf4>
    switch (wire_type)
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d020      	beq.n	8005c7a <decode_field+0x1be>
 8005c38:	2b05      	cmp	r3, #5
 8005c3a:	d026      	beq.n	8005c8a <decode_field+0x1ce>
 8005c3c:	bb63      	cbnz	r3, 8005c98 <decode_field+0x1dc>
 8005c3e:	461c      	mov	r4, r3
 8005c40:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 8005c44:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8005c46:	2c0b      	cmp	r4, #11
 8005c48:	d089      	beq.n	8005b5e <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f7ff fd40 	bl	80056d4 <pb_read>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d082      	beq.n	8005b5e <decode_field+0xa2>
            } while (*buf++ & 0x80);
 8005c58:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dbf1      	blt.n	8005c44 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <decode_field+0x1f8>)
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	ab01      	add	r3, sp, #4
 8005c66:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005c6e:	6871      	ldr	r1, [r6, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4642      	mov	r2, r8
 8005c74:	a804      	add	r0, sp, #16
 8005c76:	4798      	blx	r3
 8005c78:	e7da      	b.n	8005c30 <decode_field+0x174>
            return pb_read(stream, buf, 8);
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	a901      	add	r1, sp, #4
 8005c7e:	f7ff fd29 	bl	80056d4 <pb_read>
            *size = 8;
 8005c82:	2408      	movs	r4, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d1eb      	bne.n	8005c60 <decode_field+0x1a4>
 8005c88:	e769      	b.n	8005b5e <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	eb0d 0102 	add.w	r1, sp, r2
 8005c90:	f7ff fd20 	bl	80056d4 <pb_read>
            *size = 4;
 8005c94:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8005c96:	e7f5      	b.n	8005c84 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005c98:	68c3      	ldr	r3, [r0, #12]
 8005c9a:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <decode_field+0x1fc>)
 8005c9c:	e77b      	b.n	8005b96 <decode_field+0xda>
 8005c9e:	bf00      	nop
 8005ca0:	0800f74c 	.word	0x0800f74c
 8005ca4:	0800f6d6 	.word	0x0800f6d6
 8005ca8:	0800f6c7 	.word	0x0800f6c7
 8005cac:	0800f657 	.word	0x0800f657
 8005cb0:	0800f6e9 	.word	0x0800f6e9
 8005cb4:	08005501 	.word	0x08005501
 8005cb8:	0800f69d 	.word	0x0800f69d

08005cbc <pb_decode_noinit>:
{
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	b091      	sub	sp, #68	; 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005cc2:	2500      	movs	r5, #0
{
 8005cc4:	4604      	mov	r4, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005cc6:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005cc8:	e9cd 5502 	strd	r5, r5, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8005ccc:	f8ad 5002 	strh.w	r5, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005cd0:	f7ff fbac 	bl	800542c <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8005cd4:	462f      	mov	r7, r5
    while (stream->bytes_left)
 8005cd6:	68a3      	ldr	r3, [r4, #8]
 8005cd8:	b9f3      	cbnz	r3, 8005d18 <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 8005cda:	b135      	cbz	r5, 8005cea <pb_decode_noinit+0x2e>
 8005cdc:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8005ce0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	f040 8096 	bne.w	8005e16 <pb_decode_noinit+0x15a>
            last_type = iter.pos->type;
 8005cea:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
        } while (pb_field_iter_next(&iter));
 8005cee:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8005cf0:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8005cf2:	f7ff fbad 	bl	8005450 <pb_field_iter_next>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1f7      	bne.n	8005cea <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8005cfa:	f016 0f30 	tst.w	r6, #48	; 0x30
 8005cfe:	d103      	bne.n	8005d08 <pb_decode_noinit+0x4c>
 8005d00:	9b05      	ldr	r3, [sp, #20]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <pb_decode_noinit+0x4c>
            req_field_count++;
 8005d06:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8005d08:	2d40      	cmp	r5, #64	; 0x40
 8005d0a:	f200 80cd 	bhi.w	8005ea8 <pb_decode_noinit+0x1ec>
        if (req_field_count > 0)
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	f040 80cb 	bne.w	8005eaa <pb_decode_noinit+0x1ee>
    return true;
 8005d14:	2001      	movs	r0, #1
 8005d16:	e00c      	b.n	8005d32 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8005d18:	f10d 0301 	add.w	r3, sp, #1
 8005d1c:	aa01      	add	r2, sp, #4
 8005d1e:	4669      	mov	r1, sp
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff fe4b 	bl	80059bc <pb_decode_tag>
 8005d26:	b938      	cbnz	r0, 8005d38 <pb_decode_noinit+0x7c>
            if (eof)
 8005d28:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1d4      	bne.n	8005cda <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005d30:	2000      	movs	r0, #0
}
 8005d32:	b011      	add	sp, #68	; 0x44
 8005d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8005d38:	9901      	ldr	r1, [sp, #4]
 8005d3a:	a804      	add	r0, sp, #16
 8005d3c:	f7ff fbc9 	bl	80054d2 <pb_field_iter_find>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d155      	bne.n	8005df0 <pb_decode_noinit+0x134>
            if (tag >= extension_range_start)
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	42bb      	cmp	r3, r7
 8005d48:	f0c0 80b6 	bcc.w	8005eb8 <pb_decode_noinit+0x1fc>
    const pb_field_t *start = iter->pos;
 8005d4c:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005d4e:	9a05      	ldr	r2, [sp, #20]
 8005d50:	7893      	ldrb	r3, [r2, #2]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	f000 80b7 	beq.w	8005eca <pb_decode_noinit+0x20e>
        (void)pb_field_iter_next(iter);
 8005d5c:	a804      	add	r0, sp, #16
 8005d5e:	f7ff fb77 	bl	8005450 <pb_field_iter_next>
    } while (iter->pos != start);
 8005d62:	9b05      	ldr	r3, [sp, #20]
 8005d64:	429e      	cmp	r6, r3
 8005d66:	d1f2      	bne.n	8005d4e <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 8005d68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
                if (tag >= extension_range_start)
 8005d6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d70:	45b8      	cmp	r8, r7
 8005d72:	f0c0 80a1 	bcc.w	8005eb8 <pb_decode_noinit+0x1fc>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005d76:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8005d78:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 8005d7c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005d80:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8005d82:	68a2      	ldr	r2, [r4, #8]
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	f000 8094 	beq.w	8005eb2 <pb_decode_noinit+0x1f6>
 8005d8a:	4591      	cmp	r9, r2
 8005d8c:	d1a3      	bne.n	8005cd6 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8005d8e:	6832      	ldr	r2, [r6, #0]
 8005d90:	f8d2 a000 	ldr.w	sl, [r2]
 8005d94:	f1ba 0f00 	cmp.w	sl, #0
 8005d98:	d008      	beq.n	8005dac <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4620      	mov	r0, r4
 8005da2:	47d0      	blx	sl
        if (!status)
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d0c3      	beq.n	8005d30 <pb_decode_noinit+0x74>
        extension = extension->next;
 8005da8:	68b6      	ldr	r6, [r6, #8]
 8005daa:	e7ea      	b.n	8005d82 <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005dac:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8005db0:	f8ba 2000 	ldrh.w	r2, [sl]
 8005db4:	4590      	cmp	r8, r2
 8005db6:	d1f7      	bne.n	8005da8 <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005db8:	6872      	ldr	r2, [r6, #4]
 8005dba:	4651      	mov	r1, sl
 8005dbc:	a80a      	add	r0, sp, #40	; 0x28
 8005dbe:	f7ff fb35 	bl	800542c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005dc2:	6872      	ldr	r2, [r6, #4]
 8005dc4:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8005dc6:	f106 020c 	add.w	r2, r6, #12
 8005dca:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005dcc:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005dd0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005dd4:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8005dd6:	bf08      	it	eq
 8005dd8:	1d32      	addeq	r2, r6, #4
    extension->found = true;
 8005dda:	f04f 0301 	mov.w	r3, #1
        iter->pData = &extension->dest;
 8005dde:	bf08      	it	eq
 8005de0:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005de2:	4659      	mov	r1, fp
    extension->found = true;
 8005de4:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005de6:	aa0a      	add	r2, sp, #40	; 0x28
 8005de8:	4620      	mov	r0, r4
 8005dea:	f7ff fe67 	bl	8005abc <decode_field>
 8005dee:	e7d9      	b.n	8005da4 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8005df0:	9a05      	ldr	r2, [sp, #20]
 8005df2:	7893      	ldrb	r3, [r2, #2]
 8005df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d121      	bne.n	8005e40 <pb_decode_noinit+0x184>
            && iter.pSize == iter.pData)
 8005dfc:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8005e00:	4299      	cmp	r1, r3
 8005e02:	d116      	bne.n	8005e32 <pb_decode_noinit+0x176>
            if (fixed_count_field != iter.pos) {
 8005e04:	42aa      	cmp	r2, r5
 8005e06:	d010      	beq.n	8005e2a <pb_decode_noinit+0x16e>
                if (fixed_count_field != NULL &&
 8005e08:	b165      	cbz	r5, 8005e24 <pb_decode_noinit+0x168>
 8005e0a:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 8005e0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d006      	beq.n	8005e24 <pb_decode_noinit+0x168>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	4a2d      	ldr	r2, [pc, #180]	; (8005ed0 <pb_decode_noinit+0x214>)
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf08      	it	eq
 8005e1e:	4613      	moveq	r3, r2
 8005e20:	60e3      	str	r3, [r4, #12]
 8005e22:	e785      	b.n	8005d30 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8005e2a:	f10d 0302 	add.w	r3, sp, #2
 8005e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e30:	4615      	mov	r5, r2
        if (!decode_field(stream, wire_type, &iter))
 8005e32:	f89d 1000 	ldrb.w	r1, [sp]
 8005e36:	aa04      	add	r2, sp, #16
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fe3f 	bl	8005abc <decode_field>
 8005e3e:	e040      	b.n	8005ec2 <pb_decode_noinit+0x206>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f6      	bne.n	8005e32 <pb_decode_noinit+0x176>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8005e44:	9a06      	ldr	r2, [sp, #24]
 8005e46:	2a3f      	cmp	r2, #63	; 0x3f
 8005e48:	d8f3      	bhi.n	8005e32 <pb_decode_noinit+0x176>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005e4a:	0951      	lsrs	r1, r2, #5
 8005e4c:	ab10      	add	r3, sp, #64	; 0x40
 8005e4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005e52:	f002 021f 	and.w	r2, r2, #31
 8005e56:	2301      	movs	r3, #1
 8005e58:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005e5a:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f841 3c38 	str.w	r3, [r1, #-56]
 8005e64:	e7e5      	b.n	8005e32 <pb_decode_noinit+0x176>
                if (fields_seen[i] != allbits)
 8005e66:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	d006      	beq.n	8005e7c <pb_decode_noinit+0x1c0>
                    PB_RETURN_ERROR(stream, "missing required field");
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <pb_decode_noinit+0x218>)
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf08      	it	eq
 8005e76:	4613      	moveq	r3, r2
 8005e78:	60e3      	str	r3, [r4, #12]
 8005e7a:	e75a      	b.n	8005d32 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 8005e7c:	3201      	adds	r2, #1
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d1f1      	bne.n	8005e66 <pb_decode_noinit+0x1aa>
            if ((req_field_count & 31) != 0)
 8005e82:	f015 051f 	ands.w	r5, r5, #31
 8005e86:	f43f af45 	beq.w	8005d14 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 8005e8a:	aa10      	add	r2, sp, #64	; 0x40
 8005e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8005e90:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8005e94:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e9c:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	f43f af37 	beq.w	8005d14 <pb_decode_noinit+0x58>
 8005ea6:	e7e2      	b.n	8005e6e <pb_decode_noinit+0x1b2>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8005ea8:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8005eaa:	096b      	lsrs	r3, r5, #5
 8005eac:	a902      	add	r1, sp, #8
 8005eae:	2200      	movs	r2, #0
 8005eb0:	e7e5      	b.n	8005e7e <pb_decode_noinit+0x1c2>
                    if (pos != stream->bytes_left)
 8005eb2:	4591      	cmp	r9, r2
 8005eb4:	f47f af0f 	bne.w	8005cd6 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8005eb8:	f89d 1000 	ldrb.w	r1, [sp]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff fd97 	bl	80059f0 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	f47f af07 	bne.w	8005cd6 <pb_decode_noinit+0x1a>
 8005ec8:	e732      	b.n	8005d30 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 8005eca:	8817      	ldrh	r7, [r2, #0]
 8005ecc:	e74e      	b.n	8005d6c <pb_decode_noinit+0xb0>
 8005ece:	bf00      	nop
 8005ed0:	0800f6f9 	.word	0x0800f6f9
 8005ed4:	0800f71a 	.word	0x0800f71a

08005ed8 <pb_decode>:
{
 8005ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eda:	460c      	mov	r4, r1
 8005edc:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	9201      	str	r2, [sp, #4]
 8005ee4:	f7ff fb77 	bl	80055d6 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005ee8:	9a01      	ldr	r2, [sp, #4]
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
}
 8005eee:	b003      	add	sp, #12
 8005ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005ef4:	f7ff bee2 	b.w	8005cbc <pb_decode_noinit>

08005ef8 <pb_dec_submessage>:
{
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	460e      	mov	r6, r1
 8005efe:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005f00:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8005f04:	a902      	add	r1, sp, #8
{
 8005f06:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8005f08:	f7ff fda6 	bl	8005a58 <pb_make_string_substream>
 8005f0c:	b1e0      	cbz	r0, 8005f48 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 8005f0e:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8005f12:	9a01      	ldr	r2, [sp, #4]
 8005f14:	b944      	cbnz	r4, 8005f28 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005f16:	68eb      	ldr	r3, [r5, #12]
 8005f18:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <pb_dec_submessage+0x5c>)
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf08      	it	eq
 8005f1e:	4613      	moveq	r3, r2
 8005f20:	60eb      	str	r3, [r5, #12]
}
 8005f22:	4620      	mov	r0, r4
 8005f24:	b007      	add	sp, #28
 8005f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005f28:	78b3      	ldrb	r3, [r6, #2]
 8005f2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f2e:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 8005f30:	4639      	mov	r1, r7
 8005f32:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005f34:	d10a      	bne.n	8005f4c <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 8005f36:	f7ff ffcf 	bl	8005ed8 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005f3a:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005f3c:	a902      	add	r1, sp, #8
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7ff fdaa 	bl	8005a98 <pb_close_string_substream>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1ec      	bne.n	8005f22 <pb_dec_submessage+0x2a>
        return false;
 8005f48:	2400      	movs	r4, #0
 8005f4a:	e7ea      	b.n	8005f22 <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005f4c:	f7ff feb6 	bl	8005cbc <pb_decode_noinit>
 8005f50:	e7f3      	b.n	8005f3a <pb_dec_submessage+0x42>
 8005f52:	bf00      	nop
 8005f54:	0800f731 	.word	0x0800f731

08005f58 <pb_decode_delimited>:
{
 8005f58:	b530      	push	{r4, r5, lr}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8005f5e:	a902      	add	r1, sp, #8
{
 8005f60:	4605      	mov	r5, r0
 8005f62:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005f64:	f7ff fd78 	bl	8005a58 <pb_make_string_substream>
 8005f68:	b150      	cbz	r0, 8005f80 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	9a01      	ldr	r2, [sp, #4]
 8005f6e:	a802      	add	r0, sp, #8
 8005f70:	f7ff ffb2 	bl	8005ed8 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005f74:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8005f76:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7ff fd8d 	bl	8005a98 <pb_close_string_substream>
 8005f7e:	b900      	cbnz	r0, 8005f82 <pb_decode_delimited+0x2a>
        return false;
 8005f80:	2400      	movs	r4, #0
}
 8005f82:	4620      	mov	r0, r4
 8005f84:	b007      	add	sp, #28
 8005f86:	bd30      	pop	{r4, r5, pc}

08005f88 <pb_decode_svarint>:
{
 8005f88:	b513      	push	{r0, r1, r4, lr}
 8005f8a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005f8c:	4669      	mov	r1, sp
 8005f8e:	f7ff fc6f 	bl	8005870 <pb_decode_varint>
 8005f92:	b160      	cbz	r0, 8005fae <pb_decode_svarint+0x26>
    if (value & 1)
 8005f94:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005f98:	084a      	lsrs	r2, r1, #1
 8005f9a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8005f9e:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005fa0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005fa4:	bf44      	itt	mi
 8005fa6:	43d2      	mvnmi	r2, r2
 8005fa8:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005faa:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005fae:	b002      	add	sp, #8
 8005fb0:	bd10      	pop	{r4, pc}
	...

08005fb4 <pb_dec_svarint>:
{
 8005fb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fb6:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8005fb8:	4669      	mov	r1, sp
{
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 8005fbe:	f7ff ffe3 	bl	8005f88 <pb_decode_svarint>
 8005fc2:	b138      	cbz	r0, 8005fd4 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005fc4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d105      	bne.n	8005fd8 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8005fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fd0:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d10b      	bne.n	8005ff4 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8005fe0:	e9dd 5100 	ldrd	r5, r1, [sp]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005fe4:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	bf08      	it	eq
 8005fea:	429d      	cmpeq	r5, r3
 8005fec:	d0f2      	beq.n	8005fd4 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <pb_dec_svarint+0x68>)
 8005ff2:	e00d      	b.n	8006010 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d103      	bne.n	8006000 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8005ff8:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005ffc:	802b      	strh	r3, [r5, #0]
 8005ffe:	e7ef      	b.n	8005fe0 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8006000:	2b01      	cmp	r3, #1
 8006002:	d103      	bne.n	800600c <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8006004:	f99d 3000 	ldrsb.w	r3, [sp]
 8006008:	702b      	strb	r3, [r5, #0]
 800600a:	e7e9      	b.n	8005fe0 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800600c:	68e3      	ldr	r3, [r4, #12]
 800600e:	4a04      	ldr	r2, [pc, #16]	; (8006020 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf08      	it	eq
 8006014:	4613      	moveq	r3, r2
 8006016:	60e3      	str	r3, [r4, #12]
 8006018:	2000      	movs	r0, #0
 800601a:	e7db      	b.n	8005fd4 <pb_dec_svarint+0x20>
 800601c:	0800f68b 	.word	0x0800f68b
 8006020:	0800f679 	.word	0x0800f679

08006024 <pb_decode_fixed32>:
{
 8006024:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8006026:	2204      	movs	r2, #4
{
 8006028:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800602a:	eb0d 0102 	add.w	r1, sp, r2
 800602e:	f7ff fb51 	bl	80056d4 <pb_read>
 8006032:	b108      	cbz	r0, 8006038 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8006034:	9b01      	ldr	r3, [sp, #4]
 8006036:	6023      	str	r3, [r4, #0]
}
 8006038:	b002      	add	sp, #8
 800603a:	bd10      	pop	{r4, pc}

0800603c <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 800603c:	4611      	mov	r1, r2
 800603e:	f7ff bff1 	b.w	8006024 <pb_decode_fixed32>

08006042 <pb_decode_fixed64>:
{
 8006042:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8006044:	2208      	movs	r2, #8
{
 8006046:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8006048:	4669      	mov	r1, sp
 800604a:	f7ff fb43 	bl	80056d4 <pb_read>
 800604e:	b118      	cbz	r0, 8006058 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8006050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006054:	e9c4 2300 	strd	r2, r3, [r4]
}
 8006058:	b002      	add	sp, #8
 800605a:	bd10      	pop	{r4, pc}

0800605c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 800605c:	4611      	mov	r1, r2
 800605e:	f7ff bff0 	b.w	8006042 <pb_decode_fixed64>

08006062 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8006062:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 8006064:	7882      	ldrb	r2, [r0, #2]
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8006066:	f012 0330 	ands.w	r3, r2, #48	; 0x30
{
 800606a:	b086      	sub	sp, #24
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800606c:	d043      	beq.n	80060f6 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800606e:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8006070:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8006074:	d104      	bne.n	8006080 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8006076:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8006078:	fab0 f080 	clz	r0, r0
 800607c:	0940      	lsrs	r0, r0, #5
 800607e:	e007      	b.n	8006090 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d0f8      	beq.n	8006076 <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8006084:	2b10      	cmp	r3, #16
 8006086:	d105      	bne.n	8006094 <pb_check_proto3_default_value+0x32>
 8006088:	b124      	cbz	r4, 8006094 <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 800608a:	5d08      	ldrb	r0, [r1, r4]
 800608c:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8006090:	b006      	add	sp, #24
 8006092:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006094:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006098:	d006      	beq.n	80060a8 <pb_check_proto3_default_value+0x46>
 800609a:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800609e:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 80060a0:	428b      	cmp	r3, r1
 80060a2:	d124      	bne.n	80060ee <pb_check_proto3_default_value+0x8c>
	    return true;
 80060a4:	2001      	movs	r0, #1
 80060a6:	e7f3      	b.n	8006090 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80060a8:	f002 030f 	and.w	r3, r2, #15
 80060ac:	2b05      	cmp	r3, #5
 80060ae:	d101      	bne.n	80060b4 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 80060b0:	8808      	ldrh	r0, [r1, #0]
 80060b2:	e7e1      	b.n	8006078 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d101      	bne.n	80060bc <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 80060b8:	7808      	ldrb	r0, [r1, #0]
 80060ba:	e7dd      	b.n	8006078 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d102      	bne.n	80060c6 <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 80060c0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80060c4:	e7d8      	b.n	8006078 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80060c6:	2b07      	cmp	r3, #7
 80060c8:	d1e7      	bne.n	800609a <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 80060ca:	460a      	mov	r2, r1
 80060cc:	f8d0 100b 	ldr.w	r1, [r0, #11]
 80060d0:	4668      	mov	r0, sp
 80060d2:	f7ff f9ab 	bl	800542c <pb_field_iter_begin>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0e4      	beq.n	80060a4 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 80060da:	9904      	ldr	r1, [sp, #16]
 80060dc:	9801      	ldr	r0, [sp, #4]
 80060de:	f7ff ffc0 	bl	8006062 <pb_check_proto3_default_value>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0d4      	beq.n	8006090 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 80060e6:	4668      	mov	r0, sp
 80060e8:	f7ff f9b2 	bl	8005450 <pb_field_iter_next>
 80060ec:	e7f3      	b.n	80060d6 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 80060ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d0d4      	beq.n	80060a0 <pb_check_proto3_default_value+0x3e>
        return false;
 80060f6:	2000      	movs	r0, #0
 80060f8:	e7ca      	b.n	8006090 <pb_check_proto3_default_value+0x2e>
	...

080060fc <pb_write>:
{
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 80060fe:	6806      	ldr	r6, [r0, #0]
{
 8006100:	4604      	mov	r4, r0
 8006102:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8006104:	b1ae      	cbz	r6, 8006132 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8006106:	68c3      	ldr	r3, [r0, #12]
 8006108:	6887      	ldr	r7, [r0, #8]
 800610a:	4413      	add	r3, r2
 800610c:	429f      	cmp	r7, r3
 800610e:	d207      	bcs.n	8006120 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 8006110:	6903      	ldr	r3, [r0, #16]
 8006112:	4a0a      	ldr	r2, [pc, #40]	; (800613c <pb_write+0x40>)
 8006114:	2b00      	cmp	r3, #0
 8006116:	bf08      	it	eq
 8006118:	4613      	moveq	r3, r2
 800611a:	6103      	str	r3, [r0, #16]
 800611c:	2000      	movs	r0, #0
}
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8006120:	47b0      	blx	r6
 8006122:	b930      	cbnz	r0, 8006132 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	4a06      	ldr	r2, [pc, #24]	; (8006140 <pb_write+0x44>)
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf08      	it	eq
 800612c:	4613      	moveq	r3, r2
 800612e:	6123      	str	r3, [r4, #16]
 8006130:	e7f5      	b.n	800611e <pb_write+0x22>
    stream->bytes_written += count;
 8006132:	68e2      	ldr	r2, [r4, #12]
 8006134:	442a      	add	r2, r5
 8006136:	60e2      	str	r2, [r4, #12]
    return true;
 8006138:	2001      	movs	r0, #1
 800613a:	e7f0      	b.n	800611e <pb_write+0x22>
 800613c:	0800f774 	.word	0x0800f774
 8006140:	0800f5fe 	.word	0x0800f5fe

08006144 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8006144:	2a80      	cmp	r2, #128	; 0x80
{
 8006146:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 8006148:	f173 0100 	sbcs.w	r1, r3, #0
{
 800614c:	4605      	mov	r5, r0
    if (value <= 0x7F)
 800614e:	d207      	bcs.n	8006160 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 8006150:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8006154:	a901      	add	r1, sp, #4
 8006156:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8006158:	f7ff ffd0 	bl	80060fc <pb_write>
}
 800615c:	b004      	add	sp, #16
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8006162:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8006164:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8006168:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800616c:	09d1      	lsrs	r1, r2, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800616e:	b2d0      	uxtb	r0, r2
        value >>= 7;
 8006170:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8006174:	09db      	lsrs	r3, r3, #7
    while (value)
 8006176:	ea52 0c03 	orrs.w	ip, r2, r3
 800617a:	4621      	mov	r1, r4
        i++;
 800617c:	f104 0401 	add.w	r4, r4, #1
    while (value)
 8006180:	d1f0      	bne.n	8006164 <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8006182:	f101 0310 	add.w	r3, r1, #16
 8006186:	446b      	add	r3, sp
 8006188:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800618c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8006190:	a901      	add	r1, sp, #4
 8006192:	4622      	mov	r2, r4
 8006194:	4628      	mov	r0, r5
 8006196:	e7df      	b.n	8006158 <pb_encode_varint+0x14>

08006198 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8006198:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d104      	bne.n	80061aa <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 80061a0:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 80061a2:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 80061a4:	460a      	mov	r2, r1
 80061a6:	f7ff bfcd 	b.w	8006144 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d101      	bne.n	80061b2 <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 80061ae:	8811      	ldrh	r1, [r2, #0]
 80061b0:	e7f7      	b.n	80061a2 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d101      	bne.n	80061ba <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 80061b6:	6811      	ldr	r1, [r2, #0]
 80061b8:	e7f3      	b.n	80061a2 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d102      	bne.n	80061c4 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 80061be:	e9d2 1300 	ldrd	r1, r3, [r2]
 80061c2:	e7ef      	b.n	80061a4 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80061c4:	6903      	ldr	r3, [r0, #16]
 80061c6:	4a03      	ldr	r2, [pc, #12]	; (80061d4 <pb_enc_uvarint+0x3c>)
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf08      	it	eq
 80061cc:	4613      	moveq	r3, r2
 80061ce:	6103      	str	r3, [r0, #16]
}
 80061d0:	2000      	movs	r0, #0
 80061d2:	4770      	bx	lr
 80061d4:	0800f679 	.word	0x0800f679

080061d8 <pb_enc_varint>:
{
 80061d8:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 80061da:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80061de:	2a01      	cmp	r2, #1
 80061e0:	d104      	bne.n	80061ec <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 80061e2:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 80061e6:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 80061e8:	f7ff bfac 	b.w	8006144 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 80061ec:	2a02      	cmp	r2, #2
 80061ee:	d102      	bne.n	80061f6 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 80061f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80061f4:	e7f7      	b.n	80061e6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 80061f6:	2a04      	cmp	r2, #4
 80061f8:	d101      	bne.n	80061fe <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	e7f3      	b.n	80061e6 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 80061fe:	2a08      	cmp	r2, #8
 8006200:	d102      	bne.n	8006208 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	e7ef      	b.n	80061e8 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006208:	6903      	ldr	r3, [r0, #16]
 800620a:	4a03      	ldr	r2, [pc, #12]	; (8006218 <pb_enc_varint+0x40>)
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf08      	it	eq
 8006210:	4613      	moveq	r3, r2
 8006212:	6103      	str	r3, [r0, #16]
}
 8006214:	2000      	movs	r0, #0
 8006216:	4770      	bx	lr
 8006218:	0800f679 	.word	0x0800f679

0800621c <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 800621c:	1892      	adds	r2, r2, r2
{
 800621e:	b410      	push	{r4}
 8006220:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 8006222:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 8006226:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 8006228:	460b      	mov	r3, r1
}
 800622a:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 800622e:	bfbc      	itt	lt
 8006230:	43d2      	mvnlt	r2, r2
 8006232:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 8006234:	f7ff bf86 	b.w	8006144 <pb_encode_varint>

08006238 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006238:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 800623a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800623e:	2a01      	cmp	r2, #1
 8006240:	d104      	bne.n	800624c <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 8006242:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 8006246:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8006248:	f7ff bfe8 	b.w	800621c <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 800624c:	2a02      	cmp	r2, #2
 800624e:	d102      	bne.n	8006256 <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 8006250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006254:	e7f7      	b.n	8006246 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8006256:	2a04      	cmp	r2, #4
 8006258:	d101      	bne.n	800625e <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	e7f3      	b.n	8006246 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800625e:	2a08      	cmp	r2, #8
 8006260:	d102      	bne.n	8006268 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	e7ef      	b.n	8006248 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006268:	6903      	ldr	r3, [r0, #16]
 800626a:	4a03      	ldr	r2, [pc, #12]	; (8006278 <pb_enc_svarint+0x40>)
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf08      	it	eq
 8006270:	4613      	moveq	r3, r2
 8006272:	6103      	str	r3, [r0, #16]
}
 8006274:	2000      	movs	r0, #0
 8006276:	4770      	bx	lr
 8006278:	0800f679 	.word	0x0800f679

0800627c <pb_encode_fixed32>:
{
 800627c:	b507      	push	{r0, r1, r2, lr}
    uint32_t val = *(const uint32_t*)value;
 800627e:	680b      	ldr	r3, [r1, #0]
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8006280:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8006284:	0a1a      	lsrs	r2, r3, #8
 8006286:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800628a:	0c1a      	lsrs	r2, r3, #16
 800628c:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 8006290:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8006292:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 4);
 8006294:	eb0d 0102 	add.w	r1, sp, r2
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8006298:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 800629c:	f7ff ff2e 	bl	80060fc <pb_write>
}
 80062a0:	b003      	add	sp, #12
 80062a2:	f85d fb04 	ldr.w	pc, [sp], #4

080062a6 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 80062a6:	4611      	mov	r1, r2
 80062a8:	f7ff bfe8 	b.w	800627c <pb_encode_fixed32>

080062ac <pb_encode_fixed64>:
{
 80062ac:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 80062ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80062b2:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80062b4:	f88d 2000 	strb.w	r2, [sp]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 80062b8:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80062bc:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 80062be:	0e12      	lsrs	r2, r2, #24
 80062c0:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 80062c4:	0a1a      	lsrs	r2, r3, #8
 80062c6:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 80062ca:	0c1a      	lsrs	r2, r3, #16
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 80062cc:	f88d 1002 	strb.w	r1, [sp, #2]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 80062d0:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 80062d4:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 80062d8:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 80062da:	2208      	movs	r2, #8
 80062dc:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 80062de:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 80062e2:	f7ff ff0b 	bl	80060fc <pb_write>
}
 80062e6:	b003      	add	sp, #12
 80062e8:	f85d fb04 	ldr.w	pc, [sp], #4

080062ec <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 80062ec:	4611      	mov	r1, r2
 80062ee:	f7ff bfdd 	b.w	80062ac <pb_encode_fixed64>

080062f2 <pb_encode_tag>:
{
 80062f2:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 80062f4:	0f5b      	lsrs	r3, r3, #29
 80062f6:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 80062fa:	f7ff bf23 	b.w	8006144 <pb_encode_varint>
	...

08006300 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8006300:	788a      	ldrb	r2, [r1, #2]
 8006302:	f002 020f 	and.w	r2, r2, #15
{
 8006306:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 8006308:	2a09      	cmp	r2, #9
 800630a:	d810      	bhi.n	800632e <pb_encode_tag_for_field+0x2e>
 800630c:	e8df f002 	tbb	[pc, r2]
 8006310:	050b0b0b 	.word	0x050b0b0b
 8006314:	0909090d 	.word	0x0909090d
 8006318:	090f      	.short	0x090f
 800631a:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	f7ff bfe8 	b.w	80062f2 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 8006322:	2102      	movs	r1, #2
            break;
 8006324:	e7fa      	b.n	800631c <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 8006326:	2100      	movs	r1, #0
 8006328:	e7f8      	b.n	800631c <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 800632a:	2101      	movs	r1, #1
 800632c:	e7f6      	b.n	800631c <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 800632e:	6903      	ldr	r3, [r0, #16]
 8006330:	4a03      	ldr	r2, [pc, #12]	; (8006340 <pb_encode_tag_for_field+0x40>)
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf08      	it	eq
 8006336:	4613      	moveq	r3, r2
 8006338:	6103      	str	r3, [r0, #16]
}
 800633a:	2000      	movs	r0, #0
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	0800f6d6 	.word	0x0800f6d6

08006344 <encode_field>:
{
 8006344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 800634a:	788a      	ldrb	r2, [r1, #2]
 800634c:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 8006350:	2b40      	cmp	r3, #64	; 0x40
{
 8006352:	b086      	sub	sp, #24
 8006354:	4605      	mov	r5, r0
 8006356:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8006358:	f000 80dd 	beq.w	8006516 <encode_field+0x1d2>
 800635c:	0653      	lsls	r3, r2, #25
 800635e:	d41b      	bmi.n	8006398 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8006360:	4b75      	ldr	r3, [pc, #468]	; (8006538 <encode_field+0x1f4>)
 8006362:	f002 010f 	and.w	r1, r2, #15
 8006366:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 800636a:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 800636e:	b1b3      	cbz	r3, 800639e <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 8006370:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006372:	78a2      	ldrb	r2, [r4, #2]
 8006374:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8006378:	2880      	cmp	r0, #128	; 0x80
 800637a:	d105      	bne.n	8006388 <encode_field+0x44>
        pData = *(const void* const*)pData;
 800637c:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 800637e:	1e31      	subs	r1, r6, #0
 8006380:	bf18      	it	ne
 8006382:	2101      	movne	r1, #1
 8006384:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8006388:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800638c:	2920      	cmp	r1, #32
 800638e:	d03e      	beq.n	800640e <encode_field+0xca>
 8006390:	d818      	bhi.n	80063c4 <encode_field+0x80>
 8006392:	b361      	cbz	r1, 80063ee <encode_field+0xaa>
 8006394:	2910      	cmp	r1, #16
 8006396:	d033      	beq.n	8006400 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8006398:	692b      	ldr	r3, [r5, #16]
 800639a:	4a68      	ldr	r2, [pc, #416]	; (800653c <encode_field+0x1f8>)
 800639c:	e02b      	b.n	80063f6 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800639e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80063a2:	2a10      	cmp	r2, #16
 80063a4:	d10a      	bne.n	80063bc <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80063a6:	4631      	mov	r1, r6
 80063a8:	4620      	mov	r0, r4
 80063aa:	f7ff fe5a 	bl	8006062 <pb_check_proto3_default_value>
 80063ae:	f080 0001 	eor.w	r0, r0, #1
 80063b2:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 80063b6:	f10d 0303 	add.w	r3, sp, #3
 80063ba:	e7da      	b.n	8006372 <encode_field+0x2e>
        implicit_has = true;
 80063bc:	2301      	movs	r3, #1
 80063be:	f88d 3003 	strb.w	r3, [sp, #3]
 80063c2:	e7f8      	b.n	80063b6 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 80063c4:	2930      	cmp	r1, #48	; 0x30
 80063c6:	d1e7      	bne.n	8006398 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	8823      	ldrh	r3, [r4, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d11a      	bne.n	8006406 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 80063d0:	4621      	mov	r1, r4
 80063d2:	4628      	mov	r0, r5
 80063d4:	f7ff ff94 	bl	8006300 <pb_encode_tag_for_field>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f000 8090 	beq.w	80064fe <encode_field+0x1ba>
                if (!func(stream, field, pData))
 80063de:	4632      	mov	r2, r6
 80063e0:	4621      	mov	r1, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	463b      	mov	r3, r7
}
 80063e6:	b006      	add	sp, #24
 80063e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 80063ec:	4718      	bx	r3
            if (!pData)
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d1ee      	bne.n	80063d0 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 80063f2:	692b      	ldr	r3, [r5, #16]
 80063f4:	4a52      	ldr	r2, [pc, #328]	; (8006540 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bf08      	it	eq
 80063fa:	4613      	moveq	r3, r2
 80063fc:	612b      	str	r3, [r5, #16]
 80063fe:	e07e      	b.n	80064fe <encode_field+0x1ba>
            if (*(const bool*)pSize)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e4      	bne.n	80063d0 <encode_field+0x8c>
    return true;
 8006406:	2001      	movs	r0, #1
}
 8006408:	b006      	add	sp, #24
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 800640e:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 8006412:	b169      	cbz	r1, 8006430 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 8006414:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8006418:	f1b8 0f00 	cmp.w	r8, #0
 800641c:	d0f3      	beq.n	8006406 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800641e:	2880      	cmp	r0, #128	; 0x80
 8006420:	d009      	beq.n	8006436 <encode_field+0xf2>
 8006422:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8006426:	4598      	cmp	r8, r3
 8006428:	d905      	bls.n	8006436 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800642a:	692b      	ldr	r3, [r5, #16]
 800642c:	4a45      	ldr	r2, [pc, #276]	; (8006544 <encode_field+0x200>)
 800642e:	e7e2      	b.n	80063f6 <encode_field+0xb2>
                count = field->array_size;
 8006430:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 8006434:	e7f0      	b.n	8006418 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8006436:	f002 020f 	and.w	r2, r2, #15
 800643a:	2a04      	cmp	r2, #4
 800643c:	d849      	bhi.n	80064d2 <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800643e:	8822      	ldrh	r2, [r4, #0]
 8006440:	2102      	movs	r1, #2
 8006442:	4628      	mov	r0, r5
 8006444:	f7ff ff55 	bl	80062f2 <pb_encode_tag>
 8006448:	2800      	cmp	r0, #0
 800644a:	d058      	beq.n	80064fe <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800644c:	78a3      	ldrb	r3, [r4, #2]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	2b03      	cmp	r3, #3
 8006454:	d111      	bne.n	800647a <encode_field+0x136>
            size = 4 * count;
 8006456:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800645a:	464a      	mov	r2, r9
 800645c:	2300      	movs	r3, #0
 800645e:	4628      	mov	r0, r5
 8006460:	f7ff fe70 	bl	8006144 <pb_encode_varint>
 8006464:	2800      	cmp	r0, #0
 8006466:	d04a      	beq.n	80064fe <encode_field+0x1ba>
        if (stream->callback == NULL)
 8006468:	6829      	ldr	r1, [r5, #0]
 800646a:	bb19      	cbnz	r1, 80064b4 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800646c:	464a      	mov	r2, r9
 800646e:	4628      	mov	r0, r5
}
 8006470:	b006      	add	sp, #24
 8006472:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006476:	f7ff be41 	b.w	80060fc <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800647a:	2b04      	cmp	r3, #4
 800647c:	d102      	bne.n	8006484 <encode_field+0x140>
            size = 8 * count;
 800647e:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006482:	e7ea      	b.n	800645a <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8006484:	2214      	movs	r2, #20
 8006486:	2100      	movs	r1, #0
 8006488:	a801      	add	r0, sp, #4
 800648a:	f003 fb4f 	bl	8009b2c <memset>
 800648e:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 8006490:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8006494:	4652      	mov	r2, sl
 8006496:	4621      	mov	r1, r4
 8006498:	a801      	add	r0, sp, #4
 800649a:	47b8      	blx	r7
 800649c:	2800      	cmp	r0, #0
 800649e:	d0b3      	beq.n	8006408 <encode_field+0xc4>
                p = (const char*)p + field->data_size;
 80064a0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 80064a4:	f109 0901 	add.w	r9, r9, #1
 80064a8:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 80064aa:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 80064ac:	d8f2      	bhi.n	8006494 <encode_field+0x150>
            size = sizestream.bytes_written;
 80064ae:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80064b2:	e7d2      	b.n	800645a <encode_field+0x116>
        for (i = 0; i < count; i++)
 80064b4:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 80064b8:	4632      	mov	r2, r6
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	b1e8      	cbz	r0, 80064fe <encode_field+0x1ba>
            p = (const char*)p + field->data_size;
 80064c2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 80064c6:	f109 0901 	add.w	r9, r9, #1
 80064ca:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80064cc:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 80064ce:	d8f3      	bhi.n	80064b8 <encode_field+0x174>
 80064d0:	e799      	b.n	8006406 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 80064d2:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff ff11 	bl	8006300 <pb_encode_tag_for_field>
 80064de:	b170      	cbz	r0, 80064fe <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80064e0:	78a3      	ldrb	r3, [r4, #2]
 80064e2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80064e6:	2a80      	cmp	r2, #128	; 0x80
 80064e8:	d113      	bne.n	8006512 <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d80e      	bhi.n	8006512 <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 80064f4:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	b908      	cbnz	r0, 8006502 <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 80064fe:	2000      	movs	r0, #0
 8006500:	e782      	b.n	8006408 <encode_field+0xc4>
            p = (const char*)p + field->data_size;
 8006502:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8006506:	f109 0901 	add.w	r9, r9, #1
 800650a:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800650c:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800650e:	d8e2      	bhi.n	80064d6 <encode_field+0x192>
 8006510:	e779      	b.n	8006406 <encode_field+0xc2>
                if (!func(stream, field, p))
 8006512:	4632      	mov	r2, r6
 8006514:	e7ef      	b.n	80064f6 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f43f af74 	beq.w	8006406 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 800651e:	1d32      	adds	r2, r6, #4
 8006520:	4798      	blx	r3
 8006522:	2800      	cmp	r0, #0
 8006524:	f47f af6f 	bne.w	8006406 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 8006528:	692b      	ldr	r3, [r5, #16]
 800652a:	4a07      	ldr	r2, [pc, #28]	; (8006548 <encode_field+0x204>)
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf08      	it	eq
 8006530:	4613      	moveq	r3, r2
 8006532:	612b      	str	r3, [r5, #16]
 8006534:	e768      	b.n	8006408 <encode_field+0xc4>
 8006536:	bf00      	nop
 8006538:	0800f7d0 	.word	0x0800f7d0
 800653c:	0800f6d6 	.word	0x0800f6d6
 8006540:	0800f71a 	.word	0x0800f71a
 8006544:	0800f780 	.word	0x0800f780
 8006548:	0800f798 	.word	0x0800f798

0800654c <pb_encode>:
{
 800654c:	b530      	push	{r4, r5, lr}
 800654e:	b087      	sub	sp, #28
 8006550:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8006552:	4668      	mov	r0, sp
 8006554:	f7fe ff6a 	bl	800542c <pb_field_iter_begin>
 8006558:	b910      	cbnz	r0, 8006560 <pb_encode+0x14>
        return true; /* Empty message type */
 800655a:	2001      	movs	r0, #1
}
 800655c:	b007      	add	sp, #28
 800655e:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006560:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8006562:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8006564:	788b      	ldrb	r3, [r1, #2]
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	2b08      	cmp	r3, #8
 800656c:	d11c      	bne.n	80065a8 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 800656e:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8006570:	b91c      	cbnz	r4, 800657a <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8006572:	4668      	mov	r0, sp
 8006574:	f7fe ff6c 	bl	8005450 <pb_field_iter_next>
 8006578:	e7ee      	b.n	8006558 <pb_encode+0xc>
        if (extension->type->encode)
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	b12a      	cbz	r2, 800658c <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8006580:	4621      	mov	r1, r4
 8006582:	4628      	mov	r0, r5
 8006584:	4790      	blx	r2
        if (!status)
 8006586:	b968      	cbnz	r0, 80065a4 <pb_encode+0x58>
                return false;
 8006588:	2000      	movs	r0, #0
 800658a:	e7e7      	b.n	800655c <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800658c:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800658e:	788b      	ldrb	r3, [r1, #2]
 8006590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006594:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, extension->dest);
 8006596:	bf14      	ite	ne
 8006598:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 800659a:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 800659c:	4628      	mov	r0, r5
 800659e:	f7ff fed1 	bl	8006344 <encode_field>
 80065a2:	e7f0      	b.n	8006586 <pb_encode+0x3a>
        extension = extension->next;
 80065a4:	68a4      	ldr	r4, [r4, #8]
 80065a6:	e7e3      	b.n	8006570 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80065a8:	4628      	mov	r0, r5
 80065aa:	f7ff fecb 	bl	8006344 <encode_field>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d1df      	bne.n	8006572 <pb_encode+0x26>
 80065b2:	e7e9      	b.n	8006588 <pb_encode+0x3c>

080065b4 <pb_encode_string>:
{
 80065b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80065b6:	2300      	movs	r3, #0
{
 80065b8:	4604      	mov	r4, r0
 80065ba:	9101      	str	r1, [sp, #4]
 80065bc:	4615      	mov	r5, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80065be:	f7ff fdc1 	bl	8006144 <pb_encode_varint>
 80065c2:	b138      	cbz	r0, 80065d4 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 80065c4:	9901      	ldr	r1, [sp, #4]
 80065c6:	462a      	mov	r2, r5
 80065c8:	4620      	mov	r0, r4
}
 80065ca:	b003      	add	sp, #12
 80065cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 80065d0:	f7ff bd94 	b.w	80060fc <pb_write>
}
 80065d4:	b003      	add	sp, #12
 80065d6:	bd30      	pop	{r4, r5, pc}

080065d8 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80065d8:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 80065da:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80065de:	4619      	mov	r1, r3
 80065e0:	f7ff bfe8 	b.w	80065b4 <pb_encode_string>

080065e4 <pb_enc_string>:
{
 80065e4:	b410      	push	{r4}
    size_t max_size = field->data_size;
 80065e6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80065ea:	7889      	ldrb	r1, [r1, #2]
 80065ec:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 80065f0:	2980      	cmp	r1, #128	; 0x80
 80065f2:	bf08      	it	eq
 80065f4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (src == NULL)
 80065f8:	4611      	mov	r1, r2
 80065fa:	b122      	cbz	r2, 8006606 <pb_enc_string+0x22>
    size_t size = 0;
 80065fc:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 80065fe:	429a      	cmp	r2, r3
 8006600:	d001      	beq.n	8006606 <pb_enc_string+0x22>
 8006602:	5c8c      	ldrb	r4, [r1, r2]
 8006604:	b91c      	cbnz	r4, 800660e <pb_enc_string+0x2a>
}
 8006606:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800660a:	f7ff bfd3 	b.w	80065b4 <pb_encode_string>
            size++;
 800660e:	3201      	adds	r2, #1
            p++;
 8006610:	e7f5      	b.n	80065fe <pb_enc_string+0x1a>
	...

08006614 <pb_enc_bytes>:
{
 8006614:	b470      	push	{r4, r5, r6}
 8006616:	4603      	mov	r3, r0
 8006618:	460c      	mov	r4, r1
    if (src == NULL)
 800661a:	4611      	mov	r1, r2
 800661c:	b912      	cbnz	r2, 8006624 <pb_enc_bytes+0x10>
}
 800661e:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006620:	f7ff bfc8 	b.w	80065b4 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006624:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8006626:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006628:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 800662c:	d104      	bne.n	8006638 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800662e:	f8b4 6007 	ldrh.w	r6, [r4, #7]
 8006632:	1c95      	adds	r5, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8006634:	42b5      	cmp	r5, r6
 8006636:	d802      	bhi.n	800663e <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8006638:	3102      	adds	r1, #2
 800663a:	4618      	mov	r0, r3
 800663c:	e7ef      	b.n	800661e <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	4903      	ldr	r1, [pc, #12]	; (8006650 <pb_enc_bytes+0x3c>)
 8006642:	2a00      	cmp	r2, #0
 8006644:	bf08      	it	eq
 8006646:	460a      	moveq	r2, r1
}
 8006648:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800664a:	611a      	str	r2, [r3, #16]
}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	0800f7a7 	.word	0x0800f7a7

08006654 <pb_encode_submessage>:
{
 8006654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006658:	b086      	sub	sp, #24
 800665a:	460f      	mov	r7, r1
 800665c:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800665e:	2100      	movs	r1, #0
 8006660:	2214      	movs	r2, #20
{
 8006662:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006664:	a801      	add	r0, sp, #4
 8006666:	f003 fa61 	bl	8009b2c <memset>
    if (!pb_encode(&substream, fields, src_struct))
 800666a:	4642      	mov	r2, r8
 800666c:	4639      	mov	r1, r7
 800666e:	a801      	add	r0, sp, #4
 8006670:	f7ff ff6c 	bl	800654c <pb_encode>
 8006674:	b910      	cbnz	r0, 800667c <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 8006676:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	e00d      	b.n	8006698 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 800667c:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800667e:	2500      	movs	r5, #0
 8006680:	4632      	mov	r2, r6
 8006682:	462b      	mov	r3, r5
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff fd5d 	bl	8006144 <pb_encode_varint>
 800668a:	b128      	cbz	r0, 8006698 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 800668c:	6821      	ldr	r1, [r4, #0]
 800668e:	b931      	cbnz	r1, 800669e <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8006690:	4632      	mov	r2, r6
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff fd32 	bl	80060fc <pb_write>
}
 8006698:	b006      	add	sp, #24
 800669a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	68a2      	ldr	r2, [r4, #8]
 80066a2:	4433      	add	r3, r6
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d907      	bls.n	80066b8 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	4a0e      	ldr	r2, [pc, #56]	; (80066e4 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bf08      	it	eq
 80066b0:	4613      	moveq	r3, r2
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	4628      	mov	r0, r5
 80066b6:	e7ef      	b.n	8006698 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 80066b8:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 80066ba:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 80066bc:	4642      	mov	r2, r8
 80066be:	4639      	mov	r1, r7
 80066c0:	a801      	add	r0, sp, #4
    substream.max_size = size;
 80066c2:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 80066c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 80066ca:	f7ff ff3f 	bl	800654c <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80066ce:	9a04      	ldr	r2, [sp, #16]
 80066d0:	68e3      	ldr	r3, [r4, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 80066d6:	42b2      	cmp	r2, r6
    stream->state = substream.state;
 80066d8:	9b02      	ldr	r3, [sp, #8]
 80066da:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 80066dc:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 80066de:	d0cb      	beq.n	8006678 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80066e0:	4a01      	ldr	r2, [pc, #4]	; (80066e8 <pb_encode_submessage+0x94>)
 80066e2:	e7e3      	b.n	80066ac <pb_encode_submessage+0x58>
 80066e4:	0800f774 	.word	0x0800f774
 80066e8:	0800f7bb 	.word	0x0800f7bb

080066ec <pb_enc_submessage>:
    if (field->ptr == NULL)
 80066ec:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 80066f0:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 80066f2:	b109      	cbz	r1, 80066f8 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 80066f4:	f7ff bfae 	b.w	8006654 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80066f8:	6902      	ldr	r2, [r0, #16]
 80066fa:	4803      	ldr	r0, [pc, #12]	; (8006708 <pb_enc_submessage+0x1c>)
 80066fc:	2a00      	cmp	r2, #0
 80066fe:	bf08      	it	eq
 8006700:	4602      	moveq	r2, r0
 8006702:	611a      	str	r2, [r3, #16]
}
 8006704:	4608      	mov	r0, r1
 8006706:	4770      	bx	lr
 8006708:	0800f731 	.word	0x0800f731

0800670c <ai_buffer_get_size>:
 800670c:	b358      	cbz	r0, 8006766 <ai_buffer_get_size+0x5a>
 800670e:	b430      	push	{r4, r5}
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	4d15      	ldr	r5, [pc, #84]	; (8006768 <ai_buffer_get_size+0x5c>)
 8006714:	6984      	ldr	r4, [r0, #24]
 8006716:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800671a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800671e:	42ab      	cmp	r3, r5
 8006720:	6862      	ldr	r2, [r4, #4]
 8006722:	d01a      	beq.n	800675a <ai_buffer_get_size+0x4e>
 8006724:	7d03      	ldrb	r3, [r0, #20]
 8006726:	6941      	ldr	r1, [r0, #20]
 8006728:	f1a3 0301 	sub.w	r3, r3, #1
 800672c:	fab3 f383 	clz	r3, r3
 8006730:	095b      	lsrs	r3, r3, #5
 8006732:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8006736:	428b      	cmp	r3, r1
 8006738:	da0b      	bge.n	8006752 <ai_buffer_get_size+0x46>
 800673a:	2b01      	cmp	r3, #1
 800673c:	d102      	bne.n	8006744 <ai_buffer_get_size+0x38>
 800673e:	2902      	cmp	r1, #2
 8006740:	d007      	beq.n	8006752 <ai_buffer_get_size+0x46>
 8006742:	2302      	movs	r3, #2
 8006744:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006748:	3301      	adds	r3, #1
 800674a:	428b      	cmp	r3, r1
 800674c:	fb00 f202 	mul.w	r2, r0, r2
 8006750:	d1f3      	bne.n	800673a <ai_buffer_get_size+0x2e>
 8006752:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006756:	bc30      	pop	{r4, r5}
 8006758:	4770      	bx	lr
 800675a:	2900      	cmp	r1, #0
 800675c:	d0e2      	beq.n	8006724 <ai_buffer_get_size+0x18>
 800675e:	321f      	adds	r2, #31
 8006760:	f022 021f 	bic.w	r2, r2, #31
 8006764:	e7de      	b.n	8006724 <ai_buffer_get_size+0x18>
 8006766:	4770      	bx	lr
 8006768:	000400c0 	.word	0x000400c0

0800676c <ai_buffer_get_byte_size>:
 800676c:	b128      	cbz	r0, 800677a <ai_buffer_get_byte_size+0xe>
 800676e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8006772:	fb00 f001 	mul.w	r0, r0, r1
 8006776:	3007      	adds	r0, #7
 8006778:	08c0      	lsrs	r0, r0, #3
 800677a:	4770      	bx	lr

0800677c <ai_buffer_array_sane>:
 800677c:	b138      	cbz	r0, 800678e <ai_buffer_array_sane+0x12>
 800677e:	6843      	ldr	r3, [r0, #4]
 8006780:	b123      	cbz	r3, 800678c <ai_buffer_array_sane+0x10>
 8006782:	8840      	ldrh	r0, [r0, #2]
 8006784:	3000      	adds	r0, #0
 8006786:	bf18      	it	ne
 8006788:	2001      	movne	r0, #1
 800678a:	4770      	bx	lr
 800678c:	4618      	mov	r0, r3
 800678e:	4770      	bx	lr

08006790 <ai_buffer_array_item_set_address>:
 8006790:	b120      	cbz	r0, 800679c <ai_buffer_array_item_set_address+0xc>
 8006792:	6843      	ldr	r3, [r0, #4]
 8006794:	b11b      	cbz	r3, 800679e <ai_buffer_array_item_set_address+0xe>
 8006796:	8840      	ldrh	r0, [r0, #2]
 8006798:	b918      	cbnz	r0, 80067a2 <ai_buffer_array_item_set_address+0x12>
 800679a:	4770      	bx	lr
 800679c:	4770      	bx	lr
 800679e:	4618      	mov	r0, r3
 80067a0:	4770      	bx	lr
 80067a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80067a6:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80067aa:	d0f7      	beq.n	800679c <ai_buffer_array_item_set_address+0xc>
 80067ac:	6042      	str	r2, [r0, #4]
 80067ae:	2001      	movs	r0, #1
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <_platform_observer_node_exec_cb>:
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d063      	beq.n	8006880 <_platform_observer_node_exec_cb+0xcc>
 80067b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067bc:	6816      	ldr	r6, [r2, #0]
 80067be:	b085      	sub	sp, #20
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	d063      	beq.n	800688c <_platform_observer_node_exec_cb+0xd8>
 80067c4:	8993      	ldrh	r3, [r2, #12]
 80067c6:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f240 3802 	movw	r8, #770	; 0x302
 80067d0:	f240 3c01 	movw	ip, #769	; 0x301
 80067d4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80067d8:	f240 2702 	movw	r7, #514	; 0x202
 80067dc:	f240 2501 	movw	r5, #513	; 0x201
 80067e0:	bf04      	itt	eq
 80067e2:	4647      	moveq	r7, r8
 80067e4:	4665      	moveq	r5, ip
 80067e6:	f240 1401 	movw	r4, #257	; 0x101
 80067ea:	bf0b      	itete	eq
 80067ec:	f44f 7982 	moveq.w	r9, #260	; 0x104
 80067f0:	f04f 0904 	movne.w	r9, #4
 80067f4:	f44f 7881 	moveq.w	r8, #258	; 0x102
 80067f8:	f04f 0802 	movne.w	r8, #2
 80067fc:	bf16      	itet	ne
 80067fe:	2401      	movne	r4, #1
 8006800:	f44f 7c41 	moveq.w	ip, #772	; 0x304
 8006804:	f44f 7c01 	movne.w	ip, #516	; 0x204
 8006808:	459e      	cmp	lr, r3
 800680a:	d002      	beq.n	8006812 <_platform_observer_node_exec_cb+0x5e>
 800680c:	46cc      	mov	ip, r9
 800680e:	4647      	mov	r7, r8
 8006810:	4625      	mov	r5, r4
 8006812:	4614      	mov	r4, r2
 8006814:	b9c0      	cbnz	r0, 8006848 <_platform_observer_node_exec_cb+0x94>
 8006816:	6892      	ldr	r2, [r2, #8]
 8006818:	07d7      	lsls	r7, r2, #31
 800681a:	d50f      	bpl.n	800683c <_platform_observer_node_exec_cb+0x88>
 800681c:	880a      	ldrh	r2, [r1, #0]
 800681e:	884f      	ldrh	r7, [r1, #2]
 8006820:	f8ad 3000 	strh.w	r3, [sp]
 8006824:	698b      	ldr	r3, [r1, #24]
 8006826:	9002      	str	r0, [sp, #8]
 8006828:	f8ad 2002 	strh.w	r2, [sp, #2]
 800682c:	9303      	str	r3, [sp, #12]
 800682e:	4629      	mov	r1, r5
 8006830:	f8ad 7004 	strh.w	r7, [sp, #4]
 8006834:	466a      	mov	r2, sp
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	47b0      	blx	r6
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	2000      	movs	r0, #0
 8006842:	b005      	add	sp, #20
 8006844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006848:	2801      	cmp	r0, #1
 800684a:	d01b      	beq.n	8006884 <_platform_observer_node_exec_cb+0xd0>
 800684c:	2802      	cmp	r0, #2
 800684e:	d021      	beq.n	8006894 <_platform_observer_node_exec_cb+0xe0>
 8006850:	2803      	cmp	r0, #3
 8006852:	d1f5      	bne.n	8006840 <_platform_observer_node_exec_cb+0x8c>
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	0752      	lsls	r2, r2, #29
 8006858:	d5f0      	bpl.n	800683c <_platform_observer_node_exec_cb+0x88>
 800685a:	6922      	ldr	r2, [r4, #16]
 800685c:	f8ad 3000 	strh.w	r3, [sp]
 8006860:	8853      	ldrh	r3, [r2, #2]
 8006862:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006866:	8813      	ldrh	r3, [r2, #0]
 8006868:	f8ad 3002 	strh.w	r3, [sp, #2]
 800686c:	6993      	ldr	r3, [r2, #24]
 800686e:	9303      	str	r3, [sp, #12]
 8006870:	2300      	movs	r3, #0
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	4661      	mov	r1, ip
 8006876:	466a      	mov	r2, sp
 8006878:	6860      	ldr	r0, [r4, #4]
 800687a:	47b0      	blx	r6
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	e7dd      	b.n	800683c <_platform_observer_node_exec_cb+0x88>
 8006880:	2001      	movs	r0, #1
 8006882:	4770      	bx	lr
 8006884:	2000      	movs	r0, #0
 8006886:	6111      	str	r1, [r2, #16]
 8006888:	8190      	strh	r0, [r2, #12]
 800688a:	e7da      	b.n	8006842 <_platform_observer_node_exec_cb+0x8e>
 800688c:	2001      	movs	r0, #1
 800688e:	b005      	add	sp, #20
 8006890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006894:	6892      	ldr	r2, [r2, #8]
 8006896:	6121      	str	r1, [r4, #16]
 8006898:	0790      	lsls	r0, r2, #30
 800689a:	d5d1      	bpl.n	8006840 <_platform_observer_node_exec_cb+0x8c>
 800689c:	f8ad 3000 	strh.w	r3, [sp]
 80068a0:	698b      	ldr	r3, [r1, #24]
 80068a2:	880a      	ldrh	r2, [r1, #0]
 80068a4:	884d      	ldrh	r5, [r1, #2]
 80068a6:	6860      	ldr	r0, [r4, #4]
 80068a8:	f8ad 2002 	strh.w	r2, [sp, #2]
 80068ac:	2400      	movs	r4, #0
 80068ae:	f8ad 5004 	strh.w	r5, [sp, #4]
 80068b2:	4639      	mov	r1, r7
 80068b4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80068b8:	466a      	mov	r2, sp
 80068ba:	47b0      	blx	r6
 80068bc:	4620      	mov	r0, r4
 80068be:	e7c0      	b.n	8006842 <_platform_observer_node_exec_cb+0x8e>

080068c0 <_ai_platform_acquire_crc>:
 80068c0:	2001      	movs	r0, #1
 80068c2:	4770      	bx	lr

080068c4 <_ai_platform_release_crc>:
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop

080068c8 <ai_platform_get_weights_map>:
 80068c8:	b192      	cbz	r2, 80068f0 <ai_platform_get_weights_map+0x28>
 80068ca:	b188      	cbz	r0, 80068f0 <ai_platform_get_weights_map+0x28>
 80068cc:	b181      	cbz	r1, 80068f0 <ai_platform_get_weights_map+0x28>
 80068ce:	b570      	push	{r4, r5, r6, lr}
 80068d0:	4b24      	ldr	r3, [pc, #144]	; (8006964 <ai_platform_get_weights_map+0x9c>)
 80068d2:	6814      	ldr	r4, [r2, #0]
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d00d      	beq.n	80068f4 <ai_platform_get_weights_map+0x2c>
 80068d8:	6854      	ldr	r4, [r2, #4]
 80068da:	b194      	cbz	r4, 8006902 <ai_platform_get_weights_map+0x3a>
 80068dc:	6825      	ldr	r5, [r4, #0]
 80068de:	429d      	cmp	r5, r3
 80068e0:	d027      	beq.n	8006932 <ai_platform_get_weights_map+0x6a>
 80068e2:	6004      	str	r4, [r0, #0]
 80068e4:	f1a1 0001 	sub.w	r0, r1, #1
 80068e8:	fab0 f080 	clz	r0, r0
 80068ec:	0940      	lsrs	r0, r0, #5
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	2000      	movs	r0, #0
 80068f2:	4770      	bx	lr
 80068f4:	4605      	mov	r5, r0
 80068f6:	1d10      	adds	r0, r2, #4
 80068f8:	4616      	mov	r6, r2
 80068fa:	460c      	mov	r4, r1
 80068fc:	f7ff ff3e 	bl	800677c <ai_buffer_array_sane>
 8006900:	b908      	cbnz	r0, 8006906 <ai_platform_get_weights_map+0x3e>
 8006902:	2000      	movs	r0, #0
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	88f3      	ldrh	r3, [r6, #6]
 8006908:	429c      	cmp	r4, r3
 800690a:	d1fa      	bne.n	8006902 <ai_platform_get_weights_map+0x3a>
 800690c:	2100      	movs	r1, #0
 800690e:	1f2b      	subs	r3, r5, #4
 8006910:	4608      	mov	r0, r1
 8006912:	68b2      	ldr	r2, [r6, #8]
 8006914:	440a      	add	r2, r1
 8006916:	311c      	adds	r1, #28
 8006918:	6852      	ldr	r2, [r2, #4]
 800691a:	b12a      	cbz	r2, 8006928 <ai_platform_get_weights_map+0x60>
 800691c:	3001      	adds	r0, #1
 800691e:	4284      	cmp	r4, r0
 8006920:	f843 2f04 	str.w	r2, [r3, #4]!
 8006924:	d1f5      	bne.n	8006912 <ai_platform_get_weights_map+0x4a>
 8006926:	4620      	mov	r0, r4
 8006928:	1a20      	subs	r0, r4, r0
 800692a:	fab0 f080 	clz	r0, r0
 800692e:	0940      	lsrs	r0, r0, #5
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	42ab      	cmp	r3, r5
 8006936:	f104 0404 	add.w	r4, r4, #4
 800693a:	d0e2      	beq.n	8006902 <ai_platform_get_weights_map+0x3a>
 800693c:	3804      	subs	r0, #4
 800693e:	4626      	mov	r6, r4
 8006940:	2200      	movs	r2, #0
 8006942:	e003      	b.n	800694c <ai_platform_get_weights_map+0x84>
 8006944:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8006948:	42ab      	cmp	r3, r5
 800694a:	d0da      	beq.n	8006902 <ai_platform_get_weights_map+0x3a>
 800694c:	3201      	adds	r2, #1
 800694e:	4291      	cmp	r1, r2
 8006950:	f840 3f04 	str.w	r3, [r0, #4]!
 8006954:	d1f6      	bne.n	8006944 <ai_platform_get_weights_map+0x7c>
 8006956:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 800695a:	4b02      	ldr	r3, [pc, #8]	; (8006964 <ai_platform_get_weights_map+0x9c>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d1d0      	bne.n	8006902 <ai_platform_get_weights_map+0x3a>
 8006960:	2001      	movs	r0, #1
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	a1facade 	.word	0xa1facade

08006968 <ai_platform_get_activations_map>:
 8006968:	b192      	cbz	r2, 8006990 <ai_platform_get_activations_map+0x28>
 800696a:	b188      	cbz	r0, 8006990 <ai_platform_get_activations_map+0x28>
 800696c:	b181      	cbz	r1, 8006990 <ai_platform_get_activations_map+0x28>
 800696e:	b570      	push	{r4, r5, r6, lr}
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <ai_platform_get_activations_map+0xa0>)
 8006972:	6814      	ldr	r4, [r2, #0]
 8006974:	429c      	cmp	r4, r3
 8006976:	d00d      	beq.n	8006994 <ai_platform_get_activations_map+0x2c>
 8006978:	6a14      	ldr	r4, [r2, #32]
 800697a:	b19c      	cbz	r4, 80069a4 <ai_platform_get_activations_map+0x3c>
 800697c:	6825      	ldr	r5, [r4, #0]
 800697e:	429d      	cmp	r5, r3
 8006980:	d028      	beq.n	80069d4 <ai_platform_get_activations_map+0x6c>
 8006982:	6004      	str	r4, [r0, #0]
 8006984:	f1a1 0001 	sub.w	r0, r1, #1
 8006988:	fab0 f080 	clz	r0, r0
 800698c:	0940      	lsrs	r0, r0, #5
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	2000      	movs	r0, #0
 8006992:	4770      	bx	lr
 8006994:	4605      	mov	r5, r0
 8006996:	f102 000c 	add.w	r0, r2, #12
 800699a:	4616      	mov	r6, r2
 800699c:	460c      	mov	r4, r1
 800699e:	f7ff feed 	bl	800677c <ai_buffer_array_sane>
 80069a2:	b908      	cbnz	r0, 80069a8 <ai_platform_get_activations_map+0x40>
 80069a4:	2000      	movs	r0, #0
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	89f3      	ldrh	r3, [r6, #14]
 80069aa:	429c      	cmp	r4, r3
 80069ac:	d1fa      	bne.n	80069a4 <ai_platform_get_activations_map+0x3c>
 80069ae:	2100      	movs	r1, #0
 80069b0:	1f2b      	subs	r3, r5, #4
 80069b2:	4608      	mov	r0, r1
 80069b4:	6932      	ldr	r2, [r6, #16]
 80069b6:	440a      	add	r2, r1
 80069b8:	311c      	adds	r1, #28
 80069ba:	6852      	ldr	r2, [r2, #4]
 80069bc:	b12a      	cbz	r2, 80069ca <ai_platform_get_activations_map+0x62>
 80069be:	3001      	adds	r0, #1
 80069c0:	4284      	cmp	r4, r0
 80069c2:	f843 2f04 	str.w	r2, [r3, #4]!
 80069c6:	d1f5      	bne.n	80069b4 <ai_platform_get_activations_map+0x4c>
 80069c8:	4620      	mov	r0, r4
 80069ca:	1a20      	subs	r0, r4, r0
 80069cc:	fab0 f080 	clz	r0, r0
 80069d0:	0940      	lsrs	r0, r0, #5
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	42ab      	cmp	r3, r5
 80069d8:	f104 0404 	add.w	r4, r4, #4
 80069dc:	d0e2      	beq.n	80069a4 <ai_platform_get_activations_map+0x3c>
 80069de:	3804      	subs	r0, #4
 80069e0:	4626      	mov	r6, r4
 80069e2:	2200      	movs	r2, #0
 80069e4:	e003      	b.n	80069ee <ai_platform_get_activations_map+0x86>
 80069e6:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80069ea:	42ab      	cmp	r3, r5
 80069ec:	d0da      	beq.n	80069a4 <ai_platform_get_activations_map+0x3c>
 80069ee:	3201      	adds	r2, #1
 80069f0:	4291      	cmp	r1, r2
 80069f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80069f6:	d1f6      	bne.n	80069e6 <ai_platform_get_activations_map+0x7e>
 80069f8:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80069fc:	4b02      	ldr	r3, [pc, #8]	; (8006a08 <ai_platform_get_activations_map+0xa0>)
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d1d0      	bne.n	80069a4 <ai_platform_get_activations_map+0x3c>
 8006a02:	2001      	movs	r0, #1
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
 8006a06:	bf00      	nop
 8006a08:	a1facade 	.word	0xa1facade

08006a0c <ai_platform_bind_network_params>:
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	b190      	cbz	r0, 8006a36 <ai_platform_bind_network_params+0x2a>
 8006a10:	b1a1      	cbz	r1, 8006a3c <ai_platform_bind_network_params+0x30>
 8006a12:	b18a      	cbz	r2, 8006a38 <ai_platform_bind_network_params+0x2c>
 8006a14:	b410      	push	{r4}
 8006a16:	4604      	mov	r4, r0
 8006a18:	4809      	ldr	r0, [pc, #36]	; (8006a40 <ai_platform_bind_network_params+0x34>)
 8006a1a:	f844 0b04 	str.w	r0, [r4], #4
 8006a1e:	c903      	ldmia	r1, {r0, r1}
 8006a20:	e884 0003 	stmia.w	r4, {r0, r1}
 8006a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a28:	330c      	adds	r3, #12
 8006a2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a2e:	2001      	movs	r0, #1
 8006a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	4770      	bx	lr
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4770      	bx	lr
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4770      	bx	lr
 8006a40:	a1facade 	.word	0xa1facade

08006a44 <ai_platform_runtime_get_revision>:
 8006a44:	b508      	push	{r3, lr}
 8006a46:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <ai_platform_runtime_get_revision+0x60>)
 8006a48:	6813      	ldr	r3, [r2, #0]
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	f7ff ff36 	bl	80068c0 <_ai_platform_acquire_crc>
 8006a54:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <ai_platform_runtime_get_revision+0x64>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d00d      	beq.n	8006a7e <ai_platform_runtime_get_revision+0x3a>
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <ai_platform_runtime_get_revision+0x68>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	d1fc      	bne.n	8006a68 <ai_platform_runtime_get_revision+0x24>
 8006a6e:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <ai_platform_runtime_get_revision+0x6c>)
 8006a70:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <ai_platform_runtime_get_revision+0x70>)
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <ai_platform_runtime_get_revision+0x74>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d00e      	beq.n	8006a9a <ai_platform_runtime_get_revision+0x56>
 8006a7c:	e7fe      	b.n	8006a7c <ai_platform_runtime_get_revision+0x38>
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <ai_platform_runtime_get_revision+0x78>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	d1fc      	bne.n	8006a84 <ai_platform_runtime_get_revision+0x40>
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <ai_platform_runtime_get_revision+0x7c>)
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <ai_platform_runtime_get_revision+0x70>)
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <ai_platform_runtime_get_revision+0x74>)
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d000      	beq.n	8006a9a <ai_platform_runtime_get_revision+0x56>
 8006a98:	e7fe      	b.n	8006a98 <ai_platform_runtime_get_revision+0x54>
 8006a9a:	f7ff ff13 	bl	80068c4 <_ai_platform_release_crc>
 8006a9e:	4809      	ldr	r0, [pc, #36]	; (8006ac4 <ai_platform_runtime_get_revision+0x80>)
 8006aa0:	bd08      	pop	{r3, pc}
 8006aa2:	bf00      	nop
 8006aa4:	e0002000 	.word	0xe0002000
 8006aa8:	e0042000 	.word	0xe0042000
 8006aac:	58024c08 	.word	0x58024c08
 8006ab0:	58024c00 	.word	0x58024c00
 8006ab4:	f407a5c2 	.word	0xf407a5c2
 8006ab8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006abc:	40023008 	.word	0x40023008
 8006ac0:	40023000 	.word	0x40023000
 8006ac4:	0800fc84 	.word	0x0800fc84

08006ac8 <ai_platform_runtime_get_version>:
 8006ac8:	b500      	push	{lr}
 8006aca:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <ai_platform_runtime_get_version+0x84>)
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	f7ff fef3 	bl	80068c0 <_ai_platform_acquire_crc>
 8006ada:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <ai_platform_runtime_get_version+0x88>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d00d      	beq.n	8006b04 <ai_platform_runtime_get_version+0x3c>
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <ai_platform_runtime_get_version+0x8c>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	d1fc      	bne.n	8006aee <ai_platform_runtime_get_version+0x26>
 8006af4:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <ai_platform_runtime_get_version+0x90>)
 8006af6:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <ai_platform_runtime_get_version+0x94>)
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <ai_platform_runtime_get_version+0x98>)
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d00e      	beq.n	8006b20 <ai_platform_runtime_get_version+0x58>
 8006b02:	e7fe      	b.n	8006b02 <ai_platform_runtime_get_version+0x3a>
 8006b04:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <ai_platform_runtime_get_version+0x9c>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d1fc      	bne.n	8006b0a <ai_platform_runtime_get_version+0x42>
 8006b10:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <ai_platform_runtime_get_version+0xa0>)
 8006b12:	4a12      	ldr	r2, [pc, #72]	; (8006b5c <ai_platform_runtime_get_version+0x94>)
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <ai_platform_runtime_get_version+0x98>)
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d000      	beq.n	8006b20 <ai_platform_runtime_get_version+0x58>
 8006b1e:	e7fe      	b.n	8006b1e <ai_platform_runtime_get_version+0x56>
 8006b20:	f7ff fed0 	bl	80068c4 <_ai_platform_release_crc>
 8006b24:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <ai_platform_runtime_get_version+0xa4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2000      	movs	r0, #0
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	f362 0007 	bfi	r0, r2, #0, #8
 8006b30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b34:	f362 200f 	bfi	r0, r2, #8, #8
 8006b38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006b3c:	f362 4017 	bfi	r0, r2, #16, #8
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f363 601f 	bfi	r0, r3, #24, #8
 8006b46:	b003      	add	sp, #12
 8006b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b4c:	e0002000 	.word	0xe0002000
 8006b50:	e0042000 	.word	0xe0042000
 8006b54:	58024c08 	.word	0x58024c08
 8006b58:	58024c00 	.word	0x58024c00
 8006b5c:	f407a5c2 	.word	0xf407a5c2
 8006b60:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b64:	40023008 	.word	0x40023008
 8006b68:	40023000 	.word	0x40023000
 8006b6c:	0800fc88 	.word	0x0800fc88

08006b70 <ai_platform_api_get_version>:
 8006b70:	b500      	push	{lr}
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <ai_platform_api_get_version+0x84>)
 8006b74:	6813      	ldr	r3, [r2, #0]
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	f7ff fe9f 	bl	80068c0 <_ai_platform_acquire_crc>
 8006b82:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <ai_platform_api_get_version+0x88>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8e:	d00d      	beq.n	8006bac <ai_platform_api_get_version+0x3c>
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <ai_platform_api_get_version+0x8c>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d1fc      	bne.n	8006b96 <ai_platform_api_get_version+0x26>
 8006b9c:	4b18      	ldr	r3, [pc, #96]	; (8006c00 <ai_platform_api_get_version+0x90>)
 8006b9e:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <ai_platform_api_get_version+0x94>)
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <ai_platform_api_get_version+0x98>)
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00e      	beq.n	8006bc8 <ai_platform_api_get_version+0x58>
 8006baa:	e7fe      	b.n	8006baa <ai_platform_api_get_version+0x3a>
 8006bac:	4b17      	ldr	r3, [pc, #92]	; (8006c0c <ai_platform_api_get_version+0x9c>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d1fc      	bne.n	8006bb2 <ai_platform_api_get_version+0x42>
 8006bb8:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <ai_platform_api_get_version+0xa0>)
 8006bba:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <ai_platform_api_get_version+0x94>)
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <ai_platform_api_get_version+0x98>)
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d000      	beq.n	8006bc8 <ai_platform_api_get_version+0x58>
 8006bc6:	e7fe      	b.n	8006bc6 <ai_platform_api_get_version+0x56>
 8006bc8:	f7ff fe7c 	bl	80068c4 <_ai_platform_release_crc>
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <ai_platform_api_get_version+0xa4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	f362 0007 	bfi	r0, r2, #0, #8
 8006bd8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006bdc:	f362 200f 	bfi	r0, r2, #8, #8
 8006be0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006be4:	f362 4017 	bfi	r0, r2, #16, #8
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	f363 601f 	bfi	r0, r3, #24, #8
 8006bee:	b003      	add	sp, #12
 8006bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bf4:	e0002000 	.word	0xe0002000
 8006bf8:	e0042000 	.word	0xe0042000
 8006bfc:	58024c08 	.word	0x58024c08
 8006c00:	58024c00 	.word	0x58024c00
 8006c04:	f407a5c2 	.word	0xf407a5c2
 8006c08:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c0c:	40023008 	.word	0x40023008
 8006c10:	40023000 	.word	0x40023000
 8006c14:	0800fc8c 	.word	0x0800fc8c

08006c18 <ai_platform_interface_api_get_version>:
 8006c18:	b500      	push	{lr}
 8006c1a:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <ai_platform_interface_api_get_version+0x84>)
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	b083      	sub	sp, #12
 8006c26:	f7ff fe4b 	bl	80068c0 <_ai_platform_acquire_crc>
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <ai_platform_interface_api_get_version+0x88>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c36:	d00d      	beq.n	8006c54 <ai_platform_interface_api_get_version+0x3c>
 8006c38:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <ai_platform_interface_api_get_version+0x8c>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	d1fc      	bne.n	8006c3e <ai_platform_interface_api_get_version+0x26>
 8006c44:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <ai_platform_interface_api_get_version+0x90>)
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <ai_platform_interface_api_get_version+0x94>)
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <ai_platform_interface_api_get_version+0x98>)
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d00e      	beq.n	8006c70 <ai_platform_interface_api_get_version+0x58>
 8006c52:	e7fe      	b.n	8006c52 <ai_platform_interface_api_get_version+0x3a>
 8006c54:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <ai_platform_interface_api_get_version+0x9c>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d1fc      	bne.n	8006c5a <ai_platform_interface_api_get_version+0x42>
 8006c60:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <ai_platform_interface_api_get_version+0xa0>)
 8006c62:	4a12      	ldr	r2, [pc, #72]	; (8006cac <ai_platform_interface_api_get_version+0x94>)
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <ai_platform_interface_api_get_version+0x98>)
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d000      	beq.n	8006c70 <ai_platform_interface_api_get_version+0x58>
 8006c6e:	e7fe      	b.n	8006c6e <ai_platform_interface_api_get_version+0x56>
 8006c70:	f7ff fe28 	bl	80068c4 <_ai_platform_release_crc>
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <ai_platform_interface_api_get_version+0xa4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2000      	movs	r0, #0
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	f362 0007 	bfi	r0, r2, #0, #8
 8006c80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006c84:	f362 200f 	bfi	r0, r2, #8, #8
 8006c88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006c8c:	f362 4017 	bfi	r0, r2, #16, #8
 8006c90:	0e1b      	lsrs	r3, r3, #24
 8006c92:	f363 601f 	bfi	r0, r3, #24, #8
 8006c96:	b003      	add	sp, #12
 8006c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c9c:	e0002000 	.word	0xe0002000
 8006ca0:	e0042000 	.word	0xe0042000
 8006ca4:	58024c08 	.word	0x58024c08
 8006ca8:	58024c00 	.word	0x58024c00
 8006cac:	f407a5c2 	.word	0xf407a5c2
 8006cb0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cb4:	40023008 	.word	0x40023008
 8006cb8:	40023000 	.word	0x40023000
 8006cbc:	0800fc90 	.word	0x0800fc90

08006cc0 <ai_platform_context_acquire>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	b120      	cbz	r0, 8006cd0 <ai_platform_context_acquire+0x10>
 8006cc6:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <ai_platform_context_acquire+0x6c>)
 8006cc8:	6802      	ldr	r2, [r0, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf18      	it	ne
 8006cce:	2400      	movne	r4, #0
 8006cd0:	4a17      	ldr	r2, [pc, #92]	; (8006d30 <ai_platform_context_acquire+0x70>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	f7ff fdf1 	bl	80068c0 <_ai_platform_acquire_crc>
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <ai_platform_context_acquire+0x74>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cea:	d00d      	beq.n	8006d08 <ai_platform_context_acquire+0x48>
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <ai_platform_context_acquire+0x78>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	d1fc      	bne.n	8006cf2 <ai_platform_context_acquire+0x32>
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <ai_platform_context_acquire+0x7c>)
 8006cfa:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <ai_platform_context_acquire+0x80>)
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <ai_platform_context_acquire+0x84>)
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d00e      	beq.n	8006d24 <ai_platform_context_acquire+0x64>
 8006d06:	e7fe      	b.n	8006d06 <ai_platform_context_acquire+0x46>
 8006d08:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <ai_platform_context_acquire+0x88>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d1fc      	bne.n	8006d0e <ai_platform_context_acquire+0x4e>
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <ai_platform_context_acquire+0x8c>)
 8006d16:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <ai_platform_context_acquire+0x80>)
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <ai_platform_context_acquire+0x84>)
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d000      	beq.n	8006d24 <ai_platform_context_acquire+0x64>
 8006d22:	e7fe      	b.n	8006d22 <ai_platform_context_acquire+0x62>
 8006d24:	f7ff fdce 	bl	80068c4 <_ai_platform_release_crc>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	a1c00100 	.word	0xa1c00100
 8006d30:	e0002000 	.word	0xe0002000
 8006d34:	e0042000 	.word	0xe0042000
 8006d38:	58024c08 	.word	0x58024c08
 8006d3c:	58024c00 	.word	0x58024c00
 8006d40:	f407a5c2 	.word	0xf407a5c2
 8006d44:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d48:	40023008 	.word	0x40023008
 8006d4c:	40023000 	.word	0x40023000

08006d50 <ai_platform_network_get_error>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	b120      	cbz	r0, 8006d5e <ai_platform_network_get_error+0xe>
 8006d54:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <ai_platform_network_get_error+0xd0>)
 8006d56:	6802      	ldr	r2, [r0, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	d02e      	beq.n	8006dbc <ai_platform_network_get_error+0x6c>
 8006d5e:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <ai_platform_network_get_error+0xd4>)
 8006d60:	6813      	ldr	r3, [r2, #0]
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	f7ff fdaa 	bl	80068c0 <_ai_platform_acquire_crc>
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <ai_platform_network_get_error+0xd8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d78:	d00d      	beq.n	8006d96 <ai_platform_network_get_error+0x46>
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <ai_platform_network_get_error+0xdc>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d1fc      	bne.n	8006d80 <ai_platform_network_get_error+0x30>
 8006d86:	4b2a      	ldr	r3, [pc, #168]	; (8006e30 <ai_platform_network_get_error+0xe0>)
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <ai_platform_network_get_error+0xe4>)
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <ai_platform_network_get_error+0xe8>)
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d00d      	beq.n	8006db0 <ai_platform_network_get_error+0x60>
 8006d94:	e7fe      	b.n	8006d94 <ai_platform_network_get_error+0x44>
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <ai_platform_network_get_error+0xec>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	d1fc      	bne.n	8006d9c <ai_platform_network_get_error+0x4c>
 8006da2:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <ai_platform_network_get_error+0xf0>)
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <ai_platform_network_get_error+0xe4>)
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <ai_platform_network_get_error+0xe8>)
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d104      	bne.n	8006dba <ai_platform_network_get_error+0x6a>
 8006db0:	f7ff fd88 	bl	80068c4 <_ai_platform_release_crc>
 8006db4:	f241 0010 	movw	r0, #4112	; 0x1010
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	e7fe      	b.n	8006dba <ai_platform_network_get_error+0x6a>
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <ai_platform_network_get_error+0xd4>)
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	f7ff fd7b 	bl	80068c0 <_ai_platform_acquire_crc>
 8006dca:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <ai_platform_network_get_error+0xd8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd6:	d00d      	beq.n	8006df4 <ai_platform_network_get_error+0xa4>
 8006dd8:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <ai_platform_network_get_error+0xdc>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	d1fc      	bne.n	8006dde <ai_platform_network_get_error+0x8e>
 8006de4:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <ai_platform_network_get_error+0xe0>)
 8006de6:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <ai_platform_network_get_error+0xe4>)
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <ai_platform_network_get_error+0xe8>)
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d00e      	beq.n	8006e10 <ai_platform_network_get_error+0xc0>
 8006df2:	e7fe      	b.n	8006df2 <ai_platform_network_get_error+0xa2>
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <ai_platform_network_get_error+0xec>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	d1fc      	bne.n	8006dfa <ai_platform_network_get_error+0xaa>
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <ai_platform_network_get_error+0xf0>)
 8006e02:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <ai_platform_network_get_error+0xe4>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <ai_platform_network_get_error+0xe8>)
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d000      	beq.n	8006e10 <ai_platform_network_get_error+0xc0>
 8006e0e:	e7fe      	b.n	8006e0e <ai_platform_network_get_error+0xbe>
 8006e10:	f7ff fd58 	bl	80068c4 <_ai_platform_release_crc>
 8006e14:	f104 0010 	add.w	r0, r4, #16
 8006e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e1c:	f001 b992 	b.w	8008144 <core_get_error>
 8006e20:	a1c00100 	.word	0xa1c00100
 8006e24:	e0002000 	.word	0xe0002000
 8006e28:	e0042000 	.word	0xe0042000
 8006e2c:	58024c08 	.word	0x58024c08
 8006e30:	58024c00 	.word	0x58024c00
 8006e34:	f407a5c2 	.word	0xf407a5c2
 8006e38:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e3c:	40023008 	.word	0x40023008
 8006e40:	40023000 	.word	0x40023000

08006e44 <ai_platform_network_set_error>:
 8006e44:	b110      	cbz	r0, 8006e4c <ai_platform_network_set_error+0x8>
 8006e46:	3010      	adds	r0, #16
 8006e48:	f001 b982 	b.w	8008150 <core_set_error>
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <ai_platform_api_get_network_report>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	b089      	sub	sp, #36	; 0x24
 8006e56:	b120      	cbz	r0, 8006e62 <ai_platform_api_get_network_report+0x12>
 8006e58:	4b79      	ldr	r3, [pc, #484]	; (8007040 <ai_platform_api_get_network_report+0x1f0>)
 8006e5a:	6802      	ldr	r2, [r0, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	4605      	mov	r5, r0
 8006e60:	d030      	beq.n	8006ec4 <ai_platform_api_get_network_report+0x74>
 8006e62:	4a78      	ldr	r2, [pc, #480]	; (8007044 <ai_platform_api_get_network_report+0x1f4>)
 8006e64:	6813      	ldr	r3, [r2, #0]
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	f7ff fd28 	bl	80068c0 <_ai_platform_acquire_crc>
 8006e70:	4b75      	ldr	r3, [pc, #468]	; (8007048 <ai_platform_api_get_network_report+0x1f8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7c:	d00d      	beq.n	8006e9a <ai_platform_api_get_network_report+0x4a>
 8006e7e:	4b73      	ldr	r3, [pc, #460]	; (800704c <ai_platform_api_get_network_report+0x1fc>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	d1fc      	bne.n	8006e84 <ai_platform_api_get_network_report+0x34>
 8006e8a:	4b71      	ldr	r3, [pc, #452]	; (8007050 <ai_platform_api_get_network_report+0x200>)
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <ai_platform_api_get_network_report+0x204>)
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b71      	ldr	r3, [pc, #452]	; (8007058 <ai_platform_api_get_network_report+0x208>)
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d00d      	beq.n	8006eb4 <ai_platform_api_get_network_report+0x64>
 8006e98:	e7fe      	b.n	8006e98 <ai_platform_api_get_network_report+0x48>
 8006e9a:	4b70      	ldr	r3, [pc, #448]	; (800705c <ai_platform_api_get_network_report+0x20c>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	d1fc      	bne.n	8006ea0 <ai_platform_api_get_network_report+0x50>
 8006ea6:	4b6e      	ldr	r3, [pc, #440]	; (8007060 <ai_platform_api_get_network_report+0x210>)
 8006ea8:	4a6a      	ldr	r2, [pc, #424]	; (8007054 <ai_platform_api_get_network_report+0x204>)
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b6a      	ldr	r3, [pc, #424]	; (8007058 <ai_platform_api_get_network_report+0x208>)
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d106      	bne.n	8006ec2 <ai_platform_api_get_network_report+0x72>
 8006eb4:	f7ff fd06 	bl	80068c4 <_ai_platform_release_crc>
 8006eb8:	2600      	movs	r6, #0
 8006eba:	4630      	mov	r0, r6
 8006ebc:	b009      	add	sp, #36	; 0x24
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec2:	e7fe      	b.n	8006ec2 <ai_platform_api_get_network_report+0x72>
 8006ec4:	4a5f      	ldr	r2, [pc, #380]	; (8007044 <ai_platform_api_get_network_report+0x1f4>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	460c      	mov	r4, r1
 8006ed0:	f7ff fcf6 	bl	80068c0 <_ai_platform_acquire_crc>
 8006ed4:	4b5c      	ldr	r3, [pc, #368]	; (8007048 <ai_platform_api_get_network_report+0x1f8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee0:	d00d      	beq.n	8006efe <ai_platform_api_get_network_report+0xae>
 8006ee2:	4b5a      	ldr	r3, [pc, #360]	; (800704c <ai_platform_api_get_network_report+0x1fc>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	d1fc      	bne.n	8006ee8 <ai_platform_api_get_network_report+0x98>
 8006eee:	4b58      	ldr	r3, [pc, #352]	; (8007050 <ai_platform_api_get_network_report+0x200>)
 8006ef0:	4a58      	ldr	r2, [pc, #352]	; (8007054 <ai_platform_api_get_network_report+0x204>)
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b58      	ldr	r3, [pc, #352]	; (8007058 <ai_platform_api_get_network_report+0x208>)
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d00e      	beq.n	8006f1a <ai_platform_api_get_network_report+0xca>
 8006efc:	e7fe      	b.n	8006efc <ai_platform_api_get_network_report+0xac>
 8006efe:	4b57      	ldr	r3, [pc, #348]	; (800705c <ai_platform_api_get_network_report+0x20c>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d1fc      	bne.n	8006f04 <ai_platform_api_get_network_report+0xb4>
 8006f0a:	4b55      	ldr	r3, [pc, #340]	; (8007060 <ai_platform_api_get_network_report+0x210>)
 8006f0c:	4a51      	ldr	r2, [pc, #324]	; (8007054 <ai_platform_api_get_network_report+0x204>)
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b51      	ldr	r3, [pc, #324]	; (8007058 <ai_platform_api_get_network_report+0x208>)
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d000      	beq.n	8006f1a <ai_platform_api_get_network_report+0xca>
 8006f18:	e7fe      	b.n	8006f18 <ai_platform_api_get_network_report+0xc8>
 8006f1a:	f7ff fcd3 	bl	80068c4 <_ai_platform_release_crc>
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	d0ca      	beq.n	8006eb8 <ai_platform_api_get_network_report+0x68>
 8006f22:	2300      	movs	r3, #0
 8006f24:	6763      	str	r3, [r4, #116]	; 0x74
 8006f26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d077      	beq.n	800701c <ai_platform_api_get_network_report+0x1cc>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	6763      	str	r3, [r4, #116]	; 0x74
 8006f30:	6913      	ldr	r3, [r2, #16]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d00c      	beq.n	8006f50 <ai_platform_api_get_network_report+0x100>
 8006f36:	b15b      	cbz	r3, 8006f50 <ai_platform_api_get_network_report+0x100>
 8006f38:	2202      	movs	r2, #2
 8006f3a:	e003      	b.n	8006f44 <ai_platform_api_get_network_report+0xf4>
 8006f3c:	1c50      	adds	r0, r2, #1
 8006f3e:	460b      	mov	r3, r1
 8006f40:	b121      	cbz	r1, 8006f4c <ai_platform_api_get_network_report+0xfc>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6762      	str	r2, [r4, #116]	; 0x74
 8006f46:	6919      	ldr	r1, [r3, #16]
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	d1f7      	bne.n	8006f3c <ai_platform_api_get_network_report+0xec>
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	d065      	beq.n	800701c <ai_platform_api_get_network_report+0x1cc>
 8006f50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d06a      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8006f56:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8006f5a:	f1bb 0f00 	cmp.w	fp, #0
 8006f5e:	d065      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8006f60:	f8bb 3000 	ldrh.w	r3, [fp]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d061      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8006f68:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d05d      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8006f70:	681e      	ldr	r6, [r3, #0]
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d05a      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	e023      	b.n	8006fc4 <ai_platform_api_get_network_report+0x174>
 8006f7c:	69b2      	ldr	r2, [r6, #24]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6856      	ldr	r6, [r2, #4]
 8006f82:	f849 000c 	str.w	r0, [r9, ip]
 8006f86:	f04f 0201 	mov.w	r2, #1
 8006f8a:	751a      	strb	r2, [r3, #20]
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	9800      	ldr	r0, [sp, #0]
 8006f90:	611e      	str	r6, [r3, #16]
 8006f92:	e9c3 e101 	strd	lr, r1, [r3, #4]
 8006f96:	2100      	movs	r1, #0
 8006f98:	60d9      	str	r1, [r3, #12]
 8006f9a:	9901      	ldr	r1, [sp, #4]
 8006f9c:	f360 221f 	bfi	r2, r0, #8, #24
 8006fa0:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8006fa4:	f8bb 1000 	ldrh.w	r1, [fp]
 8006fa8:	f108 0301 	add.w	r3, r8, #1
 8006fac:	428b      	cmp	r3, r1
 8006fae:	4698      	mov	r8, r3
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	d257      	bcs.n	8007064 <ai_platform_api_get_network_report+0x214>
 8006fb4:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d053      	beq.n	8007064 <ai_platform_api_get_network_report+0x214>
 8006fbc:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	d04f      	beq.n	8007064 <ai_platform_api_get_network_report+0x214>
 8006fc4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8006fc8:	69b1      	ldr	r1, [r6, #24]
 8006fca:	68b3      	ldr	r3, [r6, #8]
 8006fcc:	6897      	ldr	r7, [r2, #8]
 8006fce:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006fd2:	6808      	ldr	r0, [r1, #0]
 8006fd4:	68f2      	ldr	r2, [r6, #12]
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8006fe2:	f002 fcd9 	bl	8009998 <ai_array_to_buffer_fmt>
 8006fe6:	231c      	movs	r3, #28
 8006fe8:	69b2      	ldr	r2, [r6, #24]
 8006fea:	fb03 fc08 	mul.w	ip, r3, r8
 8006fee:	eb07 010a 	add.w	r1, r7, sl
 8006ff2:	eb09 030c 	add.w	r3, r9, ip
 8006ff6:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	d0bf      	beq.n	8006f7e <ai_platform_api_get_network_report+0x12e>
 8006ffe:	2200      	movs	r2, #0
 8007000:	f847 2038 	str.w	r2, [r7, r8, lsl #3]
 8007004:	6832      	ldr	r2, [r6, #0]
 8007006:	604a      	str	r2, [r1, #4]
 8007008:	2a00      	cmp	r2, #0
 800700a:	d0b7      	beq.n	8006f7c <ai_platform_api_get_network_report+0x12c>
 800700c:	8852      	ldrh	r2, [r2, #2]
 800700e:	2a00      	cmp	r2, #0
 8007010:	d0b4      	beq.n	8006f7c <ai_platform_api_get_network_report+0x12c>
 8007012:	2201      	movs	r2, #1
 8007014:	f847 200a 	str.w	r2, [r7, sl]
 8007018:	69b2      	ldr	r2, [r6, #24]
 800701a:	e7b1      	b.n	8006f80 <ai_platform_api_get_network_report+0x130>
 800701c:	f105 0010 	add.w	r0, r5, #16
 8007020:	2218      	movs	r2, #24
 8007022:	2111      	movs	r1, #17
 8007024:	f001 f894 	bl	8008150 <core_set_error>
 8007028:	2600      	movs	r6, #0
 800702a:	e746      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 800702c:	2600      	movs	r6, #0
 800702e:	f105 0010 	add.w	r0, r5, #16
 8007032:	8626      	strh	r6, [r4, #48]	; 0x30
 8007034:	2218      	movs	r2, #24
 8007036:	2112      	movs	r1, #18
 8007038:	f001 f88a 	bl	8008150 <core_set_error>
 800703c:	e73d      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 800703e:	bf00      	nop
 8007040:	a1c00100 	.word	0xa1c00100
 8007044:	e0002000 	.word	0xe0002000
 8007048:	e0042000 	.word	0xe0042000
 800704c:	58024c08 	.word	0x58024c08
 8007050:	58024c00 	.word	0x58024c00
 8007054:	f407a5c2 	.word	0xf407a5c2
 8007058:	b5e8b5cd 	.word	0xb5e8b5cd
 800705c:	40023008 	.word	0x40023008
 8007060:	40023000 	.word	0x40023000
 8007064:	2a00      	cmp	r2, #0
 8007066:	d0e1      	beq.n	800702c <ai_platform_api_get_network_report+0x1dc>
 8007068:	f8db 3008 	ldr.w	r3, [fp, #8]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	6363      	str	r3, [r4, #52]	; 0x34
 8007070:	8622      	strh	r2, [r4, #48]	; 0x30
 8007072:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007074:	2b01      	cmp	r3, #1
 8007076:	f240 81ae 	bls.w	80073d6 <ai_platform_api_get_network_report+0x586>
 800707a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800707e:	f04f 0800 	mov.w	r8, #0
 8007082:	f10a 0b0c 	add.w	fp, sl, #12
 8007086:	fa1f f388 	uxth.w	r3, r8
 800708a:	f1bb 0f00 	cmp.w	fp, #0
 800708e:	d04d      	beq.n	800712c <ai_platform_api_get_network_report+0x2dc>
 8007090:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 8007094:	4590      	cmp	r8, r2
 8007096:	d249      	bcs.n	800712c <ai_platform_api_get_network_report+0x2dc>
 8007098:	f8da 2010 	ldr.w	r2, [sl, #16]
 800709c:	2a00      	cmp	r2, #0
 800709e:	d045      	beq.n	800712c <ai_platform_api_get_network_report+0x2dc>
 80070a0:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	d041      	beq.n	800712c <ai_platform_api_get_network_report+0x2dc>
 80070a8:	f8da 2014 	ldr.w	r2, [sl, #20]
 80070ac:	69b1      	ldr	r1, [r6, #24]
 80070ae:	68b3      	ldr	r3, [r6, #8]
 80070b0:	6897      	ldr	r7, [r2, #8]
 80070b2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80070b6:	6808      	ldr	r0, [r1, #0]
 80070b8:	68f2      	ldr	r2, [r6, #12]
 80070ba:	9202      	str	r2, [sp, #8]
 80070bc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80070c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	9100      	str	r1, [sp, #0]
 80070c8:	f002 fc66 	bl	8009998 <ai_array_to_buffer_fmt>
 80070cc:	9900      	ldr	r1, [sp, #0]
 80070ce:	69b2      	ldr	r2, [r6, #24]
 80070d0:	9700      	str	r7, [sp, #0]
 80070d2:	231c      	movs	r3, #28
 80070d4:	4686      	mov	lr, r0
 80070d6:	fb03 fc08 	mul.w	ip, r3, r8
 80070da:	1878      	adds	r0, r7, r1
 80070dc:	6897      	ldr	r7, [r2, #8]
 80070de:	9703      	str	r7, [sp, #12]
 80070e0:	eb09 030c 	add.w	r3, r9, ip
 80070e4:	b158      	cbz	r0, 80070fe <ai_platform_api_get_network_report+0x2ae>
 80070e6:	9f00      	ldr	r7, [sp, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f847 2038 	str.w	r2, [r7, r8, lsl #3]
 80070ee:	6832      	ldr	r2, [r6, #0]
 80070f0:	6042      	str	r2, [r0, #4]
 80070f2:	b11a      	cbz	r2, 80070fc <ai_platform_api_get_network_report+0x2ac>
 80070f4:	8852      	ldrh	r2, [r2, #2]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	f040 817e 	bne.w	80073f8 <ai_platform_api_get_network_report+0x5a8>
 80070fc:	69b2      	ldr	r2, [r6, #24]
 80070fe:	2000      	movs	r0, #0
 8007100:	6852      	ldr	r2, [r2, #4]
 8007102:	f849 e00c 	str.w	lr, [r9, ip]
 8007106:	f04f 0101 	mov.w	r1, #1
 800710a:	7519      	strb	r1, [r3, #20]
 800710c:	6959      	ldr	r1, [r3, #20]
 800710e:	611a      	str	r2, [r3, #16]
 8007110:	9a01      	ldr	r2, [sp, #4]
 8007112:	f362 211f 	bfi	r1, r2, #8, #24
 8007116:	9a03      	ldr	r2, [sp, #12]
 8007118:	e9c3 2001 	strd	r2, r0, [r3, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	9a02      	ldr	r2, [sp, #8]
 8007122:	619a      	str	r2, [r3, #24]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	6159      	str	r1, [r3, #20]
 800712a:	e7ac      	b.n	8007086 <ai_platform_api_get_network_report+0x236>
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8153 	beq.w	80073d8 <ai_platform_api_get_network_report+0x588>
 8007132:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007136:	f105 0824 	add.w	r8, r5, #36	; 0x24
 800713a:	6852      	ldr	r2, [r2, #4]
 800713c:	63a2      	str	r2, [r4, #56]	; 0x38
 800713e:	8663      	strh	r3, [r4, #50]	; 0x32
 8007140:	4640      	mov	r0, r8
 8007142:	f7ff fb1b 	bl	800677c <ai_buffer_array_sane>
 8007146:	4606      	mov	r6, r0
 8007148:	b938      	cbnz	r0, 800715a <ai_platform_api_get_network_report+0x30a>
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fb16 	bl	800677c <ai_buffer_array_sane>
 8007150:	b118      	cbz	r0, 800715a <ai_platform_api_get_network_report+0x30a>
 8007152:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 8148 	bne.w	80073ea <ai_platform_api_get_network_report+0x59a>
 800715a:	f105 071c 	add.w	r7, r5, #28
 800715e:	4638      	mov	r0, r7
 8007160:	f7ff fb0c 	bl	800677c <ai_buffer_array_sane>
 8007164:	4606      	mov	r6, r0
 8007166:	b928      	cbnz	r0, 8007174 <ai_platform_api_get_network_report+0x324>
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff fb07 	bl	800677c <ai_buffer_array_sane>
 800716e:	b108      	cbz	r0, 8007174 <ai_platform_api_get_network_report+0x324>
 8007170:	8beb      	ldrh	r3, [r5, #30]
 8007172:	b9eb      	cbnz	r3, 80071b0 <ai_platform_api_get_network_report+0x360>
 8007174:	686b      	ldr	r3, [r5, #4]
 8007176:	4aa3      	ldr	r2, [pc, #652]	; (8007404 <ai_platform_api_get_network_report+0x5b4>)
 8007178:	67a3      	str	r3, [r4, #120]	; 0x78
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	f7ff fb9d 	bl	80068c0 <_ai_platform_acquire_crc>
 8007186:	4ba0      	ldr	r3, [pc, #640]	; (8007408 <ai_platform_api_get_network_report+0x5b8>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800718e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007192:	d014      	beq.n	80071be <ai_platform_api_get_network_report+0x36e>
 8007194:	4b9d      	ldr	r3, [pc, #628]	; (800740c <ai_platform_api_get_network_report+0x5bc>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	2a00      	cmp	r2, #0
 800719e:	d1fc      	bne.n	800719a <ai_platform_api_get_network_report+0x34a>
 80071a0:	4b9b      	ldr	r3, [pc, #620]	; (8007410 <ai_platform_api_get_network_report+0x5c0>)
 80071a2:	4a9c      	ldr	r2, [pc, #624]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b9b      	ldr	r3, [pc, #620]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d015      	beq.n	80071da <ai_platform_api_get_network_report+0x38a>
 80071ae:	e7fe      	b.n	80071ae <ai_platform_api_get_network_report+0x35e>
 80071b0:	f105 0010 	add.w	r0, r5, #16
 80071b4:	2212      	movs	r2, #18
 80071b6:	2111      	movs	r1, #17
 80071b8:	f000 ffca 	bl	8008150 <core_set_error>
 80071bc:	e67d      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 80071be:	4b97      	ldr	r3, [pc, #604]	; (800741c <ai_platform_api_get_network_report+0x5cc>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d1fc      	bne.n	80071c4 <ai_platform_api_get_network_report+0x374>
 80071ca:	4b95      	ldr	r3, [pc, #596]	; (8007420 <ai_platform_api_get_network_report+0x5d0>)
 80071cc:	4a91      	ldr	r2, [pc, #580]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b91      	ldr	r3, [pc, #580]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d000      	beq.n	80071da <ai_platform_api_get_network_report+0x38a>
 80071d8:	e7fe      	b.n	80071d8 <ai_platform_api_get_network_report+0x388>
 80071da:	f7ff fb73 	bl	80068c4 <_ai_platform_release_crc>
 80071de:	4a89      	ldr	r2, [pc, #548]	; (8007404 <ai_platform_api_get_network_report+0x5b4>)
 80071e0:	4b90      	ldr	r3, [pc, #576]	; (8007424 <ai_platform_api_get_network_report+0x5d4>)
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	6813      	ldr	r3, [r2, #0]
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	f7ff fb68 	bl	80068c0 <_ai_platform_acquire_crc>
 80071f0:	4b85      	ldr	r3, [pc, #532]	; (8007408 <ai_platform_api_get_network_report+0x5b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fc:	d00d      	beq.n	800721a <ai_platform_api_get_network_report+0x3ca>
 80071fe:	4b83      	ldr	r3, [pc, #524]	; (800740c <ai_platform_api_get_network_report+0x5bc>)
 8007200:	2201      	movs	r2, #1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1fc      	bne.n	8007204 <ai_platform_api_get_network_report+0x3b4>
 800720a:	4b81      	ldr	r3, [pc, #516]	; (8007410 <ai_platform_api_get_network_report+0x5c0>)
 800720c:	4a81      	ldr	r2, [pc, #516]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b81      	ldr	r3, [pc, #516]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 8007214:	429a      	cmp	r2, r3
 8007216:	d00e      	beq.n	8007236 <ai_platform_api_get_network_report+0x3e6>
 8007218:	e7fe      	b.n	8007218 <ai_platform_api_get_network_report+0x3c8>
 800721a:	4b80      	ldr	r3, [pc, #512]	; (800741c <ai_platform_api_get_network_report+0x5cc>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	2a00      	cmp	r2, #0
 8007224:	d1fc      	bne.n	8007220 <ai_platform_api_get_network_report+0x3d0>
 8007226:	4b7e      	ldr	r3, [pc, #504]	; (8007420 <ai_platform_api_get_network_report+0x5d0>)
 8007228:	4a7a      	ldr	r2, [pc, #488]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b7a      	ldr	r3, [pc, #488]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 8007230:	429a      	cmp	r2, r3
 8007232:	d000      	beq.n	8007236 <ai_platform_api_get_network_report+0x3e6>
 8007234:	e7fe      	b.n	8007234 <ai_platform_api_get_network_report+0x3e4>
 8007236:	f7ff fb45 	bl	80068c4 <_ai_platform_release_crc>
 800723a:	4a72      	ldr	r2, [pc, #456]	; (8007404 <ai_platform_api_get_network_report+0x5b4>)
 800723c:	f240 1307 	movw	r3, #263	; 0x107
 8007240:	6163      	str	r3, [r4, #20]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	f7ff fb39 	bl	80068c0 <_ai_platform_acquire_crc>
 800724e:	4b6e      	ldr	r3, [pc, #440]	; (8007408 <ai_platform_api_get_network_report+0x5b8>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725a:	d00d      	beq.n	8007278 <ai_platform_api_get_network_report+0x428>
 800725c:	4b6b      	ldr	r3, [pc, #428]	; (800740c <ai_platform_api_get_network_report+0x5bc>)
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	2a00      	cmp	r2, #0
 8007266:	d1fc      	bne.n	8007262 <ai_platform_api_get_network_report+0x412>
 8007268:	4b69      	ldr	r3, [pc, #420]	; (8007410 <ai_platform_api_get_network_report+0x5c0>)
 800726a:	4a6a      	ldr	r2, [pc, #424]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b69      	ldr	r3, [pc, #420]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 8007272:	429a      	cmp	r2, r3
 8007274:	d00e      	beq.n	8007294 <ai_platform_api_get_network_report+0x444>
 8007276:	e7fe      	b.n	8007276 <ai_platform_api_get_network_report+0x426>
 8007278:	4b68      	ldr	r3, [pc, #416]	; (800741c <ai_platform_api_get_network_report+0x5cc>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	2a00      	cmp	r2, #0
 8007282:	d1fc      	bne.n	800727e <ai_platform_api_get_network_report+0x42e>
 8007284:	4b66      	ldr	r3, [pc, #408]	; (8007420 <ai_platform_api_get_network_report+0x5d0>)
 8007286:	4a63      	ldr	r2, [pc, #396]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4b62      	ldr	r3, [pc, #392]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 800728e:	429a      	cmp	r2, r3
 8007290:	d000      	beq.n	8007294 <ai_platform_api_get_network_report+0x444>
 8007292:	e7fe      	b.n	8007292 <ai_platform_api_get_network_report+0x442>
 8007294:	f7ff fb16 	bl	80068c4 <_ai_platform_release_crc>
 8007298:	4a5a      	ldr	r2, [pc, #360]	; (8007404 <ai_platform_api_get_network_report+0x5b4>)
 800729a:	f240 2301 	movw	r3, #513	; 0x201
 800729e:	6263      	str	r3, [r4, #36]	; 0x24
 80072a0:	6813      	ldr	r3, [r2, #0]
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	f7ff fb0a 	bl	80068c0 <_ai_platform_acquire_crc>
 80072ac:	4b56      	ldr	r3, [pc, #344]	; (8007408 <ai_platform_api_get_network_report+0x5b8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b8:	d00d      	beq.n	80072d6 <ai_platform_api_get_network_report+0x486>
 80072ba:	4b54      	ldr	r3, [pc, #336]	; (800740c <ai_platform_api_get_network_report+0x5bc>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1fc      	bne.n	80072c0 <ai_platform_api_get_network_report+0x470>
 80072c6:	4b52      	ldr	r3, [pc, #328]	; (8007410 <ai_platform_api_get_network_report+0x5c0>)
 80072c8:	4a52      	ldr	r2, [pc, #328]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b52      	ldr	r3, [pc, #328]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d00e      	beq.n	80072f2 <ai_platform_api_get_network_report+0x4a2>
 80072d4:	e7fe      	b.n	80072d4 <ai_platform_api_get_network_report+0x484>
 80072d6:	4b51      	ldr	r3, [pc, #324]	; (800741c <ai_platform_api_get_network_report+0x5cc>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d1fc      	bne.n	80072dc <ai_platform_api_get_network_report+0x48c>
 80072e2:	4b4f      	ldr	r3, [pc, #316]	; (8007420 <ai_platform_api_get_network_report+0x5d0>)
 80072e4:	4a4b      	ldr	r2, [pc, #300]	; (8007414 <ai_platform_api_get_network_report+0x5c4>)
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b4b      	ldr	r3, [pc, #300]	; (8007418 <ai_platform_api_get_network_report+0x5c8>)
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d000      	beq.n	80072f2 <ai_platform_api_get_network_report+0x4a2>
 80072f0:	e7fe      	b.n	80072f0 <ai_platform_api_get_network_report+0x4a0>
 80072f2:	f7ff fae7 	bl	80068c4 <_ai_platform_release_crc>
 80072f6:	f240 5301 	movw	r3, #1281	; 0x501
 80072fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80072fc:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80072fe:	f002 fb25 	bl	800994c <ai_platform_version_get>
 8007302:	4b49      	ldr	r3, [pc, #292]	; (8007428 <ai_platform_api_get_network_report+0x5d8>)
 8007304:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007306:	6220      	str	r0, [r4, #32]
 8007308:	429a      	cmp	r2, r3
 800730a:	d046      	beq.n	800739a <ai_platform_api_get_network_report+0x54a>
 800730c:	4b47      	ldr	r3, [pc, #284]	; (800742c <ai_platform_api_get_network_report+0x5dc>)
 800730e:	4a48      	ldr	r2, [pc, #288]	; (8007430 <ai_platform_api_get_network_report+0x5e0>)
 8007310:	63e2      	str	r2, [r4, #60]	; 0x3c
 8007312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007314:	f04f 0e00 	mov.w	lr, #0
 8007318:	e9c4 ee10 	strd	lr, lr, [r4, #64]	; 0x40
 800731c:	e9c4 ee12 	strd	lr, lr, [r4, #72]	; 0x48
 8007320:	f10d 0c10 	add.w	ip, sp, #16
 8007324:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8007328:	f240 4901 	movw	r9, #1025	; 0x401
 800732c:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
 8007330:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 8007334:	46b6      	mov	lr, r6
 8007336:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800733a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800733e:	3458      	adds	r4, #88	; 0x58
 8007340:	46a4      	mov	ip, r4
 8007342:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007346:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800734a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800734e:	4640      	mov	r0, r8
 8007350:	f7ff fa14 	bl	800677c <ai_buffer_array_sane>
 8007354:	b998      	cbnz	r0, 800737e <ai_platform_api_get_network_report+0x52e>
 8007356:	4638      	mov	r0, r7
 8007358:	f7ff fa10 	bl	800677c <ai_buffer_array_sane>
 800735c:	b908      	cbnz	r0, 8007362 <ai_platform_api_get_network_report+0x512>
 800735e:	2601      	movs	r6, #1
 8007360:	e5ab      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 8007362:	4638      	mov	r0, r7
 8007364:	f7ff fa0a 	bl	800677c <ai_buffer_array_sane>
 8007368:	b320      	cbz	r0, 80073b4 <ai_platform_api_get_network_report+0x564>
 800736a:	6a2c      	ldr	r4, [r5, #32]
 800736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800736e:	4635      	mov	r5, r6
 8007370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007372:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007376:	2601      	movs	r6, #1
 8007378:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800737c:	e59d      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff f9fc 	bl	800677c <ai_buffer_array_sane>
 8007384:	b1f8      	cbz	r0, 80073c6 <ai_platform_api_get_network_report+0x576>
 8007386:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
 800738a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007390:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007398:	e7dd      	b.n	8007356 <ai_platform_api_get_network_report+0x506>
 800739a:	e898 0003 	ldmia.w	r8, {r0, r1}
 800739e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80073a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80073a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80073aa:	3440      	adds	r4, #64	; 0x40
 80073ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80073b0:	2601      	movs	r6, #1
 80073b2:	e582      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 80073b4:	4605      	mov	r5, r0
 80073b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073b8:	4634      	mov	r4, r6
 80073ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80073c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073c4:	deff      	udf	#255	; 0xff
 80073c6:	4605      	mov	r5, r0
 80073c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80073d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073d4:	deff      	udf	#255	; 0xff
 80073d6:	2300      	movs	r3, #0
 80073d8:	8663      	strh	r3, [r4, #50]	; 0x32
 80073da:	f105 0010 	add.w	r0, r5, #16
 80073de:	2218      	movs	r2, #24
 80073e0:	2113      	movs	r1, #19
 80073e2:	f000 feb5 	bl	8008150 <core_set_error>
 80073e6:	2600      	movs	r6, #0
 80073e8:	e567      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 80073ea:	f105 0010 	add.w	r0, r5, #16
 80073ee:	2213      	movs	r2, #19
 80073f0:	2111      	movs	r1, #17
 80073f2:	f000 fead 	bl	8008150 <core_set_error>
 80073f6:	e560      	b.n	8006eba <ai_platform_api_get_network_report+0x6a>
 80073f8:	9f00      	ldr	r7, [sp, #0]
 80073fa:	2201      	movs	r2, #1
 80073fc:	507a      	str	r2, [r7, r1]
 80073fe:	69b2      	ldr	r2, [r6, #24]
 8007400:	e67e      	b.n	8007100 <ai_platform_api_get_network_report+0x2b0>
 8007402:	bf00      	nop
 8007404:	e0002000 	.word	0xe0002000
 8007408:	e0042000 	.word	0xe0042000
 800740c:	58024c08 	.word	0x58024c08
 8007410:	58024c00 	.word	0x58024c00
 8007414:	f407a5c2 	.word	0xf407a5c2
 8007418:	b5e8b5cd 	.word	0xb5e8b5cd
 800741c:	40023008 	.word	0x40023008
 8007420:	40023000 	.word	0x40023000
 8007424:	0800fc84 	.word	0x0800fc84
 8007428:	a1facade 	.word	0xa1facade
 800742c:	0800cc88 	.word	0x0800cc88
 8007430:	00040440 	.word	0x00040440

08007434 <ai_platform_network_create>:
 8007434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007438:	b083      	sub	sp, #12
 800743a:	4606      	mov	r6, r0
 800743c:	4615      	mov	r5, r2
 800743e:	461f      	mov	r7, r3
 8007440:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007444:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007448:	f7ff fa3a 	bl	80068c0 <_ai_platform_acquire_crc>
 800744c:	b178      	cbz	r0, 800746e <ai_platform_network_create+0x3a>
 800744e:	4b5f      	ldr	r3, [pc, #380]	; (80075cc <ai_platform_network_create+0x198>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745a:	4602      	mov	r2, r0
 800745c:	d00d      	beq.n	800747a <ai_platform_network_create+0x46>
 800745e:	4b5c      	ldr	r3, [pc, #368]	; (80075d0 <ai_platform_network_create+0x19c>)
 8007460:	2118      	movs	r1, #24
 8007462:	6019      	str	r1, [r3, #0]
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	2918      	cmp	r1, #24
 8007468:	d01a      	beq.n	80074a0 <ai_platform_network_create+0x6c>
 800746a:	f7ff fa2b 	bl	80068c4 <_ai_platform_release_crc>
 800746e:	f244 1333 	movw	r3, #16691	; 0x4133
 8007472:	4618      	mov	r0, r3
 8007474:	b003      	add	sp, #12
 8007476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747a:	4b56      	ldr	r3, [pc, #344]	; (80075d4 <ai_platform_network_create+0x1a0>)
 800747c:	2101      	movs	r1, #1
 800747e:	6019      	str	r1, [r3, #0]
 8007480:	2114      	movs	r1, #20
 8007482:	e001      	b.n	8007488 <ai_platform_network_create+0x54>
 8007484:	3901      	subs	r1, #1
 8007486:	d002      	beq.n	800748e <ai_platform_network_create+0x5a>
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	2800      	cmp	r0, #0
 800748c:	d1fa      	bne.n	8007484 <ai_platform_network_create+0x50>
 800748e:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <ai_platform_network_create+0x1a0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	b91b      	cbnz	r3, 800749c <ai_platform_network_create+0x68>
 8007494:	4b50      	ldr	r3, [pc, #320]	; (80075d8 <ai_platform_network_create+0x1a4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	d006      	beq.n	80074aa <ai_platform_network_create+0x76>
 800749c:	4610      	mov	r0, r2
 800749e:	e7e4      	b.n	800746a <ai_platform_network_create+0x36>
 80074a0:	2101      	movs	r1, #1
 80074a2:	6019      	str	r1, [r3, #0]
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d1fc      	bne.n	80074a4 <ai_platform_network_create+0x70>
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7ff fa0a 	bl	80068c4 <_ai_platform_release_crc>
 80074b0:	4a4a      	ldr	r2, [pc, #296]	; (80075dc <ai_platform_network_create+0x1a8>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	f7ff fa01 	bl	80068c0 <_ai_platform_acquire_crc>
 80074be:	4b43      	ldr	r3, [pc, #268]	; (80075cc <ai_platform_network_create+0x198>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ca:	d00d      	beq.n	80074e8 <ai_platform_network_create+0xb4>
 80074cc:	4b40      	ldr	r3, [pc, #256]	; (80075d0 <ai_platform_network_create+0x19c>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	d1fc      	bne.n	80074d2 <ai_platform_network_create+0x9e>
 80074d8:	4b41      	ldr	r3, [pc, #260]	; (80075e0 <ai_platform_network_create+0x1ac>)
 80074da:	4a42      	ldr	r2, [pc, #264]	; (80075e4 <ai_platform_network_create+0x1b0>)
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b41      	ldr	r3, [pc, #260]	; (80075e8 <ai_platform_network_create+0x1b4>)
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d00e      	beq.n	8007504 <ai_platform_network_create+0xd0>
 80074e6:	e7fe      	b.n	80074e6 <ai_platform_network_create+0xb2>
 80074e8:	4b3a      	ldr	r3, [pc, #232]	; (80075d4 <ai_platform_network_create+0x1a0>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1fc      	bne.n	80074ee <ai_platform_network_create+0xba>
 80074f4:	4b38      	ldr	r3, [pc, #224]	; (80075d8 <ai_platform_network_create+0x1a4>)
 80074f6:	4a3b      	ldr	r2, [pc, #236]	; (80075e4 <ai_platform_network_create+0x1b0>)
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	4b3a      	ldr	r3, [pc, #232]	; (80075e8 <ai_platform_network_create+0x1b4>)
 80074fe:	429a      	cmp	r2, r3
 8007500:	d000      	beq.n	8007504 <ai_platform_network_create+0xd0>
 8007502:	e7fe      	b.n	8007502 <ai_platform_network_create+0xce>
 8007504:	f7ff f9de 	bl	80068c4 <_ai_platform_release_crc>
 8007508:	b1ae      	cbz	r6, 8007536 <ai_platform_network_create+0x102>
 800750a:	4b38      	ldr	r3, [pc, #224]	; (80075ec <ai_platform_network_create+0x1b8>)
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	6035      	str	r5, [r6, #0]
 8007510:	f000 fe16 	bl	8008140 <core_init>
 8007514:	b990      	cbnz	r0, 800753c <ai_platform_network_create+0x108>
 8007516:	2430      	movs	r4, #48	; 0x30
 8007518:	2300      	movs	r3, #0
 800751a:	6033      	str	r3, [r6, #0]
 800751c:	2610      	movs	r6, #16
 800751e:	464a      	mov	r2, r9
 8007520:	4641      	mov	r1, r8
 8007522:	4638      	mov	r0, r7
 8007524:	f002 fa0c 	bl	8009940 <ai_version_get>
 8007528:	2300      	movs	r3, #0
 800752a:	f364 0307 	bfi	r3, r4, #0, #8
 800752e:	6468      	str	r0, [r5, #68]	; 0x44
 8007530:	f366 231f 	bfi	r3, r6, #8, #24
 8007534:	e79d      	b.n	8007472 <ai_platform_network_create+0x3e>
 8007536:	f241 0310 	movw	r3, #4112	; 0x1010
 800753a:	e79a      	b.n	8007472 <ai_platform_network_create+0x3e>
 800753c:	4a27      	ldr	r2, [pc, #156]	; (80075dc <ai_platform_network_create+0x1a8>)
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	f7ff f9bb 	bl	80068c0 <_ai_platform_acquire_crc>
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <ai_platform_network_create+0x198>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007556:	d00d      	beq.n	8007574 <ai_platform_network_create+0x140>
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <ai_platform_network_create+0x19c>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	2a00      	cmp	r2, #0
 8007562:	d1fc      	bne.n	800755e <ai_platform_network_create+0x12a>
 8007564:	4b1e      	ldr	r3, [pc, #120]	; (80075e0 <ai_platform_network_create+0x1ac>)
 8007566:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <ai_platform_network_create+0x1b0>)
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <ai_platform_network_create+0x1b4>)
 800756e:	429a      	cmp	r2, r3
 8007570:	d00e      	beq.n	8007590 <ai_platform_network_create+0x15c>
 8007572:	e7fe      	b.n	8007572 <ai_platform_network_create+0x13e>
 8007574:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <ai_platform_network_create+0x1a0>)
 8007576:	2201      	movs	r2, #1
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	2a00      	cmp	r2, #0
 800757e:	d1fc      	bne.n	800757a <ai_platform_network_create+0x146>
 8007580:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <ai_platform_network_create+0x1a4>)
 8007582:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <ai_platform_network_create+0x1b0>)
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <ai_platform_network_create+0x1b4>)
 800758a:	429a      	cmp	r2, r3
 800758c:	d000      	beq.n	8007590 <ai_platform_network_create+0x15c>
 800758e:	e7fe      	b.n	800758e <ai_platform_network_create+0x15a>
 8007590:	f7ff f998 	bl	80068c4 <_ai_platform_release_crc>
 8007594:	2200      	movs	r2, #0
 8007596:	4641      	mov	r1, r8
 8007598:	4638      	mov	r0, r7
 800759a:	f002 f9d1 	bl	8009940 <ai_version_get>
 800759e:	2200      	movs	r2, #0
 80075a0:	4604      	mov	r4, r0
 80075a2:	2105      	movs	r1, #5
 80075a4:	2001      	movs	r0, #1
 80075a6:	f002 f9cb 	bl	8009940 <ai_version_get>
 80075aa:	4284      	cmp	r4, r0
 80075ac:	d001      	beq.n	80075b2 <ai_platform_network_create+0x17e>
 80075ae:	2401      	movs	r4, #1
 80075b0:	e7b2      	b.n	8007518 <ai_platform_network_create+0xe4>
 80075b2:	a802      	add	r0, sp, #8
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <ai_platform_network_create+0x1bc>)
 80075b6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80075ba:	f002 f905 	bl	80097c8 <ai_check_custom_types>
 80075be:	b110      	cbz	r0, 80075c6 <ai_platform_network_create+0x192>
 80075c0:	2600      	movs	r6, #0
 80075c2:	4634      	mov	r4, r6
 80075c4:	e7ab      	b.n	800751e <ai_platform_network_create+0xea>
 80075c6:	2402      	movs	r4, #2
 80075c8:	e7a6      	b.n	8007518 <ai_platform_network_create+0xe4>
 80075ca:	bf00      	nop
 80075cc:	e0042000 	.word	0xe0042000
 80075d0:	58024c08 	.word	0x58024c08
 80075d4:	40023008 	.word	0x40023008
 80075d8:	40023000 	.word	0x40023000
 80075dc:	e0002000 	.word	0xe0002000
 80075e0:	58024c00 	.word	0x58024c00
 80075e4:	f407a5c2 	.word	0xf407a5c2
 80075e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80075ec:	a1c00100 	.word	0xa1c00100
 80075f0:	84048403 	.word	0x84048403

080075f4 <ai_platform_network_destroy>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	4604      	mov	r4, r0
 80075f8:	b118      	cbz	r0, 8007602 <ai_platform_network_destroy+0xe>
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <ai_platform_network_destroy+0xcc>)
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d02d      	beq.n	800765e <ai_platform_network_destroy+0x6a>
 8007602:	4a30      	ldr	r2, [pc, #192]	; (80076c4 <ai_platform_network_destroy+0xd0>)
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	f7ff f958 	bl	80068c0 <_ai_platform_acquire_crc>
 8007610:	4b2d      	ldr	r3, [pc, #180]	; (80076c8 <ai_platform_network_destroy+0xd4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d00d      	beq.n	800763a <ai_platform_network_destroy+0x46>
 800761e:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <ai_platform_network_destroy+0xd8>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	2a00      	cmp	r2, #0
 8007628:	d1fc      	bne.n	8007624 <ai_platform_network_destroy+0x30>
 800762a:	4b29      	ldr	r3, [pc, #164]	; (80076d0 <ai_platform_network_destroy+0xdc>)
 800762c:	4a29      	ldr	r2, [pc, #164]	; (80076d4 <ai_platform_network_destroy+0xe0>)
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <ai_platform_network_destroy+0xe4>)
 8007634:	429a      	cmp	r2, r3
 8007636:	d00e      	beq.n	8007656 <ai_platform_network_destroy+0x62>
 8007638:	e7fe      	b.n	8007638 <ai_platform_network_destroy+0x44>
 800763a:	4b28      	ldr	r3, [pc, #160]	; (80076dc <ai_platform_network_destroy+0xe8>)
 800763c:	2201      	movs	r2, #1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	2a00      	cmp	r2, #0
 8007644:	d1fc      	bne.n	8007640 <ai_platform_network_destroy+0x4c>
 8007646:	4b26      	ldr	r3, [pc, #152]	; (80076e0 <ai_platform_network_destroy+0xec>)
 8007648:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <ai_platform_network_destroy+0xe0>)
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <ai_platform_network_destroy+0xe4>)
 8007650:	429a      	cmp	r2, r3
 8007652:	d000      	beq.n	8007656 <ai_platform_network_destroy+0x62>
 8007654:	e7fe      	b.n	8007654 <ai_platform_network_destroy+0x60>
 8007656:	f7ff f935 	bl	80068c4 <_ai_platform_release_crc>
 800765a:	4620      	mov	r0, r4
 800765c:	bd10      	pop	{r4, pc}
 800765e:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <ai_platform_network_destroy+0xd0>)
 8007660:	6813      	ldr	r3, [r2, #0]
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	f7ff f92a 	bl	80068c0 <_ai_platform_acquire_crc>
 800766c:	4b16      	ldr	r3, [pc, #88]	; (80076c8 <ai_platform_network_destroy+0xd4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007678:	d00d      	beq.n	8007696 <ai_platform_network_destroy+0xa2>
 800767a:	4b14      	ldr	r3, [pc, #80]	; (80076cc <ai_platform_network_destroy+0xd8>)
 800767c:	2201      	movs	r2, #1
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	2a00      	cmp	r2, #0
 8007684:	d1fc      	bne.n	8007680 <ai_platform_network_destroy+0x8c>
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <ai_platform_network_destroy+0xdc>)
 8007688:	4a12      	ldr	r2, [pc, #72]	; (80076d4 <ai_platform_network_destroy+0xe0>)
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <ai_platform_network_destroy+0xe4>)
 8007690:	429a      	cmp	r2, r3
 8007692:	d00e      	beq.n	80076b2 <ai_platform_network_destroy+0xbe>
 8007694:	e7fe      	b.n	8007694 <ai_platform_network_destroy+0xa0>
 8007696:	4b11      	ldr	r3, [pc, #68]	; (80076dc <ai_platform_network_destroy+0xe8>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d1fc      	bne.n	800769c <ai_platform_network_destroy+0xa8>
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <ai_platform_network_destroy+0xec>)
 80076a4:	4a0b      	ldr	r2, [pc, #44]	; (80076d4 <ai_platform_network_destroy+0xe0>)
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <ai_platform_network_destroy+0xe4>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d000      	beq.n	80076b2 <ai_platform_network_destroy+0xbe>
 80076b0:	e7fe      	b.n	80076b0 <ai_platform_network_destroy+0xbc>
 80076b2:	f7ff f907 	bl	80068c4 <_ai_platform_release_crc>
 80076b6:	4620      	mov	r0, r4
 80076b8:	f002 f92a 	bl	8009910 <ai_layers_destroy_all>
 80076bc:	2400      	movs	r4, #0
 80076be:	e7cc      	b.n	800765a <ai_platform_network_destroy+0x66>
 80076c0:	a1c00100 	.word	0xa1c00100
 80076c4:	e0002000 	.word	0xe0002000
 80076c8:	e0042000 	.word	0xe0042000
 80076cc:	58024c08 	.word	0x58024c08
 80076d0:	58024c00 	.word	0x58024c00
 80076d4:	f407a5c2 	.word	0xf407a5c2
 80076d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80076dc:	40023008 	.word	0x40023008
 80076e0:	40023000 	.word	0x40023000

080076e4 <ai_platform_network_init>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d04b      	beq.n	8007784 <ai_platform_network_init+0xa0>
 80076ec:	4b79      	ldr	r3, [pc, #484]	; (80078d4 <ai_platform_network_init+0x1f0>)
 80076ee:	6802      	ldr	r2, [r0, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	4604      	mov	r4, r0
 80076f4:	d146      	bne.n	8007784 <ai_platform_network_init+0xa0>
 80076f6:	4a78      	ldr	r2, [pc, #480]	; (80078d8 <ai_platform_network_init+0x1f4>)
 80076f8:	6813      	ldr	r3, [r2, #0]
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	460e      	mov	r6, r1
 8007702:	f7ff f8dd 	bl	80068c0 <_ai_platform_acquire_crc>
 8007706:	4b75      	ldr	r3, [pc, #468]	; (80078dc <ai_platform_network_init+0x1f8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800770e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007712:	d00d      	beq.n	8007730 <ai_platform_network_init+0x4c>
 8007714:	4b72      	ldr	r3, [pc, #456]	; (80078e0 <ai_platform_network_init+0x1fc>)
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	2a00      	cmp	r2, #0
 800771e:	d1fc      	bne.n	800771a <ai_platform_network_init+0x36>
 8007720:	4b70      	ldr	r3, [pc, #448]	; (80078e4 <ai_platform_network_init+0x200>)
 8007722:	4a71      	ldr	r2, [pc, #452]	; (80078e8 <ai_platform_network_init+0x204>)
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4b70      	ldr	r3, [pc, #448]	; (80078ec <ai_platform_network_init+0x208>)
 800772a:	429a      	cmp	r2, r3
 800772c:	d00d      	beq.n	800774a <ai_platform_network_init+0x66>
 800772e:	e7fe      	b.n	800772e <ai_platform_network_init+0x4a>
 8007730:	4b6f      	ldr	r3, [pc, #444]	; (80078f0 <ai_platform_network_init+0x20c>)
 8007732:	2201      	movs	r2, #1
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	2a00      	cmp	r2, #0
 800773a:	d1fc      	bne.n	8007736 <ai_platform_network_init+0x52>
 800773c:	4b6d      	ldr	r3, [pc, #436]	; (80078f4 <ai_platform_network_init+0x210>)
 800773e:	4a6a      	ldr	r2, [pc, #424]	; (80078e8 <ai_platform_network_init+0x204>)
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	4b69      	ldr	r3, [pc, #420]	; (80078ec <ai_platform_network_init+0x208>)
 8007746:	429a      	cmp	r2, r3
 8007748:	d11b      	bne.n	8007782 <ai_platform_network_init+0x9e>
 800774a:	f7ff f8bb 	bl	80068c4 <_ai_platform_release_crc>
 800774e:	2e00      	cmp	r6, #0
 8007750:	d034      	beq.n	80077bc <ai_platform_network_init+0xd8>
 8007752:	4b69      	ldr	r3, [pc, #420]	; (80078f8 <ai_platform_network_init+0x214>)
 8007754:	6832      	ldr	r2, [r6, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d149      	bne.n	80077ee <ai_platform_network_init+0x10a>
 800775a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800775e:	6930      	ldr	r0, [r6, #16]
 8007760:	89b3      	ldrh	r3, [r6, #12]
 8007762:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8007766:	62a0      	str	r0, [r4, #40]	; 0x28
 8007768:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800776c:	2203      	movs	r2, #3
 800776e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8007772:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007774:	60e2      	str	r2, [r4, #12]
 8007776:	4620      	mov	r0, r4
 8007778:	f002 f850 	bl	800981c <ai_layers_init_all>
 800777c:	4620      	mov	r0, r4
 800777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007782:	e7fe      	b.n	8007782 <ai_platform_network_init+0x9e>
 8007784:	4a54      	ldr	r2, [pc, #336]	; (80078d8 <ai_platform_network_init+0x1f4>)
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	f7ff f897 	bl	80068c0 <_ai_platform_acquire_crc>
 8007792:	4b52      	ldr	r3, [pc, #328]	; (80078dc <ai_platform_network_init+0x1f8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779e:	d015      	beq.n	80077cc <ai_platform_network_init+0xe8>
 80077a0:	4b4f      	ldr	r3, [pc, #316]	; (80078e0 <ai_platform_network_init+0x1fc>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d1fc      	bne.n	80077a6 <ai_platform_network_init+0xc2>
 80077ac:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <ai_platform_network_init+0x200>)
 80077ae:	4a4e      	ldr	r2, [pc, #312]	; (80078e8 <ai_platform_network_init+0x204>)
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	4b4d      	ldr	r3, [pc, #308]	; (80078ec <ai_platform_network_init+0x208>)
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d015      	beq.n	80077e6 <ai_platform_network_init+0x102>
 80077ba:	e7fe      	b.n	80077ba <ai_platform_network_init+0xd6>
 80077bc:	f104 0010 	add.w	r0, r4, #16
 80077c0:	2211      	movs	r2, #17
 80077c2:	2110      	movs	r1, #16
 80077c4:	4634      	mov	r4, r6
 80077c6:	f000 fcc3 	bl	8008150 <core_set_error>
 80077ca:	e7d7      	b.n	800777c <ai_platform_network_init+0x98>
 80077cc:	4b48      	ldr	r3, [pc, #288]	; (80078f0 <ai_platform_network_init+0x20c>)
 80077ce:	2201      	movs	r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	d1fc      	bne.n	80077d2 <ai_platform_network_init+0xee>
 80077d8:	4b46      	ldr	r3, [pc, #280]	; (80078f4 <ai_platform_network_init+0x210>)
 80077da:	4a43      	ldr	r2, [pc, #268]	; (80078e8 <ai_platform_network_init+0x204>)
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b42      	ldr	r3, [pc, #264]	; (80078ec <ai_platform_network_init+0x208>)
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d16d      	bne.n	80078c2 <ai_platform_network_init+0x1de>
 80077e6:	f7ff f86d 	bl	80068c4 <_ai_platform_release_crc>
 80077ea:	2400      	movs	r4, #0
 80077ec:	e7c6      	b.n	800777c <ai_platform_network_init+0x98>
 80077ee:	4630      	mov	r0, r6
 80077f0:	2101      	movs	r1, #1
 80077f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80077f6:	f7fe ff89 	bl	800670c <ai_buffer_get_size>
 80077fa:	4635      	mov	r5, r6
 80077fc:	f106 071c 	add.w	r7, r6, #28
 8007800:	2101      	movs	r1, #1
 8007802:	4606      	mov	r6, r0
 8007804:	4638      	mov	r0, r7
 8007806:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800780a:	f7fe ff7f 	bl	800670c <ai_buffer_get_size>
 800780e:	2e00      	cmp	r6, #0
 8007810:	bf0a      	itet	eq
 8007812:	46b6      	moveq	lr, r6
 8007814:	f04f 0e01 	movne.w	lr, #1
 8007818:	4635      	moveq	r5, r6
 800781a:	2800      	cmp	r0, #0
 800781c:	d14b      	bne.n	80078b6 <ai_platform_network_init+0x1d2>
 800781e:	4607      	mov	r7, r0
 8007820:	4684      	mov	ip, r0
 8007822:	f1b8 0f00 	cmp.w	r8, #0
 8007826:	d023      	beq.n	8007870 <ai_platform_network_init+0x18c>
 8007828:	8be3      	ldrh	r3, [r4, #30]
 800782a:	4573      	cmp	r3, lr
 800782c:	d207      	bcs.n	800783e <ai_platform_network_init+0x15a>
 800782e:	f104 0010 	add.w	r0, r4, #16
 8007832:	2212      	movs	r2, #18
 8007834:	2116      	movs	r1, #22
 8007836:	f000 fc8b 	bl	8008150 <core_set_error>
 800783a:	2400      	movs	r4, #0
 800783c:	e79e      	b.n	800777c <ai_platform_network_init+0x98>
 800783e:	f1be 0f00 	cmp.w	lr, #0
 8007842:	d006      	beq.n	8007852 <ai_platform_network_init+0x16e>
 8007844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007846:	6a26      	ldr	r6, [r4, #32]
 8007848:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800784a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800784e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007852:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007854:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007858:	2600      	movs	r6, #0
 800785a:	4563      	cmp	r3, ip
 800785c:	83a6      	strh	r6, [r4, #28]
 800785e:	d211      	bcs.n	8007884 <ai_platform_network_init+0x1a0>
 8007860:	f104 0010 	add.w	r0, r4, #16
 8007864:	2213      	movs	r2, #19
 8007866:	2116      	movs	r1, #22
 8007868:	f000 fc72 	bl	8008150 <core_set_error>
 800786c:	4634      	mov	r4, r6
 800786e:	e785      	b.n	800777c <ai_platform_network_init+0x98>
 8007870:	2e00      	cmp	r6, #0
 8007872:	d0d9      	beq.n	8007828 <ai_platform_network_init+0x144>
 8007874:	f104 0010 	add.w	r0, r4, #16
 8007878:	2212      	movs	r2, #18
 800787a:	2110      	movs	r1, #16
 800787c:	4644      	mov	r4, r8
 800787e:	f000 fc67 	bl	8008150 <core_set_error>
 8007882:	e77b      	b.n	800777c <ai_platform_network_init+0x98>
 8007884:	f1bc 0f00 	cmp.w	ip, #0
 8007888:	d013      	beq.n	80078b2 <ai_platform_network_init+0x1ce>
 800788a:	f04f 081c 	mov.w	r8, #28
 800788e:	fb08 f80c 	mul.w	r8, r8, ip
 8007892:	eb07 0e06 	add.w	lr, r7, r6
 8007896:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800789a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800789c:	4435      	add	r5, r6
 800789e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078a0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80078a4:	361c      	adds	r6, #28
 80078a6:	4546      	cmp	r6, r8
 80078a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80078ac:	d1f1      	bne.n	8007892 <ai_platform_network_init+0x1ae>
 80078ae:	2300      	movs	r3, #0
 80078b0:	e75c      	b.n	800776c <ai_platform_network_init+0x88>
 80078b2:	4663      	mov	r3, ip
 80078b4:	e75a      	b.n	800776c <ai_platform_network_init+0x88>
 80078b6:	f1b9 0f00 	cmp.w	r9, #0
 80078ba:	d003      	beq.n	80078c4 <ai_platform_network_init+0x1e0>
 80078bc:	f04f 0c01 	mov.w	ip, #1
 80078c0:	e7af      	b.n	8007822 <ai_platform_network_init+0x13e>
 80078c2:	e7fe      	b.n	80078c2 <ai_platform_network_init+0x1de>
 80078c4:	f104 0010 	add.w	r0, r4, #16
 80078c8:	2213      	movs	r2, #19
 80078ca:	2110      	movs	r1, #16
 80078cc:	464c      	mov	r4, r9
 80078ce:	f000 fc3f 	bl	8008150 <core_set_error>
 80078d2:	e753      	b.n	800777c <ai_platform_network_init+0x98>
 80078d4:	a1c00100 	.word	0xa1c00100
 80078d8:	e0002000 	.word	0xe0002000
 80078dc:	e0042000 	.word	0xe0042000
 80078e0:	58024c08 	.word	0x58024c08
 80078e4:	58024c00 	.word	0x58024c00
 80078e8:	f407a5c2 	.word	0xf407a5c2
 80078ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80078f0:	40023008 	.word	0x40023008
 80078f4:	40023000 	.word	0x40023000
 80078f8:	a1facade 	.word	0xa1facade

080078fc <ai_platform_network_post_init>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	b120      	cbz	r0, 800790a <ai_platform_network_post_init+0xe>
 8007900:	4b3f      	ldr	r3, [pc, #252]	; (8007a00 <ai_platform_network_post_init+0x104>)
 8007902:	6802      	ldr	r2, [r0, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	4604      	mov	r4, r0
 8007908:	d02d      	beq.n	8007966 <ai_platform_network_post_init+0x6a>
 800790a:	4a3e      	ldr	r2, [pc, #248]	; (8007a04 <ai_platform_network_post_init+0x108>)
 800790c:	6813      	ldr	r3, [r2, #0]
 800790e:	f023 0301 	bic.w	r3, r3, #1
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	f7fe ffd4 	bl	80068c0 <_ai_platform_acquire_crc>
 8007918:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <ai_platform_network_post_init+0x10c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007924:	d00d      	beq.n	8007942 <ai_platform_network_post_init+0x46>
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <ai_platform_network_post_init+0x110>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	2a00      	cmp	r2, #0
 8007930:	d1fc      	bne.n	800792c <ai_platform_network_post_init+0x30>
 8007932:	4b37      	ldr	r3, [pc, #220]	; (8007a10 <ai_platform_network_post_init+0x114>)
 8007934:	4a37      	ldr	r2, [pc, #220]	; (8007a14 <ai_platform_network_post_init+0x118>)
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <ai_platform_network_post_init+0x11c>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d00d      	beq.n	800795c <ai_platform_network_post_init+0x60>
 8007940:	e7fe      	b.n	8007940 <ai_platform_network_post_init+0x44>
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <ai_platform_network_post_init+0x120>)
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	2a00      	cmp	r2, #0
 800794c:	d1fc      	bne.n	8007948 <ai_platform_network_post_init+0x4c>
 800794e:	4b34      	ldr	r3, [pc, #208]	; (8007a20 <ai_platform_network_post_init+0x124>)
 8007950:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <ai_platform_network_post_init+0x118>)
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b30      	ldr	r3, [pc, #192]	; (8007a18 <ai_platform_network_post_init+0x11c>)
 8007958:	429a      	cmp	r2, r3
 800795a:	d103      	bne.n	8007964 <ai_platform_network_post_init+0x68>
 800795c:	f7fe ffb2 	bl	80068c4 <_ai_platform_release_crc>
 8007960:	2000      	movs	r0, #0
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	e7fe      	b.n	8007964 <ai_platform_network_post_init+0x68>
 8007966:	4a27      	ldr	r2, [pc, #156]	; (8007a04 <ai_platform_network_post_init+0x108>)
 8007968:	6813      	ldr	r3, [r2, #0]
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	f7fe ffa6 	bl	80068c0 <_ai_platform_acquire_crc>
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <ai_platform_network_post_init+0x10c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007980:	d00d      	beq.n	800799e <ai_platform_network_post_init+0xa2>
 8007982:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <ai_platform_network_post_init+0x110>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	2a00      	cmp	r2, #0
 800798c:	d1fc      	bne.n	8007988 <ai_platform_network_post_init+0x8c>
 800798e:	4b20      	ldr	r3, [pc, #128]	; (8007a10 <ai_platform_network_post_init+0x114>)
 8007990:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <ai_platform_network_post_init+0x118>)
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <ai_platform_network_post_init+0x11c>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d00e      	beq.n	80079ba <ai_platform_network_post_init+0xbe>
 800799c:	e7fe      	b.n	800799c <ai_platform_network_post_init+0xa0>
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <ai_platform_network_post_init+0x120>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	d1fc      	bne.n	80079a4 <ai_platform_network_post_init+0xa8>
 80079aa:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <ai_platform_network_post_init+0x124>)
 80079ac:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <ai_platform_network_post_init+0x118>)
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b19      	ldr	r3, [pc, #100]	; (8007a18 <ai_platform_network_post_init+0x11c>)
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d000      	beq.n	80079ba <ai_platform_network_post_init+0xbe>
 80079b8:	e7fe      	b.n	80079b8 <ai_platform_network_post_init+0xbc>
 80079ba:	f7fe ff83 	bl	80068c4 <_ai_platform_release_crc>
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	f013 0502 	ands.w	r5, r3, #2
 80079c4:	d011      	beq.n	80079ea <ai_platform_network_post_init+0xee>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f001 ff3c 	bl	8009844 <ai_layers_post_init_all>
 80079cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079ce:	b1a3      	cbz	r3, 80079fa <ai_platform_network_post_init+0xfe>
 80079d0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80079d2:	b195      	cbz	r5, 80079fa <ai_platform_network_post_init+0xfe>
 80079d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80079d6:	4629      	mov	r1, r5
 80079d8:	2000      	movs	r0, #0
 80079da:	4798      	blx	r3
 80079dc:	692b      	ldr	r3, [r5, #16]
 80079de:	42ab      	cmp	r3, r5
 80079e0:	d00b      	beq.n	80079fa <ai_platform_network_post_init+0xfe>
 80079e2:	461d      	mov	r5, r3
 80079e4:	b14b      	cbz	r3, 80079fa <ai_platform_network_post_init+0xfe>
 80079e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079e8:	e7f4      	b.n	80079d4 <ai_platform_network_post_init+0xd8>
 80079ea:	f104 0010 	add.w	r0, r4, #16
 80079ee:	2210      	movs	r2, #16
 80079f0:	2111      	movs	r1, #17
 80079f2:	f000 fbad 	bl	8008150 <core_set_error>
 80079f6:	4628      	mov	r0, r5
 80079f8:	bd38      	pop	{r3, r4, r5, pc}
 80079fa:	2001      	movs	r0, #1
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	a1c00100 	.word	0xa1c00100
 8007a04:	e0002000 	.word	0xe0002000
 8007a08:	e0042000 	.word	0xe0042000
 8007a0c:	58024c08 	.word	0x58024c08
 8007a10:	58024c00 	.word	0x58024c00
 8007a14:	f407a5c2 	.word	0xf407a5c2
 8007a18:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a1c:	40023008 	.word	0x40023008
 8007a20:	40023000 	.word	0x40023000

08007a24 <ai_platform_network_process>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	9202      	str	r2, [sp, #8]
 8007a2e:	4604      	mov	r4, r0
 8007a30:	b120      	cbz	r0, 8007a3c <ai_platform_network_process+0x18>
 8007a32:	4b73      	ldr	r3, [pc, #460]	; (8007c00 <ai_platform_network_process+0x1dc>)
 8007a34:	6802      	ldr	r2, [r0, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	bf18      	it	ne
 8007a3a:	2400      	movne	r4, #0
 8007a3c:	4a71      	ldr	r2, [pc, #452]	; (8007c04 <ai_platform_network_process+0x1e0>)
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	f7fe ff3b 	bl	80068c0 <_ai_platform_acquire_crc>
 8007a4a:	4b6f      	ldr	r3, [pc, #444]	; (8007c08 <ai_platform_network_process+0x1e4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a56:	d00d      	beq.n	8007a74 <ai_platform_network_process+0x50>
 8007a58:	4b6c      	ldr	r3, [pc, #432]	; (8007c0c <ai_platform_network_process+0x1e8>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d1fc      	bne.n	8007a5e <ai_platform_network_process+0x3a>
 8007a64:	4b6a      	ldr	r3, [pc, #424]	; (8007c10 <ai_platform_network_process+0x1ec>)
 8007a66:	4a6b      	ldr	r2, [pc, #428]	; (8007c14 <ai_platform_network_process+0x1f0>)
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b6a      	ldr	r3, [pc, #424]	; (8007c18 <ai_platform_network_process+0x1f4>)
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d00e      	beq.n	8007a90 <ai_platform_network_process+0x6c>
 8007a72:	e7fe      	b.n	8007a72 <ai_platform_network_process+0x4e>
 8007a74:	4b69      	ldr	r3, [pc, #420]	; (8007c1c <ai_platform_network_process+0x1f8>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	2a00      	cmp	r2, #0
 8007a7e:	d1fc      	bne.n	8007a7a <ai_platform_network_process+0x56>
 8007a80:	4b67      	ldr	r3, [pc, #412]	; (8007c20 <ai_platform_network_process+0x1fc>)
 8007a82:	4a64      	ldr	r2, [pc, #400]	; (8007c14 <ai_platform_network_process+0x1f0>)
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <ai_platform_network_process+0x1f4>)
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d000      	beq.n	8007a90 <ai_platform_network_process+0x6c>
 8007a8e:	e7fe      	b.n	8007a8e <ai_platform_network_process+0x6a>
 8007a90:	f7fe ff18 	bl	80068c4 <_ai_platform_release_crc>
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	f000 8089 	beq.w	8007bac <ai_platform_network_process+0x188>
 8007a9a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8007a9c:	2f00      	cmp	r7, #0
 8007a9e:	f040 822b 	bne.w	8007ef8 <ai_platform_network_process+0x4d4>
 8007aa2:	68e3      	ldr	r3, [r4, #12]
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2600      	movs	r6, #0
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	6166      	str	r6, [r4, #20]
 8007aae:	f040 821b 	bne.w	8007ee8 <ai_platform_network_process+0x4c4>
 8007ab2:	2d00      	cmp	r5, #0
 8007ab4:	f000 809c 	beq.w	8007bf0 <ai_platform_network_process+0x1cc>
 8007ab8:	2f00      	cmp	r7, #0
 8007aba:	f000 8099 	beq.w	8007bf0 <ai_platform_network_process+0x1cc>
 8007abe:	883b      	ldrh	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8095 	beq.w	8007bf0 <ai_platform_network_process+0x1cc>
 8007ac6:	69aa      	ldr	r2, [r5, #24]
 8007ac8:	9401      	str	r4, [sp, #4]
 8007aca:	f8d2 8000 	ldr.w	r8, [r2]
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	f080 80a8 	bcs.w	8007c24 <ai_platform_network_process+0x200>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80a4 	beq.w	8007c24 <ai_platform_network_process+0x200>
 8007adc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007ae0:	2c00      	cmp	r4, #0
 8007ae2:	f000 809f 	beq.w	8007c24 <ai_platform_network_process+0x200>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f8d3 b000 	ldr.w	fp, [r3]
 8007aec:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8007af0:	eb1b 0a09 	adds.w	sl, fp, r9
 8007af4:	d07b      	beq.n	8007bee <ai_platform_network_process+0x1ca>
 8007af6:	69a3      	ldr	r3, [r4, #24]
 8007af8:	2101      	movs	r1, #1
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7fe fe04 	bl	800670c <ai_buffer_get_size>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	4283      	cmp	r3, r0
 8007b08:	d368      	bcc.n	8007bdc <ai_platform_network_process+0x1b8>
 8007b0a:	68e0      	ldr	r0, [r4, #12]
 8007b0c:	69a9      	ldr	r1, [r5, #24]
 8007b0e:	68c2      	ldr	r2, [r0, #12]
 8007b10:	68cb      	ldr	r3, [r1, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d162      	bne.n	8007bdc <ai_platform_network_process+0x1b8>
 8007b16:	6882      	ldr	r2, [r0, #8]
 8007b18:	688b      	ldr	r3, [r1, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d15e      	bne.n	8007bdc <ai_platform_network_process+0x1b8>
 8007b1e:	6842      	ldr	r2, [r0, #4]
 8007b20:	684b      	ldr	r3, [r1, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d15a      	bne.n	8007bdc <ai_platform_network_process+0x1b8>
 8007b26:	69a3      	ldr	r3, [r4, #24]
 8007b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b2c:	f001 ffae 	bl	8009a8c <ai_array_get_data_byte_size>
 8007b30:	9003      	str	r0, [sp, #12]
 8007b32:	4620      	mov	r0, r4
 8007b34:	f001 ff1c 	bl	8009970 <get_tensor_byte_size>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	d34e      	bcc.n	8007bdc <ai_platform_network_process+0x1b8>
 8007b3e:	69a3      	ldr	r3, [r4, #24]
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f001 ff29 	bl	8009998 <ai_array_to_buffer_fmt>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	4043      	eors	r3, r0
 8007b4a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007b4e:	d13c      	bne.n	8007bca <ai_platform_network_process+0x1a6>
 8007b50:	686b      	ldr	r3, [r5, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d04b      	beq.n	8007bee <ai_platform_network_process+0x1ca>
 8007b56:	69ab      	ldr	r3, [r5, #24]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	b362      	cbz	r2, 8007bb6 <ai_platform_network_process+0x192>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	9203      	str	r2, [sp, #12]
 8007b60:	f001 ff06 	bl	8009970 <get_tensor_byte_size>
 8007b64:	f8ca 0008 	str.w	r0, [sl, #8]
 8007b68:	69ab      	ldr	r3, [r5, #24]
 8007b6a:	9a03      	ldr	r2, [sp, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	fb03 f000 	mul.w	r0, r3, r0
 8007b72:	f8ca 000c 	str.w	r0, [sl, #12]
 8007b76:	6869      	ldr	r1, [r5, #4]
 8007b78:	f8ca 1004 	str.w	r1, [sl, #4]
 8007b7c:	686b      	ldr	r3, [r5, #4]
 8007b7e:	4403      	add	r3, r0
 8007b80:	f84b 3009 	str.w	r3, [fp, r9]
 8007b84:	69a0      	ldr	r0, [r4, #24]
 8007b86:	6803      	ldr	r3, [r0, #0]
 8007b88:	4590      	cmp	r8, r2
 8007b8a:	bf38      	it	cc
 8007b8c:	4690      	movcc	r8, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	d408      	bmi.n	8007ba4 <ai_platform_network_process+0x180>
 8007b92:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	4419      	add	r1, r3
 8007b9a:	6081      	str	r1, [r0, #8]
 8007b9c:	69a3      	ldr	r3, [r4, #24]
 8007b9e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007ba2:	60da      	str	r2, [r3, #12]
 8007ba4:	883b      	ldrh	r3, [r7, #0]
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	351c      	adds	r5, #28
 8007baa:	e790      	b.n	8007ace <ai_platform_network_process+0xaa>
 8007bac:	4623      	mov	r3, r4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	b005      	add	sp, #20
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	9c01      	ldr	r4, [sp, #4]
 8007bb8:	4692      	mov	sl, r2
 8007bba:	f104 0010 	add.w	r0, r4, #16
 8007bbe:	2221      	movs	r2, #33	; 0x21
 8007bc0:	2112      	movs	r1, #18
 8007bc2:	f000 fac5 	bl	8008150 <core_set_error>
 8007bc6:	4653      	mov	r3, sl
 8007bc8:	e7f1      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007bca:	9c01      	ldr	r4, [sp, #4]
 8007bcc:	2219      	movs	r2, #25
 8007bce:	f104 0010 	add.w	r0, r4, #16
 8007bd2:	2112      	movs	r1, #18
 8007bd4:	f000 fabc 	bl	8008150 <core_set_error>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e7e8      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007bdc:	9c01      	ldr	r4, [sp, #4]
 8007bde:	2218      	movs	r2, #24
 8007be0:	f104 0010 	add.w	r0, r4, #16
 8007be4:	2112      	movs	r1, #18
 8007be6:	f000 fab3 	bl	8008150 <core_set_error>
 8007bea:	2300      	movs	r3, #0
 8007bec:	e7df      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007bee:	9c01      	ldr	r4, [sp, #4]
 8007bf0:	f104 0010 	add.w	r0, r4, #16
 8007bf4:	2217      	movs	r2, #23
 8007bf6:	2112      	movs	r1, #18
 8007bf8:	f000 faaa 	bl	8008150 <core_set_error>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e7d6      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007c00:	a1c00100 	.word	0xa1c00100
 8007c04:	e0002000 	.word	0xe0002000
 8007c08:	e0042000 	.word	0xe0042000
 8007c0c:	58024c08 	.word	0x58024c08
 8007c10:	58024c00 	.word	0x58024c00
 8007c14:	f407a5c2 	.word	0xf407a5c2
 8007c18:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c1c:	40023008 	.word	0x40023008
 8007c20:	40023000 	.word	0x40023000
 8007c24:	9c01      	ldr	r4, [sp, #4]
 8007c26:	9a02      	ldr	r2, [sp, #8]
 8007c28:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	f000 80ab 	beq.w	8007d86 <ai_platform_network_process+0x362>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	f240 809e 	bls.w	8007d72 <ai_platform_network_process+0x34e>
 8007c36:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8007c3a:	f119 0f0c 	cmn.w	r9, #12
 8007c3e:	f000 8098 	beq.w	8007d72 <ai_platform_network_process+0x34e>
 8007c42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8093 	beq.w	8007d72 <ai_platform_network_process+0x34e>
 8007c4c:	9d02      	ldr	r5, [sp, #8]
 8007c4e:	9401      	str	r4, [sp, #4]
 8007c50:	2700      	movs	r7, #0
 8007c52:	429f      	cmp	r7, r3
 8007c54:	f080 8095 	bcs.w	8007d82 <ai_platform_network_process+0x35e>
 8007c58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8090 	beq.w	8007d82 <ai_platform_network_process+0x35e>
 8007c62:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	f000 808b 	beq.w	8007d82 <ai_platform_network_process+0x35e>
 8007c6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007c70:	f8d3 b000 	ldr.w	fp, [r3]
 8007c74:	013e      	lsls	r6, r7, #4
 8007c76:	eb1b 0a06 	adds.w	sl, fp, r6
 8007c7a:	f000 812c 	beq.w	8007ed6 <ai_platform_network_process+0x4b2>
 8007c7e:	69a3      	ldr	r3, [r4, #24]
 8007c80:	2101      	movs	r1, #1
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	4628      	mov	r0, r5
 8007c88:	f7fe fd40 	bl	800670c <ai_buffer_get_size>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	4283      	cmp	r3, r0
 8007c90:	d36e      	bcc.n	8007d70 <ai_platform_network_process+0x34c>
 8007c92:	68e0      	ldr	r0, [r4, #12]
 8007c94:	69a9      	ldr	r1, [r5, #24]
 8007c96:	68c2      	ldr	r2, [r0, #12]
 8007c98:	68cb      	ldr	r3, [r1, #12]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d168      	bne.n	8007d70 <ai_platform_network_process+0x34c>
 8007c9e:	6882      	ldr	r2, [r0, #8]
 8007ca0:	688b      	ldr	r3, [r1, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d164      	bne.n	8007d70 <ai_platform_network_process+0x34c>
 8007ca6:	6842      	ldr	r2, [r0, #4]
 8007ca8:	684b      	ldr	r3, [r1, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d160      	bne.n	8007d70 <ai_platform_network_process+0x34c>
 8007cae:	69a3      	ldr	r3, [r4, #24]
 8007cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cb4:	f001 feea 	bl	8009a8c <ai_array_get_data_byte_size>
 8007cb8:	9002      	str	r0, [sp, #8]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f001 fe58 	bl	8009970 <get_tensor_byte_size>
 8007cc0:	9b02      	ldr	r3, [sp, #8]
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	d354      	bcc.n	8007d70 <ai_platform_network_process+0x34c>
 8007cc6:	69a3      	ldr	r3, [r4, #24]
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f001 fe65 	bl	8009998 <ai_array_to_buffer_fmt>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	4043      	eors	r3, r0
 8007cd2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007cd6:	d142      	bne.n	8007d5e <ai_platform_network_process+0x33a>
 8007cd8:	686b      	ldr	r3, [r5, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d035      	beq.n	8007d4a <ai_platform_network_process+0x326>
 8007cde:	69ab      	ldr	r3, [r5, #24]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	b342      	cbz	r2, 8007d36 <ai_platform_network_process+0x312>
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	9202      	str	r2, [sp, #8]
 8007ce8:	f001 fe42 	bl	8009970 <get_tensor_byte_size>
 8007cec:	f8ca 0008 	str.w	r0, [sl, #8]
 8007cf0:	69ab      	ldr	r3, [r5, #24]
 8007cf2:	9a02      	ldr	r2, [sp, #8]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	fb03 f000 	mul.w	r0, r3, r0
 8007cfa:	f8ca 000c 	str.w	r0, [sl, #12]
 8007cfe:	6869      	ldr	r1, [r5, #4]
 8007d00:	f8ca 1004 	str.w	r1, [sl, #4]
 8007d04:	686b      	ldr	r3, [r5, #4]
 8007d06:	4403      	add	r3, r0
 8007d08:	f84b 3006 	str.w	r3, [fp, r6]
 8007d0c:	69a0      	ldr	r0, [r4, #24]
 8007d0e:	6803      	ldr	r3, [r0, #0]
 8007d10:	4590      	cmp	r8, r2
 8007d12:	bf38      	it	cc
 8007d14:	4690      	movcc	r8, r2
 8007d16:	009e      	lsls	r6, r3, #2
 8007d18:	d408      	bmi.n	8007d2c <ai_platform_network_process+0x308>
 8007d1a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	4419      	add	r1, r3
 8007d22:	6081      	str	r1, [r0, #8]
 8007d24:	69a3      	ldr	r3, [r4, #24]
 8007d26:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007d30:	3701      	adds	r7, #1
 8007d32:	351c      	adds	r5, #28
 8007d34:	e78d      	b.n	8007c52 <ai_platform_network_process+0x22e>
 8007d36:	9c01      	ldr	r4, [sp, #4]
 8007d38:	4692      	mov	sl, r2
 8007d3a:	f104 0010 	add.w	r0, r4, #16
 8007d3e:	2221      	movs	r2, #33	; 0x21
 8007d40:	2113      	movs	r1, #19
 8007d42:	f000 fa05 	bl	8008150 <core_set_error>
 8007d46:	4653      	mov	r3, sl
 8007d48:	e731      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007d4a:	9c01      	ldr	r4, [sp, #4]
 8007d4c:	469a      	mov	sl, r3
 8007d4e:	f104 0010 	add.w	r0, r4, #16
 8007d52:	2217      	movs	r2, #23
 8007d54:	2113      	movs	r1, #19
 8007d56:	f000 f9fb 	bl	8008150 <core_set_error>
 8007d5a:	4653      	mov	r3, sl
 8007d5c:	e727      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007d5e:	9c01      	ldr	r4, [sp, #4]
 8007d60:	2219      	movs	r2, #25
 8007d62:	f104 0010 	add.w	r0, r4, #16
 8007d66:	2113      	movs	r1, #19
 8007d68:	f000 f9f2 	bl	8008150 <core_set_error>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e71e      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007d70:	9c01      	ldr	r4, [sp, #4]
 8007d72:	f104 0010 	add.w	r0, r4, #16
 8007d76:	2218      	movs	r2, #24
 8007d78:	2113      	movs	r1, #19
 8007d7a:	f000 f9e9 	bl	8008150 <core_set_error>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e715      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007d82:	9c01      	ldr	r4, [sp, #4]
 8007d84:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007d86:	f8a4 8014 	strh.w	r8, [r4, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80a0 	beq.w	8007ed0 <ai_platform_network_process+0x4ac>
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007d94:	f240 809a 	bls.w	8007ecc <ai_platform_network_process+0x4a8>
 8007d98:	f105 070c 	add.w	r7, r5, #12
 8007d9c:	8ae3      	ldrh	r3, [r4, #22]
 8007d9e:	8aa2      	ldrh	r2, [r4, #20]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	f67f af04 	bls.w	8007bae <ai_platform_network_process+0x18a>
 8007da6:	46a3      	mov	fp, r4
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	d036      	beq.n	8007e1a <ai_platform_network_process+0x3f6>
 8007dac:	882b      	ldrh	r3, [r5, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d033      	beq.n	8007e1a <ai_platform_network_process+0x3f6>
 8007db2:	686b      	ldr	r3, [r5, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d030      	beq.n	8007e1a <ai_platform_network_process+0x3f6>
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f04f 0800 	mov.w	r8, #0
 8007dbe:	b9db      	cbnz	r3, 8007df8 <ai_platform_network_process+0x3d4>
 8007dc0:	e02b      	b.n	8007e1a <ai_platform_network_process+0x3f6>
 8007dc2:	68d4      	ldr	r4, [r2, #12]
 8007dc4:	1b00      	subs	r0, r0, r4
 8007dc6:	4401      	add	r1, r0
 8007dc8:	6091      	str	r1, [r2, #8]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	6872      	ldr	r2, [r6, #4]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007dd4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007dd8:	440b      	add	r3, r1
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	bf24      	itt	cs
 8007dde:	68f3      	ldrcs	r3, [r6, #12]
 8007de0:	1ad3      	subcs	r3, r2, r3
 8007de2:	6073      	str	r3, [r6, #4]
 8007de4:	882b      	ldrh	r3, [r5, #0]
 8007de6:	f108 0801 	add.w	r8, r8, #1
 8007dea:	4598      	cmp	r8, r3
 8007dec:	d215      	bcs.n	8007e1a <ai_platform_network_process+0x3f6>
 8007dee:	686b      	ldr	r3, [r5, #4]
 8007df0:	b19b      	cbz	r3, 8007e1a <ai_platform_network_process+0x3f6>
 8007df2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007df6:	b183      	cbz	r3, 8007e1a <ai_platform_network_process+0x3f6>
 8007df8:	68a9      	ldr	r1, [r5, #8]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	f8d1 a000 	ldr.w	sl, [r1]
 8007e00:	6814      	ldr	r4, [r2, #0]
 8007e02:	6890      	ldr	r0, [r2, #8]
 8007e04:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007e08:	eb0a 0609 	add.w	r6, sl, r9
 8007e0c:	00a4      	lsls	r4, r4, #2
 8007e0e:	6871      	ldr	r1, [r6, #4]
 8007e10:	d5d7      	bpl.n	8007dc2 <ai_platform_network_process+0x39e>
 8007e12:	68b2      	ldr	r2, [r6, #8]
 8007e14:	f001 fe7c 	bl	8009b10 <memcpy>
 8007e18:	e7da      	b.n	8007dd0 <ai_platform_network_process+0x3ac>
 8007e1a:	4658      	mov	r0, fp
 8007e1c:	f001 fd2a 	bl	8009874 <ai_layers_forward_all>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	d047      	beq.n	8007eb4 <ai_platform_network_process+0x490>
 8007e24:	883b      	ldrh	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d044      	beq.n	8007eb4 <ai_platform_network_process+0x490>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d041      	beq.n	8007eb4 <ai_platform_network_process+0x490>
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d03e      	beq.n	8007eb4 <ai_platform_network_process+0x490>
 8007e36:	f04f 0800 	mov.w	r8, #0
 8007e3a:	e019      	b.n	8007e70 <ai_platform_network_process+0x44c>
 8007e3c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bf24      	itt	cs
 8007e44:	68f3      	ldrcs	r3, [r6, #12]
 8007e46:	1ad3      	subcs	r3, r2, r3
 8007e48:	6073      	str	r3, [r6, #4]
 8007e4a:	6981      	ldr	r1, [r0, #24]
 8007e4c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007e50:	1b12      	subs	r2, r2, r4
 8007e52:	4413      	add	r3, r2
 8007e54:	608b      	str	r3, [r1, #8]
 8007e56:	6983      	ldr	r3, [r0, #24]
 8007e58:	6872      	ldr	r2, [r6, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
 8007e5c:	883b      	ldrh	r3, [r7, #0]
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	4598      	cmp	r8, r3
 8007e64:	d226      	bcs.n	8007eb4 <ai_platform_network_process+0x490>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	b323      	cbz	r3, 8007eb4 <ai_platform_network_process+0x490>
 8007e6a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007e6e:	b308      	cbz	r0, 8007eb4 <ai_platform_network_process+0x490>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6981      	ldr	r1, [r0, #24]
 8007e74:	f8d3 a000 	ldr.w	sl, [r3]
 8007e78:	680c      	ldr	r4, [r1, #0]
 8007e7a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007e7e:	eb0a 0609 	add.w	r6, sl, r9
 8007e82:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007e86:	00a4      	lsls	r4, r4, #2
 8007e88:	eb0c 0302 	add.w	r3, ip, r2
 8007e8c:	d5d6      	bpl.n	8007e3c <ai_platform_network_process+0x418>
 8007e8e:	6889      	ldr	r1, [r1, #8]
 8007e90:	4660      	mov	r0, ip
 8007e92:	f001 fe3d 	bl	8009b10 <memcpy>
 8007e96:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007e9a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007e9e:	440b      	add	r3, r1
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	bf24      	itt	cs
 8007ea4:	68f3      	ldrcs	r3, [r6, #12]
 8007ea6:	1ad3      	subcs	r3, r2, r3
 8007ea8:	6073      	str	r3, [r6, #4]
 8007eaa:	883b      	ldrh	r3, [r7, #0]
 8007eac:	f108 0801 	add.w	r8, r8, #1
 8007eb0:	4598      	cmp	r8, r3
 8007eb2:	d3d8      	bcc.n	8007e66 <ai_platform_network_process+0x442>
 8007eb4:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 8007eb8:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f8ab 3016 	strh.w	r3, [fp, #22]
 8007ec6:	f63f af6f 	bhi.w	8007da8 <ai_platform_network_process+0x384>
 8007eca:	e670      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007ecc:	2700      	movs	r7, #0
 8007ece:	e765      	b.n	8007d9c <ai_platform_network_process+0x378>
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	461f      	mov	r7, r3
 8007ed4:	e762      	b.n	8007d9c <ai_platform_network_process+0x378>
 8007ed6:	9c01      	ldr	r4, [sp, #4]
 8007ed8:	2217      	movs	r2, #23
 8007eda:	f104 0010 	add.w	r0, r4, #16
 8007ede:	2113      	movs	r1, #19
 8007ee0:	f000 f936 	bl	8008150 <core_set_error>
 8007ee4:	4653      	mov	r3, sl
 8007ee6:	e662      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007ee8:	f104 0010 	add.w	r0, r4, #16
 8007eec:	2230      	movs	r2, #48	; 0x30
 8007eee:	2111      	movs	r1, #17
 8007ef0:	f000 f92e 	bl	8008150 <core_set_error>
 8007ef4:	4633      	mov	r3, r6
 8007ef6:	e65a      	b.n	8007bae <ai_platform_network_process+0x18a>
 8007ef8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007efa:	e5d2      	b.n	8007aa2 <ai_platform_network_process+0x7e>

08007efc <ai_platform_observer_register_s>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	b120      	cbz	r0, 8007f0a <ai_platform_observer_register_s+0xe>
 8007f00:	4b44      	ldr	r3, [pc, #272]	; (8008014 <ai_platform_observer_register_s+0x118>)
 8007f02:	6802      	ldr	r2, [r0, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	4604      	mov	r4, r0
 8007f08:	d02d      	beq.n	8007f66 <ai_platform_observer_register_s+0x6a>
 8007f0a:	4a43      	ldr	r2, [pc, #268]	; (8008018 <ai_platform_observer_register_s+0x11c>)
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	f7fe fcd4 	bl	80068c0 <_ai_platform_acquire_crc>
 8007f18:	4b40      	ldr	r3, [pc, #256]	; (800801c <ai_platform_observer_register_s+0x120>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f24:	d00d      	beq.n	8007f42 <ai_platform_observer_register_s+0x46>
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <ai_platform_observer_register_s+0x124>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	d1fc      	bne.n	8007f2c <ai_platform_observer_register_s+0x30>
 8007f32:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <ai_platform_observer_register_s+0x128>)
 8007f34:	4a3c      	ldr	r2, [pc, #240]	; (8008028 <ai_platform_observer_register_s+0x12c>)
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b3c      	ldr	r3, [pc, #240]	; (800802c <ai_platform_observer_register_s+0x130>)
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d00e      	beq.n	8007f5e <ai_platform_observer_register_s+0x62>
 8007f40:	e7fe      	b.n	8007f40 <ai_platform_observer_register_s+0x44>
 8007f42:	4b3b      	ldr	r3, [pc, #236]	; (8008030 <ai_platform_observer_register_s+0x134>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1fc      	bne.n	8007f48 <ai_platform_observer_register_s+0x4c>
 8007f4e:	4b39      	ldr	r3, [pc, #228]	; (8008034 <ai_platform_observer_register_s+0x138>)
 8007f50:	4a35      	ldr	r2, [pc, #212]	; (8008028 <ai_platform_observer_register_s+0x12c>)
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b35      	ldr	r3, [pc, #212]	; (800802c <ai_platform_observer_register_s+0x130>)
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d000      	beq.n	8007f5e <ai_platform_observer_register_s+0x62>
 8007f5c:	e7fe      	b.n	8007f5c <ai_platform_observer_register_s+0x60>
 8007f5e:	f7fe fcb1 	bl	80068c4 <_ai_platform_release_crc>
 8007f62:	2000      	movs	r0, #0
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <ai_platform_observer_register_s+0x11c>)
 8007f68:	6813      	ldr	r3, [r2, #0]
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	460d      	mov	r5, r1
 8007f72:	f7fe fca5 	bl	80068c0 <_ai_platform_acquire_crc>
 8007f76:	4b29      	ldr	r3, [pc, #164]	; (800801c <ai_platform_observer_register_s+0x120>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f82:	d00d      	beq.n	8007fa0 <ai_platform_observer_register_s+0xa4>
 8007f84:	4b26      	ldr	r3, [pc, #152]	; (8008020 <ai_platform_observer_register_s+0x124>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d1fc      	bne.n	8007f8a <ai_platform_observer_register_s+0x8e>
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <ai_platform_observer_register_s+0x128>)
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <ai_platform_observer_register_s+0x12c>)
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b24      	ldr	r3, [pc, #144]	; (800802c <ai_platform_observer_register_s+0x130>)
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d00e      	beq.n	8007fbc <ai_platform_observer_register_s+0xc0>
 8007f9e:	e7fe      	b.n	8007f9e <ai_platform_observer_register_s+0xa2>
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <ai_platform_observer_register_s+0x134>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	d1fc      	bne.n	8007fa6 <ai_platform_observer_register_s+0xaa>
 8007fac:	4b21      	ldr	r3, [pc, #132]	; (8008034 <ai_platform_observer_register_s+0x138>)
 8007fae:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <ai_platform_observer_register_s+0x12c>)
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <ai_platform_observer_register_s+0x130>)
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d000      	beq.n	8007fbc <ai_platform_observer_register_s+0xc0>
 8007fba:	e7fe      	b.n	8007fba <ai_platform_observer_register_s+0xbe>
 8007fbc:	f7fe fc82 	bl	80068c4 <_ai_platform_release_crc>
 8007fc0:	b14d      	cbz	r5, 8007fd6 <ai_platform_observer_register_s+0xda>
 8007fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fc4:	b17b      	cbz	r3, 8007fe6 <ai_platform_observer_register_s+0xea>
 8007fc6:	f104 0010 	add.w	r0, r4, #16
 8007fca:	2240      	movs	r2, #64	; 0x40
 8007fcc:	2111      	movs	r1, #17
 8007fce:	f000 f8bf 	bl	8008150 <core_set_error>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
 8007fd6:	f104 0010 	add.w	r0, r4, #16
 8007fda:	2211      	movs	r2, #17
 8007fdc:	2110      	movs	r1, #16
 8007fde:	f000 f8b7 	bl	8008150 <core_set_error>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	81eb      	strh	r3, [r5, #14]
 8007fe8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007fea:	b13a      	cbz	r2, 8007ffc <ai_platform_observer_register_s+0x100>
 8007fec:	3301      	adds	r3, #1
 8007fee:	81eb      	strh	r3, [r5, #14]
 8007ff0:	6911      	ldr	r1, [r2, #16]
 8007ff2:	4291      	cmp	r1, r2
 8007ff4:	d002      	beq.n	8007ffc <ai_platform_observer_register_s+0x100>
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d1f7      	bne.n	8007fec <ai_platform_observer_register_s+0xf0>
 8007ffc:	7a2b      	ldrb	r3, [r5, #8]
 8007ffe:	4a0e      	ldr	r2, [pc, #56]	; (8008038 <ai_platform_observer_register_s+0x13c>)
 8008000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008004:	2100      	movs	r1, #0
 8008006:	60ab      	str	r3, [r5, #8]
 8008008:	81a9      	strh	r1, [r5, #12]
 800800a:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 800800e:	2001      	movs	r0, #1
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	bf00      	nop
 8008014:	a1c00100 	.word	0xa1c00100
 8008018:	e0002000 	.word	0xe0002000
 800801c:	e0042000 	.word	0xe0042000
 8008020:	58024c08 	.word	0x58024c08
 8008024:	58024c00 	.word	0x58024c00
 8008028:	f407a5c2 	.word	0xf407a5c2
 800802c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008030:	40023008 	.word	0x40023008
 8008034:	40023000 	.word	0x40023000
 8008038:	080067b5 	.word	0x080067b5

0800803c <ai_platform_observer_unregister_s>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	b120      	cbz	r0, 800804a <ai_platform_observer_unregister_s+0xe>
 8008040:	4b36      	ldr	r3, [pc, #216]	; (800811c <ai_platform_observer_unregister_s+0xe0>)
 8008042:	6802      	ldr	r2, [r0, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	4605      	mov	r5, r0
 8008048:	d02d      	beq.n	80080a6 <ai_platform_observer_unregister_s+0x6a>
 800804a:	4a35      	ldr	r2, [pc, #212]	; (8008120 <ai_platform_observer_unregister_s+0xe4>)
 800804c:	6813      	ldr	r3, [r2, #0]
 800804e:	f023 0301 	bic.w	r3, r3, #1
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	f7fe fc34 	bl	80068c0 <_ai_platform_acquire_crc>
 8008058:	4b32      	ldr	r3, [pc, #200]	; (8008124 <ai_platform_observer_unregister_s+0xe8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008064:	d00d      	beq.n	8008082 <ai_platform_observer_unregister_s+0x46>
 8008066:	4b30      	ldr	r3, [pc, #192]	; (8008128 <ai_platform_observer_unregister_s+0xec>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	2a00      	cmp	r2, #0
 8008070:	d1fc      	bne.n	800806c <ai_platform_observer_unregister_s+0x30>
 8008072:	4b2e      	ldr	r3, [pc, #184]	; (800812c <ai_platform_observer_unregister_s+0xf0>)
 8008074:	4a2e      	ldr	r2, [pc, #184]	; (8008130 <ai_platform_observer_unregister_s+0xf4>)
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <ai_platform_observer_unregister_s+0xf8>)
 800807c:	429a      	cmp	r2, r3
 800807e:	d00e      	beq.n	800809e <ai_platform_observer_unregister_s+0x62>
 8008080:	e7fe      	b.n	8008080 <ai_platform_observer_unregister_s+0x44>
 8008082:	4b2d      	ldr	r3, [pc, #180]	; (8008138 <ai_platform_observer_unregister_s+0xfc>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	2a00      	cmp	r2, #0
 800808c:	d1fc      	bne.n	8008088 <ai_platform_observer_unregister_s+0x4c>
 800808e:	4b2b      	ldr	r3, [pc, #172]	; (800813c <ai_platform_observer_unregister_s+0x100>)
 8008090:	4a27      	ldr	r2, [pc, #156]	; (8008130 <ai_platform_observer_unregister_s+0xf4>)
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b27      	ldr	r3, [pc, #156]	; (8008134 <ai_platform_observer_unregister_s+0xf8>)
 8008098:	429a      	cmp	r2, r3
 800809a:	d000      	beq.n	800809e <ai_platform_observer_unregister_s+0x62>
 800809c:	e7fe      	b.n	800809c <ai_platform_observer_unregister_s+0x60>
 800809e:	f7fe fc11 	bl	80068c4 <_ai_platform_release_crc>
 80080a2:	2000      	movs	r0, #0
 80080a4:	bd38      	pop	{r3, r4, r5, pc}
 80080a6:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <ai_platform_observer_unregister_s+0xe4>)
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	f023 0301 	bic.w	r3, r3, #1
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	460c      	mov	r4, r1
 80080b2:	f7fe fc05 	bl	80068c0 <_ai_platform_acquire_crc>
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <ai_platform_observer_unregister_s+0xe8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c2:	d00d      	beq.n	80080e0 <ai_platform_observer_unregister_s+0xa4>
 80080c4:	4b18      	ldr	r3, [pc, #96]	; (8008128 <ai_platform_observer_unregister_s+0xec>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d1fc      	bne.n	80080ca <ai_platform_observer_unregister_s+0x8e>
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <ai_platform_observer_unregister_s+0xf0>)
 80080d2:	4a17      	ldr	r2, [pc, #92]	; (8008130 <ai_platform_observer_unregister_s+0xf4>)
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4b16      	ldr	r3, [pc, #88]	; (8008134 <ai_platform_observer_unregister_s+0xf8>)
 80080da:	429a      	cmp	r2, r3
 80080dc:	d00e      	beq.n	80080fc <ai_platform_observer_unregister_s+0xc0>
 80080de:	e7fe      	b.n	80080de <ai_platform_observer_unregister_s+0xa2>
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <ai_platform_observer_unregister_s+0xfc>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	d1fc      	bne.n	80080e6 <ai_platform_observer_unregister_s+0xaa>
 80080ec:	4b13      	ldr	r3, [pc, #76]	; (800813c <ai_platform_observer_unregister_s+0x100>)
 80080ee:	4a10      	ldr	r2, [pc, #64]	; (8008130 <ai_platform_observer_unregister_s+0xf4>)
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <ai_platform_observer_unregister_s+0xf8>)
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d000      	beq.n	80080fc <ai_platform_observer_unregister_s+0xc0>
 80080fa:	e7fe      	b.n	80080fa <ai_platform_observer_unregister_s+0xbe>
 80080fc:	f7fe fbe2 	bl	80068c4 <_ai_platform_release_crc>
 8008100:	b124      	cbz	r4, 800810c <ai_platform_observer_unregister_s+0xd0>
 8008102:	2300      	movs	r3, #0
 8008104:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
 8008108:	2001      	movs	r0, #1
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	f105 0010 	add.w	r0, r5, #16
 8008110:	2211      	movs	r2, #17
 8008112:	2110      	movs	r1, #16
 8008114:	f000 f81c 	bl	8008150 <core_set_error>
 8008118:	4620      	mov	r0, r4
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	a1c00100 	.word	0xa1c00100
 8008120:	e0002000 	.word	0xe0002000
 8008124:	e0042000 	.word	0xe0042000
 8008128:	58024c08 	.word	0x58024c08
 800812c:	58024c00 	.word	0x58024c00
 8008130:	f407a5c2 	.word	0xf407a5c2
 8008134:	b5e8b5cd 	.word	0xb5e8b5cd
 8008138:	40023008 	.word	0x40023008
 800813c:	40023000 	.word	0x40023000

08008140 <core_init>:
 8008140:	2001      	movs	r0, #1
 8008142:	4770      	bx	lr

08008144 <core_get_error>:
 8008144:	4603      	mov	r3, r0
 8008146:	2200      	movs	r2, #0
 8008148:	6800      	ldr	r0, [r0, #0]
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop

08008150 <core_set_error>:
 8008150:	7803      	ldrb	r3, [r0, #0]
 8008152:	b933      	cbnz	r3, 8008162 <core_set_error+0x12>
 8008154:	7001      	strb	r1, [r0, #0]
 8008156:	6803      	ldr	r3, [r0, #0]
 8008158:	f362 231f 	bfi	r3, r2, #8, #24
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	2001      	movs	r0, #1
 8008160:	4770      	bx	lr
 8008162:	2000      	movs	r0, #0
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop

08008168 <func_dummy>:
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <ai_dict_decompress_f32>:
 800816c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008170:	9f08      	ldr	r7, [sp, #32]
 8008172:	2b04      	cmp	r3, #4
 8008174:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008178:	d00e      	beq.n	8008198 <ai_dict_decompress_f32+0x2c>
 800817a:	2b08      	cmp	r3, #8
 800817c:	d10a      	bne.n	8008194 <ai_dict_decompress_f32+0x28>
 800817e:	42b8      	cmp	r0, r7
 8008180:	d208      	bcs.n	8008194 <ai_dict_decompress_f32+0x28>
 8008182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f840 3b04 	str.w	r3, [r0], #4
 8008190:	4287      	cmp	r7, r0
 8008192:	d8f6      	bhi.n	8008182 <ai_dict_decompress_f32+0x16>
 8008194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800819e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80081a2:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 80081a6:	f003 0e01 	and.w	lr, r3, #1
 80081aa:	42b8      	cmp	r0, r7
 80081ac:	d2f2      	bcs.n	8008194 <ai_dict_decompress_f32+0x28>
 80081ae:	f1bc 0f00 	cmp.w	ip, #0
 80081b2:	d01a      	beq.n	80081ea <ai_dict_decompress_f32+0x7e>
 80081b4:	f100 0508 	add.w	r5, r0, #8
 80081b8:	1e4c      	subs	r4, r1, #1
 80081ba:	eb01 0608 	add.w	r6, r1, r8
 80081be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80081c2:	091b      	lsrs	r3, r3, #4
 80081c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081c8:	42a6      	cmp	r6, r4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f845 3c08 	str.w	r3, [r5, #-8]
 80081d0:	7823      	ldrb	r3, [r4, #0]
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081da:	f105 0508 	add.w	r5, r5, #8
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f845 3c0c 	str.w	r3, [r5, #-12]
 80081e4:	d1eb      	bne.n	80081be <ai_dict_decompress_f32+0x52>
 80081e6:	4461      	add	r1, ip
 80081e8:	4448      	add	r0, r9
 80081ea:	f1be 0f00 	cmp.w	lr, #0
 80081ee:	d103      	bne.n	80081f8 <ai_dict_decompress_f32+0x8c>
 80081f0:	4287      	cmp	r7, r0
 80081f2:	d8dc      	bhi.n	80081ae <ai_dict_decompress_f32+0x42>
 80081f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081f8:	780b      	ldrb	r3, [r1, #0]
 80081fa:	091b      	lsrs	r3, r3, #4
 80081fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008200:	3101      	adds	r1, #1
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6003      	str	r3, [r0, #0]
 8008206:	3004      	adds	r0, #4
 8008208:	e7cf      	b.n	80081aa <ai_dict_decompress_f32+0x3e>
 800820a:	bf00      	nop

0800820c <forward_conv2d_nl_pool>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	ed2d 8b10 	vpush	{d8-d15}
 8008214:	b0e1      	sub	sp, #388	; 0x184
 8008216:	6983      	ldr	r3, [r0, #24]
 8008218:	881e      	ldrh	r6, [r3, #0]
 800821a:	af0a      	add	r7, sp, #40	; 0x28
 800821c:	2e00      	cmp	r6, #0
 800821e:	f000 859b 	beq.w	8008d58 <forward_conv2d_nl_pool+0xb4c>
 8008222:	6859      	ldr	r1, [r3, #4]
 8008224:	684a      	ldr	r2, [r1, #4]
 8008226:	2a00      	cmp	r2, #0
 8008228:	f000 8593 	beq.w	8008d52 <forward_conv2d_nl_pool+0xb46>
 800822c:	f8d2 c000 	ldr.w	ip, [r2]
 8008230:	2e01      	cmp	r6, #1
 8008232:	f240 858b 	bls.w	8008d4c <forward_conv2d_nl_pool+0xb40>
 8008236:	690a      	ldr	r2, [r1, #16]
 8008238:	2a00      	cmp	r2, #0
 800823a:	f000 8582 	beq.w	8008d42 <forward_conv2d_nl_pool+0xb36>
 800823e:	f8d2 9000 	ldr.w	r9, [r2]
 8008242:	2e02      	cmp	r6, #2
 8008244:	f000 8582 	beq.w	8008d4c <forward_conv2d_nl_pool+0xb40>
 8008248:	69cd      	ldr	r5, [r1, #28]
 800824a:	2d00      	cmp	r5, #0
 800824c:	f000 8571 	beq.w	8008d32 <forward_conv2d_nl_pool+0xb26>
 8008250:	682a      	ldr	r2, [r5, #0]
 8008252:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008256:	f111 0218 	adds.w	r2, r1, #24
 800825a:	d004      	beq.n	8008266 <forward_conv2d_nl_pool+0x5a>
 800825c:	8b0a      	ldrh	r2, [r1, #24]
 800825e:	2a01      	cmp	r2, #1
 8008260:	f240 857c 	bls.w	8008d5c <forward_conv2d_nl_pool+0xb50>
 8008264:	686a      	ldr	r2, [r5, #4]
 8008266:	68a9      	ldr	r1, [r5, #8]
 8008268:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800826a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800826e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8008272:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8008276:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800827a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800827e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008282:	f8db 4008 	ldr.w	r4, [fp, #8]
 8008286:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800828a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800828e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008292:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8008296:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800829a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800829e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082a2:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80082a6:	f8de 4004 	ldr.w	r4, [lr, #4]
 80082aa:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80082ae:	f8de 400c 	ldr.w	r4, [lr, #12]
 80082b2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80082b6:	f8de 4008 	ldr.w	r4, [lr, #8]
 80082ba:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80082be:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80082c2:	6824      	ldr	r4, [r4, #0]
 80082c4:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80082c8:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80082cc:	6864      	ldr	r4, [r4, #4]
 80082ce:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80082d2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80082d6:	68a5      	ldr	r5, [r4, #8]
 80082d8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80082dc:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80082e0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80082e4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80082e8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80082ea:	6824      	ldr	r4, [r4, #0]
 80082ec:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 80082f0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80082f2:	6864      	ldr	r4, [r4, #4]
 80082f4:	643c      	str	r4, [r7, #64]	; 0x40
 80082f6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80082fa:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80082fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008300:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8008304:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008306:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800830a:	69c4      	ldr	r4, [r0, #28]
 800830c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8008310:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008312:	64bc      	str	r4, [r7, #72]	; 0x48
 8008314:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008316:	647c      	str	r4, [r7, #68]	; 0x44
 8008318:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800831a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800831e:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008322:	2a00      	cmp	r2, #0
 8008324:	f000 84f8 	beq.w	8008d18 <forward_conv2d_nl_pool+0xb0c>
 8008328:	6992      	ldr	r2, [r2, #24]
 800832a:	6892      	ldr	r2, [r2, #8]
 800832c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008330:	4680      	mov	r8, r0
 8008332:	6a00      	ldr	r0, [r0, #32]
 8008334:	2900      	cmp	r1, #0
 8008336:	f000 84e4 	beq.w	8008d02 <forward_conv2d_nl_pool+0xaf6>
 800833a:	698a      	ldr	r2, [r1, #24]
 800833c:	2a00      	cmp	r2, #0
 800833e:	f000 8533 	beq.w	8008da8 <forward_conv2d_nl_pool+0xb9c>
 8008342:	694b      	ldr	r3, [r1, #20]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800834a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800834e:	6893      	ldr	r3, [r2, #8]
 8008350:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008354:	f001 fb76 	bl	8009a44 <ai_array_get_byte_size>
 8008358:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800835c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008360:	881e      	ldrh	r6, [r3, #0]
 8008362:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8008366:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800836a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800836e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008370:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008374:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008378:	fa11 f585 	uxtah	r5, r1, r5
 800837c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008380:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008384:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8008388:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800838c:	3901      	subs	r1, #1
 800838e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8008392:	eb05 0e00 	add.w	lr, r5, r0
 8008396:	fa1f f28a 	uxth.w	r2, sl
 800839a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800839e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80083a2:	f8dc 4000 	ldr.w	r4, [ip]
 80083a6:	f8dc 1000 	ldr.w	r1, [ip]
 80083aa:	3a01      	subs	r2, #1
 80083ac:	fb00 5002 	mla	r0, r0, r2, r5
 80083b0:	fa1f f28b 	uxth.w	r2, fp
 80083b4:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80083b8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80083bc:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80083c0:	1e50      	subs	r0, r2, #1
 80083c2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80083c6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80083ca:	fa44 f101 	asr.w	r1, r4, r1
 80083ce:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80083d2:	f8dc 4000 	ldr.w	r4, [ip]
 80083d6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80083da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80083de:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80083e2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80083e6:	ebae 0202 	sub.w	r2, lr, r2
 80083ea:	fa1f fe81 	uxth.w	lr, r1
 80083ee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80083f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80083f6:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80083fa:	3c01      	subs	r4, #1
 80083fc:	fb04 1100 	mla	r1, r4, r0, r1
 8008400:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008404:	1c51      	adds	r1, r2, #1
 8008406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800840a:	487c      	ldr	r0, [pc, #496]	; (80085fc <forward_conv2d_nl_pool+0x3f0>)
 800840c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8008410:	4611      	mov	r1, r2
 8008412:	2a00      	cmp	r2, #0
 8008414:	bf08      	it	eq
 8008416:	4601      	moveq	r1, r0
 8008418:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800841c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008420:	2d04      	cmp	r5, #4
 8008422:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008426:	f000 849e 	beq.w	8008d66 <forward_conv2d_nl_pool+0xb5a>
 800842a:	2d08      	cmp	r5, #8
 800842c:	f000 849b 	beq.w	8008d66 <forward_conv2d_nl_pool+0xb5a>
 8008430:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008434:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008438:	2e03      	cmp	r6, #3
 800843a:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800843e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008442:	f240 8483 	bls.w	8008d4c <forward_conv2d_nl_pool+0xb40>
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 8489 	beq.w	8008d62 <forward_conv2d_nl_pool+0xb56>
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800845e:	6899      	ldr	r1, [r3, #8]
 8008460:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008464:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008468:	6896      	ldr	r6, [r2, #8]
 800846a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800846e:	4249      	negs	r1, r1
 8008470:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008474:	2800      	cmp	r0, #0
 8008476:	f000 82dd 	beq.w	8008a34 <forward_conv2d_nl_pool+0x828>
 800847a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800847e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008482:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008486:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800848a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8008600 <forward_conv2d_nl_pool+0x3f4>
 800848e:	fb03 f200 	mul.w	r2, r3, r0
 8008492:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008496:	008c      	lsls	r4, r1, #2
 8008498:	fb04 f000 	mul.w	r0, r4, r0
 800849c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 80084a0:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80084a4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80084a8:	fb01 fc02 	mul.w	ip, r1, r2
 80084ac:	00a2      	lsls	r2, r4, #2
 80084ae:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80084b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084b6:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80084ba:	00ab      	lsls	r3, r5, #2
 80084bc:	4694      	mov	ip, r2
 80084be:	fb0c f204 	mul.w	r2, ip, r4
 80084c2:	fb04 f303 	mul.w	r3, r4, r3
 80084c6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80084ca:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80084ce:	00a4      	lsls	r4, r4, #2
 80084d0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80084d4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 80084d8:	f04f 0c00 	mov.w	ip, #0
 80084dc:	fa0f f58b 	sxth.w	r5, fp
 80084e0:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 80084e4:	46a4      	mov	ip, r4
 80084e6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 80084ea:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 80084ee:	fa0f f58a 	sxth.w	r5, sl
 80084f2:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 80084f6:	fb0c fc04 	mul.w	ip, ip, r4
 80084fa:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80084fe:	fb06 fc03 	mul.w	ip, r6, r3
 8008502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008506:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800850a:	4240      	negs	r0, r0
 800850c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008510:	469c      	mov	ip, r3
 8008512:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8008516:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800851a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800851e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8008522:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8008526:	fb00 f303 	mul.w	r3, r0, r3
 800852a:	460d      	mov	r5, r1
 800852c:	fb0c fc04 	mul.w	ip, ip, r4
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
 8008532:	fb04 f305 	mul.w	r3, r4, r5
 8008536:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800853a:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800853e:	623b      	str	r3, [r7, #32]
 8008540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008544:	46a6      	mov	lr, r4
 8008546:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800854a:	fb05 f503 	mul.w	r5, r5, r3
 800854e:	667d      	str	r5, [r7, #100]	; 0x64
 8008550:	4625      	mov	r5, r4
 8008552:	fb05 f503 	mul.w	r5, r5, r3
 8008556:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800855a:	66bd      	str	r5, [r7, #104]	; 0x68
 800855c:	fb00 f101 	mul.w	r1, r0, r1
 8008560:	fb03 f306 	mul.w	r3, r3, r6
 8008564:	657b      	str	r3, [r7, #84]	; 0x54
 8008566:	008b      	lsls	r3, r1, #2
 8008568:	633b      	str	r3, [r7, #48]	; 0x30
 800856a:	0093      	lsls	r3, r2, #2
 800856c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856e:	0083      	lsls	r3, r0, #2
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008576:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800857a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800857e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008582:	2400      	movs	r4, #0
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
 8008586:	4603      	mov	r3, r0
 8008588:	fb03 f301 	mul.w	r3, r3, r1
 800858c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8008590:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008594:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008598:	00d1      	lsls	r1, r2, #3
 800859a:	0113      	lsls	r3, r2, #4
 800859c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80085a0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80085a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80085a8:	fb00 f004 	mul.w	r0, r0, r4
 80085ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80085b0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80085b2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80085b6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80085ba:	469a      	mov	sl, r3
 80085bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f340 81d0 	ble.w	8008966 <forward_conv2d_nl_pool+0x75a>
 80085c6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80085ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80085ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80085d2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80085d6:	2900      	cmp	r1, #0
 80085d8:	441a      	add	r2, r3
 80085da:	bfb4      	ite	lt
 80085dc:	2100      	movlt	r1, #0
 80085de:	2300      	movge	r3, #0
 80085e0:	4282      	cmp	r2, r0
 80085e2:	bf28      	it	cs
 80085e4:	4602      	movcs	r2, r0
 80085e6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80085ea:	2801      	cmp	r0, #1
 80085ec:	f000 83f6 	beq.w	8008ddc <forward_conv2d_nl_pool+0xbd0>
 80085f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80085f4:	4281      	cmp	r1, r0
 80085f6:	f000 822a 	beq.w	8008a4e <forward_conv2d_nl_pool+0x842>
 80085fa:	e003      	b.n	8008604 <forward_conv2d_nl_pool+0x3f8>
 80085fc:	08008169 	.word	0x08008169
 8008600:	00000000 	.word	0x00000000
 8008604:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008608:	2900      	cmp	r1, #0
 800860a:	f000 819f 	beq.w	800894c <forward_conv2d_nl_pool+0x740>
 800860e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8008612:	fb93 f1f0 	sdiv	r1, r3, r0
 8008616:	fb00 3111 	mls	r1, r0, r1, r3
 800861a:	1a41      	subs	r1, r0, r1
 800861c:	1ad2      	subs	r2, r2, r3
 800861e:	fb91 f5f0 	sdiv	r5, r1, r0
 8008622:	fb00 1515 	mls	r5, r0, r5, r1
 8008626:	1b52      	subs	r2, r2, r5
 8008628:	4601      	mov	r1, r0
 800862a:	4402      	add	r2, r0
 800862c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008630:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8008634:	4604      	mov	r4, r0
 8008636:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800863a:	fbb4 f4f0 	udiv	r4, r4, r0
 800863e:	6a38      	ldr	r0, [r7, #32]
 8008640:	3a01      	subs	r2, #1
 8008642:	fb92 f8f1 	sdiv	r8, r2, r1
 8008646:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800864a:	eba0 0c04 	sub.w	ip, r0, r4
 800864e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008652:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008656:	4614      	mov	r4, r2
 8008658:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800865c:	fbb4 f2f2 	udiv	r2, r4, r2
 8008660:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8008664:	663a      	str	r2, [r7, #96]	; 0x60
 8008666:	441d      	add	r5, r3
 8008668:	fb0e f000 	mul.w	r0, lr, r0
 800866c:	440b      	add	r3, r1
 800866e:	eba6 0608 	sub.w	r6, r6, r8
 8008672:	fb04 f505 	mul.w	r5, r4, r5
 8008676:	3b01      	subs	r3, #1
 8008678:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800867c:	fb93 f3f4 	sdiv	r3, r3, r4
 8008680:	fb00 f406 	mul.w	r4, r0, r6
 8008684:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008688:	677d      	str	r5, [r7, #116]	; 0x74
 800868a:	0091      	lsls	r1, r2, #2
 800868c:	fb00 f003 	mul.w	r0, r0, r3
 8008690:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008694:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800869a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800869e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 80086a2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 80086a6:	1ac3      	subs	r3, r0, r3
 80086a8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80086ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086b0:	008b      	lsls	r3, r1, #2
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086b4:	00d3      	lsls	r3, r2, #3
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086c8:	2300      	movs	r3, #0
 80086ca:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80086ce:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80086d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80086d4:	46c2      	mov	sl, r8
 80086d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80086de:	eb03 0c02 	add.w	ip, r3, r2
 80086e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f2c0 811c 	blt.w	8008924 <forward_conv2d_nl_pool+0x718>
 80086ec:	2000      	movs	r0, #0
 80086ee:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80086f0:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 80086f4:	4605      	mov	r5, r0
 80086f6:	4606      	mov	r6, r0
 80086f8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008700:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8008704:	4413      	add	r3, r2
 8008706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800870a:	440a      	add	r2, r1
 800870c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008710:	428b      	cmp	r3, r1
 8008712:	bf94      	ite	ls
 8008714:	ebc6 0303 	rsbls	r3, r6, r3
 8008718:	ebc6 0301 	rsbhi	r3, r6, r1
 800871c:	4415      	add	r5, r2
 800871e:	1a1b      	subs	r3, r3, r0
 8008720:	00a4      	lsls	r4, r4, #2
 8008722:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8008726:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800872a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800872e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8008730:	4602      	mov	r2, r0
 8008732:	2800      	cmp	r0, #0
 8008734:	bf08      	it	eq
 8008736:	4662      	moveq	r2, ip
 8008738:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800873c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008740:	fb91 f1f0 	sdiv	r1, r1, r0
 8008744:	4429      	add	r1, r5
 8008746:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800874a:	fb0e 5501 	mla	r5, lr, r1, r5
 800874e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008752:	4403      	add	r3, r0
 8008754:	fb01 6104 	mla	r1, r1, r4, r6
 8008758:	3b01      	subs	r3, #1
 800875a:	fb93 f6f0 	sdiv	r6, r3, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008764:	fb06 3110 	mls	r1, r6, r0, r3
 8008768:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800876c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008770:	4562      	cmp	r2, ip
 8008772:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008776:	bf08      	it	eq
 8008778:	eeb0 6a48 	vmoveq.f32	s12, s16
 800877c:	1b9b      	subs	r3, r3, r6
 800877e:	2800      	cmp	r0, #0
 8008780:	d070      	beq.n	8008864 <forward_conv2d_nl_pool+0x658>
 8008782:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8008786:	fb0e f803 	mul.w	r8, lr, r3
 800878a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800878c:	fb00 fb01 	mul.w	fp, r0, r1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d067      	beq.n	8008864 <forward_conv2d_nl_pool+0x658>
 8008794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008798:	18d3      	adds	r3, r2, r3
 800879a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800879e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087a6:	2300      	movs	r3, #0
 80087a8:	673b      	str	r3, [r7, #112]	; 0x70
 80087aa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	4413      	add	r3, r2
 80087b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	4413      	add	r3, r2
 80087bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80087c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80087c4:	ecf3 7a01 	vldmia	r3!, {s15}
 80087c8:	f1ba 0f00 	cmp.w	sl, #0
 80087cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80087d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087d4:	f340 80a4 	ble.w	8008920 <forward_conv2d_nl_pool+0x714>
 80087d8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80087dc:	f04f 0c00 	mov.w	ip, #0
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	dd19      	ble.n	8008818 <forward_conv2d_nl_pool+0x60c>
 80087e4:	2100      	movs	r1, #0
 80087e6:	eb00 040e 	add.w	r4, r0, lr
 80087ea:	4284      	cmp	r4, r0
 80087ec:	d910      	bls.n	8008810 <forward_conv2d_nl_pool+0x604>
 80087ee:	4603      	mov	r3, r0
 80087f0:	462a      	mov	r2, r5
 80087f2:	ecb3 7a01 	vldmia	r3!, {s14}
 80087f6:	ecf2 6a01 	vldmia	r2!, {s13}
 80087fa:	429c      	cmp	r4, r3
 80087fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008800:	d8f7      	bhi.n	80087f2 <forward_conv2d_nl_pool+0x5e6>
 8008802:	43c3      	mvns	r3, r0
 8008804:	441c      	add	r4, r3
 8008806:	f024 0403 	bic.w	r4, r4, #3
 800880a:	3404      	adds	r4, #4
 800880c:	4425      	add	r5, r4
 800880e:	4420      	add	r0, r4
 8008810:	3101      	adds	r1, #1
 8008812:	428e      	cmp	r6, r1
 8008814:	4448      	add	r0, r9
 8008816:	d1e6      	bne.n	80087e6 <forward_conv2d_nl_pool+0x5da>
 8008818:	f10c 0c01 	add.w	ip, ip, #1
 800881c:	45e2      	cmp	sl, ip
 800881e:	4458      	add	r0, fp
 8008820:	4445      	add	r5, r8
 8008822:	d1dd      	bne.n	80087e0 <forward_conv2d_nl_pool+0x5d4>
 8008824:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800882c:	441d      	add	r5, r3
 800882e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008832:	ece3 7a01 	vstmia	r3!, {s15}
 8008836:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800883a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883e:	4293      	cmp	r3, r2
 8008840:	d1be      	bne.n	80087c0 <forward_conv2d_nl_pool+0x5b4>
 8008842:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8008846:	69f9      	ldr	r1, [r7, #28]
 8008848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800884a:	4472      	add	r2, lr
 800884c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008852:	1a52      	subs	r2, r2, r1
 8008854:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008858:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800885c:	3301      	adds	r3, #1
 800885e:	429a      	cmp	r2, r3
 8008860:	673b      	str	r3, [r7, #112]	; 0x70
 8008862:	d1a2      	bne.n	80087aa <forward_conv2d_nl_pool+0x59e>
 8008864:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008868:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800886c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800886e:	4608      	mov	r0, r1
 8008870:	4410      	add	r0, r2
 8008872:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008876:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800887a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800887e:	4401      	add	r1, r0
 8008880:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8008884:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008888:	1a8a      	subs	r2, r1, r2
 800888a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800888e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008892:	3301      	adds	r3, #1
 8008894:	429a      	cmp	r2, r3
 8008896:	67bb      	str	r3, [r7, #120]	; 0x78
 8008898:	f47f af1d 	bne.w	80086d6 <forward_conv2d_nl_pool+0x4ca>
 800889c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088a4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	f000 8210 	beq.w	8008cd0 <forward_conv2d_nl_pool+0xac4>
 80088b0:	2400      	movs	r4, #0
 80088b2:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 80088b6:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80088ba:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 80088be:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 80088c2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80088c6:	609e      	str	r6, [r3, #8]
 80088c8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80088cc:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 80088d0:	462b      	mov	r3, r5
 80088d2:	4641      	mov	r1, r8
 80088d4:	4640      	mov	r0, r8
 80088d6:	47a0      	blx	r4
 80088d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80088dc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80088e0:	6859      	ldr	r1, [r3, #4]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80088e8:	4405      	add	r5, r0
 80088ea:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80088ee:	0089      	lsls	r1, r1, #2
 80088f0:	4406      	add	r6, r0
 80088f2:	eba5 0c09 	sub.w	ip, r5, r9
 80088f6:	1850      	adds	r0, r2, r1
 80088f8:	45a4      	cmp	ip, r4
 80088fa:	bfa8      	it	ge
 80088fc:	464d      	movge	r5, r9
 80088fe:	4286      	cmp	r6, r0
 8008900:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008904:	bf28      	it	cs
 8008906:	1a76      	subcs	r6, r6, r1
 8008908:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800890c:	3001      	adds	r0, #1
 800890e:	4281      	cmp	r1, r0
 8008910:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8008914:	d1d7      	bne.n	80088c6 <forward_conv2d_nl_pool+0x6ba>
 8008916:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800891a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800891e:	e019      	b.n	8008954 <forward_conv2d_nl_pool+0x748>
 8008920:	461a      	mov	r2, r3
 8008922:	e781      	b.n	8008828 <forward_conv2d_nl_pool+0x61c>
 8008924:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008928:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800892c:	fb90 f3f2 	sdiv	r3, r0, r2
 8008930:	fb02 0313 	mls	r3, r2, r3, r0
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	4605      	mov	r5, r0
 8008938:	fb93 f0f2 	sdiv	r0, r3, r2
 800893c:	fb02 3010 	mls	r0, r2, r0, r3
 8008940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008942:	462e      	mov	r6, r5
 8008944:	18c4      	adds	r4, r0, r3
 8008946:	eb02 0805 	add.w	r8, r2, r5
 800894a:	e6d5      	b.n	80086f8 <forward_conv2d_nl_pool+0x4ec>
 800894c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	609a      	str	r2, [r3, #8]
 8008956:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800895a:	3301      	adds	r3, #1
 800895c:	b21b      	sxth	r3, r3
 800895e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008966:	3b01      	subs	r3, #1
 8008968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800896c:	f100 83bf 	bmi.w	80090ee <forward_conv2d_nl_pool+0xee2>
 8008970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008974:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8008978:	42a3      	cmp	r3, r4
 800897a:	f200 839d 	bhi.w	80090b8 <forward_conv2d_nl_pool+0xeac>
 800897e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008982:	b29b      	uxth	r3, r3
 8008984:	6990      	ldr	r0, [r2, #24]
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800898c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8008990:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	fa1f f188 	uxth.w	r1, r8
 800899a:	b29a      	uxth	r2, r3
 800899c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	9105      	str	r1, [sp, #20]
 80089a4:	2601      	movs	r6, #1
 80089a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089aa:	9607      	str	r6, [sp, #28]
 80089ac:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 80089b0:	9506      	str	r5, [sp, #24]
 80089b2:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	1a64      	subs	r4, r4, r1
 80089ba:	b2b1      	uxth	r1, r6
 80089bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80089c6:	b224      	sxth	r4, r4
 80089c8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80089cc:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 80089d0:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80089d4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80089d6:	47a0      	blx	r4
 80089d8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80089dc:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 80089e0:	688a      	ldr	r2, [r1, #8]
 80089e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80089e4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80089e8:	fa0f f388 	sxth.w	r3, r8
 80089ec:	1af3      	subs	r3, r6, r3
 80089ee:	4422      	add	r2, r4
 80089f0:	462e      	mov	r6, r5
 80089f2:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80089f6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80089fa:	608a      	str	r2, [r1, #8]
 80089fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a00:	4426      	add	r6, r4
 8008a02:	b21b      	sxth	r3, r3
 8008a04:	1b2c      	subs	r4, r5, r4
 8008a06:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8008a0a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8008a0c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a18:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	442c      	add	r4, r5
 8008a20:	4283      	cmp	r3, r0
 8008a22:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8008a26:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8008a2a:	f63f adc7 	bhi.w	80085bc <forward_conv2d_nl_pool+0x3b0>
 8008a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	609a      	str	r2, [r3, #8]
 8008a38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a3c:	68d3      	ldr	r3, [r2, #12]
 8008a3e:	6093      	str	r3, [r2, #8]
 8008a40:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008a44:	46bd      	mov	sp, r7
 8008a46:	ecbd 8b10 	vpop	{d8-d15}
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a50:	2901      	cmp	r1, #1
 8008a52:	f47f add7 	bne.w	8008604 <forward_conv2d_nl_pool+0x3f8>
 8008a56:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008a5a:	2900      	cmp	r1, #0
 8008a5c:	f43f af76 	beq.w	800894c <forward_conv2d_nl_pool+0x740>
 8008a60:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008a64:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8008a68:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008a6c:	1ad2      	subs	r2, r2, r3
 8008a6e:	1a8c      	subs	r4, r1, r2
 8008a70:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8008a74:	00b2      	lsls	r2, r6, #2
 8008a76:	fb02 f204 	mul.w	r2, r2, r4
 8008a7a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8008a7e:	fbb1 f1f0 	udiv	r1, r1, r0
 8008a82:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8008a86:	460d      	mov	r5, r1
 8008a88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008a8c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8008a90:	0082      	lsls	r2, r0, #2
 8008a92:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a94:	00ca      	lsls	r2, r1, #3
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	00aa      	lsls	r2, r5, #2
 8008a9a:	60ba      	str	r2, [r7, #8]
 8008a9c:	fb03 f206 	mul.w	r2, r3, r6
 8008aa0:	67ba      	str	r2, [r7, #120]	; 0x78
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	fb02 f303 	mul.w	r3, r2, r3
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ab6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008abe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f2c0 8112 	blt.w	8008cf6 <forward_conv2d_nl_pool+0xaea>
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008adc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008ae0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8008ae4:	4420      	add	r0, r4
 8008ae6:	4408      	add	r0, r1
 8008ae8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008aec:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8008af0:	190c      	adds	r4, r1, r4
 8008af2:	42ac      	cmp	r4, r5
 8008af4:	bf28      	it	cs
 8008af6:	462c      	movcs	r4, r5
 8008af8:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8008afc:	0080      	lsls	r0, r0, #2
 8008afe:	1aa4      	subs	r4, r4, r2
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	f000 80e9 	beq.w	8008cd8 <forward_conv2d_nl_pool+0xacc>
 8008b06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b0a:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8008b0e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008b12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008b16:	42b5      	cmp	r5, r6
 8008b18:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008b1c:	eba3 0204 	sub.w	r2, r3, r4
 8008b20:	eba1 0104 	sub.w	r1, r1, r4
 8008b24:	bf08      	it	eq
 8008b26:	eef0 3a48 	vmoveq.f32	s7, s16
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	697d      	ldr	r5, [r7, #20]
 8008b2e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8008b32:	4428      	add	r0, r5
 8008b34:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8008b38:	fb05 6e00 	mla	lr, r5, r0, r6
 8008b3c:	eb0e 000b 	add.w	r0, lr, fp
 8008b40:	4586      	cmp	lr, r0
 8008b42:	61f8      	str	r0, [r7, #28]
 8008b44:	f080 80a5 	bcs.w	8008c92 <forward_conv2d_nl_pool+0xa86>
 8008b48:	0092      	lsls	r2, r2, #2
 8008b4a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8008b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b50:	fb01 f10b 	mul.w	r1, r1, fp
 8008b54:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008b58:	f024 0803 	bic.w	r8, r4, #3
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	f000 8098 	beq.w	8008c92 <forward_conv2d_nl_pool+0xa86>
 8008b62:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8008b66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b68:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008b6c:	0892      	lsrs	r2, r2, #2
 8008b6e:	3201      	adds	r2, #1
 8008b70:	4401      	add	r1, r0
 8008b72:	fb02 f00a 	mul.w	r0, r2, sl
 8008b76:	6638      	str	r0, [r7, #96]	; 0x60
 8008b78:	0110      	lsls	r0, r2, #4
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008b7e:	1aca      	subs	r2, r1, r3
 8008b80:	613a      	str	r2, [r7, #16]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	6738      	str	r0, [r7, #112]	; 0x70
 8008b86:	4413      	add	r3, r2
 8008b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b8c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b92:	4413      	add	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	677b      	str	r3, [r7, #116]	; 0x74
 8008ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ba4:	ecf3 6a01 	vldmia	r3!, {s13}
 8008ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008bb6:	dd57      	ble.n	8008c68 <forward_conv2d_nl_pool+0xa5c>
 8008bb8:	4676      	mov	r6, lr
 8008bba:	f04f 0c00 	mov.w	ip, #0
 8008bbe:	f1b8 0f00 	cmp.w	r8, #0
 8008bc2:	f340 8087 	ble.w	8008cd4 <forward_conv2d_nl_pool+0xac8>
 8008bc6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008bca:	f109 0310 	add.w	r3, r9, #16
 8008bce:	18b1      	adds	r1, r6, r2
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	eb02 050b 	add.w	r5, r2, fp
 8008bd8:	ed95 7a00 	vldr	s14, [r5]
 8008bdc:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008be0:	ed92 4a00 	vldr	s8, [r2]
 8008be4:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008be8:	ed91 5a00 	vldr	s10, [r1]
 8008bec:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008bf0:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf8:	eb01 050b 	add.w	r5, r1, fp
 8008bfc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008c00:	3004      	adds	r0, #4
 8008c02:	4540      	cmp	r0, r8
 8008c04:	ed95 7a00 	vldr	s14, [r5]
 8008c08:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008c0c:	4452      	add	r2, sl
 8008c0e:	4451      	add	r1, sl
 8008c10:	f103 0310 	add.w	r3, r3, #16
 8008c14:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008c18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c1c:	dbda      	blt.n	8008bd4 <forward_conv2d_nl_pool+0x9c8>
 8008c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008c22:	441e      	add	r6, r3
 8008c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c26:	4499      	add	r9, r3
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	da11      	bge.n	8008c50 <forward_conv2d_nl_pool+0xa44>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	4633      	mov	r3, r6
 8008c30:	4649      	mov	r1, r9
 8008c32:	edd3 7a00 	vldr	s15, [r3]
 8008c36:	ecb1 7a01 	vldmia	r1!, {s14}
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	42a2      	cmp	r2, r4
 8008c3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c42:	445b      	add	r3, fp
 8008c44:	d1f5      	bne.n	8008c32 <forward_conv2d_nl_pool+0xa26>
 8008c46:	1a20      	subs	r0, r4, r0
 8008c48:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008c4c:	fb00 660b 	mla	r6, r0, fp, r6
 8008c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c54:	441e      	add	r6, r3
 8008c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c5a:	4499      	add	r9, r3
 8008c5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c60:	f10c 0c01 	add.w	ip, ip, #1
 8008c64:	4563      	cmp	r3, ip
 8008c66:	d1aa      	bne.n	8008bbe <forward_conv2d_nl_pool+0x9b2>
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	4499      	add	r9, r3
 8008c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c6e:	ece3 6a01 	vstmia	r3!, {s13}
 8008c72:	677b      	str	r3, [r7, #116]	; 0x74
 8008c74:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d191      	bne.n	8008ba0 <forward_conv2d_nl_pool+0x994>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f10e 0e04 	add.w	lr, lr, #4
 8008c8c:	459e      	cmp	lr, r3
 8008c8e:	f4ff af7d 	bcc.w	8008b8c <forward_conv2d_nl_pool+0x980>
 8008c92:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008c96:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008ca4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008ca8:	4608      	mov	r0, r1
 8008caa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008cae:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008cb2:	4410      	add	r0, r2
 8008cb4:	1a8a      	subs	r2, r1, r2
 8008cb6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008cba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8008cbe:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cca:	f47f aefd 	bne.w	8008ac8 <forward_conv2d_nl_pool+0x8bc>
 8008cce:	e5e7      	b.n	80088a0 <forward_conv2d_nl_pool+0x694>
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	e63f      	b.n	8008954 <forward_conv2d_nl_pool+0x748>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	e7a7      	b.n	8008c28 <forward_conv2d_nl_pool+0xa1c>
 8008cd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008cdc:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008ce0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ce4:	1b19      	subs	r1, r3, r4
 8008ce6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008cea:	eef0 3a48 	vmov.f32	s7, s16
 8008cee:	1b1a      	subs	r2, r3, r4
 8008cf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008cf4:	e71a      	b.n	8008b2c <forward_conv2d_nl_pool+0x920>
 8008cf6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	440b      	add	r3, r1
 8008d00:	e6ea      	b.n	8008ad8 <forward_conv2d_nl_pool+0x8cc>
 8008d02:	b168      	cbz	r0, 8008d20 <forward_conv2d_nl_pool+0xb14>
 8008d04:	6882      	ldr	r2, [r0, #8]
 8008d06:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008d10:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008d14:	f7ff bb29 	b.w	800836a <forward_conv2d_nl_pool+0x15e>
 8008d18:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008d1c:	f7ff bb08 	b.w	8008330 <forward_conv2d_nl_pool+0x124>
 8008d20:	2201      	movs	r2, #1
 8008d22:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008d26:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008d2a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008d2e:	f7ff bb1c 	b.w	800836a <forward_conv2d_nl_pool+0x15e>
 8008d32:	3118      	adds	r1, #24
 8008d34:	d008      	beq.n	8008d48 <forward_conv2d_nl_pool+0xb3c>
 8008d36:	462a      	mov	r2, r5
 8008d38:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7ff ba93 	b.w	8008268 <forward_conv2d_nl_pool+0x5c>
 8008d42:	4691      	mov	r9, r2
 8008d44:	f7ff ba7d 	b.w	8008242 <forward_conv2d_nl_pool+0x36>
 8008d48:	68cb      	ldr	r3, [r1, #12]
 8008d4a:	deff      	udf	#255	; 0xff
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	deff      	udf	#255	; 0xff
 8008d52:	4694      	mov	ip, r2
 8008d54:	f7ff ba6c 	b.w	8008230 <forward_conv2d_nl_pool+0x24>
 8008d58:	6873      	ldr	r3, [r6, #4]
 8008d5a:	deff      	udf	#255	; 0xff
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f7ff ba82 	b.w	8008266 <forward_conv2d_nl_pool+0x5a>
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	deff      	udf	#255	; 0xff
 8008d66:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	f43f ab60 	beq.w	8008430 <forward_conv2d_nl_pool+0x224>
 8008d70:	2e03      	cmp	r6, #3
 8008d72:	d9eb      	bls.n	8008d4c <forward_conv2d_nl_pool+0xb40>
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	b323      	cbz	r3, 8008dc4 <forward_conv2d_nl_pool+0xbb8>
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	b313      	cbz	r3, 8008dc4 <forward_conv2d_nl_pool+0xbb8>
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008d84:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008d8e:	9000      	str	r0, [sp, #0]
 8008d90:	4673      	mov	r3, lr
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff f9ea 	bl	800816c <ai_dict_decompress_f32>
 8008d98:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008d9c:	b17c      	cbz	r4, 8008dbe <forward_conv2d_nl_pool+0xbb2>
 8008d9e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008da2:	881e      	ldrh	r6, [r3, #0]
 8008da4:	f7ff bb44 	b.w	8008430 <forward_conv2d_nl_pool+0x224>
 8008da8:	b178      	cbz	r0, 8008dca <forward_conv2d_nl_pool+0xbbe>
 8008daa:	6881      	ldr	r1, [r0, #8]
 8008dac:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008db0:	2201      	movs	r2, #1
 8008db2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008db6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008dba:	f7ff bad6 	b.w	800836a <forward_conv2d_nl_pool+0x15e>
 8008dbe:	881e      	ldrh	r6, [r3, #0]
 8008dc0:	f7ff bb36 	b.w	8008430 <forward_conv2d_nl_pool+0x224>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	deff      	udf	#255	; 0xff
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8008dd0:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008dd4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008dd8:	f7ff bac7 	b.w	800836a <forward_conv2d_nl_pool+0x15e>
 8008ddc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8008dde:	2801      	cmp	r0, #1
 8008de0:	f47f ac10 	bne.w	8008604 <forward_conv2d_nl_pool+0x3f8>
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8008dec:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df2:	fb00 4101 	mla	r1, r0, r1, r4
 8008df6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008dfa:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8008dfe:	f080 81c4 	bcs.w	800918a <forward_conv2d_nl_pool+0xf7e>
 8008e02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	f43f ad4a 	beq.w	80088a0 <forward_conv2d_nl_pool+0x694>
 8008e0c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008e10:	fb02 f303 	mul.w	r3, r2, r3
 8008e14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e16:	677b      	str	r3, [r7, #116]	; 0x74
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e1c:	188b      	adds	r3, r1, r2
 8008e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e30:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8008e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8133 	beq.w	80090b2 <forward_conv2d_nl_pool+0xea6>
 8008e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e50:	ed93 6a00 	vldr	s12, [r3]
 8008e54:	3304      	adds	r3, #4
 8008e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8101 	beq.w	8009066 <forward_conv2d_nl_pool+0xe5a>
 8008e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008e6c:	eb03 0802 	add.w	r8, r3, r2
 8008e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e8a:	f04f 0b00 	mov.w	fp, #0
 8008e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f2c0 8104 	blt.w	80090a0 <forward_conv2d_nl_pool+0xe94>
 8008e98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008e9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008ea4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008ea8:	eb02 0c04 	add.w	ip, r2, r4
 8008eac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008eb0:	4540      	cmp	r0, r8
 8008eb2:	bf94      	ite	ls
 8008eb4:	ebc3 0300 	rsbls	r3, r3, r0
 8008eb8:	ebc3 0308 	rsbhi	r3, r3, r8
 8008ebc:	eba2 0903 	sub.w	r9, r2, r3
 8008ec0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008ec4:	1ac4      	subs	r4, r0, r3
 8008ec6:	fb03 f302 	mul.w	r3, r3, r2
 8008eca:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	f340 80e3 	ble.w	800909a <forward_conv2d_nl_pool+0xe8e>
 8008ed4:	f023 050f 	bic.w	r5, r3, #15
 8008ed8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8008edc:	1e68      	subs	r0, r5, #1
 8008ede:	0900      	lsrs	r0, r0, #4
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	fb06 f204 	mul.w	r2, r6, r4
 8008ee6:	673a      	str	r2, [r7, #112]	; 0x70
 8008ee8:	0102      	lsls	r2, r0, #4
 8008eea:	65ba      	str	r2, [r7, #88]	; 0x58
 8008eec:	fb06 f909 	mul.w	r9, r6, r9
 8008ef0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008ef4:	eef0 6a46 	vmov.f32	s13, s12
 8008ef8:	f04f 0e00 	mov.w	lr, #0
 8008efc:	4662      	mov	r2, ip
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	f340 80c9 	ble.w	8009096 <forward_conv2d_nl_pool+0xe8a>
 8008f04:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008f08:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8008f12:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008f16:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8008f1a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8008f1e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8008f22:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8008f26:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008f2a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008f2e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8008f32:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008f36:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008f3a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8008f3e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8008f42:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8008f46:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8008f4a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8008f4e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8008f52:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8008f56:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8008f5a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8008f5e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008f62:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008f66:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008f6a:	ed50 3a04 	vldr	s7, [r0, #-16]
 8008f6e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8008f72:	ed50 4a03 	vldr	s9, [r0, #-12]
 8008f76:	ed14 5a03 	vldr	s10, [r4, #-12]
 8008f7a:	ed50 5a02 	vldr	s11, [r0, #-8]
 8008f7e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008f82:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008f86:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8008f8a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008f8e:	3610      	adds	r6, #16
 8008f90:	42ae      	cmp	r6, r5
 8008f92:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008f96:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008f9a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008f9e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008fa2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008fa6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008faa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008fae:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008fb2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008fb6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008fba:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008fbe:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008fc2:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008fc6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008fca:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008fce:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008fd2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008fd6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008fda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008fde:	db96      	blt.n	8008f0e <forward_conv2d_nl_pool+0xd02>
 8008fe0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008fe2:	4451      	add	r1, sl
 8008fe4:	4452      	add	r2, sl
 8008fe6:	4283      	cmp	r3, r0
 8008fe8:	dd0f      	ble.n	800900a <forward_conv2d_nl_pool+0xdfe>
 8008fea:	4604      	mov	r4, r0
 8008fec:	468c      	mov	ip, r1
 8008fee:	4616      	mov	r6, r2
 8008ff0:	ecb6 7a01 	vldmia	r6!, {s14}
 8008ff4:	ecfc 7a01 	vldmia	ip!, {s15}
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	42a3      	cmp	r3, r4
 8008ffc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009000:	d1f6      	bne.n	8008ff0 <forward_conv2d_nl_pool+0xde4>
 8009002:	1a18      	subs	r0, r3, r0
 8009004:	0080      	lsls	r0, r0, #2
 8009006:	4402      	add	r2, r0
 8009008:	4401      	add	r1, r0
 800900a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800900c:	4402      	add	r2, r0
 800900e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009012:	f10e 0e01 	add.w	lr, lr, #1
 8009016:	4570      	cmp	r0, lr
 8009018:	4449      	add	r1, r9
 800901a:	f47f af70 	bne.w	8008efe <forward_conv2d_nl_pool+0xcf2>
 800901e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009024:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009028:	edc3 6a00 	vstr	s13, [r3]
 800902c:	4608      	mov	r0, r1
 800902e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009032:	440b      	add	r3, r1
 8009034:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009038:	67bb      	str	r3, [r7, #120]	; 0x78
 800903a:	4410      	add	r0, r2
 800903c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800903e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009042:	4608      	mov	r0, r1
 8009044:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009048:	4418      	add	r0, r3
 800904a:	1acb      	subs	r3, r1, r3
 800904c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009050:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009054:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8009058:	f10b 0b01 	add.w	fp, fp, #1
 800905c:	455b      	cmp	r3, fp
 800905e:	eba8 0802 	sub.w	r8, r8, r2
 8009062:	f47f af14 	bne.w	8008e8e <forward_conv2d_nl_pool+0xc82>
 8009066:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800906a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800906c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009070:	440a      	add	r2, r1
 8009072:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009076:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800907a:	3204      	adds	r2, #4
 800907c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009080:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009084:	3301      	adds	r3, #1
 8009086:	429a      	cmp	r2, r3
 8009088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800908c:	f47f aed9 	bne.w	8008e42 <forward_conv2d_nl_pool+0xc36>
 8009090:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009094:	e404      	b.n	80088a0 <forward_conv2d_nl_pool+0x694>
 8009096:	2000      	movs	r0, #0
 8009098:	e7a5      	b.n	8008fe6 <forward_conv2d_nl_pool+0xdda>
 800909a:	eef0 6a46 	vmov.f32	s13, s12
 800909e:	e7be      	b.n	800901e <forward_conv2d_nl_pool+0xe12>
 80090a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80090a8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80090ac:	eba8 0303 	sub.w	r3, r8, r3
 80090b0:	e6f6      	b.n	8008ea0 <forward_conv2d_nl_pool+0xc94>
 80090b2:	eeb0 6a48 	vmov.f32	s12, s16
 80090b6:	e6d0      	b.n	8008e5a <forward_conv2d_nl_pool+0xc4e>
 80090b8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	4611      	mov	r1, r2
 80090c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80090c6:	4419      	add	r1, r3
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80090ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80090d8:	4413      	add	r3, r2
 80090da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80090de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	f63f aa68 	bhi.w	80085bc <forward_conv2d_nl_pool+0x3b0>
 80090ec:	e49f      	b.n	8008a2e <forward_conv2d_nl_pool+0x822>
 80090ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80090fc:	68d1      	ldr	r1, [r2, #12]
 80090fe:	6853      	ldr	r3, [r2, #4]
 8009100:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009102:	fb00 4012 	mls	r0, r0, r2, r4
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4281      	cmp	r1, r0
 800910a:	bf88      	it	hi
 800910c:	18c0      	addhi	r0, r0, r3
 800910e:	4281      	cmp	r1, r0
 8009110:	eb01 0203 	add.w	r2, r1, r3
 8009114:	d216      	bcs.n	8009144 <forward_conv2d_nl_pool+0xf38>
 8009116:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800911a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800911e:	42a1      	cmp	r1, r4
 8009120:	d010      	beq.n	8009144 <forward_conv2d_nl_pool+0xf38>
 8009122:	4290      	cmp	r0, r2
 8009124:	d20e      	bcs.n	8009144 <forward_conv2d_nl_pool+0xf38>
 8009126:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800912a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800912e:	f850 3b04 	ldr.w	r3, [r0], #4
 8009132:	f841 3b04 	str.w	r3, [r1], #4
 8009136:	69a2      	ldr	r2, [r4, #24]
 8009138:	6853      	ldr	r3, [r2, #4]
 800913a:	68d2      	ldr	r2, [r2, #12]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	441a      	add	r2, r3
 8009140:	4282      	cmp	r2, r0
 8009142:	d8f4      	bhi.n	800912e <forward_conv2d_nl_pool+0xf22>
 8009144:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8009148:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800914c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8009150:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8009152:	4420      	add	r0, r4
 8009154:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8009158:	1a40      	subs	r0, r0, r1
 800915a:	4421      	add	r1, r4
 800915c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009160:	442c      	add	r4, r5
 8009162:	b209      	sxth	r1, r1
 8009164:	b200      	sxth	r0, r0
 8009166:	4294      	cmp	r4, r2
 8009168:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800916c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8009170:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009174:	4621      	mov	r1, r4
 8009176:	f4ff abfb 	bcc.w	8008970 <forward_conv2d_nl_pool+0x764>
 800917a:	425b      	negs	r3, r3
 800917c:	4419      	add	r1, r3
 800917e:	4291      	cmp	r1, r2
 8009180:	d2fc      	bcs.n	800917c <forward_conv2d_nl_pool+0xf70>
 8009182:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8009186:	f7ff bbf3 	b.w	8008970 <forward_conv2d_nl_pool+0x764>
 800918a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800918e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009192:	320a      	adds	r2, #10
 8009194:	f022 0207 	bic.w	r2, r2, #7
 8009198:	ebad 0d02 	sub.w	sp, sp, r2
 800919c:	aa0a      	add	r2, sp, #40	; 0x28
 800919e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80091a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	f000 8153 	beq.w	8009452 <forward_conv2d_nl_pool+0x1246>
 80091ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80091b0:	f8c7 b01c 	str.w	fp, [r7, #28]
 80091b4:	fb02 f303 	mul.w	r3, r2, r3
 80091b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091ba:	663b      	str	r3, [r7, #96]	; 0x60
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	65bb      	str	r3, [r7, #88]	; 0x58
 80091c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091c4:	f8c7 a014 	str.w	sl, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80091da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091ec:	b13b      	cbz	r3, 80091fe <forward_conv2d_nl_pool+0xff2>
 80091ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091f2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80091f6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80091fa:	f000 fc89 	bl	8009b10 <memcpy>
 80091fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8137 	beq.w	8009476 <forward_conv2d_nl_pool+0x126a>
 8009208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800920a:	ed93 6a00 	vldr	s12, [r3]
 800920e:	3304      	adds	r3, #4
 8009210:	67bb      	str	r3, [r7, #120]	; 0x78
 8009212:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 8101 	beq.w	800941e <forward_conv2d_nl_pool+0x1212>
 800921c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009220:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009224:	eb03 0802 	add.w	r8, r3, r2
 8009228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800922a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009238:	677b      	str	r3, [r7, #116]	; 0x74
 800923a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800923e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009242:	f04f 0b00 	mov.w	fp, #0
 8009246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924a:	2b00      	cmp	r3, #0
 800924c:	f2c0 810a 	blt.w	8009464 <forward_conv2d_nl_pool+0x1258>
 8009250:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009256:	2300      	movs	r3, #0
 8009258:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800925c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009260:	eb02 0c04 	add.w	ip, r2, r4
 8009264:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009268:	4540      	cmp	r0, r8
 800926a:	bf94      	ite	ls
 800926c:	ebc3 0300 	rsbls	r3, r3, r0
 8009270:	ebc3 0308 	rsbhi	r3, r3, r8
 8009274:	eba2 0903 	sub.w	r9, r2, r3
 8009278:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800927c:	1ac4      	subs	r4, r0, r3
 800927e:	fb03 f302 	mul.w	r3, r3, r2
 8009282:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009286:	2a00      	cmp	r2, #0
 8009288:	f340 80e9 	ble.w	800945e <forward_conv2d_nl_pool+0x1252>
 800928c:	f023 050f 	bic.w	r5, r3, #15
 8009290:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009294:	1e68      	subs	r0, r5, #1
 8009296:	0900      	lsrs	r0, r0, #4
 8009298:	3001      	adds	r0, #1
 800929a:	fb06 f204 	mul.w	r2, r6, r4
 800929e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80092a0:	0102      	lsls	r2, r0, #4
 80092a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80092a4:	fb06 f909 	mul.w	r9, r6, r9
 80092a8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80092ac:	eef0 6a46 	vmov.f32	s13, s12
 80092b0:	f04f 0e00 	mov.w	lr, #0
 80092b4:	4662      	mov	r2, ip
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	f340 80cf 	ble.w	800945a <forward_conv2d_nl_pool+0x124e>
 80092bc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80092c0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80092c4:	2600      	movs	r6, #0
 80092c6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80092ca:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80092ce:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80092d2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80092d6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80092da:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80092de:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80092e2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80092e6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80092ea:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80092ee:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80092f2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80092f6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80092fa:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80092fe:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009302:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8009306:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800930a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800930e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009312:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009316:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800931a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800931e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009322:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009326:	ed14 4a04 	vldr	s8, [r4, #-16]
 800932a:	ed54 4a03 	vldr	s9, [r4, #-12]
 800932e:	ed10 5a03 	vldr	s10, [r0, #-12]
 8009332:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009336:	ed14 7a02 	vldr	s14, [r4, #-8]
 800933a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800933e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009342:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009346:	3610      	adds	r6, #16
 8009348:	42ae      	cmp	r6, r5
 800934a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800934e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009352:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009356:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800935a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800935e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009362:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009366:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800936a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800936e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009372:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009376:	eee0 7a81 	vfma.f32	s15, s1, s2
 800937a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800937e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009382:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009386:	eee4 7a85 	vfma.f32	s15, s9, s10
 800938a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800938e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009392:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009396:	db96      	blt.n	80092c6 <forward_conv2d_nl_pool+0x10ba>
 8009398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939a:	4451      	add	r1, sl
 800939c:	4452      	add	r2, sl
 800939e:	4283      	cmp	r3, r0
 80093a0:	dd0f      	ble.n	80093c2 <forward_conv2d_nl_pool+0x11b6>
 80093a2:	4604      	mov	r4, r0
 80093a4:	468c      	mov	ip, r1
 80093a6:	4616      	mov	r6, r2
 80093a8:	ecb6 7a01 	vldmia	r6!, {s14}
 80093ac:	ecfc 7a01 	vldmia	ip!, {s15}
 80093b0:	3401      	adds	r4, #1
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80093b8:	d1f6      	bne.n	80093a8 <forward_conv2d_nl_pool+0x119c>
 80093ba:	1a18      	subs	r0, r3, r0
 80093bc:	0080      	lsls	r0, r0, #2
 80093be:	4402      	add	r2, r0
 80093c0:	4401      	add	r1, r0
 80093c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80093c4:	4402      	add	r2, r0
 80093c6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80093ca:	f10e 0e01 	add.w	lr, lr, #1
 80093ce:	4570      	cmp	r0, lr
 80093d0:	4449      	add	r1, r9
 80093d2:	f47f af70 	bne.w	80092b6 <forward_conv2d_nl_pool+0x10aa>
 80093d6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80093da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80093e0:	edc3 6a00 	vstr	s13, [r3]
 80093e4:	4608      	mov	r0, r1
 80093e6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80093ea:	440b      	add	r3, r1
 80093ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80093f0:	677b      	str	r3, [r7, #116]	; 0x74
 80093f2:	4410      	add	r0, r2
 80093f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093f6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80093fa:	4608      	mov	r0, r1
 80093fc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009400:	4418      	add	r0, r3
 8009402:	1acb      	subs	r3, r1, r3
 8009404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009408:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800940c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8009410:	f10b 0b01 	add.w	fp, fp, #1
 8009414:	455b      	cmp	r3, fp
 8009416:	eba8 0802 	sub.w	r8, r8, r2
 800941a:	f47f af14 	bne.w	8009246 <forward_conv2d_nl_pool+0x103a>
 800941e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009422:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800942a:	440a      	add	r2, r1
 800942c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009430:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009434:	3204      	adds	r2, #4
 8009436:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800943a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800943e:	3301      	adds	r3, #1
 8009440:	429a      	cmp	r2, r3
 8009442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009446:	f47f aecf 	bne.w	80091e8 <forward_conv2d_nl_pool+0xfdc>
 800944a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800944e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009452:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009456:	f7ff ba23 	b.w	80088a0 <forward_conv2d_nl_pool+0x694>
 800945a:	2000      	movs	r0, #0
 800945c:	e79f      	b.n	800939e <forward_conv2d_nl_pool+0x1192>
 800945e:	eef0 6a46 	vmov.f32	s13, s12
 8009462:	e7b8      	b.n	80093d6 <forward_conv2d_nl_pool+0x11ca>
 8009464:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009468:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800946c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009470:	eba8 0303 	sub.w	r3, r8, r3
 8009474:	e6f0      	b.n	8009258 <forward_conv2d_nl_pool+0x104c>
 8009476:	eeb0 6a48 	vmov.f32	s12, s16
 800947a:	e6ca      	b.n	8009212 <forward_conv2d_nl_pool+0x1006>

0800947c <pool_func_ap_array_f32>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	b095      	sub	sp, #84	; 0x54
 8009482:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8009486:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009488:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 800948c:	68a8      	ldr	r0, [r5, #8]
 800948e:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8009492:	9509      	str	r5, [sp, #36]	; 0x24
 8009494:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8009498:	9003      	str	r0, [sp, #12]
 800949a:	950e      	str	r5, [sp, #56]	; 0x38
 800949c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80094a0:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80094a4:	9004      	str	r0, [sp, #16]
 80094a6:	9507      	str	r5, [sp, #28]
 80094a8:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 80094ac:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 80094b0:	900a      	str	r0, [sp, #40]	; 0x28
 80094b2:	950c      	str	r5, [sp, #48]	; 0x30
 80094b4:	f8bd 0080 	ldrh.w	r0, [sp, #128]	; 0x80
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	468a      	mov	sl, r1
 80094bc:	4699      	mov	r9, r3
 80094be:	b95c      	cbnz	r4, 80094d8 <pool_func_ap_array_f32+0x5c>
 80094c0:	b950      	cbnz	r0, 80094d8 <pool_func_ap_array_f32+0x5c>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	1a5a      	subs	r2, r3, r1
 80094c6:	9b07      	ldr	r3, [sp, #28]
 80094c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ca:	3a01      	subs	r2, #1
 80094cc:	3b01      	subs	r3, #1
 80094ce:	fb13 2301 	smlabb	r3, r3, r1, r2
 80094d2:	041a      	lsls	r2, r3, #16
 80094d4:	f100 80a6 	bmi.w	8009624 <pool_func_ap_array_f32+0x1a8>
 80094d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 8093 	beq.w	8009606 <pool_func_ap_array_f32+0x18a>
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 808f 	beq.w	8009606 <pool_func_ap_array_f32+0x18a>
 80094e8:	f1b9 0f00 	cmp.w	r9, #0
 80094ec:	f000 808b 	beq.w	8009606 <pool_func_ap_array_f32+0x18a>
 80094f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f2:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 8009770 <pool_func_ap_array_f32+0x2f4>
 80094f6:	1b1c      	subs	r4, r3, r4
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	1a1b      	subs	r3, r3, r0
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4240      	negs	r0, r0
 8009500:	2200      	movs	r2, #0
 8009502:	b2a1      	uxth	r1, r4
 8009504:	9310      	str	r3, [sp, #64]	; 0x40
 8009506:	b283      	uxth	r3, r0
 8009508:	920f      	str	r2, [sp, #60]	; 0x3c
 800950a:	910d      	str	r1, [sp, #52]	; 0x34
 800950c:	9311      	str	r3, [sp, #68]	; 0x44
 800950e:	9c07      	ldr	r4, [sp, #28]
 8009510:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009514:	fb02 f204 	mul.w	r2, r2, r4
 8009518:	1acb      	subs	r3, r1, r3
 800951a:	920b      	str	r2, [sp, #44]	; 0x2c
 800951c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800951e:	9206      	str	r2, [sp, #24]
 8009520:	2000      	movs	r0, #0
 8009522:	b21b      	sxth	r3, r3
 8009524:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	9008      	str	r0, [sp, #32]
 800952a:	4603      	mov	r3, r0
 800952c:	fa0f f881 	sxth.w	r8, r1
 8009530:	9205      	str	r2, [sp, #20]
 8009532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009534:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 8009538:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800953c:	4413      	add	r3, r2
 800953e:	f04f 0e00 	mov.w	lr, #0
 8009542:	fb09 f303 	mul.w	r3, r9, r3
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800954c:	4675      	mov	r5, lr
 800954e:	9904      	ldr	r1, [sp, #16]
 8009550:	4588      	cmp	r8, r1
 8009552:	dd64      	ble.n	800961e <pool_func_ap_array_f32+0x1a2>
 8009554:	2300      	movs	r3, #0
 8009556:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8009774 <pool_func_ap_array_f32+0x2f8>
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	4564      	cmp	r4, ip
 800955e:	dd1c      	ble.n	800959a <pool_func_ap_array_f32+0x11e>
 8009560:	2900      	cmp	r1, #0
 8009562:	fb0a f601 	mul.w	r6, sl, r1
 8009566:	db18      	blt.n	800959a <pool_func_ap_array_f32+0x11e>
 8009568:	9b01      	ldr	r3, [sp, #4]
 800956a:	4299      	cmp	r1, r3
 800956c:	da15      	bge.n	800959a <pool_func_ap_array_f32+0x11e>
 800956e:	f1bc 0f00 	cmp.w	ip, #0
 8009572:	4663      	mov	r3, ip
 8009574:	db4a      	blt.n	800960c <pool_func_ap_array_f32+0x190>
 8009576:	18f2      	adds	r2, r6, r3
 8009578:	1c58      	adds	r0, r3, #1
 800957a:	fb09 5202 	mla	r2, r9, r2, r5
 800957e:	459a      	cmp	sl, r3
 8009580:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8009584:	b203      	sxth	r3, r0
 8009586:	dd06      	ble.n	8009596 <pool_func_ap_array_f32+0x11a>
 8009588:	edd2 7a00 	vldr	s15, [r2]
 800958c:	9a00      	ldr	r2, [sp, #0]
 800958e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009592:	3201      	adds	r2, #1
 8009594:	9200      	str	r2, [sp, #0]
 8009596:	429c      	cmp	r4, r3
 8009598:	dced      	bgt.n	8009576 <pool_func_ap_array_f32+0xfa>
 800959a:	3101      	adds	r1, #1
 800959c:	b209      	sxth	r1, r1
 800959e:	4588      	cmp	r8, r1
 80095a0:	dcdc      	bgt.n	800955c <pool_func_ap_array_f32+0xe0>
 80095a2:	eddd 7a00 	vldr	s15, [sp]
 80095a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	f10e 0e01 	add.w	lr, lr, #1
 80095b4:	441d      	add	r5, r3
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	fa0f fe8e 	sxth.w	lr, lr
 80095bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80095c0:	45ce      	cmp	lr, r9
 80095c2:	edc5 6a00 	vstr	s13, [r5]
 80095c6:	4675      	mov	r5, lr
 80095c8:	dbc1      	blt.n	800954e <pool_func_ap_array_f32+0xd2>
 80095ca:	9b08      	ldr	r3, [sp, #32]
 80095cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ce:	3301      	adds	r3, #1
 80095d0:	b219      	sxth	r1, r3
 80095d2:	9b06      	ldr	r3, [sp, #24]
 80095d4:	9108      	str	r1, [sp, #32]
 80095d6:	461a      	mov	r2, r3
 80095d8:	4402      	add	r2, r0
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	b292      	uxth	r2, r2
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	9a07      	ldr	r2, [sp, #28]
 80095e2:	4403      	add	r3, r0
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	428a      	cmp	r2, r1
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	460b      	mov	r3, r1
 80095ec:	dca1      	bgt.n	8009532 <pool_func_ap_array_f32+0xb6>
 80095ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095f0:	3301      	adds	r3, #1
 80095f2:	b21a      	sxth	r2, r3
 80095f4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80095f8:	440b      	add	r3, r1
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	930d      	str	r3, [sp, #52]	; 0x34
 80095fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009600:	920f      	str	r2, [sp, #60]	; 0x3c
 8009602:	4293      	cmp	r3, r2
 8009604:	dc83      	bgt.n	800950e <pool_func_ap_array_f32+0x92>
 8009606:	b015      	add	sp, #84	; 0x54
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	3301      	adds	r3, #1
 800960e:	b21b      	sxth	r3, r3
 8009610:	42bb      	cmp	r3, r7
 8009612:	dac0      	bge.n	8009596 <pool_func_ap_array_f32+0x11a>
 8009614:	3301      	adds	r3, #1
 8009616:	b21b      	sxth	r3, r3
 8009618:	42bb      	cmp	r3, r7
 800961a:	dbf7      	blt.n	800960c <pool_func_ap_array_f32+0x190>
 800961c:	e7bb      	b.n	8009596 <pool_func_ap_array_f32+0x11a>
 800961e:	eef0 6a46 	vmov.f32	s13, s12
 8009622:	e7c4      	b.n	80095ae <pool_func_ap_array_f32+0x132>
 8009624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009626:	9a01      	ldr	r2, [sp, #4]
 8009628:	990e      	ldr	r1, [sp, #56]	; 0x38
 800962a:	1a9a      	subs	r2, r3, r2
 800962c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800962e:	3a01      	subs	r2, #1
 8009630:	3b01      	subs	r3, #1
 8009632:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	f57f af4e 	bpl.w	80094d8 <pool_func_ap_array_f32+0x5c>
 800963c:	fb09 f30a 	mul.w	r3, r9, sl
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
 8009646:	9310      	str	r3, [sp, #64]	; 0x40
 8009648:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8009770 <pool_func_ap_array_f32+0x2f4>
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	9001      	str	r0, [sp, #4]
 8009650:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800965a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800965c:	429a      	cmp	r2, r3
 800965e:	ddd2      	ble.n	8009606 <pool_func_ap_array_f32+0x18a>
 8009660:	9a00      	ldr	r2, [sp, #0]
 8009662:	9907      	ldr	r1, [sp, #28]
 8009664:	fa0f fc82 	sxth.w	ip, r2
 8009668:	2900      	cmp	r1, #0
 800966a:	d074      	beq.n	8009756 <pool_func_ap_array_f32+0x2da>
 800966c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800966e:	fb01 f303 	mul.w	r3, r1, r3
 8009672:	1a12      	subs	r2, r2, r0
 8009674:	9306      	str	r3, [sp, #24]
 8009676:	b213      	sxth	r3, r2
 8009678:	930b      	str	r3, [sp, #44]	; 0x2c
 800967a:	f1b9 0f00 	cmp.w	r9, #0
 800967e:	d06a      	beq.n	8009756 <pool_func_ap_array_f32+0x2da>
 8009680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	f04f 0b00 	mov.w	fp, #0
 800968a:	930f      	str	r3, [sp, #60]	; 0x3c
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	f8cd b014 	str.w	fp, [sp, #20]
 8009692:	46da      	mov	sl, fp
 8009694:	9302      	str	r3, [sp, #8]
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	9902      	ldr	r1, [sp, #8]
 800969a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800969e:	eb0a 0203 	add.w	r2, sl, r3
 80096a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096a4:	fa0f f78b 	sxth.w	r7, fp
 80096a8:	1e4e      	subs	r6, r1, #1
 80096aa:	18fb      	adds	r3, r7, r3
 80096ac:	eba6 060b 	sub.w	r6, r6, fp
 80096b0:	f04f 0a00 	mov.w	sl, #0
 80096b4:	fb09 f202 	mul.w	r2, r9, r2
 80096b8:	fb09 f303 	mul.w	r3, r9, r3
 80096bc:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80096c0:	9208      	str	r2, [sp, #32]
 80096c2:	930d      	str	r3, [sp, #52]	; 0x34
 80096c4:	b2b6      	uxth	r6, r6
 80096c6:	46d0      	mov	r8, sl
 80096c8:	b209      	sxth	r1, r1
 80096ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80096cc:	4584      	cmp	ip, r0
 80096ce:	dd4b      	ble.n	8009768 <pool_func_ap_array_f32+0x2ec>
 80096d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009774 <pool_func_ap_array_f32+0x2f8>
 80096d6:	eb08 0503 	add.w	r5, r8, r3
 80096da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096dc:	2400      	movs	r4, #0
 80096de:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80096e2:	42b9      	cmp	r1, r7
 80096e4:	dd0c      	ble.n	8009700 <pool_func_ap_array_f32+0x284>
 80096e6:	462a      	mov	r2, r5
 80096e8:	463b      	mov	r3, r7
 80096ea:	3301      	adds	r3, #1
 80096ec:	ed92 7a00 	vldr	s14, [r2]
 80096f0:	b21b      	sxth	r3, r3
 80096f2:	428b      	cmp	r3, r1
 80096f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096f8:	4472      	add	r2, lr
 80096fa:	d1f6      	bne.n	80096ea <pool_func_ap_array_f32+0x26e>
 80096fc:	3401      	adds	r4, #1
 80096fe:	4434      	add	r4, r6
 8009700:	3001      	adds	r0, #1
 8009702:	b200      	sxth	r0, r0
 8009704:	4584      	cmp	ip, r0
 8009706:	445d      	add	r5, fp
 8009708:	d1eb      	bne.n	80096e2 <pool_func_ap_array_f32+0x266>
 800970a:	ee07 4a10 	vmov	s14, r4
 800970e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009712:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	9a03      	ldr	r2, [sp, #12]
 800971a:	f10a 0a01 	add.w	sl, sl, #1
 800971e:	4443      	add	r3, r8
 8009720:	fa0f fa8a 	sxth.w	sl, sl
 8009724:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009728:	45ca      	cmp	sl, r9
 800972a:	46d0      	mov	r8, sl
 800972c:	edc3 6a00 	vstr	s13, [r3]
 8009730:	dbcb      	blt.n	80096ca <pool_func_ap_array_f32+0x24e>
 8009732:	9b05      	ldr	r3, [sp, #20]
 8009734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009736:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800973a:	3301      	adds	r3, #1
 800973c:	b21a      	sxth	r2, r3
 800973e:	9b02      	ldr	r3, [sp, #8]
 8009740:	9205      	str	r2, [sp, #20]
 8009742:	440b      	add	r3, r1
 8009744:	b29b      	uxth	r3, r3
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	9b07      	ldr	r3, [sp, #28]
 800974a:	448b      	add	fp, r1
 800974c:	4293      	cmp	r3, r2
 800974e:	fa1f fb8b 	uxth.w	fp, fp
 8009752:	4692      	mov	sl, r2
 8009754:	dc9f      	bgt.n	8009696 <pool_func_ap_array_f32+0x21a>
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975a:	4413      	add	r3, r2
 800975c:	b29b      	uxth	r3, r3
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	3301      	adds	r3, #1
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	e776      	b.n	8009656 <pool_func_ap_array_f32+0x1da>
 8009768:	eef0 6a46 	vmov.f32	s13, s12
 800976c:	e7d3      	b.n	8009716 <pool_func_ap_array_f32+0x29a>
 800976e:	bf00      	nop
 8009770:	7fc00000 	.word	0x7fc00000
 8009774:	00000000 	.word	0x00000000

08009778 <nl_func_relu_array_f32>:
 8009778:	b410      	push	{r4}
 800977a:	698c      	ldr	r4, [r1, #24]
 800977c:	6981      	ldr	r1, [r0, #24]
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	6889      	ldr	r1, [r1, #8]
 8009782:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009786:	3a01      	subs	r2, #1
 8009788:	0092      	lsls	r2, r2, #2
 800978a:	189b      	adds	r3, r3, r2
 800978c:	d216      	bcs.n	80097bc <nl_func_relu_array_f32+0x44>
 800978e:	3204      	adds	r2, #4
 8009790:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80097c4 <nl_func_relu_array_f32+0x4c>
 8009794:	4411      	add	r1, r2
 8009796:	3304      	adds	r3, #4
 8009798:	ed53 7a01 	vldr	s15, [r3, #-4]
 800979c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a4:	bfb8      	it	lt
 80097a6:	eef0 7a47 	vmovlt.f32	s15, s14
 80097aa:	ed61 7a01 	vstmdb	r1!, {s15}
 80097ae:	68a0      	ldr	r0, [r4, #8]
 80097b0:	f1a3 0208 	sub.w	r2, r3, #8
 80097b4:	4290      	cmp	r0, r2
 80097b6:	f1a3 0304 	sub.w	r3, r3, #4
 80097ba:	d9ed      	bls.n	8009798 <nl_func_relu_array_f32+0x20>
 80097bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	00000000 	.word	0x00000000

080097c8 <ai_check_custom_types>:
 80097c8:	4b13      	ldr	r3, [pc, #76]	; (8009818 <ai_check_custom_types+0x50>)
 80097ca:	b082      	sub	sp, #8
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	b118      	cbz	r0, 80097da <ai_check_custom_types+0x12>
 80097d2:	7803      	ldrb	r3, [r0, #0]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d002      	beq.n	80097de <ai_check_custom_types+0x16>
 80097d8:	2000      	movs	r0, #0
 80097da:	b002      	add	sp, #8
 80097dc:	4770      	bx	lr
 80097de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d004      	beq.n	80097f0 <ai_check_custom_types+0x28>
 80097e6:	2001      	movs	r0, #1
 80097e8:	f080 0001 	eor.w	r0, r0, #1
 80097ec:	b002      	add	sp, #8
 80097ee:	4770      	bx	lr
 80097f0:	7842      	ldrb	r2, [r0, #1]
 80097f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	f100 0001 	add.w	r0, r0, #1
 80097fc:	d1f3      	bne.n	80097e6 <ai_check_custom_types+0x1e>
 80097fe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009802:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009806:	429a      	cmp	r2, r3
 8009808:	d1ed      	bne.n	80097e6 <ai_check_custom_types+0x1e>
 800980a:	7842      	ldrb	r2, [r0, #1]
 800980c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d1e8      	bne.n	80097e6 <ai_check_custom_types+0x1e>
 8009814:	2000      	movs	r0, #0
 8009816:	e7e7      	b.n	80097e8 <ai_check_custom_types+0x20>
 8009818:	0800cc98 	.word	0x0800cc98

0800981c <ai_layers_init_all>:
 800981c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800981e:	b17a      	cbz	r2, 8009840 <ai_layers_init_all+0x24>
 8009820:	6913      	ldr	r3, [r2, #16]
 8009822:	60d0      	str	r0, [r2, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	f04f 0201 	mov.w	r2, #1
 800982a:	d009      	beq.n	8009840 <ai_layers_init_all+0x24>
 800982c:	b143      	cbz	r3, 8009840 <ai_layers_init_all+0x24>
 800982e:	6919      	ldr	r1, [r3, #16]
 8009830:	60d8      	str	r0, [r3, #12]
 8009832:	4299      	cmp	r1, r3
 8009834:	f102 0201 	add.w	r2, r2, #1
 8009838:	d002      	beq.n	8009840 <ai_layers_init_all+0x24>
 800983a:	460b      	mov	r3, r1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f6      	bne.n	800982e <ai_layers_init_all+0x12>
 8009840:	4610      	mov	r0, r2
 8009842:	4770      	bx	lr

08009844 <ai_layers_post_init_all>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009848:	b18c      	cbz	r4, 800986e <ai_layers_post_init_all+0x2a>
 800984a:	2500      	movs	r5, #0
 800984c:	6863      	ldr	r3, [r4, #4]
 800984e:	f013 0f01 	tst.w	r3, #1
 8009852:	4620      	mov	r0, r4
 8009854:	d003      	beq.n	800985e <ai_layers_post_init_all+0x1a>
 8009856:	6a23      	ldr	r3, [r4, #32]
 8009858:	b10b      	cbz	r3, 800985e <ai_layers_post_init_all+0x1a>
 800985a:	4798      	blx	r3
 800985c:	3501      	adds	r5, #1
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	42a3      	cmp	r3, r4
 8009862:	d002      	beq.n	800986a <ai_layers_post_init_all+0x26>
 8009864:	461c      	mov	r4, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f0      	bne.n	800984c <ai_layers_post_init_all+0x8>
 800986a:	4628      	mov	r0, r5
 800986c:	bd38      	pop	{r3, r4, r5, pc}
 800986e:	4625      	mov	r5, r4
 8009870:	e7fb      	b.n	800986a <ai_layers_post_init_all+0x26>
 8009872:	bf00      	nop

08009874 <ai_layers_forward_all>:
 8009874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009878:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800987a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800987c:	4604      	mov	r4, r0
 800987e:	2f00      	cmp	r7, #0
 8009880:	d02c      	beq.n	80098dc <ai_layers_forward_all+0x68>
 8009882:	2d00      	cmp	r5, #0
 8009884:	d03f      	beq.n	8009906 <ai_layers_forward_all+0x92>
 8009886:	6385      	str	r5, [r0, #56]	; 0x38
 8009888:	4629      	mov	r1, r5
 800988a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800988c:	2001      	movs	r0, #1
 800988e:	47b8      	blx	r7
 8009890:	2600      	movs	r6, #0
 8009892:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009894:	46b0      	mov	r8, r6
 8009896:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009898:	2002      	movs	r0, #2
 800989a:	47b8      	blx	r7
 800989c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800989e:	696b      	ldr	r3, [r5, #20]
 80098a0:	4628      	mov	r0, r5
 80098a2:	4798      	blx	r3
 80098a4:	692b      	ldr	r3, [r5, #16]
 80098a6:	429d      	cmp	r5, r3
 80098a8:	f04f 0003 	mov.w	r0, #3
 80098ac:	4619      	mov	r1, r3
 80098ae:	d009      	beq.n	80098c4 <ai_layers_forward_all+0x50>
 80098b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80098b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098b4:	47b8      	blx	r7
 80098b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098b8:	3601      	adds	r6, #1
 80098ba:	2900      	cmp	r1, #0
 80098bc:	d1eb      	bne.n	8009896 <ai_layers_forward_all+0x22>
 80098be:	4630      	mov	r0, r6
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c4:	2100      	movs	r1, #0
 80098c6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80098ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098cc:	47b8      	blx	r7
 80098ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098d0:	3601      	adds	r6, #1
 80098d2:	2900      	cmp	r1, #0
 80098d4:	d1df      	bne.n	8009896 <ai_layers_forward_all+0x22>
 80098d6:	4630      	mov	r0, r6
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098dc:	b19d      	cbz	r5, 8009906 <ai_layers_forward_all+0x92>
 80098de:	6385      	str	r5, [r0, #56]	; 0x38
 80098e0:	463e      	mov	r6, r7
 80098e2:	696b      	ldr	r3, [r5, #20]
 80098e4:	4628      	mov	r0, r5
 80098e6:	4798      	blx	r3
 80098e8:	692b      	ldr	r3, [r5, #16]
 80098ea:	42ab      	cmp	r3, r5
 80098ec:	f106 0601 	add.w	r6, r6, #1
 80098f0:	d004      	beq.n	80098fc <ai_layers_forward_all+0x88>
 80098f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80098f4:	461d      	mov	r5, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f3      	bne.n	80098e2 <ai_layers_forward_all+0x6e>
 80098fa:	e7e0      	b.n	80098be <ai_layers_forward_all+0x4a>
 80098fc:	2300      	movs	r3, #0
 80098fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009906:	462e      	mov	r6, r5
 8009908:	4630      	mov	r0, r6
 800990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990e:	bf00      	nop

08009910 <ai_layers_destroy_all>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009914:	b18c      	cbz	r4, 800993a <ai_layers_destroy_all+0x2a>
 8009916:	2500      	movs	r5, #0
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	f013 0f04 	tst.w	r3, #4
 800991e:	4620      	mov	r0, r4
 8009920:	d003      	beq.n	800992a <ai_layers_destroy_all+0x1a>
 8009922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009924:	b10b      	cbz	r3, 800992a <ai_layers_destroy_all+0x1a>
 8009926:	4798      	blx	r3
 8009928:	3501      	adds	r5, #1
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	42a3      	cmp	r3, r4
 800992e:	d002      	beq.n	8009936 <ai_layers_destroy_all+0x26>
 8009930:	461c      	mov	r4, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <ai_layers_destroy_all+0x8>
 8009936:	4628      	mov	r0, r5
 8009938:	bd38      	pop	{r3, r4, r5, pc}
 800993a:	4625      	mov	r5, r4
 800993c:	e7fb      	b.n	8009936 <ai_layers_destroy_all+0x26>
 800993e:	bf00      	nop

08009940 <ai_version_get>:
 8009940:	0212      	lsls	r2, r2, #8
 8009942:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009946:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800994a:	4770      	bx	lr

0800994c <ai_platform_version_get>:
 800994c:	0e02      	lsrs	r2, r0, #24
 800994e:	2300      	movs	r3, #0
 8009950:	f362 0307 	bfi	r3, r2, #0, #8
 8009954:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8009958:	f362 230f 	bfi	r3, r2, #8, #8
 800995c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009960:	f360 4317 	bfi	r3, r0, #16, #8
 8009964:	b082      	sub	sp, #8
 8009966:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800996a:	b002      	add	sp, #8
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <get_tensor_byte_size>:
 8009970:	6983      	ldr	r3, [r0, #24]
 8009972:	68c1      	ldr	r1, [r0, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6940      	ldr	r0, [r0, #20]
 8009978:	4a06      	ldr	r2, [pc, #24]	; (8009994 <get_tensor_byte_size+0x24>)
 800997a:	68c9      	ldr	r1, [r1, #12]
 800997c:	68c0      	ldr	r0, [r0, #12]
 800997e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009982:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009986:	fb00 f001 	mul.w	r0, r0, r1
 800998a:	4293      	cmp	r3, r2
 800998c:	bf04      	itt	eq
 800998e:	3007      	addeq	r0, #7
 8009990:	08c0      	lsreq	r0, r0, #3
 8009992:	4770      	bx	lr
 8009994:	000400c0 	.word	0x000400c0

08009998 <ai_array_to_buffer_fmt>:
 8009998:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800999c:	2b02      	cmp	r3, #2
 800999e:	d036      	beq.n	8009a0e <ai_array_to_buffer_fmt+0x76>
 80099a0:	4a21      	ldr	r2, [pc, #132]	; (8009a28 <ai_array_to_buffer_fmt+0x90>)
 80099a2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00f      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099aa:	dd12      	ble.n	80099d2 <ai_array_to_buffer_fmt+0x3a>
 80099ac:	4a1f      	ldr	r2, [pc, #124]	; (8009a2c <ai_array_to_buffer_fmt+0x94>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00b      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099b2:	dd1e      	ble.n	80099f2 <ai_array_to_buffer_fmt+0x5a>
 80099b4:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <ai_array_to_buffer_fmt+0x98>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d007      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099ba:	dd30      	ble.n	8009a1e <ai_array_to_buffer_fmt+0x86>
 80099bc:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <ai_array_to_buffer_fmt+0x9c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099c2:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d11f      	bne.n	8009a0a <ai_array_to_buffer_fmt+0x72>
 80099ca:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80099ce:	4318      	orrs	r0, r3
 80099d0:	4770      	bx	lr
 80099d2:	4a19      	ldr	r2, [pc, #100]	; (8009a38 <ai_array_to_buffer_fmt+0xa0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d0f8      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099d8:	dd0b      	ble.n	80099f2 <ai_array_to_buffer_fmt+0x5a>
 80099da:	4a18      	ldr	r2, [pc, #96]	; (8009a3c <ai_array_to_buffer_fmt+0xa4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d0f4      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099e0:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d0f0      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099e8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10c      	bne.n	8009a0a <ai_array_to_buffer_fmt+0x72>
 80099f0:	e7eb      	b.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099f2:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d0e7      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 80099fa:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d0e3      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 8009a02:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d0df      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	e7dd      	b.n	80099ca <ai_array_to_buffer_fmt+0x32>
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <ai_array_to_buffer_fmt+0xa8>)
 8009a10:	4003      	ands	r3, r0
 8009a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a16:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009a1a:	4318      	orrs	r0, r3
 8009a1c:	4770      	bx	lr
 8009a1e:	3a0f      	subs	r2, #15
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d0d2      	beq.n	80099ca <ai_array_to_buffer_fmt+0x32>
 8009a24:	e7f1      	b.n	8009a0a <ai_array_to_buffer_fmt+0x72>
 8009a26:	bf00      	nop
 8009a28:	00060440 	.word	0x00060440
 8009a2c:	00840447 	.word	0x00840447
 8009a30:	0084084f 	.word	0x0084084f
 8009a34:	00841040 	.word	0x00841040
 8009a38:	00040447 	.word	0x00040447
 8009a3c:	0004084f 	.word	0x0004084f
 8009a40:	00803fff 	.word	0x00803fff

08009a44 <ai_array_get_byte_size>:
 8009a44:	b1c1      	cbz	r1, 8009a78 <ai_array_get_byte_size+0x34>
 8009a46:	11c3      	asrs	r3, r0, #7
 8009a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a4c:	fb01 f102 	mul.w	r1, r1, r2
 8009a50:	3107      	adds	r1, #7
 8009a52:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009a56:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8009a5a:	f021 0107 	bic.w	r1, r1, #7
 8009a5e:	2804      	cmp	r0, #4
 8009a60:	fa21 f102 	lsr.w	r1, r1, r2
 8009a64:	d00a      	beq.n	8009a7c <ai_array_get_byte_size+0x38>
 8009a66:	2808      	cmp	r0, #8
 8009a68:	d103      	bne.n	8009a72 <ai_array_get_byte_size+0x2e>
 8009a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009a72:	3107      	adds	r1, #7
 8009a74:	08c8      	lsrs	r0, r1, #3
 8009a76:	4770      	bx	lr
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4770      	bx	lr
 8009a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a80:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8009a84:	3107      	adds	r1, #7
 8009a86:	08c8      	lsrs	r0, r1, #3
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop

08009a8c <ai_array_get_data_byte_size>:
 8009a8c:	b161      	cbz	r1, 8009aa8 <ai_array_get_data_byte_size+0x1c>
 8009a8e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009a92:	fb01 f103 	mul.w	r1, r1, r3
 8009a96:	3107      	adds	r1, #7
 8009a98:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009a9c:	f021 0107 	bic.w	r1, r1, #7
 8009aa0:	40c1      	lsrs	r1, r0
 8009aa2:	3107      	adds	r1, #7
 8009aa4:	08c8      	lsrs	r0, r1, #3
 8009aa6:	4770      	bx	lr
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4770      	bx	lr

08009aac <__errno>:
 8009aac:	4b01      	ldr	r3, [pc, #4]	; (8009ab4 <__errno+0x8>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	2000057c 	.word	0x2000057c

08009ab8 <__libc_init_array>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	4d0d      	ldr	r5, [pc, #52]	; (8009af0 <__libc_init_array+0x38>)
 8009abc:	4c0d      	ldr	r4, [pc, #52]	; (8009af4 <__libc_init_array+0x3c>)
 8009abe:	1b64      	subs	r4, r4, r5
 8009ac0:	10a4      	asrs	r4, r4, #2
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	42a6      	cmp	r6, r4
 8009ac6:	d109      	bne.n	8009adc <__libc_init_array+0x24>
 8009ac8:	4d0b      	ldr	r5, [pc, #44]	; (8009af8 <__libc_init_array+0x40>)
 8009aca:	4c0c      	ldr	r4, [pc, #48]	; (8009afc <__libc_init_array+0x44>)
 8009acc:	f002 fd48 	bl	800c560 <_init>
 8009ad0:	1b64      	subs	r4, r4, r5
 8009ad2:	10a4      	asrs	r4, r4, #2
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	42a6      	cmp	r6, r4
 8009ad8:	d105      	bne.n	8009ae6 <__libc_init_array+0x2e>
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae0:	4798      	blx	r3
 8009ae2:	3601      	adds	r6, #1
 8009ae4:	e7ee      	b.n	8009ac4 <__libc_init_array+0xc>
 8009ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aea:	4798      	blx	r3
 8009aec:	3601      	adds	r6, #1
 8009aee:	e7f2      	b.n	8009ad6 <__libc_init_array+0x1e>
 8009af0:	08010074 	.word	0x08010074
 8009af4:	08010074 	.word	0x08010074
 8009af8:	08010074 	.word	0x08010074
 8009afc:	08010078 	.word	0x08010078

08009b00 <malloc>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <malloc+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f000 b885 	b.w	8009c14 <_malloc_r>
 8009b0a:	bf00      	nop
 8009b0c:	2000057c 	.word	0x2000057c

08009b10 <memcpy>:
 8009b10:	440a      	add	r2, r1
 8009b12:	4291      	cmp	r1, r2
 8009b14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b18:	d100      	bne.n	8009b1c <memcpy+0xc>
 8009b1a:	4770      	bx	lr
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b26:	4291      	cmp	r1, r2
 8009b28:	d1f9      	bne.n	8009b1e <memcpy+0xe>
 8009b2a:	bd10      	pop	{r4, pc}

08009b2c <memset>:
 8009b2c:	4402      	add	r2, r0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d100      	bne.n	8009b36 <memset+0xa>
 8009b34:	4770      	bx	lr
 8009b36:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3a:	e7f9      	b.n	8009b30 <memset+0x4>

08009b3c <_free_r>:
 8009b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	d044      	beq.n	8009bcc <_free_r+0x90>
 8009b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b46:	9001      	str	r0, [sp, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b4e:	bfb8      	it	lt
 8009b50:	18e4      	addlt	r4, r4, r3
 8009b52:	f001 fbdf 	bl	800b314 <__malloc_lock>
 8009b56:	4a1e      	ldr	r2, [pc, #120]	; (8009bd0 <_free_r+0x94>)
 8009b58:	9801      	ldr	r0, [sp, #4]
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	b933      	cbnz	r3, 8009b6c <_free_r+0x30>
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	6014      	str	r4, [r2, #0]
 8009b62:	b003      	add	sp, #12
 8009b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b68:	f001 bbda 	b.w	800b320 <__malloc_unlock>
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	d908      	bls.n	8009b82 <_free_r+0x46>
 8009b70:	6825      	ldr	r5, [r4, #0]
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf01      	itttt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	1949      	addeq	r1, r1, r5
 8009b7e:	6021      	streq	r1, [r4, #0]
 8009b80:	e7ed      	b.n	8009b5e <_free_r+0x22>
 8009b82:	461a      	mov	r2, r3
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b10b      	cbz	r3, 8009b8c <_free_r+0x50>
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d9fa      	bls.n	8009b82 <_free_r+0x46>
 8009b8c:	6811      	ldr	r1, [r2, #0]
 8009b8e:	1855      	adds	r5, r2, r1
 8009b90:	42a5      	cmp	r5, r4
 8009b92:	d10b      	bne.n	8009bac <_free_r+0x70>
 8009b94:	6824      	ldr	r4, [r4, #0]
 8009b96:	4421      	add	r1, r4
 8009b98:	1854      	adds	r4, r2, r1
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	6011      	str	r1, [r2, #0]
 8009b9e:	d1e0      	bne.n	8009b62 <_free_r+0x26>
 8009ba0:	681c      	ldr	r4, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	6053      	str	r3, [r2, #4]
 8009ba6:	4421      	add	r1, r4
 8009ba8:	6011      	str	r1, [r2, #0]
 8009baa:	e7da      	b.n	8009b62 <_free_r+0x26>
 8009bac:	d902      	bls.n	8009bb4 <_free_r+0x78>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	6003      	str	r3, [r0, #0]
 8009bb2:	e7d6      	b.n	8009b62 <_free_r+0x26>
 8009bb4:	6825      	ldr	r5, [r4, #0]
 8009bb6:	1961      	adds	r1, r4, r5
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf04      	itt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	bf04      	itt	eq
 8009bc4:	1949      	addeq	r1, r1, r5
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	6054      	str	r4, [r2, #4]
 8009bca:	e7ca      	b.n	8009b62 <_free_r+0x26>
 8009bcc:	b003      	add	sp, #12
 8009bce:	bd30      	pop	{r4, r5, pc}
 8009bd0:	20003ac8 	.word	0x20003ac8

08009bd4 <sbrk_aligned>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4e0e      	ldr	r6, [pc, #56]	; (8009c10 <sbrk_aligned+0x3c>)
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6831      	ldr	r1, [r6, #0]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b911      	cbnz	r1, 8009be6 <sbrk_aligned+0x12>
 8009be0:	f000 fcf6 	bl	800a5d0 <_sbrk_r>
 8009be4:	6030      	str	r0, [r6, #0]
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 fcf1 	bl	800a5d0 <_sbrk_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <sbrk_aligned+0x34>
 8009bf2:	1cc4      	adds	r4, r0, #3
 8009bf4:	f024 0403 	bic.w	r4, r4, #3
 8009bf8:	42a0      	cmp	r0, r4
 8009bfa:	d007      	beq.n	8009c0c <sbrk_aligned+0x38>
 8009bfc:	1a21      	subs	r1, r4, r0
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 fce6 	bl	800a5d0 <_sbrk_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d101      	bne.n	8009c0c <sbrk_aligned+0x38>
 8009c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	20003acc 	.word	0x20003acc

08009c14 <_malloc_r>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	1ccd      	adds	r5, r1, #3
 8009c1a:	f025 0503 	bic.w	r5, r5, #3
 8009c1e:	3508      	adds	r5, #8
 8009c20:	2d0c      	cmp	r5, #12
 8009c22:	bf38      	it	cc
 8009c24:	250c      	movcc	r5, #12
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	4607      	mov	r7, r0
 8009c2a:	db01      	blt.n	8009c30 <_malloc_r+0x1c>
 8009c2c:	42a9      	cmp	r1, r5
 8009c2e:	d905      	bls.n	8009c3c <_malloc_r+0x28>
 8009c30:	230c      	movs	r3, #12
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	2600      	movs	r6, #0
 8009c36:	4630      	mov	r0, r6
 8009c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c3c:	4e2e      	ldr	r6, [pc, #184]	; (8009cf8 <_malloc_r+0xe4>)
 8009c3e:	f001 fb69 	bl	800b314 <__malloc_lock>
 8009c42:	6833      	ldr	r3, [r6, #0]
 8009c44:	461c      	mov	r4, r3
 8009c46:	bb34      	cbnz	r4, 8009c96 <_malloc_r+0x82>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7ff ffc2 	bl	8009bd4 <sbrk_aligned>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	4604      	mov	r4, r0
 8009c54:	d14d      	bne.n	8009cf2 <_malloc_r+0xde>
 8009c56:	6834      	ldr	r4, [r6, #0]
 8009c58:	4626      	mov	r6, r4
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d140      	bne.n	8009ce0 <_malloc_r+0xcc>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	4631      	mov	r1, r6
 8009c62:	4638      	mov	r0, r7
 8009c64:	eb04 0803 	add.w	r8, r4, r3
 8009c68:	f000 fcb2 	bl	800a5d0 <_sbrk_r>
 8009c6c:	4580      	cmp	r8, r0
 8009c6e:	d13a      	bne.n	8009ce6 <_malloc_r+0xd2>
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	3503      	adds	r5, #3
 8009c74:	1a6d      	subs	r5, r5, r1
 8009c76:	f025 0503 	bic.w	r5, r5, #3
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	2d0c      	cmp	r5, #12
 8009c7e:	bf38      	it	cc
 8009c80:	250c      	movcc	r5, #12
 8009c82:	4629      	mov	r1, r5
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff ffa5 	bl	8009bd4 <sbrk_aligned>
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d02b      	beq.n	8009ce6 <_malloc_r+0xd2>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	442b      	add	r3, r5
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	e00e      	b.n	8009cb4 <_malloc_r+0xa0>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	1b52      	subs	r2, r2, r5
 8009c9a:	d41e      	bmi.n	8009cda <_malloc_r+0xc6>
 8009c9c:	2a0b      	cmp	r2, #11
 8009c9e:	d916      	bls.n	8009cce <_malloc_r+0xba>
 8009ca0:	1961      	adds	r1, r4, r5
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	bf18      	it	ne
 8009ca8:	6059      	strne	r1, [r3, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	bf08      	it	eq
 8009cae:	6031      	streq	r1, [r6, #0]
 8009cb0:	5162      	str	r2, [r4, r5]
 8009cb2:	604b      	str	r3, [r1, #4]
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f104 060b 	add.w	r6, r4, #11
 8009cba:	f001 fb31 	bl	800b320 <__malloc_unlock>
 8009cbe:	f026 0607 	bic.w	r6, r6, #7
 8009cc2:	1d23      	adds	r3, r4, #4
 8009cc4:	1af2      	subs	r2, r6, r3
 8009cc6:	d0b6      	beq.n	8009c36 <_malloc_r+0x22>
 8009cc8:	1b9b      	subs	r3, r3, r6
 8009cca:	50a3      	str	r3, [r4, r2]
 8009ccc:	e7b3      	b.n	8009c36 <_malloc_r+0x22>
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	bf0c      	ite	eq
 8009cd4:	6032      	streq	r2, [r6, #0]
 8009cd6:	605a      	strne	r2, [r3, #4]
 8009cd8:	e7ec      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cda:	4623      	mov	r3, r4
 8009cdc:	6864      	ldr	r4, [r4, #4]
 8009cde:	e7b2      	b.n	8009c46 <_malloc_r+0x32>
 8009ce0:	4634      	mov	r4, r6
 8009ce2:	6876      	ldr	r6, [r6, #4]
 8009ce4:	e7b9      	b.n	8009c5a <_malloc_r+0x46>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	4638      	mov	r0, r7
 8009cec:	f001 fb18 	bl	800b320 <__malloc_unlock>
 8009cf0:	e7a1      	b.n	8009c36 <_malloc_r+0x22>
 8009cf2:	6025      	str	r5, [r4, #0]
 8009cf4:	e7de      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cf6:	bf00      	nop
 8009cf8:	20003ac8 	.word	0x20003ac8

08009cfc <__cvt>:
 8009cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	ec55 4b10 	vmov	r4, r5, d0
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	460e      	mov	r6, r1
 8009d08:	4619      	mov	r1, r3
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	bfbb      	ittet	lt
 8009d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d12:	461d      	movlt	r5, r3
 8009d14:	2300      	movge	r3, #0
 8009d16:	232d      	movlt	r3, #45	; 0x2d
 8009d18:	700b      	strb	r3, [r1, #0]
 8009d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d20:	4691      	mov	r9, r2
 8009d22:	f023 0820 	bic.w	r8, r3, #32
 8009d26:	bfbc      	itt	lt
 8009d28:	4622      	movlt	r2, r4
 8009d2a:	4614      	movlt	r4, r2
 8009d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d30:	d005      	beq.n	8009d3e <__cvt+0x42>
 8009d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d36:	d100      	bne.n	8009d3a <__cvt+0x3e>
 8009d38:	3601      	adds	r6, #1
 8009d3a:	2102      	movs	r1, #2
 8009d3c:	e000      	b.n	8009d40 <__cvt+0x44>
 8009d3e:	2103      	movs	r1, #3
 8009d40:	ab03      	add	r3, sp, #12
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	ab02      	add	r3, sp, #8
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	ec45 4b10 	vmov	d0, r4, r5
 8009d4c:	4653      	mov	r3, sl
 8009d4e:	4632      	mov	r2, r6
 8009d50:	f000 fcee 	bl	800a730 <_dtoa_r>
 8009d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d58:	4607      	mov	r7, r0
 8009d5a:	d102      	bne.n	8009d62 <__cvt+0x66>
 8009d5c:	f019 0f01 	tst.w	r9, #1
 8009d60:	d022      	beq.n	8009da8 <__cvt+0xac>
 8009d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d66:	eb07 0906 	add.w	r9, r7, r6
 8009d6a:	d110      	bne.n	8009d8e <__cvt+0x92>
 8009d6c:	783b      	ldrb	r3, [r7, #0]
 8009d6e:	2b30      	cmp	r3, #48	; 0x30
 8009d70:	d10a      	bne.n	8009d88 <__cvt+0x8c>
 8009d72:	2200      	movs	r2, #0
 8009d74:	2300      	movs	r3, #0
 8009d76:	4620      	mov	r0, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7f6 febd 	bl	8000af8 <__aeabi_dcmpeq>
 8009d7e:	b918      	cbnz	r0, 8009d88 <__cvt+0x8c>
 8009d80:	f1c6 0601 	rsb	r6, r6, #1
 8009d84:	f8ca 6000 	str.w	r6, [sl]
 8009d88:	f8da 3000 	ldr.w	r3, [sl]
 8009d8c:	4499      	add	r9, r3
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2300      	movs	r3, #0
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7f6 feaf 	bl	8000af8 <__aeabi_dcmpeq>
 8009d9a:	b108      	cbz	r0, 8009da0 <__cvt+0xa4>
 8009d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009da0:	2230      	movs	r2, #48	; 0x30
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	454b      	cmp	r3, r9
 8009da6:	d307      	bcc.n	8009db8 <__cvt+0xbc>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dac:	1bdb      	subs	r3, r3, r7
 8009dae:	4638      	mov	r0, r7
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	b004      	add	sp, #16
 8009db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db8:	1c59      	adds	r1, r3, #1
 8009dba:	9103      	str	r1, [sp, #12]
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e7f0      	b.n	8009da2 <__cvt+0xa6>

08009dc0 <__exponent>:
 8009dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	bfb8      	it	lt
 8009dc8:	4249      	neglt	r1, r1
 8009dca:	f803 2b02 	strb.w	r2, [r3], #2
 8009dce:	bfb4      	ite	lt
 8009dd0:	222d      	movlt	r2, #45	; 0x2d
 8009dd2:	222b      	movge	r2, #43	; 0x2b
 8009dd4:	2909      	cmp	r1, #9
 8009dd6:	7042      	strb	r2, [r0, #1]
 8009dd8:	dd2a      	ble.n	8009e30 <__exponent+0x70>
 8009dda:	f10d 0407 	add.w	r4, sp, #7
 8009dde:	46a4      	mov	ip, r4
 8009de0:	270a      	movs	r7, #10
 8009de2:	46a6      	mov	lr, r4
 8009de4:	460a      	mov	r2, r1
 8009de6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dea:	fb07 1516 	mls	r5, r7, r6, r1
 8009dee:	3530      	adds	r5, #48	; 0x30
 8009df0:	2a63      	cmp	r2, #99	; 0x63
 8009df2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009df6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009dfa:	4631      	mov	r1, r6
 8009dfc:	dcf1      	bgt.n	8009de2 <__exponent+0x22>
 8009dfe:	3130      	adds	r1, #48	; 0x30
 8009e00:	f1ae 0502 	sub.w	r5, lr, #2
 8009e04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e08:	1c44      	adds	r4, r0, #1
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4561      	cmp	r1, ip
 8009e0e:	d30a      	bcc.n	8009e26 <__exponent+0x66>
 8009e10:	f10d 0209 	add.w	r2, sp, #9
 8009e14:	eba2 020e 	sub.w	r2, r2, lr
 8009e18:	4565      	cmp	r5, ip
 8009e1a:	bf88      	it	hi
 8009e1c:	2200      	movhi	r2, #0
 8009e1e:	4413      	add	r3, r2
 8009e20:	1a18      	subs	r0, r3, r0
 8009e22:	b003      	add	sp, #12
 8009e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e2e:	e7ed      	b.n	8009e0c <__exponent+0x4c>
 8009e30:	2330      	movs	r3, #48	; 0x30
 8009e32:	3130      	adds	r1, #48	; 0x30
 8009e34:	7083      	strb	r3, [r0, #2]
 8009e36:	70c1      	strb	r1, [r0, #3]
 8009e38:	1d03      	adds	r3, r0, #4
 8009e3a:	e7f1      	b.n	8009e20 <__exponent+0x60>

08009e3c <_printf_float>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	ed2d 8b02 	vpush	{d8}
 8009e44:	b08d      	sub	sp, #52	; 0x34
 8009e46:	460c      	mov	r4, r1
 8009e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	461f      	mov	r7, r3
 8009e50:	4605      	mov	r5, r0
 8009e52:	f001 fa5b 	bl	800b30c <_localeconv_r>
 8009e56:	f8d0 a000 	ldr.w	sl, [r0]
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	f7f6 f9d0 	bl	8000200 <strlen>
 8009e60:	2300      	movs	r3, #0
 8009e62:	930a      	str	r3, [sp, #40]	; 0x28
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e70:	3307      	adds	r3, #7
 8009e72:	f023 0307 	bic.w	r3, r3, #7
 8009e76:	f103 0208 	add.w	r2, r3, #8
 8009e7a:	f8c8 2000 	str.w	r2, [r8]
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e94:	ee08 0a10 	vmov	s16, r0
 8009e98:	4b9f      	ldr	r3, [pc, #636]	; (800a118 <_printf_float+0x2dc>)
 8009e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ea2:	f7f6 fe5b 	bl	8000b5c <__aeabi_dcmpun>
 8009ea6:	bb88      	cbnz	r0, 8009f0c <_printf_float+0xd0>
 8009ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eac:	4b9a      	ldr	r3, [pc, #616]	; (800a118 <_printf_float+0x2dc>)
 8009eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eb2:	f7f6 fe35 	bl	8000b20 <__aeabi_dcmple>
 8009eb6:	bb48      	cbnz	r0, 8009f0c <_printf_float+0xd0>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	f7f6 fe24 	bl	8000b0c <__aeabi_dcmplt>
 8009ec4:	b110      	cbz	r0, 8009ecc <_printf_float+0x90>
 8009ec6:	232d      	movs	r3, #45	; 0x2d
 8009ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ecc:	4b93      	ldr	r3, [pc, #588]	; (800a11c <_printf_float+0x2e0>)
 8009ece:	4894      	ldr	r0, [pc, #592]	; (800a120 <_printf_float+0x2e4>)
 8009ed0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ed4:	bf94      	ite	ls
 8009ed6:	4698      	movls	r8, r3
 8009ed8:	4680      	movhi	r8, r0
 8009eda:	2303      	movs	r3, #3
 8009edc:	6123      	str	r3, [r4, #16]
 8009ede:	9b05      	ldr	r3, [sp, #20]
 8009ee0:	f023 0204 	bic.w	r2, r3, #4
 8009ee4:	6022      	str	r2, [r4, #0]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	9700      	str	r7, [sp, #0]
 8009eec:	4633      	mov	r3, r6
 8009eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f9d8 	bl	800a2a8 <_printf_common>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f040 8090 	bne.w	800a01e <_printf_float+0x1e2>
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f02:	b00d      	add	sp, #52	; 0x34
 8009f04:	ecbd 8b02 	vpop	{d8}
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	464b      	mov	r3, r9
 8009f10:	4640      	mov	r0, r8
 8009f12:	4649      	mov	r1, r9
 8009f14:	f7f6 fe22 	bl	8000b5c <__aeabi_dcmpun>
 8009f18:	b140      	cbz	r0, 8009f2c <_printf_float+0xf0>
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bfbc      	itt	lt
 8009f20:	232d      	movlt	r3, #45	; 0x2d
 8009f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f26:	487f      	ldr	r0, [pc, #508]	; (800a124 <_printf_float+0x2e8>)
 8009f28:	4b7f      	ldr	r3, [pc, #508]	; (800a128 <_printf_float+0x2ec>)
 8009f2a:	e7d1      	b.n	8009ed0 <_printf_float+0x94>
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f32:	9206      	str	r2, [sp, #24]
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	d13f      	bne.n	8009fb8 <_printf_float+0x17c>
 8009f38:	2306      	movs	r3, #6
 8009f3a:	6063      	str	r3, [r4, #4]
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	6861      	ldr	r1, [r4, #4]
 8009f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f44:	2300      	movs	r3, #0
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	ab0a      	add	r3, sp, #40	; 0x28
 8009f4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f4e:	ab09      	add	r3, sp, #36	; 0x24
 8009f50:	ec49 8b10 	vmov	d0, r8, r9
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	6022      	str	r2, [r4, #0]
 8009f58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff fecd 	bl	8009cfc <__cvt>
 8009f62:	9b06      	ldr	r3, [sp, #24]
 8009f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f66:	2b47      	cmp	r3, #71	; 0x47
 8009f68:	4680      	mov	r8, r0
 8009f6a:	d108      	bne.n	8009f7e <_printf_float+0x142>
 8009f6c:	1cc8      	adds	r0, r1, #3
 8009f6e:	db02      	blt.n	8009f76 <_printf_float+0x13a>
 8009f70:	6863      	ldr	r3, [r4, #4]
 8009f72:	4299      	cmp	r1, r3
 8009f74:	dd41      	ble.n	8009ffa <_printf_float+0x1be>
 8009f76:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f7a:	fa5f fb8b 	uxtb.w	fp, fp
 8009f7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f82:	d820      	bhi.n	8009fc6 <_printf_float+0x18a>
 8009f84:	3901      	subs	r1, #1
 8009f86:	465a      	mov	r2, fp
 8009f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8009f8e:	f7ff ff17 	bl	8009dc0 <__exponent>
 8009f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f94:	1813      	adds	r3, r2, r0
 8009f96:	2a01      	cmp	r2, #1
 8009f98:	4681      	mov	r9, r0
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	dc02      	bgt.n	8009fa4 <_printf_float+0x168>
 8009f9e:	6822      	ldr	r2, [r4, #0]
 8009fa0:	07d2      	lsls	r2, r2, #31
 8009fa2:	d501      	bpl.n	8009fa8 <_printf_float+0x16c>
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d09c      	beq.n	8009eea <_printf_float+0xae>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb6:	e798      	b.n	8009eea <_printf_float+0xae>
 8009fb8:	9a06      	ldr	r2, [sp, #24]
 8009fba:	2a47      	cmp	r2, #71	; 0x47
 8009fbc:	d1be      	bne.n	8009f3c <_printf_float+0x100>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1bc      	bne.n	8009f3c <_printf_float+0x100>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e7b9      	b.n	8009f3a <_printf_float+0xfe>
 8009fc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fca:	d118      	bne.n	8009ffe <_printf_float+0x1c2>
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	6863      	ldr	r3, [r4, #4]
 8009fd0:	dd0b      	ble.n	8009fea <_printf_float+0x1ae>
 8009fd2:	6121      	str	r1, [r4, #16]
 8009fd4:	b913      	cbnz	r3, 8009fdc <_printf_float+0x1a0>
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	07d0      	lsls	r0, r2, #31
 8009fda:	d502      	bpl.n	8009fe2 <_printf_float+0x1a6>
 8009fdc:	3301      	adds	r3, #1
 8009fde:	440b      	add	r3, r1
 8009fe0:	6123      	str	r3, [r4, #16]
 8009fe2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fe4:	f04f 0900 	mov.w	r9, #0
 8009fe8:	e7de      	b.n	8009fa8 <_printf_float+0x16c>
 8009fea:	b913      	cbnz	r3, 8009ff2 <_printf_float+0x1b6>
 8009fec:	6822      	ldr	r2, [r4, #0]
 8009fee:	07d2      	lsls	r2, r2, #31
 8009ff0:	d501      	bpl.n	8009ff6 <_printf_float+0x1ba>
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	e7f4      	b.n	8009fe0 <_printf_float+0x1a4>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e7f2      	b.n	8009fe0 <_printf_float+0x1a4>
 8009ffa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a000:	4299      	cmp	r1, r3
 800a002:	db05      	blt.n	800a010 <_printf_float+0x1d4>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	6121      	str	r1, [r4, #16]
 800a008:	07d8      	lsls	r0, r3, #31
 800a00a:	d5ea      	bpl.n	8009fe2 <_printf_float+0x1a6>
 800a00c:	1c4b      	adds	r3, r1, #1
 800a00e:	e7e7      	b.n	8009fe0 <_printf_float+0x1a4>
 800a010:	2900      	cmp	r1, #0
 800a012:	bfd4      	ite	le
 800a014:	f1c1 0202 	rsble	r2, r1, #2
 800a018:	2201      	movgt	r2, #1
 800a01a:	4413      	add	r3, r2
 800a01c:	e7e0      	b.n	8009fe0 <_printf_float+0x1a4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	055a      	lsls	r2, r3, #21
 800a022:	d407      	bmi.n	800a034 <_printf_float+0x1f8>
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	4642      	mov	r2, r8
 800a028:	4631      	mov	r1, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b8      	blx	r7
 800a02e:	3001      	adds	r0, #1
 800a030:	d12c      	bne.n	800a08c <_printf_float+0x250>
 800a032:	e764      	b.n	8009efe <_printf_float+0xc2>
 800a034:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a038:	f240 80e0 	bls.w	800a1fc <_printf_float+0x3c0>
 800a03c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	f7f6 fd58 	bl	8000af8 <__aeabi_dcmpeq>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d034      	beq.n	800a0b6 <_printf_float+0x27a>
 800a04c:	4a37      	ldr	r2, [pc, #220]	; (800a12c <_printf_float+0x2f0>)
 800a04e:	2301      	movs	r3, #1
 800a050:	4631      	mov	r1, r6
 800a052:	4628      	mov	r0, r5
 800a054:	47b8      	blx	r7
 800a056:	3001      	adds	r0, #1
 800a058:	f43f af51 	beq.w	8009efe <_printf_float+0xc2>
 800a05c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a060:	429a      	cmp	r2, r3
 800a062:	db02      	blt.n	800a06a <_printf_float+0x22e>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	07d8      	lsls	r0, r3, #31
 800a068:	d510      	bpl.n	800a08c <_printf_float+0x250>
 800a06a:	ee18 3a10 	vmov	r3, s16
 800a06e:	4652      	mov	r2, sl
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	f43f af41 	beq.w	8009efe <_printf_float+0xc2>
 800a07c:	f04f 0800 	mov.w	r8, #0
 800a080:	f104 091a 	add.w	r9, r4, #26
 800a084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a086:	3b01      	subs	r3, #1
 800a088:	4543      	cmp	r3, r8
 800a08a:	dc09      	bgt.n	800a0a0 <_printf_float+0x264>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	079b      	lsls	r3, r3, #30
 800a090:	f100 8105 	bmi.w	800a29e <_printf_float+0x462>
 800a094:	68e0      	ldr	r0, [r4, #12]
 800a096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a098:	4298      	cmp	r0, r3
 800a09a:	bfb8      	it	lt
 800a09c:	4618      	movlt	r0, r3
 800a09e:	e730      	b.n	8009f02 <_printf_float+0xc6>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	464a      	mov	r2, r9
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b8      	blx	r7
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	f43f af27 	beq.w	8009efe <_printf_float+0xc2>
 800a0b0:	f108 0801 	add.w	r8, r8, #1
 800a0b4:	e7e6      	b.n	800a084 <_printf_float+0x248>
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dc39      	bgt.n	800a130 <_printf_float+0x2f4>
 800a0bc:	4a1b      	ldr	r2, [pc, #108]	; (800a12c <_printf_float+0x2f0>)
 800a0be:	2301      	movs	r3, #1
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af19 	beq.w	8009efe <_printf_float+0xc2>
 800a0cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	d102      	bne.n	800a0da <_printf_float+0x29e>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	07d9      	lsls	r1, r3, #31
 800a0d8:	d5d8      	bpl.n	800a08c <_printf_float+0x250>
 800a0da:	ee18 3a10 	vmov	r3, s16
 800a0de:	4652      	mov	r2, sl
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	47b8      	blx	r7
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	f43f af09 	beq.w	8009efe <_printf_float+0xc2>
 800a0ec:	f04f 0900 	mov.w	r9, #0
 800a0f0:	f104 0a1a 	add.w	sl, r4, #26
 800a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f6:	425b      	negs	r3, r3
 800a0f8:	454b      	cmp	r3, r9
 800a0fa:	dc01      	bgt.n	800a100 <_printf_float+0x2c4>
 800a0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fe:	e792      	b.n	800a026 <_printf_float+0x1ea>
 800a100:	2301      	movs	r3, #1
 800a102:	4652      	mov	r2, sl
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	47b8      	blx	r7
 800a10a:	3001      	adds	r0, #1
 800a10c:	f43f aef7 	beq.w	8009efe <_printf_float+0xc2>
 800a110:	f109 0901 	add.w	r9, r9, #1
 800a114:	e7ee      	b.n	800a0f4 <_printf_float+0x2b8>
 800a116:	bf00      	nop
 800a118:	7fefffff 	.word	0x7fefffff
 800a11c:	0800fc98 	.word	0x0800fc98
 800a120:	0800fc9c 	.word	0x0800fc9c
 800a124:	0800fca4 	.word	0x0800fca4
 800a128:	0800fca0 	.word	0x0800fca0
 800a12c:	0800fca8 	.word	0x0800fca8
 800a130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a134:	429a      	cmp	r2, r3
 800a136:	bfa8      	it	ge
 800a138:	461a      	movge	r2, r3
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	4691      	mov	r9, r2
 800a13e:	dc37      	bgt.n	800a1b0 <_printf_float+0x374>
 800a140:	f04f 0b00 	mov.w	fp, #0
 800a144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a148:	f104 021a 	add.w	r2, r4, #26
 800a14c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	eba3 0309 	sub.w	r3, r3, r9
 800a154:	455b      	cmp	r3, fp
 800a156:	dc33      	bgt.n	800a1c0 <_printf_float+0x384>
 800a158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a15c:	429a      	cmp	r2, r3
 800a15e:	db3b      	blt.n	800a1d8 <_printf_float+0x39c>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	07da      	lsls	r2, r3, #31
 800a164:	d438      	bmi.n	800a1d8 <_printf_float+0x39c>
 800a166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a168:	9a05      	ldr	r2, [sp, #20]
 800a16a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a16c:	1a9a      	subs	r2, r3, r2
 800a16e:	eba3 0901 	sub.w	r9, r3, r1
 800a172:	4591      	cmp	r9, r2
 800a174:	bfa8      	it	ge
 800a176:	4691      	movge	r9, r2
 800a178:	f1b9 0f00 	cmp.w	r9, #0
 800a17c:	dc35      	bgt.n	800a1ea <_printf_float+0x3ae>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a186:	f104 0a1a 	add.w	sl, r4, #26
 800a18a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a18e:	1a9b      	subs	r3, r3, r2
 800a190:	eba3 0309 	sub.w	r3, r3, r9
 800a194:	4543      	cmp	r3, r8
 800a196:	f77f af79 	ble.w	800a08c <_printf_float+0x250>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4652      	mov	r2, sl
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f43f aeaa 	beq.w	8009efe <_printf_float+0xc2>
 800a1aa:	f108 0801 	add.w	r8, r8, #1
 800a1ae:	e7ec      	b.n	800a18a <_printf_float+0x34e>
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d1c0      	bne.n	800a140 <_printf_float+0x304>
 800a1be:	e69e      	b.n	8009efe <_printf_float+0xc2>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	9205      	str	r2, [sp, #20]
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f43f ae97 	beq.w	8009efe <_printf_float+0xc2>
 800a1d0:	9a05      	ldr	r2, [sp, #20]
 800a1d2:	f10b 0b01 	add.w	fp, fp, #1
 800a1d6:	e7b9      	b.n	800a14c <_printf_float+0x310>
 800a1d8:	ee18 3a10 	vmov	r3, s16
 800a1dc:	4652      	mov	r2, sl
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d1be      	bne.n	800a166 <_printf_float+0x32a>
 800a1e8:	e689      	b.n	8009efe <_printf_float+0xc2>
 800a1ea:	9a05      	ldr	r2, [sp, #20]
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	4442      	add	r2, r8
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d1c1      	bne.n	800a17e <_printf_float+0x342>
 800a1fa:	e680      	b.n	8009efe <_printf_float+0xc2>
 800a1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1fe:	2a01      	cmp	r2, #1
 800a200:	dc01      	bgt.n	800a206 <_printf_float+0x3ca>
 800a202:	07db      	lsls	r3, r3, #31
 800a204:	d538      	bpl.n	800a278 <_printf_float+0x43c>
 800a206:	2301      	movs	r3, #1
 800a208:	4642      	mov	r2, r8
 800a20a:	4631      	mov	r1, r6
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b8      	blx	r7
 800a210:	3001      	adds	r0, #1
 800a212:	f43f ae74 	beq.w	8009efe <_printf_float+0xc2>
 800a216:	ee18 3a10 	vmov	r3, s16
 800a21a:	4652      	mov	r2, sl
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f ae6b 	beq.w	8009efe <_printf_float+0xc2>
 800a228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a22c:	2200      	movs	r2, #0
 800a22e:	2300      	movs	r3, #0
 800a230:	f7f6 fc62 	bl	8000af8 <__aeabi_dcmpeq>
 800a234:	b9d8      	cbnz	r0, 800a26e <_printf_float+0x432>
 800a236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a238:	f108 0201 	add.w	r2, r8, #1
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	d10e      	bne.n	800a266 <_printf_float+0x42a>
 800a248:	e659      	b.n	8009efe <_printf_float+0xc2>
 800a24a:	2301      	movs	r3, #1
 800a24c:	4652      	mov	r2, sl
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	f43f ae52 	beq.w	8009efe <_printf_float+0xc2>
 800a25a:	f108 0801 	add.w	r8, r8, #1
 800a25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a260:	3b01      	subs	r3, #1
 800a262:	4543      	cmp	r3, r8
 800a264:	dcf1      	bgt.n	800a24a <_printf_float+0x40e>
 800a266:	464b      	mov	r3, r9
 800a268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a26c:	e6dc      	b.n	800a028 <_printf_float+0x1ec>
 800a26e:	f04f 0800 	mov.w	r8, #0
 800a272:	f104 0a1a 	add.w	sl, r4, #26
 800a276:	e7f2      	b.n	800a25e <_printf_float+0x422>
 800a278:	2301      	movs	r3, #1
 800a27a:	4642      	mov	r2, r8
 800a27c:	e7df      	b.n	800a23e <_printf_float+0x402>
 800a27e:	2301      	movs	r3, #1
 800a280:	464a      	mov	r2, r9
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f ae38 	beq.w	8009efe <_printf_float+0xc2>
 800a28e:	f108 0801 	add.w	r8, r8, #1
 800a292:	68e3      	ldr	r3, [r4, #12]
 800a294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a296:	1a5b      	subs	r3, r3, r1
 800a298:	4543      	cmp	r3, r8
 800a29a:	dcf0      	bgt.n	800a27e <_printf_float+0x442>
 800a29c:	e6fa      	b.n	800a094 <_printf_float+0x258>
 800a29e:	f04f 0800 	mov.w	r8, #0
 800a2a2:	f104 0919 	add.w	r9, r4, #25
 800a2a6:	e7f4      	b.n	800a292 <_printf_float+0x456>

0800a2a8 <_printf_common>:
 800a2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ac:	4616      	mov	r6, r2
 800a2ae:	4699      	mov	r9, r3
 800a2b0:	688a      	ldr	r2, [r1, #8]
 800a2b2:	690b      	ldr	r3, [r1, #16]
 800a2b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	bfb8      	it	lt
 800a2bc:	4613      	movlt	r3, r2
 800a2be:	6033      	str	r3, [r6, #0]
 800a2c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	b10a      	cbz	r2, 800a2ce <_printf_common+0x26>
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	6033      	str	r3, [r6, #0]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	0699      	lsls	r1, r3, #26
 800a2d2:	bf42      	ittt	mi
 800a2d4:	6833      	ldrmi	r3, [r6, #0]
 800a2d6:	3302      	addmi	r3, #2
 800a2d8:	6033      	strmi	r3, [r6, #0]
 800a2da:	6825      	ldr	r5, [r4, #0]
 800a2dc:	f015 0506 	ands.w	r5, r5, #6
 800a2e0:	d106      	bne.n	800a2f0 <_printf_common+0x48>
 800a2e2:	f104 0a19 	add.w	sl, r4, #25
 800a2e6:	68e3      	ldr	r3, [r4, #12]
 800a2e8:	6832      	ldr	r2, [r6, #0]
 800a2ea:	1a9b      	subs	r3, r3, r2
 800a2ec:	42ab      	cmp	r3, r5
 800a2ee:	dc26      	bgt.n	800a33e <_printf_common+0x96>
 800a2f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2f4:	1e13      	subs	r3, r2, #0
 800a2f6:	6822      	ldr	r2, [r4, #0]
 800a2f8:	bf18      	it	ne
 800a2fa:	2301      	movne	r3, #1
 800a2fc:	0692      	lsls	r2, r2, #26
 800a2fe:	d42b      	bmi.n	800a358 <_printf_common+0xb0>
 800a300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a304:	4649      	mov	r1, r9
 800a306:	4638      	mov	r0, r7
 800a308:	47c0      	blx	r8
 800a30a:	3001      	adds	r0, #1
 800a30c:	d01e      	beq.n	800a34c <_printf_common+0xa4>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	68e5      	ldr	r5, [r4, #12]
 800a312:	6832      	ldr	r2, [r6, #0]
 800a314:	f003 0306 	and.w	r3, r3, #6
 800a318:	2b04      	cmp	r3, #4
 800a31a:	bf08      	it	eq
 800a31c:	1aad      	subeq	r5, r5, r2
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	6922      	ldr	r2, [r4, #16]
 800a322:	bf0c      	ite	eq
 800a324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a328:	2500      	movne	r5, #0
 800a32a:	4293      	cmp	r3, r2
 800a32c:	bfc4      	itt	gt
 800a32e:	1a9b      	subgt	r3, r3, r2
 800a330:	18ed      	addgt	r5, r5, r3
 800a332:	2600      	movs	r6, #0
 800a334:	341a      	adds	r4, #26
 800a336:	42b5      	cmp	r5, r6
 800a338:	d11a      	bne.n	800a370 <_printf_common+0xc8>
 800a33a:	2000      	movs	r0, #0
 800a33c:	e008      	b.n	800a350 <_printf_common+0xa8>
 800a33e:	2301      	movs	r3, #1
 800a340:	4652      	mov	r2, sl
 800a342:	4649      	mov	r1, r9
 800a344:	4638      	mov	r0, r7
 800a346:	47c0      	blx	r8
 800a348:	3001      	adds	r0, #1
 800a34a:	d103      	bne.n	800a354 <_printf_common+0xac>
 800a34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a354:	3501      	adds	r5, #1
 800a356:	e7c6      	b.n	800a2e6 <_printf_common+0x3e>
 800a358:	18e1      	adds	r1, r4, r3
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	2030      	movs	r0, #48	; 0x30
 800a35e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a362:	4422      	add	r2, r4
 800a364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a36c:	3302      	adds	r3, #2
 800a36e:	e7c7      	b.n	800a300 <_printf_common+0x58>
 800a370:	2301      	movs	r3, #1
 800a372:	4622      	mov	r2, r4
 800a374:	4649      	mov	r1, r9
 800a376:	4638      	mov	r0, r7
 800a378:	47c0      	blx	r8
 800a37a:	3001      	adds	r0, #1
 800a37c:	d0e6      	beq.n	800a34c <_printf_common+0xa4>
 800a37e:	3601      	adds	r6, #1
 800a380:	e7d9      	b.n	800a336 <_printf_common+0x8e>
	...

0800a384 <_printf_i>:
 800a384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	7e0f      	ldrb	r7, [r1, #24]
 800a38a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a38c:	2f78      	cmp	r7, #120	; 0x78
 800a38e:	4691      	mov	r9, r2
 800a390:	4680      	mov	r8, r0
 800a392:	460c      	mov	r4, r1
 800a394:	469a      	mov	sl, r3
 800a396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a39a:	d807      	bhi.n	800a3ac <_printf_i+0x28>
 800a39c:	2f62      	cmp	r7, #98	; 0x62
 800a39e:	d80a      	bhi.n	800a3b6 <_printf_i+0x32>
 800a3a0:	2f00      	cmp	r7, #0
 800a3a2:	f000 80d8 	beq.w	800a556 <_printf_i+0x1d2>
 800a3a6:	2f58      	cmp	r7, #88	; 0x58
 800a3a8:	f000 80a3 	beq.w	800a4f2 <_printf_i+0x16e>
 800a3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3b4:	e03a      	b.n	800a42c <_printf_i+0xa8>
 800a3b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ba:	2b15      	cmp	r3, #21
 800a3bc:	d8f6      	bhi.n	800a3ac <_printf_i+0x28>
 800a3be:	a101      	add	r1, pc, #4	; (adr r1, 800a3c4 <_printf_i+0x40>)
 800a3c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3c4:	0800a41d 	.word	0x0800a41d
 800a3c8:	0800a431 	.word	0x0800a431
 800a3cc:	0800a3ad 	.word	0x0800a3ad
 800a3d0:	0800a3ad 	.word	0x0800a3ad
 800a3d4:	0800a3ad 	.word	0x0800a3ad
 800a3d8:	0800a3ad 	.word	0x0800a3ad
 800a3dc:	0800a431 	.word	0x0800a431
 800a3e0:	0800a3ad 	.word	0x0800a3ad
 800a3e4:	0800a3ad 	.word	0x0800a3ad
 800a3e8:	0800a3ad 	.word	0x0800a3ad
 800a3ec:	0800a3ad 	.word	0x0800a3ad
 800a3f0:	0800a53d 	.word	0x0800a53d
 800a3f4:	0800a461 	.word	0x0800a461
 800a3f8:	0800a51f 	.word	0x0800a51f
 800a3fc:	0800a3ad 	.word	0x0800a3ad
 800a400:	0800a3ad 	.word	0x0800a3ad
 800a404:	0800a55f 	.word	0x0800a55f
 800a408:	0800a3ad 	.word	0x0800a3ad
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a3ad 	.word	0x0800a3ad
 800a414:	0800a3ad 	.word	0x0800a3ad
 800a418:	0800a527 	.word	0x0800a527
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	602a      	str	r2, [r5, #0]
 800a424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0a3      	b.n	800a578 <_printf_i+0x1f4>
 800a430:	6820      	ldr	r0, [r4, #0]
 800a432:	6829      	ldr	r1, [r5, #0]
 800a434:	0606      	lsls	r6, r0, #24
 800a436:	f101 0304 	add.w	r3, r1, #4
 800a43a:	d50a      	bpl.n	800a452 <_printf_i+0xce>
 800a43c:	680e      	ldr	r6, [r1, #0]
 800a43e:	602b      	str	r3, [r5, #0]
 800a440:	2e00      	cmp	r6, #0
 800a442:	da03      	bge.n	800a44c <_printf_i+0xc8>
 800a444:	232d      	movs	r3, #45	; 0x2d
 800a446:	4276      	negs	r6, r6
 800a448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a44c:	485e      	ldr	r0, [pc, #376]	; (800a5c8 <_printf_i+0x244>)
 800a44e:	230a      	movs	r3, #10
 800a450:	e019      	b.n	800a486 <_printf_i+0x102>
 800a452:	680e      	ldr	r6, [r1, #0]
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a45a:	bf18      	it	ne
 800a45c:	b236      	sxthne	r6, r6
 800a45e:	e7ef      	b.n	800a440 <_printf_i+0xbc>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	1d19      	adds	r1, r3, #4
 800a466:	6029      	str	r1, [r5, #0]
 800a468:	0601      	lsls	r1, r0, #24
 800a46a:	d501      	bpl.n	800a470 <_printf_i+0xec>
 800a46c:	681e      	ldr	r6, [r3, #0]
 800a46e:	e002      	b.n	800a476 <_printf_i+0xf2>
 800a470:	0646      	lsls	r6, r0, #25
 800a472:	d5fb      	bpl.n	800a46c <_printf_i+0xe8>
 800a474:	881e      	ldrh	r6, [r3, #0]
 800a476:	4854      	ldr	r0, [pc, #336]	; (800a5c8 <_printf_i+0x244>)
 800a478:	2f6f      	cmp	r7, #111	; 0x6f
 800a47a:	bf0c      	ite	eq
 800a47c:	2308      	moveq	r3, #8
 800a47e:	230a      	movne	r3, #10
 800a480:	2100      	movs	r1, #0
 800a482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a486:	6865      	ldr	r5, [r4, #4]
 800a488:	60a5      	str	r5, [r4, #8]
 800a48a:	2d00      	cmp	r5, #0
 800a48c:	bfa2      	ittt	ge
 800a48e:	6821      	ldrge	r1, [r4, #0]
 800a490:	f021 0104 	bicge.w	r1, r1, #4
 800a494:	6021      	strge	r1, [r4, #0]
 800a496:	b90e      	cbnz	r6, 800a49c <_printf_i+0x118>
 800a498:	2d00      	cmp	r5, #0
 800a49a:	d04d      	beq.n	800a538 <_printf_i+0x1b4>
 800a49c:	4615      	mov	r5, r2
 800a49e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a4a6:	5dc7      	ldrb	r7, [r0, r7]
 800a4a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4ac:	4637      	mov	r7, r6
 800a4ae:	42bb      	cmp	r3, r7
 800a4b0:	460e      	mov	r6, r1
 800a4b2:	d9f4      	bls.n	800a49e <_printf_i+0x11a>
 800a4b4:	2b08      	cmp	r3, #8
 800a4b6:	d10b      	bne.n	800a4d0 <_printf_i+0x14c>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	07de      	lsls	r6, r3, #31
 800a4bc:	d508      	bpl.n	800a4d0 <_printf_i+0x14c>
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	4299      	cmp	r1, r3
 800a4c4:	bfde      	ittt	le
 800a4c6:	2330      	movle	r3, #48	; 0x30
 800a4c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4d0:	1b52      	subs	r2, r2, r5
 800a4d2:	6122      	str	r2, [r4, #16]
 800a4d4:	f8cd a000 	str.w	sl, [sp]
 800a4d8:	464b      	mov	r3, r9
 800a4da:	aa03      	add	r2, sp, #12
 800a4dc:	4621      	mov	r1, r4
 800a4de:	4640      	mov	r0, r8
 800a4e0:	f7ff fee2 	bl	800a2a8 <_printf_common>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d14c      	bne.n	800a582 <_printf_i+0x1fe>
 800a4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4ec:	b004      	add	sp, #16
 800a4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f2:	4835      	ldr	r0, [pc, #212]	; (800a5c8 <_printf_i+0x244>)
 800a4f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a500:	6029      	str	r1, [r5, #0]
 800a502:	061d      	lsls	r5, r3, #24
 800a504:	d514      	bpl.n	800a530 <_printf_i+0x1ac>
 800a506:	07df      	lsls	r7, r3, #31
 800a508:	bf44      	itt	mi
 800a50a:	f043 0320 	orrmi.w	r3, r3, #32
 800a50e:	6023      	strmi	r3, [r4, #0]
 800a510:	b91e      	cbnz	r6, 800a51a <_printf_i+0x196>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f023 0320 	bic.w	r3, r3, #32
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	2310      	movs	r3, #16
 800a51c:	e7b0      	b.n	800a480 <_printf_i+0xfc>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	f043 0320 	orr.w	r3, r3, #32
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	2378      	movs	r3, #120	; 0x78
 800a528:	4828      	ldr	r0, [pc, #160]	; (800a5cc <_printf_i+0x248>)
 800a52a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a52e:	e7e3      	b.n	800a4f8 <_printf_i+0x174>
 800a530:	0659      	lsls	r1, r3, #25
 800a532:	bf48      	it	mi
 800a534:	b2b6      	uxthmi	r6, r6
 800a536:	e7e6      	b.n	800a506 <_printf_i+0x182>
 800a538:	4615      	mov	r5, r2
 800a53a:	e7bb      	b.n	800a4b4 <_printf_i+0x130>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	6826      	ldr	r6, [r4, #0]
 800a540:	6961      	ldr	r1, [r4, #20]
 800a542:	1d18      	adds	r0, r3, #4
 800a544:	6028      	str	r0, [r5, #0]
 800a546:	0635      	lsls	r5, r6, #24
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	d501      	bpl.n	800a550 <_printf_i+0x1cc>
 800a54c:	6019      	str	r1, [r3, #0]
 800a54e:	e002      	b.n	800a556 <_printf_i+0x1d2>
 800a550:	0670      	lsls	r0, r6, #25
 800a552:	d5fb      	bpl.n	800a54c <_printf_i+0x1c8>
 800a554:	8019      	strh	r1, [r3, #0]
 800a556:	2300      	movs	r3, #0
 800a558:	6123      	str	r3, [r4, #16]
 800a55a:	4615      	mov	r5, r2
 800a55c:	e7ba      	b.n	800a4d4 <_printf_i+0x150>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	1d1a      	adds	r2, r3, #4
 800a562:	602a      	str	r2, [r5, #0]
 800a564:	681d      	ldr	r5, [r3, #0]
 800a566:	6862      	ldr	r2, [r4, #4]
 800a568:	2100      	movs	r1, #0
 800a56a:	4628      	mov	r0, r5
 800a56c:	f7f5 fe50 	bl	8000210 <memchr>
 800a570:	b108      	cbz	r0, 800a576 <_printf_i+0x1f2>
 800a572:	1b40      	subs	r0, r0, r5
 800a574:	6060      	str	r0, [r4, #4]
 800a576:	6863      	ldr	r3, [r4, #4]
 800a578:	6123      	str	r3, [r4, #16]
 800a57a:	2300      	movs	r3, #0
 800a57c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a580:	e7a8      	b.n	800a4d4 <_printf_i+0x150>
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	462a      	mov	r2, r5
 800a586:	4649      	mov	r1, r9
 800a588:	4640      	mov	r0, r8
 800a58a:	47d0      	blx	sl
 800a58c:	3001      	adds	r0, #1
 800a58e:	d0ab      	beq.n	800a4e8 <_printf_i+0x164>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	079b      	lsls	r3, r3, #30
 800a594:	d413      	bmi.n	800a5be <_printf_i+0x23a>
 800a596:	68e0      	ldr	r0, [r4, #12]
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	4298      	cmp	r0, r3
 800a59c:	bfb8      	it	lt
 800a59e:	4618      	movlt	r0, r3
 800a5a0:	e7a4      	b.n	800a4ec <_printf_i+0x168>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	47d0      	blx	sl
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d09b      	beq.n	800a4e8 <_printf_i+0x164>
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	68e3      	ldr	r3, [r4, #12]
 800a5b4:	9903      	ldr	r1, [sp, #12]
 800a5b6:	1a5b      	subs	r3, r3, r1
 800a5b8:	42ab      	cmp	r3, r5
 800a5ba:	dcf2      	bgt.n	800a5a2 <_printf_i+0x21e>
 800a5bc:	e7eb      	b.n	800a596 <_printf_i+0x212>
 800a5be:	2500      	movs	r5, #0
 800a5c0:	f104 0619 	add.w	r6, r4, #25
 800a5c4:	e7f5      	b.n	800a5b2 <_printf_i+0x22e>
 800a5c6:	bf00      	nop
 800a5c8:	0800fcaa 	.word	0x0800fcaa
 800a5cc:	0800fcbb 	.word	0x0800fcbb

0800a5d0 <_sbrk_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d06      	ldr	r5, [pc, #24]	; (800a5ec <_sbrk_r+0x1c>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f7 f95e 	bl	800189c <_sbrk>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_sbrk_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_sbrk_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20003ad0 	.word	0x20003ad0

0800a5f0 <strncmp>:
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	b17a      	cbz	r2, 800a614 <strncmp+0x24>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	3901      	subs	r1, #1
 800a5f8:	1884      	adds	r4, r0, r2
 800a5fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a602:	4290      	cmp	r0, r2
 800a604:	d101      	bne.n	800a60a <strncmp+0x1a>
 800a606:	42a3      	cmp	r3, r4
 800a608:	d101      	bne.n	800a60e <strncmp+0x1e>
 800a60a:	1a80      	subs	r0, r0, r2
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1f3      	bne.n	800a5fa <strncmp+0xa>
 800a612:	e7fa      	b.n	800a60a <strncmp+0x1a>
 800a614:	4610      	mov	r0, r2
 800a616:	e7f9      	b.n	800a60c <strncmp+0x1c>

0800a618 <quorem>:
 800a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	6903      	ldr	r3, [r0, #16]
 800a61e:	690c      	ldr	r4, [r1, #16]
 800a620:	42a3      	cmp	r3, r4
 800a622:	4607      	mov	r7, r0
 800a624:	f2c0 8081 	blt.w	800a72a <quorem+0x112>
 800a628:	3c01      	subs	r4, #1
 800a62a:	f101 0814 	add.w	r8, r1, #20
 800a62e:	f100 0514 	add.w	r5, r0, #20
 800a632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a63c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a640:	3301      	adds	r3, #1
 800a642:	429a      	cmp	r2, r3
 800a644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a64c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a650:	d331      	bcc.n	800a6b6 <quorem+0x9e>
 800a652:	f04f 0e00 	mov.w	lr, #0
 800a656:	4640      	mov	r0, r8
 800a658:	46ac      	mov	ip, r5
 800a65a:	46f2      	mov	sl, lr
 800a65c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a660:	b293      	uxth	r3, r2
 800a662:	fb06 e303 	mla	r3, r6, r3, lr
 800a666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ebaa 0303 	sub.w	r3, sl, r3
 800a670:	f8dc a000 	ldr.w	sl, [ip]
 800a674:	0c12      	lsrs	r2, r2, #16
 800a676:	fa13 f38a 	uxtah	r3, r3, sl
 800a67a:	fb06 e202 	mla	r2, r6, r2, lr
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a686:	b292      	uxth	r2, r2
 800a688:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	f8bd 3000 	ldrh.w	r3, [sp]
 800a694:	4581      	cmp	r9, r0
 800a696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a69a:	f84c 3b04 	str.w	r3, [ip], #4
 800a69e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6a2:	d2db      	bcs.n	800a65c <quorem+0x44>
 800a6a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6a8:	b92b      	cbnz	r3, 800a6b6 <quorem+0x9e>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	d32e      	bcc.n	800a712 <quorem+0xfa>
 800a6b4:	613c      	str	r4, [r7, #16]
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f001 f8ba 	bl	800b830 <__mcmp>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	db24      	blt.n	800a70a <quorem+0xf2>
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f04f 0c00 	mov.w	ip, #0
 800a6c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a6d0:	b293      	uxth	r3, r2
 800a6d2:	ebac 0303 	sub.w	r3, ip, r3
 800a6d6:	0c12      	lsrs	r2, r2, #16
 800a6d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a6dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ea:	45c1      	cmp	r9, r8
 800a6ec:	f840 3b04 	str.w	r3, [r0], #4
 800a6f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6f4:	d2e8      	bcs.n	800a6c8 <quorem+0xb0>
 800a6f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6fe:	b922      	cbnz	r2, 800a70a <quorem+0xf2>
 800a700:	3b04      	subs	r3, #4
 800a702:	429d      	cmp	r5, r3
 800a704:	461a      	mov	r2, r3
 800a706:	d30a      	bcc.n	800a71e <quorem+0x106>
 800a708:	613c      	str	r4, [r7, #16]
 800a70a:	4630      	mov	r0, r6
 800a70c:	b003      	add	sp, #12
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	6812      	ldr	r2, [r2, #0]
 800a714:	3b04      	subs	r3, #4
 800a716:	2a00      	cmp	r2, #0
 800a718:	d1cc      	bne.n	800a6b4 <quorem+0x9c>
 800a71a:	3c01      	subs	r4, #1
 800a71c:	e7c7      	b.n	800a6ae <quorem+0x96>
 800a71e:	6812      	ldr	r2, [r2, #0]
 800a720:	3b04      	subs	r3, #4
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1f0      	bne.n	800a708 <quorem+0xf0>
 800a726:	3c01      	subs	r4, #1
 800a728:	e7eb      	b.n	800a702 <quorem+0xea>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e7ee      	b.n	800a70c <quorem+0xf4>
	...

0800a730 <_dtoa_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	ed2d 8b04 	vpush	{d8-d9}
 800a738:	ec57 6b10 	vmov	r6, r7, d0
 800a73c:	b093      	sub	sp, #76	; 0x4c
 800a73e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a744:	9106      	str	r1, [sp, #24]
 800a746:	ee10 aa10 	vmov	sl, s0
 800a74a:	4604      	mov	r4, r0
 800a74c:	9209      	str	r2, [sp, #36]	; 0x24
 800a74e:	930c      	str	r3, [sp, #48]	; 0x30
 800a750:	46bb      	mov	fp, r7
 800a752:	b975      	cbnz	r5, 800a772 <_dtoa_r+0x42>
 800a754:	2010      	movs	r0, #16
 800a756:	f7f9 fd19 	bl	800418c <__wrap_malloc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6260      	str	r0, [r4, #36]	; 0x24
 800a75e:	b920      	cbnz	r0, 800a76a <_dtoa_r+0x3a>
 800a760:	4ba7      	ldr	r3, [pc, #668]	; (800aa00 <_dtoa_r+0x2d0>)
 800a762:	21ea      	movs	r1, #234	; 0xea
 800a764:	48a7      	ldr	r0, [pc, #668]	; (800aa04 <_dtoa_r+0x2d4>)
 800a766:	f001 f97b 	bl	800ba60 <__assert_func>
 800a76a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a76e:	6005      	str	r5, [r0, #0]
 800a770:	60c5      	str	r5, [r0, #12]
 800a772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a774:	6819      	ldr	r1, [r3, #0]
 800a776:	b151      	cbz	r1, 800a78e <_dtoa_r+0x5e>
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	604a      	str	r2, [r1, #4]
 800a77c:	2301      	movs	r3, #1
 800a77e:	4093      	lsls	r3, r2
 800a780:	608b      	str	r3, [r1, #8]
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fe12 	bl	800b3ac <_Bfree>
 800a788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	1e3b      	subs	r3, r7, #0
 800a790:	bfaa      	itet	ge
 800a792:	2300      	movge	r3, #0
 800a794:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a798:	f8c8 3000 	strge.w	r3, [r8]
 800a79c:	4b9a      	ldr	r3, [pc, #616]	; (800aa08 <_dtoa_r+0x2d8>)
 800a79e:	bfbc      	itt	lt
 800a7a0:	2201      	movlt	r2, #1
 800a7a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a7a6:	ea33 030b 	bics.w	r3, r3, fp
 800a7aa:	d11b      	bne.n	800a7e4 <_dtoa_r+0xb4>
 800a7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7b8:	4333      	orrs	r3, r6
 800a7ba:	f000 8592 	beq.w	800b2e2 <_dtoa_r+0xbb2>
 800a7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c0:	b963      	cbnz	r3, 800a7dc <_dtoa_r+0xac>
 800a7c2:	4b92      	ldr	r3, [pc, #584]	; (800aa0c <_dtoa_r+0x2dc>)
 800a7c4:	e022      	b.n	800a80c <_dtoa_r+0xdc>
 800a7c6:	4b92      	ldr	r3, [pc, #584]	; (800aa10 <_dtoa_r+0x2e0>)
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	b013      	add	sp, #76	; 0x4c
 800a7d4:	ecbd 8b04 	vpop	{d8-d9}
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	4b8b      	ldr	r3, [pc, #556]	; (800aa0c <_dtoa_r+0x2dc>)
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	e7f3      	b.n	800a7cc <_dtoa_r+0x9c>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	4659      	mov	r1, fp
 800a7ec:	f7f6 f984 	bl	8000af8 <__aeabi_dcmpeq>
 800a7f0:	ec4b ab19 	vmov	d9, sl, fp
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	b158      	cbz	r0, 800a810 <_dtoa_r+0xe0>
 800a7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 856b 	beq.w	800b2dc <_dtoa_r+0xbac>
 800a806:	4883      	ldr	r0, [pc, #524]	; (800aa14 <_dtoa_r+0x2e4>)
 800a808:	6018      	str	r0, [r3, #0]
 800a80a:	1e43      	subs	r3, r0, #1
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	e7df      	b.n	800a7d0 <_dtoa_r+0xa0>
 800a810:	ec4b ab10 	vmov	d0, sl, fp
 800a814:	aa10      	add	r2, sp, #64	; 0x40
 800a816:	a911      	add	r1, sp, #68	; 0x44
 800a818:	4620      	mov	r0, r4
 800a81a:	f001 f8af 	bl	800b97c <__d2b>
 800a81e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a822:	ee08 0a10 	vmov	s16, r0
 800a826:	2d00      	cmp	r5, #0
 800a828:	f000 8084 	beq.w	800a934 <_dtoa_r+0x204>
 800a82c:	ee19 3a90 	vmov	r3, s19
 800a830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a834:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a838:	4656      	mov	r6, sl
 800a83a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a842:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a846:	4b74      	ldr	r3, [pc, #464]	; (800aa18 <_dtoa_r+0x2e8>)
 800a848:	2200      	movs	r2, #0
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fd33 	bl	80002b8 <__aeabi_dsub>
 800a852:	a365      	add	r3, pc, #404	; (adr r3, 800a9e8 <_dtoa_r+0x2b8>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 fee6 	bl	8000628 <__aeabi_dmul>
 800a85c:	a364      	add	r3, pc, #400	; (adr r3, 800a9f0 <_dtoa_r+0x2c0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fd2b 	bl	80002bc <__adddf3>
 800a866:	4606      	mov	r6, r0
 800a868:	4628      	mov	r0, r5
 800a86a:	460f      	mov	r7, r1
 800a86c:	f7f5 fe72 	bl	8000554 <__aeabi_i2d>
 800a870:	a361      	add	r3, pc, #388	; (adr r3, 800a9f8 <_dtoa_r+0x2c8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fed7 	bl	8000628 <__aeabi_dmul>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 fd1b 	bl	80002bc <__adddf3>
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	f7f6 f97d 	bl	8000b88 <__aeabi_d2iz>
 800a88e:	2200      	movs	r2, #0
 800a890:	9000      	str	r0, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	f7f6 f938 	bl	8000b0c <__aeabi_dcmplt>
 800a89c:	b150      	cbz	r0, 800a8b4 <_dtoa_r+0x184>
 800a89e:	9800      	ldr	r0, [sp, #0]
 800a8a0:	f7f5 fe58 	bl	8000554 <__aeabi_i2d>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	f7f6 f926 	bl	8000af8 <__aeabi_dcmpeq>
 800a8ac:	b910      	cbnz	r0, 800a8b4 <_dtoa_r+0x184>
 800a8ae:	9b00      	ldr	r3, [sp, #0]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	2b16      	cmp	r3, #22
 800a8b8:	d85a      	bhi.n	800a970 <_dtoa_r+0x240>
 800a8ba:	9a00      	ldr	r2, [sp, #0]
 800a8bc:	4b57      	ldr	r3, [pc, #348]	; (800aa1c <_dtoa_r+0x2ec>)
 800a8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	ec51 0b19 	vmov	r0, r1, d9
 800a8ca:	f7f6 f91f 	bl	8000b0c <__aeabi_dcmplt>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d050      	beq.n	800a974 <_dtoa_r+0x244>
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	1b5d      	subs	r5, r3, r5
 800a8e0:	1e6b      	subs	r3, r5, #1
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	bf45      	ittet	mi
 800a8e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a8ea:	9304      	strmi	r3, [sp, #16]
 800a8ec:	2300      	movpl	r3, #0
 800a8ee:	2300      	movmi	r3, #0
 800a8f0:	bf4c      	ite	mi
 800a8f2:	9305      	strmi	r3, [sp, #20]
 800a8f4:	9304      	strpl	r3, [sp, #16]
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	db3d      	blt.n	800a978 <_dtoa_r+0x248>
 800a8fc:	9b05      	ldr	r3, [sp, #20]
 800a8fe:	9a00      	ldr	r2, [sp, #0]
 800a900:	920a      	str	r2, [sp, #40]	; 0x28
 800a902:	4413      	add	r3, r2
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9307      	str	r3, [sp, #28]
 800a90a:	9b06      	ldr	r3, [sp, #24]
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	f200 8089 	bhi.w	800aa24 <_dtoa_r+0x2f4>
 800a912:	2b05      	cmp	r3, #5
 800a914:	bfc4      	itt	gt
 800a916:	3b04      	subgt	r3, #4
 800a918:	9306      	strgt	r3, [sp, #24]
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	f1a3 0302 	sub.w	r3, r3, #2
 800a920:	bfcc      	ite	gt
 800a922:	2500      	movgt	r5, #0
 800a924:	2501      	movle	r5, #1
 800a926:	2b03      	cmp	r3, #3
 800a928:	f200 8087 	bhi.w	800aa3a <_dtoa_r+0x30a>
 800a92c:	e8df f003 	tbb	[pc, r3]
 800a930:	59383a2d 	.word	0x59383a2d
 800a934:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a938:	441d      	add	r5, r3
 800a93a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a93e:	2b20      	cmp	r3, #32
 800a940:	bfc1      	itttt	gt
 800a942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a946:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a94a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a94e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a952:	bfda      	itte	le
 800a954:	f1c3 0320 	rsble	r3, r3, #32
 800a958:	fa06 f003 	lslle.w	r0, r6, r3
 800a95c:	4318      	orrgt	r0, r3
 800a95e:	f7f5 fde9 	bl	8000534 <__aeabi_ui2d>
 800a962:	2301      	movs	r3, #1
 800a964:	4606      	mov	r6, r0
 800a966:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a96a:	3d01      	subs	r5, #1
 800a96c:	930e      	str	r3, [sp, #56]	; 0x38
 800a96e:	e76a      	b.n	800a846 <_dtoa_r+0x116>
 800a970:	2301      	movs	r3, #1
 800a972:	e7b2      	b.n	800a8da <_dtoa_r+0x1aa>
 800a974:	900b      	str	r0, [sp, #44]	; 0x2c
 800a976:	e7b1      	b.n	800a8dc <_dtoa_r+0x1ac>
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	9a00      	ldr	r2, [sp, #0]
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	4253      	negs	r3, r2
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	2300      	movs	r3, #0
 800a986:	930a      	str	r3, [sp, #40]	; 0x28
 800a988:	e7bf      	b.n	800a90a <_dtoa_r+0x1da>
 800a98a:	2300      	movs	r3, #0
 800a98c:	9308      	str	r3, [sp, #32]
 800a98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	dc55      	bgt.n	800aa40 <_dtoa_r+0x310>
 800a994:	2301      	movs	r3, #1
 800a996:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a99a:	461a      	mov	r2, r3
 800a99c:	9209      	str	r2, [sp, #36]	; 0x24
 800a99e:	e00c      	b.n	800a9ba <_dtoa_r+0x28a>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7f3      	b.n	800a98c <_dtoa_r+0x25c>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a8:	9308      	str	r3, [sp, #32]
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	9303      	str	r3, [sp, #12]
 800a9b6:	bfb8      	it	lt
 800a9b8:	2301      	movlt	r3, #1
 800a9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9bc:	2200      	movs	r2, #0
 800a9be:	6042      	str	r2, [r0, #4]
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	f102 0614 	add.w	r6, r2, #20
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	6841      	ldr	r1, [r0, #4]
 800a9ca:	d93d      	bls.n	800aa48 <_dtoa_r+0x318>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fcad 	bl	800b32c <_Balloc>
 800a9d2:	9001      	str	r0, [sp, #4]
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d13b      	bne.n	800aa50 <_dtoa_r+0x320>
 800a9d8:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <_dtoa_r+0x2f0>)
 800a9da:	4602      	mov	r2, r0
 800a9dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9e0:	e6c0      	b.n	800a764 <_dtoa_r+0x34>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e7df      	b.n	800a9a6 <_dtoa_r+0x276>
 800a9e6:	bf00      	nop
 800a9e8:	636f4361 	.word	0x636f4361
 800a9ec:	3fd287a7 	.word	0x3fd287a7
 800a9f0:	8b60c8b3 	.word	0x8b60c8b3
 800a9f4:	3fc68a28 	.word	0x3fc68a28
 800a9f8:	509f79fb 	.word	0x509f79fb
 800a9fc:	3fd34413 	.word	0x3fd34413
 800aa00:	0800fcd9 	.word	0x0800fcd9
 800aa04:	0800fcf0 	.word	0x0800fcf0
 800aa08:	7ff00000 	.word	0x7ff00000
 800aa0c:	0800fcd5 	.word	0x0800fcd5
 800aa10:	0800fccc 	.word	0x0800fccc
 800aa14:	0800fca9 	.word	0x0800fca9
 800aa18:	3ff80000 	.word	0x3ff80000
 800aa1c:	0800fde0 	.word	0x0800fde0
 800aa20:	0800fd4b 	.word	0x0800fd4b
 800aa24:	2501      	movs	r5, #1
 800aa26:	2300      	movs	r3, #0
 800aa28:	9306      	str	r3, [sp, #24]
 800aa2a:	9508      	str	r5, [sp, #32]
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2312      	movs	r3, #18
 800aa38:	e7b0      	b.n	800a99c <_dtoa_r+0x26c>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	9308      	str	r3, [sp, #32]
 800aa3e:	e7f5      	b.n	800aa2c <_dtoa_r+0x2fc>
 800aa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa46:	e7b8      	b.n	800a9ba <_dtoa_r+0x28a>
 800aa48:	3101      	adds	r1, #1
 800aa4a:	6041      	str	r1, [r0, #4]
 800aa4c:	0052      	lsls	r2, r2, #1
 800aa4e:	e7b8      	b.n	800a9c2 <_dtoa_r+0x292>
 800aa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	2b0e      	cmp	r3, #14
 800aa5a:	f200 809d 	bhi.w	800ab98 <_dtoa_r+0x468>
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	f000 809a 	beq.w	800ab98 <_dtoa_r+0x468>
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd32      	ble.n	800aad0 <_dtoa_r+0x3a0>
 800aa6a:	4ab7      	ldr	r2, [pc, #732]	; (800ad48 <_dtoa_r+0x618>)
 800aa6c:	f003 030f 	and.w	r3, r3, #15
 800aa70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa78:	9b00      	ldr	r3, [sp, #0]
 800aa7a:	05d8      	lsls	r0, r3, #23
 800aa7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa80:	d516      	bpl.n	800aab0 <_dtoa_r+0x380>
 800aa82:	4bb2      	ldr	r3, [pc, #712]	; (800ad4c <_dtoa_r+0x61c>)
 800aa84:	ec51 0b19 	vmov	r0, r1, d9
 800aa88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa8c:	f7f5 fef6 	bl	800087c <__aeabi_ddiv>
 800aa90:	f007 070f 	and.w	r7, r7, #15
 800aa94:	4682      	mov	sl, r0
 800aa96:	468b      	mov	fp, r1
 800aa98:	2503      	movs	r5, #3
 800aa9a:	4eac      	ldr	r6, [pc, #688]	; (800ad4c <_dtoa_r+0x61c>)
 800aa9c:	b957      	cbnz	r7, 800aab4 <_dtoa_r+0x384>
 800aa9e:	4642      	mov	r2, r8
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	f7f5 fee9 	bl	800087c <__aeabi_ddiv>
 800aaaa:	4682      	mov	sl, r0
 800aaac:	468b      	mov	fp, r1
 800aaae:	e028      	b.n	800ab02 <_dtoa_r+0x3d2>
 800aab0:	2502      	movs	r5, #2
 800aab2:	e7f2      	b.n	800aa9a <_dtoa_r+0x36a>
 800aab4:	07f9      	lsls	r1, r7, #31
 800aab6:	d508      	bpl.n	800aaca <_dtoa_r+0x39a>
 800aab8:	4640      	mov	r0, r8
 800aaba:	4649      	mov	r1, r9
 800aabc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aac0:	f7f5 fdb2 	bl	8000628 <__aeabi_dmul>
 800aac4:	3501      	adds	r5, #1
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	107f      	asrs	r7, r7, #1
 800aacc:	3608      	adds	r6, #8
 800aace:	e7e5      	b.n	800aa9c <_dtoa_r+0x36c>
 800aad0:	f000 809b 	beq.w	800ac0a <_dtoa_r+0x4da>
 800aad4:	9b00      	ldr	r3, [sp, #0]
 800aad6:	4f9d      	ldr	r7, [pc, #628]	; (800ad4c <_dtoa_r+0x61c>)
 800aad8:	425e      	negs	r6, r3
 800aada:	4b9b      	ldr	r3, [pc, #620]	; (800ad48 <_dtoa_r+0x618>)
 800aadc:	f006 020f 	and.w	r2, r6, #15
 800aae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	ec51 0b19 	vmov	r0, r1, d9
 800aaec:	f7f5 fd9c 	bl	8000628 <__aeabi_dmul>
 800aaf0:	1136      	asrs	r6, r6, #4
 800aaf2:	4682      	mov	sl, r0
 800aaf4:	468b      	mov	fp, r1
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	2502      	movs	r5, #2
 800aafa:	2e00      	cmp	r6, #0
 800aafc:	d17a      	bne.n	800abf4 <_dtoa_r+0x4c4>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1d3      	bne.n	800aaaa <_dtoa_r+0x37a>
 800ab02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8082 	beq.w	800ac0e <_dtoa_r+0x4de>
 800ab0a:	4b91      	ldr	r3, [pc, #580]	; (800ad50 <_dtoa_r+0x620>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 fffb 	bl	8000b0c <__aeabi_dcmplt>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d079      	beq.n	800ac0e <_dtoa_r+0x4de>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d076      	beq.n	800ac0e <_dtoa_r+0x4de>
 800ab20:	9b02      	ldr	r3, [sp, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd36      	ble.n	800ab94 <_dtoa_r+0x464>
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	4650      	mov	r0, sl
 800ab2a:	4659      	mov	r1, fp
 800ab2c:	1e5f      	subs	r7, r3, #1
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4b88      	ldr	r3, [pc, #544]	; (800ad54 <_dtoa_r+0x624>)
 800ab32:	f7f5 fd79 	bl	8000628 <__aeabi_dmul>
 800ab36:	9e02      	ldr	r6, [sp, #8]
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f7f5 fd08 	bl	8000554 <__aeabi_i2d>
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 fd6e 	bl	8000628 <__aeabi_dmul>
 800ab4c:	4b82      	ldr	r3, [pc, #520]	; (800ad58 <_dtoa_r+0x628>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f7f5 fbb4 	bl	80002bc <__adddf3>
 800ab54:	46d0      	mov	r8, sl
 800ab56:	46d9      	mov	r9, fp
 800ab58:	4682      	mov	sl, r0
 800ab5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d158      	bne.n	800ac14 <_dtoa_r+0x4e4>
 800ab62:	4b7e      	ldr	r3, [pc, #504]	; (800ad5c <_dtoa_r+0x62c>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f5 fba5 	bl	80002b8 <__aeabi_dsub>
 800ab6e:	4652      	mov	r2, sl
 800ab70:	465b      	mov	r3, fp
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	f7f5 ffe7 	bl	8000b48 <__aeabi_dcmpgt>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f040 8295 	bne.w	800b0aa <_dtoa_r+0x97a>
 800ab80:	4652      	mov	r2, sl
 800ab82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 ffbf 	bl	8000b0c <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f040 8289 	bne.w	800b0a6 <_dtoa_r+0x976>
 800ab94:	ec5b ab19 	vmov	sl, fp, d9
 800ab98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f2c0 8148 	blt.w	800ae30 <_dtoa_r+0x700>
 800aba0:	9a00      	ldr	r2, [sp, #0]
 800aba2:	2a0e      	cmp	r2, #14
 800aba4:	f300 8144 	bgt.w	800ae30 <_dtoa_r+0x700>
 800aba8:	4b67      	ldr	r3, [pc, #412]	; (800ad48 <_dtoa_r+0x618>)
 800abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f280 80d5 	bge.w	800ad64 <_dtoa_r+0x634>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f300 80d1 	bgt.w	800ad64 <_dtoa_r+0x634>
 800abc2:	f040 826f 	bne.w	800b0a4 <_dtoa_r+0x974>
 800abc6:	4b65      	ldr	r3, [pc, #404]	; (800ad5c <_dtoa_r+0x62c>)
 800abc8:	2200      	movs	r2, #0
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 fd2b 	bl	8000628 <__aeabi_dmul>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	f7f5 ffad 	bl	8000b34 <__aeabi_dcmpge>
 800abda:	9e03      	ldr	r6, [sp, #12]
 800abdc:	4637      	mov	r7, r6
 800abde:	2800      	cmp	r0, #0
 800abe0:	f040 8245 	bne.w	800b06e <_dtoa_r+0x93e>
 800abe4:	9d01      	ldr	r5, [sp, #4]
 800abe6:	2331      	movs	r3, #49	; 0x31
 800abe8:	f805 3b01 	strb.w	r3, [r5], #1
 800abec:	9b00      	ldr	r3, [sp, #0]
 800abee:	3301      	adds	r3, #1
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	e240      	b.n	800b076 <_dtoa_r+0x946>
 800abf4:	07f2      	lsls	r2, r6, #31
 800abf6:	d505      	bpl.n	800ac04 <_dtoa_r+0x4d4>
 800abf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfc:	f7f5 fd14 	bl	8000628 <__aeabi_dmul>
 800ac00:	3501      	adds	r5, #1
 800ac02:	2301      	movs	r3, #1
 800ac04:	1076      	asrs	r6, r6, #1
 800ac06:	3708      	adds	r7, #8
 800ac08:	e777      	b.n	800aafa <_dtoa_r+0x3ca>
 800ac0a:	2502      	movs	r5, #2
 800ac0c:	e779      	b.n	800ab02 <_dtoa_r+0x3d2>
 800ac0e:	9f00      	ldr	r7, [sp, #0]
 800ac10:	9e03      	ldr	r6, [sp, #12]
 800ac12:	e794      	b.n	800ab3e <_dtoa_r+0x40e>
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	4b4c      	ldr	r3, [pc, #304]	; (800ad48 <_dtoa_r+0x618>)
 800ac18:	4431      	add	r1, r6
 800ac1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ac1c:	9908      	ldr	r1, [sp, #32]
 800ac1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d043      	beq.n	800acb2 <_dtoa_r+0x582>
 800ac2a:	494d      	ldr	r1, [pc, #308]	; (800ad60 <_dtoa_r+0x630>)
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f7f5 fe25 	bl	800087c <__aeabi_ddiv>
 800ac32:	4652      	mov	r2, sl
 800ac34:	465b      	mov	r3, fp
 800ac36:	f7f5 fb3f 	bl	80002b8 <__aeabi_dsub>
 800ac3a:	9d01      	ldr	r5, [sp, #4]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	468b      	mov	fp, r1
 800ac40:	4649      	mov	r1, r9
 800ac42:	4640      	mov	r0, r8
 800ac44:	f7f5 ffa0 	bl	8000b88 <__aeabi_d2iz>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	f7f5 fc83 	bl	8000554 <__aeabi_i2d>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fb2f 	bl	80002b8 <__aeabi_dsub>
 800ac5a:	3630      	adds	r6, #48	; 0x30
 800ac5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	4680      	mov	r8, r0
 800ac66:	4689      	mov	r9, r1
 800ac68:	f7f5 ff50 	bl	8000b0c <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d163      	bne.n	800ad38 <_dtoa_r+0x608>
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	4936      	ldr	r1, [pc, #216]	; (800ad50 <_dtoa_r+0x620>)
 800ac76:	2000      	movs	r0, #0
 800ac78:	f7f5 fb1e 	bl	80002b8 <__aeabi_dsub>
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	465b      	mov	r3, fp
 800ac80:	f7f5 ff44 	bl	8000b0c <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	f040 80b5 	bne.w	800adf4 <_dtoa_r+0x6c4>
 800ac8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	d081      	beq.n	800ab94 <_dtoa_r+0x464>
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <_dtoa_r+0x624>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	4650      	mov	r0, sl
 800ac96:	4659      	mov	r1, fp
 800ac98:	f7f5 fcc6 	bl	8000628 <__aeabi_dmul>
 800ac9c:	4b2d      	ldr	r3, [pc, #180]	; (800ad54 <_dtoa_r+0x624>)
 800ac9e:	4682      	mov	sl, r0
 800aca0:	468b      	mov	fp, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	2200      	movs	r2, #0
 800aca8:	f7f5 fcbe 	bl	8000628 <__aeabi_dmul>
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	e7c6      	b.n	800ac40 <_dtoa_r+0x510>
 800acb2:	4650      	mov	r0, sl
 800acb4:	4659      	mov	r1, fp
 800acb6:	f7f5 fcb7 	bl	8000628 <__aeabi_dmul>
 800acba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acbc:	9d01      	ldr	r5, [sp, #4]
 800acbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	4649      	mov	r1, r9
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7f5 ff5e 	bl	8000b88 <__aeabi_d2iz>
 800accc:	4606      	mov	r6, r0
 800acce:	f7f5 fc41 	bl	8000554 <__aeabi_i2d>
 800acd2:	3630      	adds	r6, #48	; 0x30
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4640      	mov	r0, r8
 800acda:	4649      	mov	r1, r9
 800acdc:	f7f5 faec 	bl	80002b8 <__aeabi_dsub>
 800ace0:	f805 6b01 	strb.w	r6, [r5], #1
 800ace4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace6:	429d      	cmp	r5, r3
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	d124      	bne.n	800ad3c <_dtoa_r+0x60c>
 800acf2:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <_dtoa_r+0x630>)
 800acf4:	4650      	mov	r0, sl
 800acf6:	4659      	mov	r1, fp
 800acf8:	f7f5 fae0 	bl	80002bc <__adddf3>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 ff20 	bl	8000b48 <__aeabi_dcmpgt>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d173      	bne.n	800adf4 <_dtoa_r+0x6c4>
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	465b      	mov	r3, fp
 800ad10:	4913      	ldr	r1, [pc, #76]	; (800ad60 <_dtoa_r+0x630>)
 800ad12:	2000      	movs	r0, #0
 800ad14:	f7f5 fad0 	bl	80002b8 <__aeabi_dsub>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 fef4 	bl	8000b0c <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f43f af35 	beq.w	800ab94 <_dtoa_r+0x464>
 800ad2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad2c:	1e6b      	subs	r3, r5, #1
 800ad2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad34:	2b30      	cmp	r3, #48	; 0x30
 800ad36:	d0f8      	beq.n	800ad2a <_dtoa_r+0x5fa>
 800ad38:	9700      	str	r7, [sp, #0]
 800ad3a:	e049      	b.n	800add0 <_dtoa_r+0x6a0>
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <_dtoa_r+0x624>)
 800ad3e:	f7f5 fc73 	bl	8000628 <__aeabi_dmul>
 800ad42:	4680      	mov	r8, r0
 800ad44:	4689      	mov	r9, r1
 800ad46:	e7bd      	b.n	800acc4 <_dtoa_r+0x594>
 800ad48:	0800fde0 	.word	0x0800fde0
 800ad4c:	0800fdb8 	.word	0x0800fdb8
 800ad50:	3ff00000 	.word	0x3ff00000
 800ad54:	40240000 	.word	0x40240000
 800ad58:	401c0000 	.word	0x401c0000
 800ad5c:	40140000 	.word	0x40140000
 800ad60:	3fe00000 	.word	0x3fe00000
 800ad64:	9d01      	ldr	r5, [sp, #4]
 800ad66:	4656      	mov	r6, sl
 800ad68:	465f      	mov	r7, fp
 800ad6a:	4642      	mov	r2, r8
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f7f5 fd83 	bl	800087c <__aeabi_ddiv>
 800ad76:	f7f5 ff07 	bl	8000b88 <__aeabi_d2iz>
 800ad7a:	4682      	mov	sl, r0
 800ad7c:	f7f5 fbea 	bl	8000554 <__aeabi_i2d>
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	f7f5 fc50 	bl	8000628 <__aeabi_dmul>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4639      	mov	r1, r7
 800ad90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad94:	f7f5 fa90 	bl	80002b8 <__aeabi_dsub>
 800ad98:	f805 6b01 	strb.w	r6, [r5], #1
 800ad9c:	9e01      	ldr	r6, [sp, #4]
 800ad9e:	9f03      	ldr	r7, [sp, #12]
 800ada0:	1bae      	subs	r6, r5, r6
 800ada2:	42b7      	cmp	r7, r6
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	d135      	bne.n	800ae16 <_dtoa_r+0x6e6>
 800adaa:	f7f5 fa87 	bl	80002bc <__adddf3>
 800adae:	4642      	mov	r2, r8
 800adb0:	464b      	mov	r3, r9
 800adb2:	4606      	mov	r6, r0
 800adb4:	460f      	mov	r7, r1
 800adb6:	f7f5 fec7 	bl	8000b48 <__aeabi_dcmpgt>
 800adba:	b9d0      	cbnz	r0, 800adf2 <_dtoa_r+0x6c2>
 800adbc:	4642      	mov	r2, r8
 800adbe:	464b      	mov	r3, r9
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 fe98 	bl	8000af8 <__aeabi_dcmpeq>
 800adc8:	b110      	cbz	r0, 800add0 <_dtoa_r+0x6a0>
 800adca:	f01a 0f01 	tst.w	sl, #1
 800adce:	d110      	bne.n	800adf2 <_dtoa_r+0x6c2>
 800add0:	4620      	mov	r0, r4
 800add2:	ee18 1a10 	vmov	r1, s16
 800add6:	f000 fae9 	bl	800b3ac <_Bfree>
 800adda:	2300      	movs	r3, #0
 800addc:	9800      	ldr	r0, [sp, #0]
 800adde:	702b      	strb	r3, [r5, #0]
 800ade0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade2:	3001      	adds	r0, #1
 800ade4:	6018      	str	r0, [r3, #0]
 800ade6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f43f acf1 	beq.w	800a7d0 <_dtoa_r+0xa0>
 800adee:	601d      	str	r5, [r3, #0]
 800adf0:	e4ee      	b.n	800a7d0 <_dtoa_r+0xa0>
 800adf2:	9f00      	ldr	r7, [sp, #0]
 800adf4:	462b      	mov	r3, r5
 800adf6:	461d      	mov	r5, r3
 800adf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adfc:	2a39      	cmp	r2, #57	; 0x39
 800adfe:	d106      	bne.n	800ae0e <_dtoa_r+0x6de>
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d1f7      	bne.n	800adf6 <_dtoa_r+0x6c6>
 800ae06:	9901      	ldr	r1, [sp, #4]
 800ae08:	2230      	movs	r2, #48	; 0x30
 800ae0a:	3701      	adds	r7, #1
 800ae0c:	700a      	strb	r2, [r1, #0]
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	3201      	adds	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e790      	b.n	800ad38 <_dtoa_r+0x608>
 800ae16:	4ba6      	ldr	r3, [pc, #664]	; (800b0b0 <_dtoa_r+0x980>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f7f5 fc05 	bl	8000628 <__aeabi_dmul>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2300      	movs	r3, #0
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	f7f5 fe67 	bl	8000af8 <__aeabi_dcmpeq>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d09d      	beq.n	800ad6a <_dtoa_r+0x63a>
 800ae2e:	e7cf      	b.n	800add0 <_dtoa_r+0x6a0>
 800ae30:	9a08      	ldr	r2, [sp, #32]
 800ae32:	2a00      	cmp	r2, #0
 800ae34:	f000 80d7 	beq.w	800afe6 <_dtoa_r+0x8b6>
 800ae38:	9a06      	ldr	r2, [sp, #24]
 800ae3a:	2a01      	cmp	r2, #1
 800ae3c:	f300 80ba 	bgt.w	800afb4 <_dtoa_r+0x884>
 800ae40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	f000 80b2 	beq.w	800afac <_dtoa_r+0x87c>
 800ae48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae4c:	9e07      	ldr	r6, [sp, #28]
 800ae4e:	9d04      	ldr	r5, [sp, #16]
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	441a      	add	r2, r3
 800ae54:	9204      	str	r2, [sp, #16]
 800ae56:	9a05      	ldr	r2, [sp, #20]
 800ae58:	2101      	movs	r1, #1
 800ae5a:	441a      	add	r2, r3
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	9205      	str	r2, [sp, #20]
 800ae60:	f000 fb5c 	bl	800b51c <__i2b>
 800ae64:	4607      	mov	r7, r0
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	dd0c      	ble.n	800ae84 <_dtoa_r+0x754>
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dd09      	ble.n	800ae84 <_dtoa_r+0x754>
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	9a04      	ldr	r2, [sp, #16]
 800ae74:	bfa8      	it	ge
 800ae76:	462b      	movge	r3, r5
 800ae78:	1ad2      	subs	r2, r2, r3
 800ae7a:	9204      	str	r2, [sp, #16]
 800ae7c:	9a05      	ldr	r2, [sp, #20]
 800ae7e:	1aed      	subs	r5, r5, r3
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	9305      	str	r3, [sp, #20]
 800ae84:	9b07      	ldr	r3, [sp, #28]
 800ae86:	b31b      	cbz	r3, 800aed0 <_dtoa_r+0x7a0>
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80af 	beq.w	800afee <_dtoa_r+0x8be>
 800ae90:	2e00      	cmp	r6, #0
 800ae92:	dd13      	ble.n	800aebc <_dtoa_r+0x78c>
 800ae94:	4639      	mov	r1, r7
 800ae96:	4632      	mov	r2, r6
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fbff 	bl	800b69c <__pow5mult>
 800ae9e:	ee18 2a10 	vmov	r2, s16
 800aea2:	4601      	mov	r1, r0
 800aea4:	4607      	mov	r7, r0
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 fb4e 	bl	800b548 <__multiply>
 800aeac:	ee18 1a10 	vmov	r1, s16
 800aeb0:	4680      	mov	r8, r0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fa7a 	bl	800b3ac <_Bfree>
 800aeb8:	ee08 8a10 	vmov	s16, r8
 800aebc:	9b07      	ldr	r3, [sp, #28]
 800aebe:	1b9a      	subs	r2, r3, r6
 800aec0:	d006      	beq.n	800aed0 <_dtoa_r+0x7a0>
 800aec2:	ee18 1a10 	vmov	r1, s16
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fbe8 	bl	800b69c <__pow5mult>
 800aecc:	ee08 0a10 	vmov	s16, r0
 800aed0:	2101      	movs	r1, #1
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 fb22 	bl	800b51c <__i2b>
 800aed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	f340 8088 	ble.w	800aff2 <_dtoa_r+0x8c2>
 800aee2:	461a      	mov	r2, r3
 800aee4:	4601      	mov	r1, r0
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 fbd8 	bl	800b69c <__pow5mult>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	4606      	mov	r6, r0
 800aef2:	f340 8081 	ble.w	800aff8 <_dtoa_r+0x8c8>
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	6933      	ldr	r3, [r6, #16]
 800aefc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af00:	6918      	ldr	r0, [r3, #16]
 800af02:	f000 fabb 	bl	800b47c <__hi0bits>
 800af06:	f1c0 0020 	rsb	r0, r0, #32
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	4418      	add	r0, r3
 800af0e:	f010 001f 	ands.w	r0, r0, #31
 800af12:	f000 8092 	beq.w	800b03a <_dtoa_r+0x90a>
 800af16:	f1c0 0320 	rsb	r3, r0, #32
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	f340 808a 	ble.w	800b034 <_dtoa_r+0x904>
 800af20:	f1c0 001c 	rsb	r0, r0, #28
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	4403      	add	r3, r0
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	9b05      	ldr	r3, [sp, #20]
 800af2c:	4403      	add	r3, r0
 800af2e:	4405      	add	r5, r0
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd07      	ble.n	800af48 <_dtoa_r+0x818>
 800af38:	ee18 1a10 	vmov	r1, s16
 800af3c:	461a      	mov	r2, r3
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fc06 	bl	800b750 <__lshift>
 800af44:	ee08 0a10 	vmov	s16, r0
 800af48:	9b05      	ldr	r3, [sp, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd05      	ble.n	800af5a <_dtoa_r+0x82a>
 800af4e:	4631      	mov	r1, r6
 800af50:	461a      	mov	r2, r3
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fbfc 	bl	800b750 <__lshift>
 800af58:	4606      	mov	r6, r0
 800af5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d06e      	beq.n	800b03e <_dtoa_r+0x90e>
 800af60:	ee18 0a10 	vmov	r0, s16
 800af64:	4631      	mov	r1, r6
 800af66:	f000 fc63 	bl	800b830 <__mcmp>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	da67      	bge.n	800b03e <_dtoa_r+0x90e>
 800af6e:	9b00      	ldr	r3, [sp, #0]
 800af70:	3b01      	subs	r3, #1
 800af72:	ee18 1a10 	vmov	r1, s16
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	220a      	movs	r2, #10
 800af7a:	2300      	movs	r3, #0
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 fa37 	bl	800b3f0 <__multadd>
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	ee08 0a10 	vmov	s16, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 81b1 	beq.w	800b2f0 <_dtoa_r+0xbc0>
 800af8e:	2300      	movs	r3, #0
 800af90:	4639      	mov	r1, r7
 800af92:	220a      	movs	r2, #10
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fa2b 	bl	800b3f0 <__multadd>
 800af9a:	9b02      	ldr	r3, [sp, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	4607      	mov	r7, r0
 800afa0:	f300 808e 	bgt.w	800b0c0 <_dtoa_r+0x990>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc51      	bgt.n	800b04e <_dtoa_r+0x91e>
 800afaa:	e089      	b.n	800b0c0 <_dtoa_r+0x990>
 800afac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afb2:	e74b      	b.n	800ae4c <_dtoa_r+0x71c>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	1e5e      	subs	r6, r3, #1
 800afb8:	9b07      	ldr	r3, [sp, #28]
 800afba:	42b3      	cmp	r3, r6
 800afbc:	bfbf      	itttt	lt
 800afbe:	9b07      	ldrlt	r3, [sp, #28]
 800afc0:	9607      	strlt	r6, [sp, #28]
 800afc2:	1af2      	sublt	r2, r6, r3
 800afc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afc6:	bfb6      	itet	lt
 800afc8:	189b      	addlt	r3, r3, r2
 800afca:	1b9e      	subge	r6, r3, r6
 800afcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	bfb8      	it	lt
 800afd2:	2600      	movlt	r6, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb7      	itett	lt
 800afd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800afdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800afe0:	1a9d      	sublt	r5, r3, r2
 800afe2:	2300      	movlt	r3, #0
 800afe4:	e734      	b.n	800ae50 <_dtoa_r+0x720>
 800afe6:	9e07      	ldr	r6, [sp, #28]
 800afe8:	9d04      	ldr	r5, [sp, #16]
 800afea:	9f08      	ldr	r7, [sp, #32]
 800afec:	e73b      	b.n	800ae66 <_dtoa_r+0x736>
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	e767      	b.n	800aec2 <_dtoa_r+0x792>
 800aff2:	9b06      	ldr	r3, [sp, #24]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	dc18      	bgt.n	800b02a <_dtoa_r+0x8fa>
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	d115      	bne.n	800b02a <_dtoa_r+0x8fa>
 800affe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b002:	b993      	cbnz	r3, 800b02a <_dtoa_r+0x8fa>
 800b004:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b008:	0d1b      	lsrs	r3, r3, #20
 800b00a:	051b      	lsls	r3, r3, #20
 800b00c:	b183      	cbz	r3, 800b030 <_dtoa_r+0x900>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	3301      	adds	r3, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	9b05      	ldr	r3, [sp, #20]
 800b016:	3301      	adds	r3, #1
 800b018:	9305      	str	r3, [sp, #20]
 800b01a:	f04f 0801 	mov.w	r8, #1
 800b01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b020:	2b00      	cmp	r3, #0
 800b022:	f47f af6a 	bne.w	800aefa <_dtoa_r+0x7ca>
 800b026:	2001      	movs	r0, #1
 800b028:	e76f      	b.n	800af0a <_dtoa_r+0x7da>
 800b02a:	f04f 0800 	mov.w	r8, #0
 800b02e:	e7f6      	b.n	800b01e <_dtoa_r+0x8ee>
 800b030:	4698      	mov	r8, r3
 800b032:	e7f4      	b.n	800b01e <_dtoa_r+0x8ee>
 800b034:	f43f af7d 	beq.w	800af32 <_dtoa_r+0x802>
 800b038:	4618      	mov	r0, r3
 800b03a:	301c      	adds	r0, #28
 800b03c:	e772      	b.n	800af24 <_dtoa_r+0x7f4>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	dc37      	bgt.n	800b0b4 <_dtoa_r+0x984>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	2b02      	cmp	r3, #2
 800b048:	dd34      	ble.n	800b0b4 <_dtoa_r+0x984>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	9302      	str	r3, [sp, #8]
 800b04e:	9b02      	ldr	r3, [sp, #8]
 800b050:	b96b      	cbnz	r3, 800b06e <_dtoa_r+0x93e>
 800b052:	4631      	mov	r1, r6
 800b054:	2205      	movs	r2, #5
 800b056:	4620      	mov	r0, r4
 800b058:	f000 f9ca 	bl	800b3f0 <__multadd>
 800b05c:	4601      	mov	r1, r0
 800b05e:	4606      	mov	r6, r0
 800b060:	ee18 0a10 	vmov	r0, s16
 800b064:	f000 fbe4 	bl	800b830 <__mcmp>
 800b068:	2800      	cmp	r0, #0
 800b06a:	f73f adbb 	bgt.w	800abe4 <_dtoa_r+0x4b4>
 800b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b070:	9d01      	ldr	r5, [sp, #4]
 800b072:	43db      	mvns	r3, r3
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	4631      	mov	r1, r6
 800b07c:	4620      	mov	r0, r4
 800b07e:	f000 f995 	bl	800b3ac <_Bfree>
 800b082:	2f00      	cmp	r7, #0
 800b084:	f43f aea4 	beq.w	800add0 <_dtoa_r+0x6a0>
 800b088:	f1b8 0f00 	cmp.w	r8, #0
 800b08c:	d005      	beq.n	800b09a <_dtoa_r+0x96a>
 800b08e:	45b8      	cmp	r8, r7
 800b090:	d003      	beq.n	800b09a <_dtoa_r+0x96a>
 800b092:	4641      	mov	r1, r8
 800b094:	4620      	mov	r0, r4
 800b096:	f000 f989 	bl	800b3ac <_Bfree>
 800b09a:	4639      	mov	r1, r7
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 f985 	bl	800b3ac <_Bfree>
 800b0a2:	e695      	b.n	800add0 <_dtoa_r+0x6a0>
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	4637      	mov	r7, r6
 800b0a8:	e7e1      	b.n	800b06e <_dtoa_r+0x93e>
 800b0aa:	9700      	str	r7, [sp, #0]
 800b0ac:	4637      	mov	r7, r6
 800b0ae:	e599      	b.n	800abe4 <_dtoa_r+0x4b4>
 800b0b0:	40240000 	.word	0x40240000
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 80ca 	beq.w	800b250 <_dtoa_r+0xb20>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	9302      	str	r3, [sp, #8]
 800b0c0:	2d00      	cmp	r5, #0
 800b0c2:	dd05      	ble.n	800b0d0 <_dtoa_r+0x9a0>
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 fb41 	bl	800b750 <__lshift>
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	f1b8 0f00 	cmp.w	r8, #0
 800b0d4:	d05b      	beq.n	800b18e <_dtoa_r+0xa5e>
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 f927 	bl	800b32c <_Balloc>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	b928      	cbnz	r0, 800b0ee <_dtoa_r+0x9be>
 800b0e2:	4b87      	ldr	r3, [pc, #540]	; (800b300 <_dtoa_r+0xbd0>)
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0ea:	f7ff bb3b 	b.w	800a764 <_dtoa_r+0x34>
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	3202      	adds	r2, #2
 800b0f2:	0092      	lsls	r2, r2, #2
 800b0f4:	f107 010c 	add.w	r1, r7, #12
 800b0f8:	300c      	adds	r0, #12
 800b0fa:	f7fe fd09 	bl	8009b10 <memcpy>
 800b0fe:	2201      	movs	r2, #1
 800b100:	4629      	mov	r1, r5
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fb24 	bl	800b750 <__lshift>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	f103 0901 	add.w	r9, r3, #1
 800b10e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b112:	4413      	add	r3, r2
 800b114:	9305      	str	r3, [sp, #20]
 800b116:	f00a 0301 	and.w	r3, sl, #1
 800b11a:	46b8      	mov	r8, r7
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	4607      	mov	r7, r0
 800b120:	4631      	mov	r1, r6
 800b122:	ee18 0a10 	vmov	r0, s16
 800b126:	f7ff fa77 	bl	800a618 <quorem>
 800b12a:	4641      	mov	r1, r8
 800b12c:	9002      	str	r0, [sp, #8]
 800b12e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b132:	ee18 0a10 	vmov	r0, s16
 800b136:	f000 fb7b 	bl	800b830 <__mcmp>
 800b13a:	463a      	mov	r2, r7
 800b13c:	9003      	str	r0, [sp, #12]
 800b13e:	4631      	mov	r1, r6
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fb91 	bl	800b868 <__mdiff>
 800b146:	68c2      	ldr	r2, [r0, #12]
 800b148:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b14c:	4605      	mov	r5, r0
 800b14e:	bb02      	cbnz	r2, 800b192 <_dtoa_r+0xa62>
 800b150:	4601      	mov	r1, r0
 800b152:	ee18 0a10 	vmov	r0, s16
 800b156:	f000 fb6b 	bl	800b830 <__mcmp>
 800b15a:	4602      	mov	r2, r0
 800b15c:	4629      	mov	r1, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	9207      	str	r2, [sp, #28]
 800b162:	f000 f923 	bl	800b3ac <_Bfree>
 800b166:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b16a:	ea43 0102 	orr.w	r1, r3, r2
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	430b      	orrs	r3, r1
 800b172:	464d      	mov	r5, r9
 800b174:	d10f      	bne.n	800b196 <_dtoa_r+0xa66>
 800b176:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b17a:	d02a      	beq.n	800b1d2 <_dtoa_r+0xaa2>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd02      	ble.n	800b188 <_dtoa_r+0xa58>
 800b182:	9b02      	ldr	r3, [sp, #8]
 800b184:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b188:	f88b a000 	strb.w	sl, [fp]
 800b18c:	e775      	b.n	800b07a <_dtoa_r+0x94a>
 800b18e:	4638      	mov	r0, r7
 800b190:	e7ba      	b.n	800b108 <_dtoa_r+0x9d8>
 800b192:	2201      	movs	r2, #1
 800b194:	e7e2      	b.n	800b15c <_dtoa_r+0xa2c>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	db04      	blt.n	800b1a6 <_dtoa_r+0xa76>
 800b19c:	9906      	ldr	r1, [sp, #24]
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	9904      	ldr	r1, [sp, #16]
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	d122      	bne.n	800b1ec <_dtoa_r+0xabc>
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	ddee      	ble.n	800b188 <_dtoa_r+0xa58>
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 facd 	bl	800b750 <__lshift>
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	ee08 0a10 	vmov	s16, r0
 800b1bc:	f000 fb38 	bl	800b830 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	dc03      	bgt.n	800b1cc <_dtoa_r+0xa9c>
 800b1c4:	d1e0      	bne.n	800b188 <_dtoa_r+0xa58>
 800b1c6:	f01a 0f01 	tst.w	sl, #1
 800b1ca:	d0dd      	beq.n	800b188 <_dtoa_r+0xa58>
 800b1cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1d0:	d1d7      	bne.n	800b182 <_dtoa_r+0xa52>
 800b1d2:	2339      	movs	r3, #57	; 0x39
 800b1d4:	f88b 3000 	strb.w	r3, [fp]
 800b1d8:	462b      	mov	r3, r5
 800b1da:	461d      	mov	r5, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1e2:	2a39      	cmp	r2, #57	; 0x39
 800b1e4:	d071      	beq.n	800b2ca <_dtoa_r+0xb9a>
 800b1e6:	3201      	adds	r2, #1
 800b1e8:	701a      	strb	r2, [r3, #0]
 800b1ea:	e746      	b.n	800b07a <_dtoa_r+0x94a>
 800b1ec:	2a00      	cmp	r2, #0
 800b1ee:	dd07      	ble.n	800b200 <_dtoa_r+0xad0>
 800b1f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1f4:	d0ed      	beq.n	800b1d2 <_dtoa_r+0xaa2>
 800b1f6:	f10a 0301 	add.w	r3, sl, #1
 800b1fa:	f88b 3000 	strb.w	r3, [fp]
 800b1fe:	e73c      	b.n	800b07a <_dtoa_r+0x94a>
 800b200:	9b05      	ldr	r3, [sp, #20]
 800b202:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b206:	4599      	cmp	r9, r3
 800b208:	d047      	beq.n	800b29a <_dtoa_r+0xb6a>
 800b20a:	ee18 1a10 	vmov	r1, s16
 800b20e:	2300      	movs	r3, #0
 800b210:	220a      	movs	r2, #10
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f8ec 	bl	800b3f0 <__multadd>
 800b218:	45b8      	cmp	r8, r7
 800b21a:	ee08 0a10 	vmov	s16, r0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	f04f 020a 	mov.w	r2, #10
 800b226:	4641      	mov	r1, r8
 800b228:	4620      	mov	r0, r4
 800b22a:	d106      	bne.n	800b23a <_dtoa_r+0xb0a>
 800b22c:	f000 f8e0 	bl	800b3f0 <__multadd>
 800b230:	4680      	mov	r8, r0
 800b232:	4607      	mov	r7, r0
 800b234:	f109 0901 	add.w	r9, r9, #1
 800b238:	e772      	b.n	800b120 <_dtoa_r+0x9f0>
 800b23a:	f000 f8d9 	bl	800b3f0 <__multadd>
 800b23e:	4639      	mov	r1, r7
 800b240:	4680      	mov	r8, r0
 800b242:	2300      	movs	r3, #0
 800b244:	220a      	movs	r2, #10
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f8d2 	bl	800b3f0 <__multadd>
 800b24c:	4607      	mov	r7, r0
 800b24e:	e7f1      	b.n	800b234 <_dtoa_r+0xb04>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	9d01      	ldr	r5, [sp, #4]
 800b256:	ee18 0a10 	vmov	r0, s16
 800b25a:	4631      	mov	r1, r6
 800b25c:	f7ff f9dc 	bl	800a618 <quorem>
 800b260:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	f805 ab01 	strb.w	sl, [r5], #1
 800b26a:	1aea      	subs	r2, r5, r3
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	4293      	cmp	r3, r2
 800b270:	dd09      	ble.n	800b286 <_dtoa_r+0xb56>
 800b272:	ee18 1a10 	vmov	r1, s16
 800b276:	2300      	movs	r3, #0
 800b278:	220a      	movs	r2, #10
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 f8b8 	bl	800b3f0 <__multadd>
 800b280:	ee08 0a10 	vmov	s16, r0
 800b284:	e7e7      	b.n	800b256 <_dtoa_r+0xb26>
 800b286:	9b02      	ldr	r3, [sp, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bfc8      	it	gt
 800b28c:	461d      	movgt	r5, r3
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	bfd8      	it	le
 800b292:	2501      	movle	r5, #1
 800b294:	441d      	add	r5, r3
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fa55 	bl	800b750 <__lshift>
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	ee08 0a10 	vmov	s16, r0
 800b2ac:	f000 fac0 	bl	800b830 <__mcmp>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dc91      	bgt.n	800b1d8 <_dtoa_r+0xaa8>
 800b2b4:	d102      	bne.n	800b2bc <_dtoa_r+0xb8c>
 800b2b6:	f01a 0f01 	tst.w	sl, #1
 800b2ba:	d18d      	bne.n	800b1d8 <_dtoa_r+0xaa8>
 800b2bc:	462b      	mov	r3, r5
 800b2be:	461d      	mov	r5, r3
 800b2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2c4:	2a30      	cmp	r2, #48	; 0x30
 800b2c6:	d0fa      	beq.n	800b2be <_dtoa_r+0xb8e>
 800b2c8:	e6d7      	b.n	800b07a <_dtoa_r+0x94a>
 800b2ca:	9a01      	ldr	r2, [sp, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d184      	bne.n	800b1da <_dtoa_r+0xaaa>
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2331      	movs	r3, #49	; 0x31
 800b2d8:	7013      	strb	r3, [r2, #0]
 800b2da:	e6ce      	b.n	800b07a <_dtoa_r+0x94a>
 800b2dc:	4b09      	ldr	r3, [pc, #36]	; (800b304 <_dtoa_r+0xbd4>)
 800b2de:	f7ff ba95 	b.w	800a80c <_dtoa_r+0xdc>
 800b2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f47f aa6e 	bne.w	800a7c6 <_dtoa_r+0x96>
 800b2ea:	4b07      	ldr	r3, [pc, #28]	; (800b308 <_dtoa_r+0xbd8>)
 800b2ec:	f7ff ba8e 	b.w	800a80c <_dtoa_r+0xdc>
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dcae      	bgt.n	800b254 <_dtoa_r+0xb24>
 800b2f6:	9b06      	ldr	r3, [sp, #24]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	f73f aea8 	bgt.w	800b04e <_dtoa_r+0x91e>
 800b2fe:	e7a9      	b.n	800b254 <_dtoa_r+0xb24>
 800b300:	0800fd4b 	.word	0x0800fd4b
 800b304:	0800fca8 	.word	0x0800fca8
 800b308:	0800fccc 	.word	0x0800fccc

0800b30c <_localeconv_r>:
 800b30c:	4800      	ldr	r0, [pc, #0]	; (800b310 <_localeconv_r+0x4>)
 800b30e:	4770      	bx	lr
 800b310:	200006d0 	.word	0x200006d0

0800b314 <__malloc_lock>:
 800b314:	4801      	ldr	r0, [pc, #4]	; (800b31c <__malloc_lock+0x8>)
 800b316:	f000 bbd4 	b.w	800bac2 <__retarget_lock_acquire_recursive>
 800b31a:	bf00      	nop
 800b31c:	20003ad4 	.word	0x20003ad4

0800b320 <__malloc_unlock>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__malloc_unlock+0x8>)
 800b322:	f000 bbcf 	b.w	800bac4 <__retarget_lock_release_recursive>
 800b326:	bf00      	nop
 800b328:	20003ad4 	.word	0x20003ad4

0800b32c <_Balloc>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b330:	4604      	mov	r4, r0
 800b332:	460d      	mov	r5, r1
 800b334:	b976      	cbnz	r6, 800b354 <_Balloc+0x28>
 800b336:	2010      	movs	r0, #16
 800b338:	f7f8 ff28 	bl	800418c <__wrap_malloc>
 800b33c:	4602      	mov	r2, r0
 800b33e:	6260      	str	r0, [r4, #36]	; 0x24
 800b340:	b920      	cbnz	r0, 800b34c <_Balloc+0x20>
 800b342:	4b18      	ldr	r3, [pc, #96]	; (800b3a4 <_Balloc+0x78>)
 800b344:	4818      	ldr	r0, [pc, #96]	; (800b3a8 <_Balloc+0x7c>)
 800b346:	2166      	movs	r1, #102	; 0x66
 800b348:	f000 fb8a 	bl	800ba60 <__assert_func>
 800b34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b350:	6006      	str	r6, [r0, #0]
 800b352:	60c6      	str	r6, [r0, #12]
 800b354:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b356:	68f3      	ldr	r3, [r6, #12]
 800b358:	b183      	cbz	r3, 800b37c <_Balloc+0x50>
 800b35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b362:	b9b8      	cbnz	r0, 800b394 <_Balloc+0x68>
 800b364:	2101      	movs	r1, #1
 800b366:	fa01 f605 	lsl.w	r6, r1, r5
 800b36a:	1d72      	adds	r2, r6, #5
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fb60 	bl	800ba34 <_calloc_r>
 800b374:	b160      	cbz	r0, 800b390 <_Balloc+0x64>
 800b376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b37a:	e00e      	b.n	800b39a <_Balloc+0x6e>
 800b37c:	2221      	movs	r2, #33	; 0x21
 800b37e:	2104      	movs	r1, #4
 800b380:	4620      	mov	r0, r4
 800b382:	f000 fb57 	bl	800ba34 <_calloc_r>
 800b386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b388:	60f0      	str	r0, [r6, #12]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e4      	bne.n	800b35a <_Balloc+0x2e>
 800b390:	2000      	movs	r0, #0
 800b392:	bd70      	pop	{r4, r5, r6, pc}
 800b394:	6802      	ldr	r2, [r0, #0]
 800b396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b39a:	2300      	movs	r3, #0
 800b39c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3a0:	e7f7      	b.n	800b392 <_Balloc+0x66>
 800b3a2:	bf00      	nop
 800b3a4:	0800fcd9 	.word	0x0800fcd9
 800b3a8:	0800fd5c 	.word	0x0800fd5c

0800b3ac <_Bfree>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	b976      	cbnz	r6, 800b3d4 <_Bfree+0x28>
 800b3b6:	2010      	movs	r0, #16
 800b3b8:	f7f8 fee8 	bl	800418c <__wrap_malloc>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	6268      	str	r0, [r5, #36]	; 0x24
 800b3c0:	b920      	cbnz	r0, 800b3cc <_Bfree+0x20>
 800b3c2:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <_Bfree+0x3c>)
 800b3c4:	4809      	ldr	r0, [pc, #36]	; (800b3ec <_Bfree+0x40>)
 800b3c6:	218a      	movs	r1, #138	; 0x8a
 800b3c8:	f000 fb4a 	bl	800ba60 <__assert_func>
 800b3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d0:	6006      	str	r6, [r0, #0]
 800b3d2:	60c6      	str	r6, [r0, #12]
 800b3d4:	b13c      	cbz	r4, 800b3e6 <_Bfree+0x3a>
 800b3d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3d8:	6862      	ldr	r2, [r4, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3e0:	6021      	str	r1, [r4, #0]
 800b3e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	0800fcd9 	.word	0x0800fcd9
 800b3ec:	0800fd5c 	.word	0x0800fd5c

0800b3f0 <__multadd>:
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	690d      	ldr	r5, [r1, #16]
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	461e      	mov	r6, r3
 800b3fc:	f101 0c14 	add.w	ip, r1, #20
 800b400:	2000      	movs	r0, #0
 800b402:	f8dc 3000 	ldr.w	r3, [ip]
 800b406:	b299      	uxth	r1, r3
 800b408:	fb02 6101 	mla	r1, r2, r1, r6
 800b40c:	0c1e      	lsrs	r6, r3, #16
 800b40e:	0c0b      	lsrs	r3, r1, #16
 800b410:	fb02 3306 	mla	r3, r2, r6, r3
 800b414:	b289      	uxth	r1, r1
 800b416:	3001      	adds	r0, #1
 800b418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b41c:	4285      	cmp	r5, r0
 800b41e:	f84c 1b04 	str.w	r1, [ip], #4
 800b422:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b426:	dcec      	bgt.n	800b402 <__multadd+0x12>
 800b428:	b30e      	cbz	r6, 800b46e <__multadd+0x7e>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	42ab      	cmp	r3, r5
 800b42e:	dc19      	bgt.n	800b464 <__multadd+0x74>
 800b430:	6861      	ldr	r1, [r4, #4]
 800b432:	4638      	mov	r0, r7
 800b434:	3101      	adds	r1, #1
 800b436:	f7ff ff79 	bl	800b32c <_Balloc>
 800b43a:	4680      	mov	r8, r0
 800b43c:	b928      	cbnz	r0, 800b44a <__multadd+0x5a>
 800b43e:	4602      	mov	r2, r0
 800b440:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <__multadd+0x84>)
 800b442:	480d      	ldr	r0, [pc, #52]	; (800b478 <__multadd+0x88>)
 800b444:	21b5      	movs	r1, #181	; 0xb5
 800b446:	f000 fb0b 	bl	800ba60 <__assert_func>
 800b44a:	6922      	ldr	r2, [r4, #16]
 800b44c:	3202      	adds	r2, #2
 800b44e:	f104 010c 	add.w	r1, r4, #12
 800b452:	0092      	lsls	r2, r2, #2
 800b454:	300c      	adds	r0, #12
 800b456:	f7fe fb5b 	bl	8009b10 <memcpy>
 800b45a:	4621      	mov	r1, r4
 800b45c:	4638      	mov	r0, r7
 800b45e:	f7ff ffa5 	bl	800b3ac <_Bfree>
 800b462:	4644      	mov	r4, r8
 800b464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b468:	3501      	adds	r5, #1
 800b46a:	615e      	str	r6, [r3, #20]
 800b46c:	6125      	str	r5, [r4, #16]
 800b46e:	4620      	mov	r0, r4
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	0800fd4b 	.word	0x0800fd4b
 800b478:	0800fd5c 	.word	0x0800fd5c

0800b47c <__hi0bits>:
 800b47c:	0c03      	lsrs	r3, r0, #16
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	b9d3      	cbnz	r3, 800b4b8 <__hi0bits+0x3c>
 800b482:	0400      	lsls	r0, r0, #16
 800b484:	2310      	movs	r3, #16
 800b486:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b48a:	bf04      	itt	eq
 800b48c:	0200      	lsleq	r0, r0, #8
 800b48e:	3308      	addeq	r3, #8
 800b490:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b494:	bf04      	itt	eq
 800b496:	0100      	lsleq	r0, r0, #4
 800b498:	3304      	addeq	r3, #4
 800b49a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b49e:	bf04      	itt	eq
 800b4a0:	0080      	lsleq	r0, r0, #2
 800b4a2:	3302      	addeq	r3, #2
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	db05      	blt.n	800b4b4 <__hi0bits+0x38>
 800b4a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4ac:	f103 0301 	add.w	r3, r3, #1
 800b4b0:	bf08      	it	eq
 800b4b2:	2320      	moveq	r3, #32
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	4770      	bx	lr
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e7e4      	b.n	800b486 <__hi0bits+0xa>

0800b4bc <__lo0bits>:
 800b4bc:	6803      	ldr	r3, [r0, #0]
 800b4be:	f013 0207 	ands.w	r2, r3, #7
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	d00b      	beq.n	800b4de <__lo0bits+0x22>
 800b4c6:	07da      	lsls	r2, r3, #31
 800b4c8:	d423      	bmi.n	800b512 <__lo0bits+0x56>
 800b4ca:	0798      	lsls	r0, r3, #30
 800b4cc:	bf49      	itett	mi
 800b4ce:	085b      	lsrmi	r3, r3, #1
 800b4d0:	089b      	lsrpl	r3, r3, #2
 800b4d2:	2001      	movmi	r0, #1
 800b4d4:	600b      	strmi	r3, [r1, #0]
 800b4d6:	bf5c      	itt	pl
 800b4d8:	600b      	strpl	r3, [r1, #0]
 800b4da:	2002      	movpl	r0, #2
 800b4dc:	4770      	bx	lr
 800b4de:	b298      	uxth	r0, r3
 800b4e0:	b9a8      	cbnz	r0, 800b50e <__lo0bits+0x52>
 800b4e2:	0c1b      	lsrs	r3, r3, #16
 800b4e4:	2010      	movs	r0, #16
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	b90a      	cbnz	r2, 800b4ee <__lo0bits+0x32>
 800b4ea:	3008      	adds	r0, #8
 800b4ec:	0a1b      	lsrs	r3, r3, #8
 800b4ee:	071a      	lsls	r2, r3, #28
 800b4f0:	bf04      	itt	eq
 800b4f2:	091b      	lsreq	r3, r3, #4
 800b4f4:	3004      	addeq	r0, #4
 800b4f6:	079a      	lsls	r2, r3, #30
 800b4f8:	bf04      	itt	eq
 800b4fa:	089b      	lsreq	r3, r3, #2
 800b4fc:	3002      	addeq	r0, #2
 800b4fe:	07da      	lsls	r2, r3, #31
 800b500:	d403      	bmi.n	800b50a <__lo0bits+0x4e>
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	f100 0001 	add.w	r0, r0, #1
 800b508:	d005      	beq.n	800b516 <__lo0bits+0x5a>
 800b50a:	600b      	str	r3, [r1, #0]
 800b50c:	4770      	bx	lr
 800b50e:	4610      	mov	r0, r2
 800b510:	e7e9      	b.n	800b4e6 <__lo0bits+0x2a>
 800b512:	2000      	movs	r0, #0
 800b514:	4770      	bx	lr
 800b516:	2020      	movs	r0, #32
 800b518:	4770      	bx	lr
	...

0800b51c <__i2b>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	460c      	mov	r4, r1
 800b520:	2101      	movs	r1, #1
 800b522:	f7ff ff03 	bl	800b32c <_Balloc>
 800b526:	4602      	mov	r2, r0
 800b528:	b928      	cbnz	r0, 800b536 <__i2b+0x1a>
 800b52a:	4b05      	ldr	r3, [pc, #20]	; (800b540 <__i2b+0x24>)
 800b52c:	4805      	ldr	r0, [pc, #20]	; (800b544 <__i2b+0x28>)
 800b52e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b532:	f000 fa95 	bl	800ba60 <__assert_func>
 800b536:	2301      	movs	r3, #1
 800b538:	6144      	str	r4, [r0, #20]
 800b53a:	6103      	str	r3, [r0, #16]
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	bf00      	nop
 800b540:	0800fd4b 	.word	0x0800fd4b
 800b544:	0800fd5c 	.word	0x0800fd5c

0800b548 <__multiply>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	4691      	mov	r9, r2
 800b54e:	690a      	ldr	r2, [r1, #16]
 800b550:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b554:	429a      	cmp	r2, r3
 800b556:	bfb8      	it	lt
 800b558:	460b      	movlt	r3, r1
 800b55a:	460c      	mov	r4, r1
 800b55c:	bfbc      	itt	lt
 800b55e:	464c      	movlt	r4, r9
 800b560:	4699      	movlt	r9, r3
 800b562:	6927      	ldr	r7, [r4, #16]
 800b564:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	6861      	ldr	r1, [r4, #4]
 800b56c:	eb07 060a 	add.w	r6, r7, sl
 800b570:	42b3      	cmp	r3, r6
 800b572:	b085      	sub	sp, #20
 800b574:	bfb8      	it	lt
 800b576:	3101      	addlt	r1, #1
 800b578:	f7ff fed8 	bl	800b32c <_Balloc>
 800b57c:	b930      	cbnz	r0, 800b58c <__multiply+0x44>
 800b57e:	4602      	mov	r2, r0
 800b580:	4b44      	ldr	r3, [pc, #272]	; (800b694 <__multiply+0x14c>)
 800b582:	4845      	ldr	r0, [pc, #276]	; (800b698 <__multiply+0x150>)
 800b584:	f240 115d 	movw	r1, #349	; 0x15d
 800b588:	f000 fa6a 	bl	800ba60 <__assert_func>
 800b58c:	f100 0514 	add.w	r5, r0, #20
 800b590:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b594:	462b      	mov	r3, r5
 800b596:	2200      	movs	r2, #0
 800b598:	4543      	cmp	r3, r8
 800b59a:	d321      	bcc.n	800b5e0 <__multiply+0x98>
 800b59c:	f104 0314 	add.w	r3, r4, #20
 800b5a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5a4:	f109 0314 	add.w	r3, r9, #20
 800b5a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5ac:	9202      	str	r2, [sp, #8]
 800b5ae:	1b3a      	subs	r2, r7, r4
 800b5b0:	3a15      	subs	r2, #21
 800b5b2:	f022 0203 	bic.w	r2, r2, #3
 800b5b6:	3204      	adds	r2, #4
 800b5b8:	f104 0115 	add.w	r1, r4, #21
 800b5bc:	428f      	cmp	r7, r1
 800b5be:	bf38      	it	cc
 800b5c0:	2204      	movcc	r2, #4
 800b5c2:	9201      	str	r2, [sp, #4]
 800b5c4:	9a02      	ldr	r2, [sp, #8]
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d80c      	bhi.n	800b5e6 <__multiply+0x9e>
 800b5cc:	2e00      	cmp	r6, #0
 800b5ce:	dd03      	ble.n	800b5d8 <__multiply+0x90>
 800b5d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d05a      	beq.n	800b68e <__multiply+0x146>
 800b5d8:	6106      	str	r6, [r0, #16]
 800b5da:	b005      	add	sp, #20
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	f843 2b04 	str.w	r2, [r3], #4
 800b5e4:	e7d8      	b.n	800b598 <__multiply+0x50>
 800b5e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5ea:	f1ba 0f00 	cmp.w	sl, #0
 800b5ee:	d024      	beq.n	800b63a <__multiply+0xf2>
 800b5f0:	f104 0e14 	add.w	lr, r4, #20
 800b5f4:	46a9      	mov	r9, r5
 800b5f6:	f04f 0c00 	mov.w	ip, #0
 800b5fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5fe:	f8d9 1000 	ldr.w	r1, [r9]
 800b602:	fa1f fb82 	uxth.w	fp, r2
 800b606:	b289      	uxth	r1, r1
 800b608:	fb0a 110b 	mla	r1, sl, fp, r1
 800b60c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b610:	f8d9 2000 	ldr.w	r2, [r9]
 800b614:	4461      	add	r1, ip
 800b616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b61a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b61e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b622:	b289      	uxth	r1, r1
 800b624:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b628:	4577      	cmp	r7, lr
 800b62a:	f849 1b04 	str.w	r1, [r9], #4
 800b62e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b632:	d8e2      	bhi.n	800b5fa <__multiply+0xb2>
 800b634:	9a01      	ldr	r2, [sp, #4]
 800b636:	f845 c002 	str.w	ip, [r5, r2]
 800b63a:	9a03      	ldr	r2, [sp, #12]
 800b63c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b640:	3304      	adds	r3, #4
 800b642:	f1b9 0f00 	cmp.w	r9, #0
 800b646:	d020      	beq.n	800b68a <__multiply+0x142>
 800b648:	6829      	ldr	r1, [r5, #0]
 800b64a:	f104 0c14 	add.w	ip, r4, #20
 800b64e:	46ae      	mov	lr, r5
 800b650:	f04f 0a00 	mov.w	sl, #0
 800b654:	f8bc b000 	ldrh.w	fp, [ip]
 800b658:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b65c:	fb09 220b 	mla	r2, r9, fp, r2
 800b660:	4492      	add	sl, r2
 800b662:	b289      	uxth	r1, r1
 800b664:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b668:	f84e 1b04 	str.w	r1, [lr], #4
 800b66c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b670:	f8be 1000 	ldrh.w	r1, [lr]
 800b674:	0c12      	lsrs	r2, r2, #16
 800b676:	fb09 1102 	mla	r1, r9, r2, r1
 800b67a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b67e:	4567      	cmp	r7, ip
 800b680:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b684:	d8e6      	bhi.n	800b654 <__multiply+0x10c>
 800b686:	9a01      	ldr	r2, [sp, #4]
 800b688:	50a9      	str	r1, [r5, r2]
 800b68a:	3504      	adds	r5, #4
 800b68c:	e79a      	b.n	800b5c4 <__multiply+0x7c>
 800b68e:	3e01      	subs	r6, #1
 800b690:	e79c      	b.n	800b5cc <__multiply+0x84>
 800b692:	bf00      	nop
 800b694:	0800fd4b 	.word	0x0800fd4b
 800b698:	0800fd5c 	.word	0x0800fd5c

0800b69c <__pow5mult>:
 800b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	4615      	mov	r5, r2
 800b6a2:	f012 0203 	ands.w	r2, r2, #3
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	460f      	mov	r7, r1
 800b6aa:	d007      	beq.n	800b6bc <__pow5mult+0x20>
 800b6ac:	4c25      	ldr	r4, [pc, #148]	; (800b744 <__pow5mult+0xa8>)
 800b6ae:	3a01      	subs	r2, #1
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6b6:	f7ff fe9b 	bl	800b3f0 <__multadd>
 800b6ba:	4607      	mov	r7, r0
 800b6bc:	10ad      	asrs	r5, r5, #2
 800b6be:	d03d      	beq.n	800b73c <__pow5mult+0xa0>
 800b6c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6c2:	b97c      	cbnz	r4, 800b6e4 <__pow5mult+0x48>
 800b6c4:	2010      	movs	r0, #16
 800b6c6:	f7f8 fd61 	bl	800418c <__wrap_malloc>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b6ce:	b928      	cbnz	r0, 800b6dc <__pow5mult+0x40>
 800b6d0:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <__pow5mult+0xac>)
 800b6d2:	481e      	ldr	r0, [pc, #120]	; (800b74c <__pow5mult+0xb0>)
 800b6d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6d8:	f000 f9c2 	bl	800ba60 <__assert_func>
 800b6dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6e0:	6004      	str	r4, [r0, #0]
 800b6e2:	60c4      	str	r4, [r0, #12]
 800b6e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6ec:	b94c      	cbnz	r4, 800b702 <__pow5mult+0x66>
 800b6ee:	f240 2171 	movw	r1, #625	; 0x271
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ff12 	bl	800b51c <__i2b>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6fe:	4604      	mov	r4, r0
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	f04f 0900 	mov.w	r9, #0
 800b706:	07eb      	lsls	r3, r5, #31
 800b708:	d50a      	bpl.n	800b720 <__pow5mult+0x84>
 800b70a:	4639      	mov	r1, r7
 800b70c:	4622      	mov	r2, r4
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ff1a 	bl	800b548 <__multiply>
 800b714:	4639      	mov	r1, r7
 800b716:	4680      	mov	r8, r0
 800b718:	4630      	mov	r0, r6
 800b71a:	f7ff fe47 	bl	800b3ac <_Bfree>
 800b71e:	4647      	mov	r7, r8
 800b720:	106d      	asrs	r5, r5, #1
 800b722:	d00b      	beq.n	800b73c <__pow5mult+0xa0>
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	b938      	cbnz	r0, 800b738 <__pow5mult+0x9c>
 800b728:	4622      	mov	r2, r4
 800b72a:	4621      	mov	r1, r4
 800b72c:	4630      	mov	r0, r6
 800b72e:	f7ff ff0b 	bl	800b548 <__multiply>
 800b732:	6020      	str	r0, [r4, #0]
 800b734:	f8c0 9000 	str.w	r9, [r0]
 800b738:	4604      	mov	r4, r0
 800b73a:	e7e4      	b.n	800b706 <__pow5mult+0x6a>
 800b73c:	4638      	mov	r0, r7
 800b73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b742:	bf00      	nop
 800b744:	0800fea8 	.word	0x0800fea8
 800b748:	0800fcd9 	.word	0x0800fcd9
 800b74c:	0800fd5c 	.word	0x0800fd5c

0800b750 <__lshift>:
 800b750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b754:	460c      	mov	r4, r1
 800b756:	6849      	ldr	r1, [r1, #4]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b75e:	68a3      	ldr	r3, [r4, #8]
 800b760:	4607      	mov	r7, r0
 800b762:	4691      	mov	r9, r2
 800b764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b768:	f108 0601 	add.w	r6, r8, #1
 800b76c:	42b3      	cmp	r3, r6
 800b76e:	db0b      	blt.n	800b788 <__lshift+0x38>
 800b770:	4638      	mov	r0, r7
 800b772:	f7ff fddb 	bl	800b32c <_Balloc>
 800b776:	4605      	mov	r5, r0
 800b778:	b948      	cbnz	r0, 800b78e <__lshift+0x3e>
 800b77a:	4602      	mov	r2, r0
 800b77c:	4b2a      	ldr	r3, [pc, #168]	; (800b828 <__lshift+0xd8>)
 800b77e:	482b      	ldr	r0, [pc, #172]	; (800b82c <__lshift+0xdc>)
 800b780:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b784:	f000 f96c 	bl	800ba60 <__assert_func>
 800b788:	3101      	adds	r1, #1
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	e7ee      	b.n	800b76c <__lshift+0x1c>
 800b78e:	2300      	movs	r3, #0
 800b790:	f100 0114 	add.w	r1, r0, #20
 800b794:	f100 0210 	add.w	r2, r0, #16
 800b798:	4618      	mov	r0, r3
 800b79a:	4553      	cmp	r3, sl
 800b79c:	db37      	blt.n	800b80e <__lshift+0xbe>
 800b79e:	6920      	ldr	r0, [r4, #16]
 800b7a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7a4:	f104 0314 	add.w	r3, r4, #20
 800b7a8:	f019 091f 	ands.w	r9, r9, #31
 800b7ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b7b4:	d02f      	beq.n	800b816 <__lshift+0xc6>
 800b7b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b7ba:	468a      	mov	sl, r1
 800b7bc:	f04f 0c00 	mov.w	ip, #0
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	fa02 f209 	lsl.w	r2, r2, r9
 800b7c6:	ea42 020c 	orr.w	r2, r2, ip
 800b7ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d2:	4298      	cmp	r0, r3
 800b7d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7d8:	d8f2      	bhi.n	800b7c0 <__lshift+0x70>
 800b7da:	1b03      	subs	r3, r0, r4
 800b7dc:	3b15      	subs	r3, #21
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	f104 0215 	add.w	r2, r4, #21
 800b7e8:	4290      	cmp	r0, r2
 800b7ea:	bf38      	it	cc
 800b7ec:	2304      	movcc	r3, #4
 800b7ee:	f841 c003 	str.w	ip, [r1, r3]
 800b7f2:	f1bc 0f00 	cmp.w	ip, #0
 800b7f6:	d001      	beq.n	800b7fc <__lshift+0xac>
 800b7f8:	f108 0602 	add.w	r6, r8, #2
 800b7fc:	3e01      	subs	r6, #1
 800b7fe:	4638      	mov	r0, r7
 800b800:	612e      	str	r6, [r5, #16]
 800b802:	4621      	mov	r1, r4
 800b804:	f7ff fdd2 	bl	800b3ac <_Bfree>
 800b808:	4628      	mov	r0, r5
 800b80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b812:	3301      	adds	r3, #1
 800b814:	e7c1      	b.n	800b79a <__lshift+0x4a>
 800b816:	3904      	subs	r1, #4
 800b818:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b820:	4298      	cmp	r0, r3
 800b822:	d8f9      	bhi.n	800b818 <__lshift+0xc8>
 800b824:	e7ea      	b.n	800b7fc <__lshift+0xac>
 800b826:	bf00      	nop
 800b828:	0800fd4b 	.word	0x0800fd4b
 800b82c:	0800fd5c 	.word	0x0800fd5c

0800b830 <__mcmp>:
 800b830:	b530      	push	{r4, r5, lr}
 800b832:	6902      	ldr	r2, [r0, #16]
 800b834:	690c      	ldr	r4, [r1, #16]
 800b836:	1b12      	subs	r2, r2, r4
 800b838:	d10e      	bne.n	800b858 <__mcmp+0x28>
 800b83a:	f100 0314 	add.w	r3, r0, #20
 800b83e:	3114      	adds	r1, #20
 800b840:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b844:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b848:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b84c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b850:	42a5      	cmp	r5, r4
 800b852:	d003      	beq.n	800b85c <__mcmp+0x2c>
 800b854:	d305      	bcc.n	800b862 <__mcmp+0x32>
 800b856:	2201      	movs	r2, #1
 800b858:	4610      	mov	r0, r2
 800b85a:	bd30      	pop	{r4, r5, pc}
 800b85c:	4283      	cmp	r3, r0
 800b85e:	d3f3      	bcc.n	800b848 <__mcmp+0x18>
 800b860:	e7fa      	b.n	800b858 <__mcmp+0x28>
 800b862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b866:	e7f7      	b.n	800b858 <__mcmp+0x28>

0800b868 <__mdiff>:
 800b868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	460c      	mov	r4, r1
 800b86e:	4606      	mov	r6, r0
 800b870:	4611      	mov	r1, r2
 800b872:	4620      	mov	r0, r4
 800b874:	4690      	mov	r8, r2
 800b876:	f7ff ffdb 	bl	800b830 <__mcmp>
 800b87a:	1e05      	subs	r5, r0, #0
 800b87c:	d110      	bne.n	800b8a0 <__mdiff+0x38>
 800b87e:	4629      	mov	r1, r5
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff fd53 	bl	800b32c <_Balloc>
 800b886:	b930      	cbnz	r0, 800b896 <__mdiff+0x2e>
 800b888:	4b3a      	ldr	r3, [pc, #232]	; (800b974 <__mdiff+0x10c>)
 800b88a:	4602      	mov	r2, r0
 800b88c:	f240 2132 	movw	r1, #562	; 0x232
 800b890:	4839      	ldr	r0, [pc, #228]	; (800b978 <__mdiff+0x110>)
 800b892:	f000 f8e5 	bl	800ba60 <__assert_func>
 800b896:	2301      	movs	r3, #1
 800b898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b89c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	bfa4      	itt	ge
 800b8a2:	4643      	movge	r3, r8
 800b8a4:	46a0      	movge	r8, r4
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8ac:	bfa6      	itte	ge
 800b8ae:	461c      	movge	r4, r3
 800b8b0:	2500      	movge	r5, #0
 800b8b2:	2501      	movlt	r5, #1
 800b8b4:	f7ff fd3a 	bl	800b32c <_Balloc>
 800b8b8:	b920      	cbnz	r0, 800b8c4 <__mdiff+0x5c>
 800b8ba:	4b2e      	ldr	r3, [pc, #184]	; (800b974 <__mdiff+0x10c>)
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8c2:	e7e5      	b.n	800b890 <__mdiff+0x28>
 800b8c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8c8:	6926      	ldr	r6, [r4, #16]
 800b8ca:	60c5      	str	r5, [r0, #12]
 800b8cc:	f104 0914 	add.w	r9, r4, #20
 800b8d0:	f108 0514 	add.w	r5, r8, #20
 800b8d4:	f100 0e14 	add.w	lr, r0, #20
 800b8d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8e0:	f108 0210 	add.w	r2, r8, #16
 800b8e4:	46f2      	mov	sl, lr
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8f0:	fa1f f883 	uxth.w	r8, r3
 800b8f4:	fa11 f18b 	uxtah	r1, r1, fp
 800b8f8:	0c1b      	lsrs	r3, r3, #16
 800b8fa:	eba1 0808 	sub.w	r8, r1, r8
 800b8fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b902:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b906:	fa1f f888 	uxth.w	r8, r8
 800b90a:	1419      	asrs	r1, r3, #16
 800b90c:	454e      	cmp	r6, r9
 800b90e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b912:	f84a 3b04 	str.w	r3, [sl], #4
 800b916:	d8e7      	bhi.n	800b8e8 <__mdiff+0x80>
 800b918:	1b33      	subs	r3, r6, r4
 800b91a:	3b15      	subs	r3, #21
 800b91c:	f023 0303 	bic.w	r3, r3, #3
 800b920:	3304      	adds	r3, #4
 800b922:	3415      	adds	r4, #21
 800b924:	42a6      	cmp	r6, r4
 800b926:	bf38      	it	cc
 800b928:	2304      	movcc	r3, #4
 800b92a:	441d      	add	r5, r3
 800b92c:	4473      	add	r3, lr
 800b92e:	469e      	mov	lr, r3
 800b930:	462e      	mov	r6, r5
 800b932:	4566      	cmp	r6, ip
 800b934:	d30e      	bcc.n	800b954 <__mdiff+0xec>
 800b936:	f10c 0203 	add.w	r2, ip, #3
 800b93a:	1b52      	subs	r2, r2, r5
 800b93c:	f022 0203 	bic.w	r2, r2, #3
 800b940:	3d03      	subs	r5, #3
 800b942:	45ac      	cmp	ip, r5
 800b944:	bf38      	it	cc
 800b946:	2200      	movcc	r2, #0
 800b948:	441a      	add	r2, r3
 800b94a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b94e:	b17b      	cbz	r3, 800b970 <__mdiff+0x108>
 800b950:	6107      	str	r7, [r0, #16]
 800b952:	e7a3      	b.n	800b89c <__mdiff+0x34>
 800b954:	f856 8b04 	ldr.w	r8, [r6], #4
 800b958:	fa11 f288 	uxtah	r2, r1, r8
 800b95c:	1414      	asrs	r4, r2, #16
 800b95e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b962:	b292      	uxth	r2, r2
 800b964:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b968:	f84e 2b04 	str.w	r2, [lr], #4
 800b96c:	1421      	asrs	r1, r4, #16
 800b96e:	e7e0      	b.n	800b932 <__mdiff+0xca>
 800b970:	3f01      	subs	r7, #1
 800b972:	e7ea      	b.n	800b94a <__mdiff+0xe2>
 800b974:	0800fd4b 	.word	0x0800fd4b
 800b978:	0800fd5c 	.word	0x0800fd5c

0800b97c <__d2b>:
 800b97c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b980:	4689      	mov	r9, r1
 800b982:	2101      	movs	r1, #1
 800b984:	ec57 6b10 	vmov	r6, r7, d0
 800b988:	4690      	mov	r8, r2
 800b98a:	f7ff fccf 	bl	800b32c <_Balloc>
 800b98e:	4604      	mov	r4, r0
 800b990:	b930      	cbnz	r0, 800b9a0 <__d2b+0x24>
 800b992:	4602      	mov	r2, r0
 800b994:	4b25      	ldr	r3, [pc, #148]	; (800ba2c <__d2b+0xb0>)
 800b996:	4826      	ldr	r0, [pc, #152]	; (800ba30 <__d2b+0xb4>)
 800b998:	f240 310a 	movw	r1, #778	; 0x30a
 800b99c:	f000 f860 	bl	800ba60 <__assert_func>
 800b9a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9a8:	bb35      	cbnz	r5, 800b9f8 <__d2b+0x7c>
 800b9aa:	2e00      	cmp	r6, #0
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	d028      	beq.n	800ba02 <__d2b+0x86>
 800b9b0:	4668      	mov	r0, sp
 800b9b2:	9600      	str	r6, [sp, #0]
 800b9b4:	f7ff fd82 	bl	800b4bc <__lo0bits>
 800b9b8:	9900      	ldr	r1, [sp, #0]
 800b9ba:	b300      	cbz	r0, 800b9fe <__d2b+0x82>
 800b9bc:	9a01      	ldr	r2, [sp, #4]
 800b9be:	f1c0 0320 	rsb	r3, r0, #32
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	430b      	orrs	r3, r1
 800b9c8:	40c2      	lsrs	r2, r0
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	9201      	str	r2, [sp, #4]
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	61a3      	str	r3, [r4, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	bf14      	ite	ne
 800b9d6:	2202      	movne	r2, #2
 800b9d8:	2201      	moveq	r2, #1
 800b9da:	6122      	str	r2, [r4, #16]
 800b9dc:	b1d5      	cbz	r5, 800ba14 <__d2b+0x98>
 800b9de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9e2:	4405      	add	r5, r0
 800b9e4:	f8c9 5000 	str.w	r5, [r9]
 800b9e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9ec:	f8c8 0000 	str.w	r0, [r8]
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	b003      	add	sp, #12
 800b9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9fc:	e7d5      	b.n	800b9aa <__d2b+0x2e>
 800b9fe:	6161      	str	r1, [r4, #20]
 800ba00:	e7e5      	b.n	800b9ce <__d2b+0x52>
 800ba02:	a801      	add	r0, sp, #4
 800ba04:	f7ff fd5a 	bl	800b4bc <__lo0bits>
 800ba08:	9b01      	ldr	r3, [sp, #4]
 800ba0a:	6163      	str	r3, [r4, #20]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	6122      	str	r2, [r4, #16]
 800ba10:	3020      	adds	r0, #32
 800ba12:	e7e3      	b.n	800b9dc <__d2b+0x60>
 800ba14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba1c:	f8c9 0000 	str.w	r0, [r9]
 800ba20:	6918      	ldr	r0, [r3, #16]
 800ba22:	f7ff fd2b 	bl	800b47c <__hi0bits>
 800ba26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba2a:	e7df      	b.n	800b9ec <__d2b+0x70>
 800ba2c:	0800fd4b 	.word	0x0800fd4b
 800ba30:	0800fd5c 	.word	0x0800fd5c

0800ba34 <_calloc_r>:
 800ba34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba36:	fba1 2402 	umull	r2, r4, r1, r2
 800ba3a:	b94c      	cbnz	r4, 800ba50 <_calloc_r+0x1c>
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	9201      	str	r2, [sp, #4]
 800ba40:	f7fe f8e8 	bl	8009c14 <_malloc_r>
 800ba44:	9a01      	ldr	r2, [sp, #4]
 800ba46:	4605      	mov	r5, r0
 800ba48:	b930      	cbnz	r0, 800ba58 <_calloc_r+0x24>
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	b003      	add	sp, #12
 800ba4e:	bd30      	pop	{r4, r5, pc}
 800ba50:	220c      	movs	r2, #12
 800ba52:	6002      	str	r2, [r0, #0]
 800ba54:	2500      	movs	r5, #0
 800ba56:	e7f8      	b.n	800ba4a <_calloc_r+0x16>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	f7fe f867 	bl	8009b2c <memset>
 800ba5e:	e7f4      	b.n	800ba4a <_calloc_r+0x16>

0800ba60 <__assert_func>:
 800ba60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba62:	4614      	mov	r4, r2
 800ba64:	461a      	mov	r2, r3
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <__assert_func+0x2c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	68d8      	ldr	r0, [r3, #12]
 800ba6e:	b14c      	cbz	r4, 800ba84 <__assert_func+0x24>
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <__assert_func+0x30>)
 800ba72:	9100      	str	r1, [sp, #0]
 800ba74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba78:	4906      	ldr	r1, [pc, #24]	; (800ba94 <__assert_func+0x34>)
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	f000 f80e 	bl	800ba9c <fiprintf>
 800ba80:	f000 fa5a 	bl	800bf38 <abort>
 800ba84:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <__assert_func+0x38>)
 800ba86:	461c      	mov	r4, r3
 800ba88:	e7f3      	b.n	800ba72 <__assert_func+0x12>
 800ba8a:	bf00      	nop
 800ba8c:	2000057c 	.word	0x2000057c
 800ba90:	0800feb4 	.word	0x0800feb4
 800ba94:	0800fec1 	.word	0x0800fec1
 800ba98:	0800feef 	.word	0x0800feef

0800ba9c <fiprintf>:
 800ba9c:	b40e      	push	{r1, r2, r3}
 800ba9e:	b503      	push	{r0, r1, lr}
 800baa0:	4601      	mov	r1, r0
 800baa2:	ab03      	add	r3, sp, #12
 800baa4:	4805      	ldr	r0, [pc, #20]	; (800babc <fiprintf+0x20>)
 800baa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	f000 f845 	bl	800bb3c <_vfiprintf_r>
 800bab2:	b002      	add	sp, #8
 800bab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bab8:	b003      	add	sp, #12
 800baba:	4770      	bx	lr
 800babc:	2000057c 	.word	0x2000057c

0800bac0 <__retarget_lock_init_recursive>:
 800bac0:	4770      	bx	lr

0800bac2 <__retarget_lock_acquire_recursive>:
 800bac2:	4770      	bx	lr

0800bac4 <__retarget_lock_release_recursive>:
 800bac4:	4770      	bx	lr

0800bac6 <__ascii_mbtowc>:
 800bac6:	b082      	sub	sp, #8
 800bac8:	b901      	cbnz	r1, 800bacc <__ascii_mbtowc+0x6>
 800baca:	a901      	add	r1, sp, #4
 800bacc:	b142      	cbz	r2, 800bae0 <__ascii_mbtowc+0x1a>
 800bace:	b14b      	cbz	r3, 800bae4 <__ascii_mbtowc+0x1e>
 800bad0:	7813      	ldrb	r3, [r2, #0]
 800bad2:	600b      	str	r3, [r1, #0]
 800bad4:	7812      	ldrb	r2, [r2, #0]
 800bad6:	1e10      	subs	r0, r2, #0
 800bad8:	bf18      	it	ne
 800bada:	2001      	movne	r0, #1
 800badc:	b002      	add	sp, #8
 800bade:	4770      	bx	lr
 800bae0:	4610      	mov	r0, r2
 800bae2:	e7fb      	b.n	800badc <__ascii_mbtowc+0x16>
 800bae4:	f06f 0001 	mvn.w	r0, #1
 800bae8:	e7f8      	b.n	800badc <__ascii_mbtowc+0x16>

0800baea <__sfputc_r>:
 800baea:	6893      	ldr	r3, [r2, #8]
 800baec:	3b01      	subs	r3, #1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	b410      	push	{r4}
 800baf2:	6093      	str	r3, [r2, #8]
 800baf4:	da08      	bge.n	800bb08 <__sfputc_r+0x1e>
 800baf6:	6994      	ldr	r4, [r2, #24]
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	db01      	blt.n	800bb00 <__sfputc_r+0x16>
 800bafc:	290a      	cmp	r1, #10
 800bafe:	d103      	bne.n	800bb08 <__sfputc_r+0x1e>
 800bb00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb04:	f000 b94a 	b.w	800bd9c <__swbuf_r>
 800bb08:	6813      	ldr	r3, [r2, #0]
 800bb0a:	1c58      	adds	r0, r3, #1
 800bb0c:	6010      	str	r0, [r2, #0]
 800bb0e:	7019      	strb	r1, [r3, #0]
 800bb10:	4608      	mov	r0, r1
 800bb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <__sfputs_r>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	4614      	mov	r4, r2
 800bb20:	18d5      	adds	r5, r2, r3
 800bb22:	42ac      	cmp	r4, r5
 800bb24:	d101      	bne.n	800bb2a <__sfputs_r+0x12>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e007      	b.n	800bb3a <__sfputs_r+0x22>
 800bb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2e:	463a      	mov	r2, r7
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7ff ffda 	bl	800baea <__sfputc_r>
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	d1f3      	bne.n	800bb22 <__sfputs_r+0xa>
 800bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb3c <_vfiprintf_r>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	460d      	mov	r5, r1
 800bb42:	b09d      	sub	sp, #116	; 0x74
 800bb44:	4614      	mov	r4, r2
 800bb46:	4698      	mov	r8, r3
 800bb48:	4606      	mov	r6, r0
 800bb4a:	b118      	cbz	r0, 800bb54 <_vfiprintf_r+0x18>
 800bb4c:	6983      	ldr	r3, [r0, #24]
 800bb4e:	b90b      	cbnz	r3, 800bb54 <_vfiprintf_r+0x18>
 800bb50:	f000 fb14 	bl	800c17c <__sinit>
 800bb54:	4b89      	ldr	r3, [pc, #548]	; (800bd7c <_vfiprintf_r+0x240>)
 800bb56:	429d      	cmp	r5, r3
 800bb58:	d11b      	bne.n	800bb92 <_vfiprintf_r+0x56>
 800bb5a:	6875      	ldr	r5, [r6, #4]
 800bb5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	d405      	bmi.n	800bb6e <_vfiprintf_r+0x32>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d402      	bmi.n	800bb6e <_vfiprintf_r+0x32>
 800bb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb6a:	f7ff ffaa 	bl	800bac2 <__retarget_lock_acquire_recursive>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	071b      	lsls	r3, r3, #28
 800bb72:	d501      	bpl.n	800bb78 <_vfiprintf_r+0x3c>
 800bb74:	692b      	ldr	r3, [r5, #16]
 800bb76:	b9eb      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x78>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 f96e 	bl	800be5c <__swsetup_r>
 800bb80:	b1c0      	cbz	r0, 800bbb4 <_vfiprintf_r+0x78>
 800bb82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb84:	07dc      	lsls	r4, r3, #31
 800bb86:	d50e      	bpl.n	800bba6 <_vfiprintf_r+0x6a>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb8c:	b01d      	add	sp, #116	; 0x74
 800bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb92:	4b7b      	ldr	r3, [pc, #492]	; (800bd80 <_vfiprintf_r+0x244>)
 800bb94:	429d      	cmp	r5, r3
 800bb96:	d101      	bne.n	800bb9c <_vfiprintf_r+0x60>
 800bb98:	68b5      	ldr	r5, [r6, #8]
 800bb9a:	e7df      	b.n	800bb5c <_vfiprintf_r+0x20>
 800bb9c:	4b79      	ldr	r3, [pc, #484]	; (800bd84 <_vfiprintf_r+0x248>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	bf08      	it	eq
 800bba2:	68f5      	ldreq	r5, [r6, #12]
 800bba4:	e7da      	b.n	800bb5c <_vfiprintf_r+0x20>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	0598      	lsls	r0, r3, #22
 800bbaa:	d4ed      	bmi.n	800bb88 <_vfiprintf_r+0x4c>
 800bbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbae:	f7ff ff89 	bl	800bac4 <__retarget_lock_release_recursive>
 800bbb2:	e7e9      	b.n	800bb88 <_vfiprintf_r+0x4c>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc2:	2330      	movs	r3, #48	; 0x30
 800bbc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd88 <_vfiprintf_r+0x24c>
 800bbc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbcc:	f04f 0901 	mov.w	r9, #1
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	469a      	mov	sl, r3
 800bbd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd8:	b10a      	cbz	r2, 800bbde <_vfiprintf_r+0xa2>
 800bbda:	2a25      	cmp	r2, #37	; 0x25
 800bbdc:	d1f9      	bne.n	800bbd2 <_vfiprintf_r+0x96>
 800bbde:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe2:	d00b      	beq.n	800bbfc <_vfiprintf_r+0xc0>
 800bbe4:	465b      	mov	r3, fp
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff94 	bl	800bb18 <__sfputs_r>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f000 80aa 	beq.w	800bd4a <_vfiprintf_r+0x20e>
 800bbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf8:	445a      	add	r2, fp
 800bbfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bbfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80a2 	beq.w	800bd4a <_vfiprintf_r+0x20e>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc10:	f10a 0a01 	add.w	sl, sl, #1
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc1c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc1e:	4654      	mov	r4, sl
 800bc20:	2205      	movs	r2, #5
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4858      	ldr	r0, [pc, #352]	; (800bd88 <_vfiprintf_r+0x24c>)
 800bc28:	f7f4 faf2 	bl	8000210 <memchr>
 800bc2c:	9a04      	ldr	r2, [sp, #16]
 800bc2e:	b9d8      	cbnz	r0, 800bc68 <_vfiprintf_r+0x12c>
 800bc30:	06d1      	lsls	r1, r2, #27
 800bc32:	bf44      	itt	mi
 800bc34:	2320      	movmi	r3, #32
 800bc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3a:	0713      	lsls	r3, r2, #28
 800bc3c:	bf44      	itt	mi
 800bc3e:	232b      	movmi	r3, #43	; 0x2b
 800bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4a:	d015      	beq.n	800bc78 <_vfiprintf_r+0x13c>
 800bc4c:	9a07      	ldr	r2, [sp, #28]
 800bc4e:	4654      	mov	r4, sl
 800bc50:	2000      	movs	r0, #0
 800bc52:	f04f 0c0a 	mov.w	ip, #10
 800bc56:	4621      	mov	r1, r4
 800bc58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5c:	3b30      	subs	r3, #48	; 0x30
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d94e      	bls.n	800bd00 <_vfiprintf_r+0x1c4>
 800bc62:	b1b0      	cbz	r0, 800bc92 <_vfiprintf_r+0x156>
 800bc64:	9207      	str	r2, [sp, #28]
 800bc66:	e014      	b.n	800bc92 <_vfiprintf_r+0x156>
 800bc68:	eba0 0308 	sub.w	r3, r0, r8
 800bc6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc70:	4313      	orrs	r3, r2
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	46a2      	mov	sl, r4
 800bc76:	e7d2      	b.n	800bc1e <_vfiprintf_r+0xe2>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	1d19      	adds	r1, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	9103      	str	r1, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfbb      	ittet	lt
 800bc84:	425b      	neglt	r3, r3
 800bc86:	f042 0202 	orrlt.w	r2, r2, #2
 800bc8a:	9307      	strge	r3, [sp, #28]
 800bc8c:	9307      	strlt	r3, [sp, #28]
 800bc8e:	bfb8      	it	lt
 800bc90:	9204      	strlt	r2, [sp, #16]
 800bc92:	7823      	ldrb	r3, [r4, #0]
 800bc94:	2b2e      	cmp	r3, #46	; 0x2e
 800bc96:	d10c      	bne.n	800bcb2 <_vfiprintf_r+0x176>
 800bc98:	7863      	ldrb	r3, [r4, #1]
 800bc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9c:	d135      	bne.n	800bd0a <_vfiprintf_r+0x1ce>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	9203      	str	r2, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfb8      	it	lt
 800bcaa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bcae:	3402      	adds	r4, #2
 800bcb0:	9305      	str	r3, [sp, #20]
 800bcb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd98 <_vfiprintf_r+0x25c>
 800bcb6:	7821      	ldrb	r1, [r4, #0]
 800bcb8:	2203      	movs	r2, #3
 800bcba:	4650      	mov	r0, sl
 800bcbc:	f7f4 faa8 	bl	8000210 <memchr>
 800bcc0:	b140      	cbz	r0, 800bcd4 <_vfiprintf_r+0x198>
 800bcc2:	2340      	movs	r3, #64	; 0x40
 800bcc4:	eba0 000a 	sub.w	r0, r0, sl
 800bcc8:	fa03 f000 	lsl.w	r0, r3, r0
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	4303      	orrs	r3, r0
 800bcd0:	3401      	adds	r4, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd8:	482c      	ldr	r0, [pc, #176]	; (800bd8c <_vfiprintf_r+0x250>)
 800bcda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcde:	2206      	movs	r2, #6
 800bce0:	f7f4 fa96 	bl	8000210 <memchr>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d03f      	beq.n	800bd68 <_vfiprintf_r+0x22c>
 800bce8:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <_vfiprintf_r+0x254>)
 800bcea:	bb1b      	cbnz	r3, 800bd34 <_vfiprintf_r+0x1f8>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	3307      	adds	r3, #7
 800bcf0:	f023 0307 	bic.w	r3, r3, #7
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	9303      	str	r3, [sp, #12]
 800bcf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcfa:	443b      	add	r3, r7
 800bcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfe:	e767      	b.n	800bbd0 <_vfiprintf_r+0x94>
 800bd00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd04:	460c      	mov	r4, r1
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7a5      	b.n	800bc56 <_vfiprintf_r+0x11a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	3401      	adds	r4, #1
 800bd0e:	9305      	str	r3, [sp, #20]
 800bd10:	4619      	mov	r1, r3
 800bd12:	f04f 0c0a 	mov.w	ip, #10
 800bd16:	4620      	mov	r0, r4
 800bd18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1c:	3a30      	subs	r2, #48	; 0x30
 800bd1e:	2a09      	cmp	r2, #9
 800bd20:	d903      	bls.n	800bd2a <_vfiprintf_r+0x1ee>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c5      	beq.n	800bcb2 <_vfiprintf_r+0x176>
 800bd26:	9105      	str	r1, [sp, #20]
 800bd28:	e7c3      	b.n	800bcb2 <_vfiprintf_r+0x176>
 800bd2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd2e:	4604      	mov	r4, r0
 800bd30:	2301      	movs	r3, #1
 800bd32:	e7f0      	b.n	800bd16 <_vfiprintf_r+0x1da>
 800bd34:	ab03      	add	r3, sp, #12
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	462a      	mov	r2, r5
 800bd3a:	4b16      	ldr	r3, [pc, #88]	; (800bd94 <_vfiprintf_r+0x258>)
 800bd3c:	a904      	add	r1, sp, #16
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7fe f87c 	bl	8009e3c <_printf_float>
 800bd44:	4607      	mov	r7, r0
 800bd46:	1c78      	adds	r0, r7, #1
 800bd48:	d1d6      	bne.n	800bcf8 <_vfiprintf_r+0x1bc>
 800bd4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd4c:	07d9      	lsls	r1, r3, #31
 800bd4e:	d405      	bmi.n	800bd5c <_vfiprintf_r+0x220>
 800bd50:	89ab      	ldrh	r3, [r5, #12]
 800bd52:	059a      	lsls	r2, r3, #22
 800bd54:	d402      	bmi.n	800bd5c <_vfiprintf_r+0x220>
 800bd56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd58:	f7ff feb4 	bl	800bac4 <__retarget_lock_release_recursive>
 800bd5c:	89ab      	ldrh	r3, [r5, #12]
 800bd5e:	065b      	lsls	r3, r3, #25
 800bd60:	f53f af12 	bmi.w	800bb88 <_vfiprintf_r+0x4c>
 800bd64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd66:	e711      	b.n	800bb8c <_vfiprintf_r+0x50>
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <_vfiprintf_r+0x258>)
 800bd70:	a904      	add	r1, sp, #16
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7fe fb06 	bl	800a384 <_printf_i>
 800bd78:	e7e4      	b.n	800bd44 <_vfiprintf_r+0x208>
 800bd7a:	bf00      	nop
 800bd7c:	0801002c 	.word	0x0801002c
 800bd80:	0801004c 	.word	0x0801004c
 800bd84:	0801000c 	.word	0x0801000c
 800bd88:	0800fefa 	.word	0x0800fefa
 800bd8c:	0800ff04 	.word	0x0800ff04
 800bd90:	08009e3d 	.word	0x08009e3d
 800bd94:	0800bb19 	.word	0x0800bb19
 800bd98:	0800ff00 	.word	0x0800ff00

0800bd9c <__swbuf_r>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	460e      	mov	r6, r1
 800bda0:	4614      	mov	r4, r2
 800bda2:	4605      	mov	r5, r0
 800bda4:	b118      	cbz	r0, 800bdae <__swbuf_r+0x12>
 800bda6:	6983      	ldr	r3, [r0, #24]
 800bda8:	b90b      	cbnz	r3, 800bdae <__swbuf_r+0x12>
 800bdaa:	f000 f9e7 	bl	800c17c <__sinit>
 800bdae:	4b21      	ldr	r3, [pc, #132]	; (800be34 <__swbuf_r+0x98>)
 800bdb0:	429c      	cmp	r4, r3
 800bdb2:	d12b      	bne.n	800be0c <__swbuf_r+0x70>
 800bdb4:	686c      	ldr	r4, [r5, #4]
 800bdb6:	69a3      	ldr	r3, [r4, #24]
 800bdb8:	60a3      	str	r3, [r4, #8]
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	071a      	lsls	r2, r3, #28
 800bdbe:	d52f      	bpl.n	800be20 <__swbuf_r+0x84>
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	b36b      	cbz	r3, 800be20 <__swbuf_r+0x84>
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	6820      	ldr	r0, [r4, #0]
 800bdc8:	1ac0      	subs	r0, r0, r3
 800bdca:	6963      	ldr	r3, [r4, #20]
 800bdcc:	b2f6      	uxtb	r6, r6
 800bdce:	4283      	cmp	r3, r0
 800bdd0:	4637      	mov	r7, r6
 800bdd2:	dc04      	bgt.n	800bdde <__swbuf_r+0x42>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 f93c 	bl	800c054 <_fflush_r>
 800bddc:	bb30      	cbnz	r0, 800be2c <__swbuf_r+0x90>
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	60a3      	str	r3, [r4, #8]
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	6022      	str	r2, [r4, #0]
 800bdea:	701e      	strb	r6, [r3, #0]
 800bdec:	6963      	ldr	r3, [r4, #20]
 800bdee:	3001      	adds	r0, #1
 800bdf0:	4283      	cmp	r3, r0
 800bdf2:	d004      	beq.n	800bdfe <__swbuf_r+0x62>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	07db      	lsls	r3, r3, #31
 800bdf8:	d506      	bpl.n	800be08 <__swbuf_r+0x6c>
 800bdfa:	2e0a      	cmp	r6, #10
 800bdfc:	d104      	bne.n	800be08 <__swbuf_r+0x6c>
 800bdfe:	4621      	mov	r1, r4
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f927 	bl	800c054 <_fflush_r>
 800be06:	b988      	cbnz	r0, 800be2c <__swbuf_r+0x90>
 800be08:	4638      	mov	r0, r7
 800be0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <__swbuf_r+0x9c>)
 800be0e:	429c      	cmp	r4, r3
 800be10:	d101      	bne.n	800be16 <__swbuf_r+0x7a>
 800be12:	68ac      	ldr	r4, [r5, #8]
 800be14:	e7cf      	b.n	800bdb6 <__swbuf_r+0x1a>
 800be16:	4b09      	ldr	r3, [pc, #36]	; (800be3c <__swbuf_r+0xa0>)
 800be18:	429c      	cmp	r4, r3
 800be1a:	bf08      	it	eq
 800be1c:	68ec      	ldreq	r4, [r5, #12]
 800be1e:	e7ca      	b.n	800bdb6 <__swbuf_r+0x1a>
 800be20:	4621      	mov	r1, r4
 800be22:	4628      	mov	r0, r5
 800be24:	f000 f81a 	bl	800be5c <__swsetup_r>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d0cb      	beq.n	800bdc4 <__swbuf_r+0x28>
 800be2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be30:	e7ea      	b.n	800be08 <__swbuf_r+0x6c>
 800be32:	bf00      	nop
 800be34:	0801002c 	.word	0x0801002c
 800be38:	0801004c 	.word	0x0801004c
 800be3c:	0801000c 	.word	0x0801000c

0800be40 <__ascii_wctomb>:
 800be40:	b149      	cbz	r1, 800be56 <__ascii_wctomb+0x16>
 800be42:	2aff      	cmp	r2, #255	; 0xff
 800be44:	bf85      	ittet	hi
 800be46:	238a      	movhi	r3, #138	; 0x8a
 800be48:	6003      	strhi	r3, [r0, #0]
 800be4a:	700a      	strbls	r2, [r1, #0]
 800be4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800be50:	bf98      	it	ls
 800be52:	2001      	movls	r0, #1
 800be54:	4770      	bx	lr
 800be56:	4608      	mov	r0, r1
 800be58:	4770      	bx	lr
	...

0800be5c <__swsetup_r>:
 800be5c:	4b32      	ldr	r3, [pc, #200]	; (800bf28 <__swsetup_r+0xcc>)
 800be5e:	b570      	push	{r4, r5, r6, lr}
 800be60:	681d      	ldr	r5, [r3, #0]
 800be62:	4606      	mov	r6, r0
 800be64:	460c      	mov	r4, r1
 800be66:	b125      	cbz	r5, 800be72 <__swsetup_r+0x16>
 800be68:	69ab      	ldr	r3, [r5, #24]
 800be6a:	b913      	cbnz	r3, 800be72 <__swsetup_r+0x16>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f000 f985 	bl	800c17c <__sinit>
 800be72:	4b2e      	ldr	r3, [pc, #184]	; (800bf2c <__swsetup_r+0xd0>)
 800be74:	429c      	cmp	r4, r3
 800be76:	d10f      	bne.n	800be98 <__swsetup_r+0x3c>
 800be78:	686c      	ldr	r4, [r5, #4]
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be80:	0719      	lsls	r1, r3, #28
 800be82:	d42c      	bmi.n	800bede <__swsetup_r+0x82>
 800be84:	06dd      	lsls	r5, r3, #27
 800be86:	d411      	bmi.n	800beac <__swsetup_r+0x50>
 800be88:	2309      	movs	r3, #9
 800be8a:	6033      	str	r3, [r6, #0]
 800be8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be96:	e03e      	b.n	800bf16 <__swsetup_r+0xba>
 800be98:	4b25      	ldr	r3, [pc, #148]	; (800bf30 <__swsetup_r+0xd4>)
 800be9a:	429c      	cmp	r4, r3
 800be9c:	d101      	bne.n	800bea2 <__swsetup_r+0x46>
 800be9e:	68ac      	ldr	r4, [r5, #8]
 800bea0:	e7eb      	b.n	800be7a <__swsetup_r+0x1e>
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <__swsetup_r+0xd8>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	bf08      	it	eq
 800bea8:	68ec      	ldreq	r4, [r5, #12]
 800beaa:	e7e6      	b.n	800be7a <__swsetup_r+0x1e>
 800beac:	0758      	lsls	r0, r3, #29
 800beae:	d512      	bpl.n	800bed6 <__swsetup_r+0x7a>
 800beb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beb2:	b141      	cbz	r1, 800bec6 <__swsetup_r+0x6a>
 800beb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beb8:	4299      	cmp	r1, r3
 800beba:	d002      	beq.n	800bec2 <__swsetup_r+0x66>
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7fd fe3d 	bl	8009b3c <_free_r>
 800bec2:	2300      	movs	r3, #0
 800bec4:	6363      	str	r3, [r4, #52]	; 0x34
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	2300      	movs	r3, #0
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	f043 0308 	orr.w	r3, r3, #8
 800bedc:	81a3      	strh	r3, [r4, #12]
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	b94b      	cbnz	r3, 800bef6 <__swsetup_r+0x9a>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beec:	d003      	beq.n	800bef6 <__swsetup_r+0x9a>
 800beee:	4621      	mov	r1, r4
 800bef0:	4630      	mov	r0, r6
 800bef2:	f000 fa05 	bl	800c300 <__smakebuf_r>
 800bef6:	89a0      	ldrh	r0, [r4, #12]
 800bef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800befc:	f010 0301 	ands.w	r3, r0, #1
 800bf00:	d00a      	beq.n	800bf18 <__swsetup_r+0xbc>
 800bf02:	2300      	movs	r3, #0
 800bf04:	60a3      	str	r3, [r4, #8]
 800bf06:	6963      	ldr	r3, [r4, #20]
 800bf08:	425b      	negs	r3, r3
 800bf0a:	61a3      	str	r3, [r4, #24]
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	b943      	cbnz	r3, 800bf22 <__swsetup_r+0xc6>
 800bf10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf14:	d1ba      	bne.n	800be8c <__swsetup_r+0x30>
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	0781      	lsls	r1, r0, #30
 800bf1a:	bf58      	it	pl
 800bf1c:	6963      	ldrpl	r3, [r4, #20]
 800bf1e:	60a3      	str	r3, [r4, #8]
 800bf20:	e7f4      	b.n	800bf0c <__swsetup_r+0xb0>
 800bf22:	2000      	movs	r0, #0
 800bf24:	e7f7      	b.n	800bf16 <__swsetup_r+0xba>
 800bf26:	bf00      	nop
 800bf28:	2000057c 	.word	0x2000057c
 800bf2c:	0801002c 	.word	0x0801002c
 800bf30:	0801004c 	.word	0x0801004c
 800bf34:	0801000c 	.word	0x0801000c

0800bf38 <abort>:
 800bf38:	b508      	push	{r3, lr}
 800bf3a:	2006      	movs	r0, #6
 800bf3c:	f000 fa48 	bl	800c3d0 <raise>
 800bf40:	2001      	movs	r0, #1
 800bf42:	f7f5 fc8b 	bl	800185c <_exit>
	...

0800bf48 <__sflush_r>:
 800bf48:	898a      	ldrh	r2, [r1, #12]
 800bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	4605      	mov	r5, r0
 800bf50:	0710      	lsls	r0, r2, #28
 800bf52:	460c      	mov	r4, r1
 800bf54:	d458      	bmi.n	800c008 <__sflush_r+0xc0>
 800bf56:	684b      	ldr	r3, [r1, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dc05      	bgt.n	800bf68 <__sflush_r+0x20>
 800bf5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dc02      	bgt.n	800bf68 <__sflush_r+0x20>
 800bf62:	2000      	movs	r0, #0
 800bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf6a:	2e00      	cmp	r6, #0
 800bf6c:	d0f9      	beq.n	800bf62 <__sflush_r+0x1a>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf74:	682f      	ldr	r7, [r5, #0]
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	d032      	beq.n	800bfe0 <__sflush_r+0x98>
 800bf7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	075a      	lsls	r2, r3, #29
 800bf80:	d505      	bpl.n	800bf8e <__sflush_r+0x46>
 800bf82:	6863      	ldr	r3, [r4, #4]
 800bf84:	1ac0      	subs	r0, r0, r3
 800bf86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf88:	b10b      	cbz	r3, 800bf8e <__sflush_r+0x46>
 800bf8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf8c:	1ac0      	subs	r0, r0, r3
 800bf8e:	2300      	movs	r3, #0
 800bf90:	4602      	mov	r2, r0
 800bf92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf94:	6a21      	ldr	r1, [r4, #32]
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b0      	blx	r6
 800bf9a:	1c43      	adds	r3, r0, #1
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	d106      	bne.n	800bfae <__sflush_r+0x66>
 800bfa0:	6829      	ldr	r1, [r5, #0]
 800bfa2:	291d      	cmp	r1, #29
 800bfa4:	d82c      	bhi.n	800c000 <__sflush_r+0xb8>
 800bfa6:	4a2a      	ldr	r2, [pc, #168]	; (800c050 <__sflush_r+0x108>)
 800bfa8:	40ca      	lsrs	r2, r1
 800bfaa:	07d6      	lsls	r6, r2, #31
 800bfac:	d528      	bpl.n	800c000 <__sflush_r+0xb8>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	6062      	str	r2, [r4, #4]
 800bfb2:	04d9      	lsls	r1, r3, #19
 800bfb4:	6922      	ldr	r2, [r4, #16]
 800bfb6:	6022      	str	r2, [r4, #0]
 800bfb8:	d504      	bpl.n	800bfc4 <__sflush_r+0x7c>
 800bfba:	1c42      	adds	r2, r0, #1
 800bfbc:	d101      	bne.n	800bfc2 <__sflush_r+0x7a>
 800bfbe:	682b      	ldr	r3, [r5, #0]
 800bfc0:	b903      	cbnz	r3, 800bfc4 <__sflush_r+0x7c>
 800bfc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bfc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfc6:	602f      	str	r7, [r5, #0]
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	d0ca      	beq.n	800bf62 <__sflush_r+0x1a>
 800bfcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfd0:	4299      	cmp	r1, r3
 800bfd2:	d002      	beq.n	800bfda <__sflush_r+0x92>
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	f7fd fdb1 	bl	8009b3c <_free_r>
 800bfda:	2000      	movs	r0, #0
 800bfdc:	6360      	str	r0, [r4, #52]	; 0x34
 800bfde:	e7c1      	b.n	800bf64 <__sflush_r+0x1c>
 800bfe0:	6a21      	ldr	r1, [r4, #32]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	47b0      	blx	r6
 800bfe8:	1c41      	adds	r1, r0, #1
 800bfea:	d1c7      	bne.n	800bf7c <__sflush_r+0x34>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0c4      	beq.n	800bf7c <__sflush_r+0x34>
 800bff2:	2b1d      	cmp	r3, #29
 800bff4:	d001      	beq.n	800bffa <__sflush_r+0xb2>
 800bff6:	2b16      	cmp	r3, #22
 800bff8:	d101      	bne.n	800bffe <__sflush_r+0xb6>
 800bffa:	602f      	str	r7, [r5, #0]
 800bffc:	e7b1      	b.n	800bf62 <__sflush_r+0x1a>
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c004:	81a3      	strh	r3, [r4, #12]
 800c006:	e7ad      	b.n	800bf64 <__sflush_r+0x1c>
 800c008:	690f      	ldr	r7, [r1, #16]
 800c00a:	2f00      	cmp	r7, #0
 800c00c:	d0a9      	beq.n	800bf62 <__sflush_r+0x1a>
 800c00e:	0793      	lsls	r3, r2, #30
 800c010:	680e      	ldr	r6, [r1, #0]
 800c012:	bf08      	it	eq
 800c014:	694b      	ldreq	r3, [r1, #20]
 800c016:	600f      	str	r7, [r1, #0]
 800c018:	bf18      	it	ne
 800c01a:	2300      	movne	r3, #0
 800c01c:	eba6 0807 	sub.w	r8, r6, r7
 800c020:	608b      	str	r3, [r1, #8]
 800c022:	f1b8 0f00 	cmp.w	r8, #0
 800c026:	dd9c      	ble.n	800bf62 <__sflush_r+0x1a>
 800c028:	6a21      	ldr	r1, [r4, #32]
 800c02a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c02c:	4643      	mov	r3, r8
 800c02e:	463a      	mov	r2, r7
 800c030:	4628      	mov	r0, r5
 800c032:	47b0      	blx	r6
 800c034:	2800      	cmp	r0, #0
 800c036:	dc06      	bgt.n	800c046 <__sflush_r+0xfe>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c044:	e78e      	b.n	800bf64 <__sflush_r+0x1c>
 800c046:	4407      	add	r7, r0
 800c048:	eba8 0800 	sub.w	r8, r8, r0
 800c04c:	e7e9      	b.n	800c022 <__sflush_r+0xda>
 800c04e:	bf00      	nop
 800c050:	20400001 	.word	0x20400001

0800c054 <_fflush_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	690b      	ldr	r3, [r1, #16]
 800c058:	4605      	mov	r5, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	b913      	cbnz	r3, 800c064 <_fflush_r+0x10>
 800c05e:	2500      	movs	r5, #0
 800c060:	4628      	mov	r0, r5
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	b118      	cbz	r0, 800c06e <_fflush_r+0x1a>
 800c066:	6983      	ldr	r3, [r0, #24]
 800c068:	b90b      	cbnz	r3, 800c06e <_fflush_r+0x1a>
 800c06a:	f000 f887 	bl	800c17c <__sinit>
 800c06e:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <_fflush_r+0x6c>)
 800c070:	429c      	cmp	r4, r3
 800c072:	d11b      	bne.n	800c0ac <_fflush_r+0x58>
 800c074:	686c      	ldr	r4, [r5, #4]
 800c076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0ef      	beq.n	800c05e <_fflush_r+0xa>
 800c07e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c080:	07d0      	lsls	r0, r2, #31
 800c082:	d404      	bmi.n	800c08e <_fflush_r+0x3a>
 800c084:	0599      	lsls	r1, r3, #22
 800c086:	d402      	bmi.n	800c08e <_fflush_r+0x3a>
 800c088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c08a:	f7ff fd1a 	bl	800bac2 <__retarget_lock_acquire_recursive>
 800c08e:	4628      	mov	r0, r5
 800c090:	4621      	mov	r1, r4
 800c092:	f7ff ff59 	bl	800bf48 <__sflush_r>
 800c096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c098:	07da      	lsls	r2, r3, #31
 800c09a:	4605      	mov	r5, r0
 800c09c:	d4e0      	bmi.n	800c060 <_fflush_r+0xc>
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	059b      	lsls	r3, r3, #22
 800c0a2:	d4dd      	bmi.n	800c060 <_fflush_r+0xc>
 800c0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a6:	f7ff fd0d 	bl	800bac4 <__retarget_lock_release_recursive>
 800c0aa:	e7d9      	b.n	800c060 <_fflush_r+0xc>
 800c0ac:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <_fflush_r+0x70>)
 800c0ae:	429c      	cmp	r4, r3
 800c0b0:	d101      	bne.n	800c0b6 <_fflush_r+0x62>
 800c0b2:	68ac      	ldr	r4, [r5, #8]
 800c0b4:	e7df      	b.n	800c076 <_fflush_r+0x22>
 800c0b6:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <_fflush_r+0x74>)
 800c0b8:	429c      	cmp	r4, r3
 800c0ba:	bf08      	it	eq
 800c0bc:	68ec      	ldreq	r4, [r5, #12]
 800c0be:	e7da      	b.n	800c076 <_fflush_r+0x22>
 800c0c0:	0801002c 	.word	0x0801002c
 800c0c4:	0801004c 	.word	0x0801004c
 800c0c8:	0801000c 	.word	0x0801000c

0800c0cc <std>:
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	b510      	push	{r4, lr}
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c0d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0da:	6083      	str	r3, [r0, #8]
 800c0dc:	8181      	strh	r1, [r0, #12]
 800c0de:	6643      	str	r3, [r0, #100]	; 0x64
 800c0e0:	81c2      	strh	r2, [r0, #14]
 800c0e2:	6183      	str	r3, [r0, #24]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	2208      	movs	r2, #8
 800c0e8:	305c      	adds	r0, #92	; 0x5c
 800c0ea:	f7fd fd1f 	bl	8009b2c <memset>
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <std+0x38>)
 800c0f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <std+0x3c>)
 800c0f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0f6:	4b05      	ldr	r3, [pc, #20]	; (800c10c <std+0x40>)
 800c0f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0fa:	4b05      	ldr	r3, [pc, #20]	; (800c110 <std+0x44>)
 800c0fc:	6224      	str	r4, [r4, #32]
 800c0fe:	6323      	str	r3, [r4, #48]	; 0x30
 800c100:	bd10      	pop	{r4, pc}
 800c102:	bf00      	nop
 800c104:	0800c409 	.word	0x0800c409
 800c108:	0800c42b 	.word	0x0800c42b
 800c10c:	0800c463 	.word	0x0800c463
 800c110:	0800c487 	.word	0x0800c487

0800c114 <_cleanup_r>:
 800c114:	4901      	ldr	r1, [pc, #4]	; (800c11c <_cleanup_r+0x8>)
 800c116:	f000 b8af 	b.w	800c278 <_fwalk_reent>
 800c11a:	bf00      	nop
 800c11c:	0800c055 	.word	0x0800c055

0800c120 <__sfmoreglue>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	2268      	movs	r2, #104	; 0x68
 800c124:	1e4d      	subs	r5, r1, #1
 800c126:	4355      	muls	r5, r2
 800c128:	460e      	mov	r6, r1
 800c12a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c12e:	f7fd fd71 	bl	8009c14 <_malloc_r>
 800c132:	4604      	mov	r4, r0
 800c134:	b140      	cbz	r0, 800c148 <__sfmoreglue+0x28>
 800c136:	2100      	movs	r1, #0
 800c138:	e9c0 1600 	strd	r1, r6, [r0]
 800c13c:	300c      	adds	r0, #12
 800c13e:	60a0      	str	r0, [r4, #8]
 800c140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c144:	f7fd fcf2 	bl	8009b2c <memset>
 800c148:	4620      	mov	r0, r4
 800c14a:	bd70      	pop	{r4, r5, r6, pc}

0800c14c <__sfp_lock_acquire>:
 800c14c:	4801      	ldr	r0, [pc, #4]	; (800c154 <__sfp_lock_acquire+0x8>)
 800c14e:	f7ff bcb8 	b.w	800bac2 <__retarget_lock_acquire_recursive>
 800c152:	bf00      	nop
 800c154:	20003ad5 	.word	0x20003ad5

0800c158 <__sfp_lock_release>:
 800c158:	4801      	ldr	r0, [pc, #4]	; (800c160 <__sfp_lock_release+0x8>)
 800c15a:	f7ff bcb3 	b.w	800bac4 <__retarget_lock_release_recursive>
 800c15e:	bf00      	nop
 800c160:	20003ad5 	.word	0x20003ad5

0800c164 <__sinit_lock_acquire>:
 800c164:	4801      	ldr	r0, [pc, #4]	; (800c16c <__sinit_lock_acquire+0x8>)
 800c166:	f7ff bcac 	b.w	800bac2 <__retarget_lock_acquire_recursive>
 800c16a:	bf00      	nop
 800c16c:	20003ad6 	.word	0x20003ad6

0800c170 <__sinit_lock_release>:
 800c170:	4801      	ldr	r0, [pc, #4]	; (800c178 <__sinit_lock_release+0x8>)
 800c172:	f7ff bca7 	b.w	800bac4 <__retarget_lock_release_recursive>
 800c176:	bf00      	nop
 800c178:	20003ad6 	.word	0x20003ad6

0800c17c <__sinit>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	4604      	mov	r4, r0
 800c180:	f7ff fff0 	bl	800c164 <__sinit_lock_acquire>
 800c184:	69a3      	ldr	r3, [r4, #24]
 800c186:	b11b      	cbz	r3, 800c190 <__sinit+0x14>
 800c188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c18c:	f7ff bff0 	b.w	800c170 <__sinit_lock_release>
 800c190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c194:	6523      	str	r3, [r4, #80]	; 0x50
 800c196:	4b13      	ldr	r3, [pc, #76]	; (800c1e4 <__sinit+0x68>)
 800c198:	4a13      	ldr	r2, [pc, #76]	; (800c1e8 <__sinit+0x6c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	bf04      	itt	eq
 800c1a2:	2301      	moveq	r3, #1
 800c1a4:	61a3      	streq	r3, [r4, #24]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 f820 	bl	800c1ec <__sfp>
 800c1ac:	6060      	str	r0, [r4, #4]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f000 f81c 	bl	800c1ec <__sfp>
 800c1b4:	60a0      	str	r0, [r4, #8]
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f000 f818 	bl	800c1ec <__sfp>
 800c1bc:	2200      	movs	r2, #0
 800c1be:	60e0      	str	r0, [r4, #12]
 800c1c0:	2104      	movs	r1, #4
 800c1c2:	6860      	ldr	r0, [r4, #4]
 800c1c4:	f7ff ff82 	bl	800c0cc <std>
 800c1c8:	68a0      	ldr	r0, [r4, #8]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	2109      	movs	r1, #9
 800c1ce:	f7ff ff7d 	bl	800c0cc <std>
 800c1d2:	68e0      	ldr	r0, [r4, #12]
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	2112      	movs	r1, #18
 800c1d8:	f7ff ff78 	bl	800c0cc <std>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	61a3      	str	r3, [r4, #24]
 800c1e0:	e7d2      	b.n	800c188 <__sinit+0xc>
 800c1e2:	bf00      	nop
 800c1e4:	0800fc94 	.word	0x0800fc94
 800c1e8:	0800c115 	.word	0x0800c115

0800c1ec <__sfp>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	f7ff ffac 	bl	800c14c <__sfp_lock_acquire>
 800c1f4:	4b1e      	ldr	r3, [pc, #120]	; (800c270 <__sfp+0x84>)
 800c1f6:	681e      	ldr	r6, [r3, #0]
 800c1f8:	69b3      	ldr	r3, [r6, #24]
 800c1fa:	b913      	cbnz	r3, 800c202 <__sfp+0x16>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff ffbd 	bl	800c17c <__sinit>
 800c202:	3648      	adds	r6, #72	; 0x48
 800c204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c208:	3b01      	subs	r3, #1
 800c20a:	d503      	bpl.n	800c214 <__sfp+0x28>
 800c20c:	6833      	ldr	r3, [r6, #0]
 800c20e:	b30b      	cbz	r3, 800c254 <__sfp+0x68>
 800c210:	6836      	ldr	r6, [r6, #0]
 800c212:	e7f7      	b.n	800c204 <__sfp+0x18>
 800c214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c218:	b9d5      	cbnz	r5, 800c250 <__sfp+0x64>
 800c21a:	4b16      	ldr	r3, [pc, #88]	; (800c274 <__sfp+0x88>)
 800c21c:	60e3      	str	r3, [r4, #12]
 800c21e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c222:	6665      	str	r5, [r4, #100]	; 0x64
 800c224:	f7ff fc4c 	bl	800bac0 <__retarget_lock_init_recursive>
 800c228:	f7ff ff96 	bl	800c158 <__sfp_lock_release>
 800c22c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c234:	6025      	str	r5, [r4, #0]
 800c236:	61a5      	str	r5, [r4, #24]
 800c238:	2208      	movs	r2, #8
 800c23a:	4629      	mov	r1, r5
 800c23c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c240:	f7fd fc74 	bl	8009b2c <memset>
 800c244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c24c:	4620      	mov	r0, r4
 800c24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c250:	3468      	adds	r4, #104	; 0x68
 800c252:	e7d9      	b.n	800c208 <__sfp+0x1c>
 800c254:	2104      	movs	r1, #4
 800c256:	4638      	mov	r0, r7
 800c258:	f7ff ff62 	bl	800c120 <__sfmoreglue>
 800c25c:	4604      	mov	r4, r0
 800c25e:	6030      	str	r0, [r6, #0]
 800c260:	2800      	cmp	r0, #0
 800c262:	d1d5      	bne.n	800c210 <__sfp+0x24>
 800c264:	f7ff ff78 	bl	800c158 <__sfp_lock_release>
 800c268:	230c      	movs	r3, #12
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	e7ee      	b.n	800c24c <__sfp+0x60>
 800c26e:	bf00      	nop
 800c270:	0800fc94 	.word	0x0800fc94
 800c274:	ffff0001 	.word	0xffff0001

0800c278 <_fwalk_reent>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4606      	mov	r6, r0
 800c27e:	4688      	mov	r8, r1
 800c280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c284:	2700      	movs	r7, #0
 800c286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c28a:	f1b9 0901 	subs.w	r9, r9, #1
 800c28e:	d505      	bpl.n	800c29c <_fwalk_reent+0x24>
 800c290:	6824      	ldr	r4, [r4, #0]
 800c292:	2c00      	cmp	r4, #0
 800c294:	d1f7      	bne.n	800c286 <_fwalk_reent+0xe>
 800c296:	4638      	mov	r0, r7
 800c298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c29c:	89ab      	ldrh	r3, [r5, #12]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d907      	bls.n	800c2b2 <_fwalk_reent+0x3a>
 800c2a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	d003      	beq.n	800c2b2 <_fwalk_reent+0x3a>
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	47c0      	blx	r8
 800c2b0:	4307      	orrs	r7, r0
 800c2b2:	3568      	adds	r5, #104	; 0x68
 800c2b4:	e7e9      	b.n	800c28a <_fwalk_reent+0x12>

0800c2b6 <__swhatbuf_r>:
 800c2b6:	b570      	push	{r4, r5, r6, lr}
 800c2b8:	460e      	mov	r6, r1
 800c2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2be:	2900      	cmp	r1, #0
 800c2c0:	b096      	sub	sp, #88	; 0x58
 800c2c2:	4614      	mov	r4, r2
 800c2c4:	461d      	mov	r5, r3
 800c2c6:	da08      	bge.n	800c2da <__swhatbuf_r+0x24>
 800c2c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	602a      	str	r2, [r5, #0]
 800c2d0:	061a      	lsls	r2, r3, #24
 800c2d2:	d410      	bmi.n	800c2f6 <__swhatbuf_r+0x40>
 800c2d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d8:	e00e      	b.n	800c2f8 <__swhatbuf_r+0x42>
 800c2da:	466a      	mov	r2, sp
 800c2dc:	f000 f8fa 	bl	800c4d4 <_fstat_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dbf1      	blt.n	800c2c8 <__swhatbuf_r+0x12>
 800c2e4:	9a01      	ldr	r2, [sp, #4]
 800c2e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2ee:	425a      	negs	r2, r3
 800c2f0:	415a      	adcs	r2, r3
 800c2f2:	602a      	str	r2, [r5, #0]
 800c2f4:	e7ee      	b.n	800c2d4 <__swhatbuf_r+0x1e>
 800c2f6:	2340      	movs	r3, #64	; 0x40
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	b016      	add	sp, #88	; 0x58
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}

0800c300 <__smakebuf_r>:
 800c300:	898b      	ldrh	r3, [r1, #12]
 800c302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c304:	079d      	lsls	r5, r3, #30
 800c306:	4606      	mov	r6, r0
 800c308:	460c      	mov	r4, r1
 800c30a:	d507      	bpl.n	800c31c <__smakebuf_r+0x1c>
 800c30c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	2301      	movs	r3, #1
 800c316:	6163      	str	r3, [r4, #20]
 800c318:	b002      	add	sp, #8
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	ab01      	add	r3, sp, #4
 800c31e:	466a      	mov	r2, sp
 800c320:	f7ff ffc9 	bl	800c2b6 <__swhatbuf_r>
 800c324:	9900      	ldr	r1, [sp, #0]
 800c326:	4605      	mov	r5, r0
 800c328:	4630      	mov	r0, r6
 800c32a:	f7fd fc73 	bl	8009c14 <_malloc_r>
 800c32e:	b948      	cbnz	r0, 800c344 <__smakebuf_r+0x44>
 800c330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c334:	059a      	lsls	r2, r3, #22
 800c336:	d4ef      	bmi.n	800c318 <__smakebuf_r+0x18>
 800c338:	f023 0303 	bic.w	r3, r3, #3
 800c33c:	f043 0302 	orr.w	r3, r3, #2
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	e7e3      	b.n	800c30c <__smakebuf_r+0xc>
 800c344:	4b0d      	ldr	r3, [pc, #52]	; (800c37c <__smakebuf_r+0x7c>)
 800c346:	62b3      	str	r3, [r6, #40]	; 0x28
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	6020      	str	r0, [r4, #0]
 800c34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	9b00      	ldr	r3, [sp, #0]
 800c354:	6163      	str	r3, [r4, #20]
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	6120      	str	r0, [r4, #16]
 800c35a:	b15b      	cbz	r3, 800c374 <__smakebuf_r+0x74>
 800c35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f8c9 	bl	800c4f8 <_isatty_r>
 800c366:	b128      	cbz	r0, 800c374 <__smakebuf_r+0x74>
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	f043 0301 	orr.w	r3, r3, #1
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	89a0      	ldrh	r0, [r4, #12]
 800c376:	4305      	orrs	r5, r0
 800c378:	81a5      	strh	r5, [r4, #12]
 800c37a:	e7cd      	b.n	800c318 <__smakebuf_r+0x18>
 800c37c:	0800c115 	.word	0x0800c115

0800c380 <_raise_r>:
 800c380:	291f      	cmp	r1, #31
 800c382:	b538      	push	{r3, r4, r5, lr}
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	d904      	bls.n	800c394 <_raise_r+0x14>
 800c38a:	2316      	movs	r3, #22
 800c38c:	6003      	str	r3, [r0, #0]
 800c38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c396:	b112      	cbz	r2, 800c39e <_raise_r+0x1e>
 800c398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c39c:	b94b      	cbnz	r3, 800c3b2 <_raise_r+0x32>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f830 	bl	800c404 <_getpid_r>
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ae:	f000 b817 	b.w	800c3e0 <_kill_r>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d00a      	beq.n	800c3cc <_raise_r+0x4c>
 800c3b6:	1c59      	adds	r1, r3, #1
 800c3b8:	d103      	bne.n	800c3c2 <_raise_r+0x42>
 800c3ba:	2316      	movs	r3, #22
 800c3bc:	6003      	str	r3, [r0, #0]
 800c3be:	2001      	movs	r0, #1
 800c3c0:	e7e7      	b.n	800c392 <_raise_r+0x12>
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	4798      	blx	r3
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7e0      	b.n	800c392 <_raise_r+0x12>

0800c3d0 <raise>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <raise+0xc>)
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f7ff bfd3 	b.w	800c380 <_raise_r>
 800c3da:	bf00      	nop
 800c3dc:	2000057c 	.word	0x2000057c

0800c3e0 <_kill_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	; (800c400 <_kill_r+0x20>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	f7f5 fa2d 	bl	800184c <_kill>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	d102      	bne.n	800c3fc <_kill_r+0x1c>
 800c3f6:	682b      	ldr	r3, [r5, #0]
 800c3f8:	b103      	cbz	r3, 800c3fc <_kill_r+0x1c>
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	bd38      	pop	{r3, r4, r5, pc}
 800c3fe:	bf00      	nop
 800c400:	20003ad0 	.word	0x20003ad0

0800c404 <_getpid_r>:
 800c404:	f7f5 ba20 	b.w	8001848 <_getpid>

0800c408 <__sread>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	460c      	mov	r4, r1
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	f000 f894 	bl	800c53c <_read_r>
 800c414:	2800      	cmp	r0, #0
 800c416:	bfab      	itete	ge
 800c418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c41a:	89a3      	ldrhlt	r3, [r4, #12]
 800c41c:	181b      	addge	r3, r3, r0
 800c41e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c422:	bfac      	ite	ge
 800c424:	6563      	strge	r3, [r4, #84]	; 0x54
 800c426:	81a3      	strhlt	r3, [r4, #12]
 800c428:	bd10      	pop	{r4, pc}

0800c42a <__swrite>:
 800c42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42e:	461f      	mov	r7, r3
 800c430:	898b      	ldrh	r3, [r1, #12]
 800c432:	05db      	lsls	r3, r3, #23
 800c434:	4605      	mov	r5, r0
 800c436:	460c      	mov	r4, r1
 800c438:	4616      	mov	r6, r2
 800c43a:	d505      	bpl.n	800c448 <__swrite+0x1e>
 800c43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c440:	2302      	movs	r3, #2
 800c442:	2200      	movs	r2, #0
 800c444:	f000 f868 	bl	800c518 <_lseek_r>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c44e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	4632      	mov	r2, r6
 800c456:	463b      	mov	r3, r7
 800c458:	4628      	mov	r0, r5
 800c45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c45e:	f000 b817 	b.w	800c490 <_write_r>

0800c462 <__sseek>:
 800c462:	b510      	push	{r4, lr}
 800c464:	460c      	mov	r4, r1
 800c466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46a:	f000 f855 	bl	800c518 <_lseek_r>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	bf15      	itete	ne
 800c474:	6560      	strne	r0, [r4, #84]	; 0x54
 800c476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c47a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c47e:	81a3      	strheq	r3, [r4, #12]
 800c480:	bf18      	it	ne
 800c482:	81a3      	strhne	r3, [r4, #12]
 800c484:	bd10      	pop	{r4, pc}

0800c486 <__sclose>:
 800c486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48a:	f000 b813 	b.w	800c4b4 <_close_r>
	...

0800c490 <_write_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	; (800c4b0 <_write_r+0x20>)
 800c494:	4604      	mov	r4, r0
 800c496:	4608      	mov	r0, r1
 800c498:	4611      	mov	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	602a      	str	r2, [r5, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f7f7 fe42 	bl	8004128 <_write>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_write_r+0x1e>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_write_r+0x1e>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20003ad0 	.word	0x20003ad0

0800c4b4 <_close_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_close_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f5 f9e0 	bl	8001884 <_close>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_close_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_close_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20003ad0 	.word	0x20003ad0

0800c4d4 <_fstat_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	; (800c4f4 <_fstat_r+0x20>)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4608      	mov	r0, r1
 800c4de:	4611      	mov	r1, r2
 800c4e0:	602b      	str	r3, [r5, #0]
 800c4e2:	f7f5 f9d2 	bl	800188a <_fstat>
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	d102      	bne.n	800c4f0 <_fstat_r+0x1c>
 800c4ea:	682b      	ldr	r3, [r5, #0]
 800c4ec:	b103      	cbz	r3, 800c4f0 <_fstat_r+0x1c>
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	bd38      	pop	{r3, r4, r5, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20003ad0 	.word	0x20003ad0

0800c4f8 <_isatty_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d06      	ldr	r5, [pc, #24]	; (800c514 <_isatty_r+0x1c>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	f7f5 f9c6 	bl	8001894 <_isatty>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_isatty_r+0x1a>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_isatty_r+0x1a>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	20003ad0 	.word	0x20003ad0

0800c518 <_lseek_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	; (800c538 <_lseek_r+0x20>)
 800c51c:	4604      	mov	r4, r0
 800c51e:	4608      	mov	r0, r1
 800c520:	4611      	mov	r1, r2
 800c522:	2200      	movs	r2, #0
 800c524:	602a      	str	r2, [r5, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f7f5 f9b6 	bl	8001898 <_lseek>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_lseek_r+0x1e>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_lseek_r+0x1e>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	20003ad0 	.word	0x20003ad0

0800c53c <_read_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	4d07      	ldr	r5, [pc, #28]	; (800c55c <_read_r+0x20>)
 800c540:	4604      	mov	r4, r0
 800c542:	4608      	mov	r0, r1
 800c544:	4611      	mov	r1, r2
 800c546:	2200      	movs	r2, #0
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f7f5 f98c 	bl	8001868 <_read>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_read_r+0x1e>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_read_r+0x1e>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	20003ad0 	.word	0x20003ad0

0800c560 <_init>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	bf00      	nop
 800c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c566:	bc08      	pop	{r3}
 800c568:	469e      	mov	lr, r3
 800c56a:	4770      	bx	lr

0800c56c <_fini>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr
